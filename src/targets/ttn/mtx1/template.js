// encoded message should be less than this size
// to be able to send to a device
const MAX_DATA_SEGMENT_SIZE = 50;

// will have encoder/decoder after init
let message;

// helpers for data segments
let getDataSegment;
let setDataSegment;

// helper
const decode = ( fromBytes, input ) => {
    const data = {bytes: input.bytes, message: null};
    const segment = getDataSegment(input.bytes);
    const warnings = [];
    const errors = [];

    // just a single data segment
    if ( segment ) {
        const decodeResult = fromBytes(segment);

        if ( decodeResult.error ) {
            errors.push(decodeResult.error);
            // there may be some partially decoded result
            data.message = decodeResult.message;
        } else {
            data.message = decodeResult;
        }
    } else {
        warnings.push('should be present one data segment');
    }

    return {data, warnings, errors};
};

/*
  Get bytes from message.

  Input is an object with the following fields:
    * data - object with data to encode
    * data.commands - array of commands
    * data.config - object with messageId, accessLevel and aesKey
    * fPort - downlink fPort

  Output must be an object with the following fields:
    * bytes - byte array containing the downlink payload
*/
function encodeDownlink ( input ) {
    const bytes = message.downlink.toBytes(input.data.commands, input.data.config || {});
    const result = {fPort: 1};

    // send nothing if not fit in a single data segment
    if ( bytes.length > MAX_DATA_SEGMENT_SIZE ) {
        result.bytes = [];
        result.warnings = ['payload is too big for a single data segment'];
    } else {
        result.bytes = setDataSegment(bytes);
    }

    return result;
}


/*
  Get message from bytes.

  Input is an object with the following fields:
    * bytes - byte array containing the uplink payload, e.g. [255, 230, 255, 0]
    * fPort - uplink fPort

  Output must be an object with the following fields:
    * data - object representing the decoded payload
*/
function decodeUplink ( input ) {
    return decode(message.uplink.fromBytes, input);
}


/*
  Get message from bytes.

  Input is an object with the following fields:
    * bytes - byte array containing the downlink payload, e.g. [255, 230, 255, 0]
    * fPort - downlink fPort

  Output must be an object with the following fields:
    * data - object representing the decoded payload
*/
function decodeDownlink ( input ) {
    return decode(message.downlink.fromBytes, input);
}


//#region [autogenerated jooby-codec bundle from index.js]
/*{{bundle}}*/
//#endregion
