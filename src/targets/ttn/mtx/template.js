// encoded message should be less than this size
// to be able to send to a device
var MAX_DATA_SEGMENT_SIZE = 50;


/*
  Get bytes from message.

  Input is an object with the following fields:
    * data - object, must contain "commands" field
    * fPort - downlink fPort

  Output must be an object with the following fields:
    * bytes - byte array containing the downlink payload
*/
function encodeDownlink ( input ) {
    // input has the following structure:
    // {
    //     field: "value"
    // }

    var bytes = toBytes(input.data.commands); // FRMPayload (byte array)

    // send nothing if not fit in a single data segment
    if ( bytes.length > MAX_DATA_SEGMENT_SIZE ) {
        bytes = [];
    } else {
        bytes = setDataSegment(bytes);
    }

    return {
        bytes,
        fPort: 1,
        warnings: [], // optional
        errors: [], // optional (if set, the encoding failed)
    };
}


/*
  Get message from bytes.

  Input is an object with the following fields:
    * bytes - byte array containing the uplink payload, e.g. [255, 230, 255, 0]
    * fPort - downlink fPort

  Output must be an object with the following fields:
    * data - object representing the decoded payload
*/
function decodeDownlink ( input ) {
    var segment = getDataSegment(input.bytes);
    var message = null;

    // just a single data segment
    if ( segment ) {
        message = fromBytes(segment);

        // there may be a message.error (e.g. mismatched LRC)
        // in that case message.message will contain everything parsed successfully
        // it should be used with caution
    }

    return {
        data: {
            bytes: input.bytes,
            message
        },
        warnings: [], // optional
        errors: [] // optional (if set, the decoding failed)
    };
}


/*
  Get message from bytes.

  Input is an object with the following fields:
    * bytes - byte array containing the uplink payload, e.g. [255, 230, 255, 0]
    * fPort - uplink fPort

  Output must be an object with the following fields:
    * data - object representing the decoded payload
*/
function decodeUplink( input ) {
    var segment = getDataSegment(input.bytes);
    var message = null;

    // just a single data segment
    if ( segment ) {
        message = fromBytes(segment);

        // there may be a message.error (e.g. mismatched LRC)
        // in that case message.message will contain everything parsed successfully
        // it should be used with caution
    }

    return {
        data: {
            bytes: input.bytes,
            message
        },
        warnings: [], // optional
        errors: [] // optional (if set, the decoding failed)
    };
}


//#region [autogenerated jooby-codec bundle from index.js]
/*{{bundle}}*/
//#endregion
