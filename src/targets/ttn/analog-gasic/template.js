// https://github.com/jooby-dev/jooby-codec/blob/main/src/analog/constants/hardwareTypes.ts
const config = {
    // GASIC
    hardwareType: 12
};

// helper
const decode = ( fromBytes, input ) => {
    const data = {bytes: input.bytes};
    const decodeResult = fromBytes(input.bytes, config);
    const errors = [];

    if ( decodeResult.error ) {
        errors.push(decodeResult.error);
        // there may be some partially decoded result
        data.message = decodeResult.message;
    } else {
        data.message = decodeResult;
    }

    return {data, errors};
};

// will have encoder/decoder after init
let message;


/*
  Get bytes from message.

  Input is an object with the following fields:
    * data - object, must contain "commands" field
    * fPort - downlink fPort

  Output must be an object with the following fields:
    * bytes - byte array containing the downlink payload
*/
function encodeDownlink ( input ) {
    let bytes = message.downlink.toBytes(input.data.commands, config);

    return {bytes, fPort: 1};
}

/*
  Get message from bytes.

  Input is an object with the following fields:
    * bytes - byte array containing the uplink payload, e.g. [255, 230, 255, 0]
    * fPort - uplink fPort

  Output must be an object with the following fields:
    * data - object representing the decoded payload
*/
function decodeUplink ( input ) {
    return decode(message.uplink.fromBytes, input);
}

/*
  Get message from bytes.

  Input is an object with the following fields:
    * bytes - byte array containing the downlink payload, e.g. [255, 230, 255, 0]
    * fPort - downlink fPort

  Output must be an object with the following fields:
    * data - object representing the decoded payload
*/
function decodeDownlink ( input ) {
    return decode(message.downlink.fromBytes, input);
}


//#region [autogenerated jooby-codec bundle from index.js]
/*{{bundle}}*/
//#endregion
