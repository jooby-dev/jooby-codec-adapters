// encoded message should be less than this size
// to be able to send to a device
const MAX_DATA_SEGMENT_SIZE = 50;


/*
  Get message form bytes.

  Input is an object with the following fields:
    * bytes - byte array containing the uplink payload, e.g. [255, 230, 255, 0]
    * fPort - uplink fPort
    * variables - object containing the configured device variables

  Output must be an object with the following fields:
    * data - object representing the decoded payload
*/
function decodeUplink ( input ) {
    const segment = getDataSegment(input.bytes)

    // just a single data segment
    if ( segment ) {
        const message = fromBytes(segment);

        // there may be a message.error (e.g. mismatched LRC)
        // in that case message.message will contain everything parsed successfully
        // it should be used with caution

        return {data: message.message || message};
    }

    return {data: null};
};


/*
  Get payload bytes from commands.

  Input is an object with the following fields:
    * data - object representing the payload that must be encoded
    * variables - object containing the configured device variables

  Output must be an object with the following fields:
    * bytes - byte array containing the downlink payload
*/
function encodeDownlink ( input ) {
    const bytes = toBytes(input.data.commands);

    // send nothing if not fit in a single data segment
    if ( bytes.length > MAX_DATA_SEGMENT_SIZE ) {
        return {bytes: []};
    }

    return {
        bytes: setDataSegment(bytes)
    };
};


//#region [autogenerated jooby-codec bundle from index.js]
/*{{bundle}}*/
//#endregion
