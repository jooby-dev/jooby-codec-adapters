//#region [autogenerated jooby-codec bundle from index.js]
/*{{bundle}}*/
//#endregion


// these options can be edited
// available hardware types can be found here:
// https://github.com/jooby-dev/jooby-docs/blob/main/docs/analog/basics.md#hardware-types
const config = {
    // required field
    hardwareType: 12
};

const INITIAL_YEAR_TIMESTAMP = 946684800;


function decodeUplink ( bytes ) {
    const message = fromBytes(bytes, config);
    const data = {};

    if ( !message.error ) {
        message.commands.forEach(command => {
            const parameters = command.parameters;

            switch ( command.name ) {
                case 'hourMc':
                    data.hourMcStartTime = parameters.startTime2000 + INITIAL_YEAR_TIMESTAMP;
                    data.hourMcHours = parameters.hours;
                    parameters.channelList.forEach(channel => {
                        data['hourMcChannel' + channel.index + 'StartValue'] = channel.value;
                        data['hourMcChannel' + channel.index + 'CurrentValue'] = channel.value + channel.diff.reduce((a, b) => a + b, 0);
                    });
                    break;

                case 'lastEvent':
                    data.lastEventSequenceNumber = parameters.sequenceNumber;
                    data.lastEventStatusIsBatteryLow = parameters.status.isBatteryLow;
                    data.lastEventStatusIsMagneticInfluence = parameters.status.isMagneticInfluence;
                    data.lastEventStatusIsButtonReleased = parameters.status.isButtonReleased;
                    data.lastEventStatusIsConnectionLost = parameters.status.isConnectionLost;
                    break;
            }
        });
    }

    return data;
};


const payloadItem = payload.find(item => item.variable === 'payload');

if ( payloadItem ) {
    const data = decodeUplink(getBytesFromHex(payloadItem.value));

    for ( const name in data ) {
        payload.push({
            variable: name,
            value: data[name]
        });
    }
}
