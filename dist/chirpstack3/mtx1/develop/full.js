// encoded message should be less than this size
// to be able to send to a device
var MAX_DATA_SEGMENT_SIZE = 50;


/*
  Decode decodes an array of bytes into an object:
   * fPort contains the LoRaWAN fPort number
   * bytes is an array of bytes, e.g. [225, 230, 255, 0]
   * variables contains the device variables e.g. {calibration: "3.5"} (both the key/value are of type string)

  The function must return an object, e.g. {temperature: 22.5}
*/
function Decode ( fPort, bytes, variables ) {
    var segment = getDataSegment(bytes)

    // just a single data segment
    if ( segment ) {
        var message = fromBytes(segment);

        // there may be a message.error (e.g. mismatched LRC)
        // in that case message.message will contain everything parsed successfully
        // it should be used with caution

        return {data: message.message || message};
    }

    return {data: null};
}


/*
  Encode encodes the given object into an array of bytes:
   * fPort contains the LoRaWAN fPort number
   * obj is an object, e.g. {temperature: 22.5}
   * variables contains the device variables e.g. {calibration: "3.5"} (both the key/value are of type string)

  The function must return an array of bytes, e.g. [225, 230, 255, 0]
*/
function Encode ( fPort, obj, variables ) {
    var bytes = toBytes(obj.commands);

    // send nothing if not fit in a single data segment
    if ( bytes.length > MAX_DATA_SEGMENT_SIZE ) {
        return [];
    }

    return setDataSegment(bytes);
}


//#region [autogenerated jooby-codec bundle from index.js]
var fromBytes, toBytes, getDataSegment, setDataSegment;

(function () {
    'use strict';

    // https://gist.github.com/addyosmani/d5648c89420eb333904c
    Array.prototype.fill = Array.prototype.fill || function (value) {
      var obj = Object(this);
      var len = parseInt(obj.length, 10);
      var start = arguments[1];
      var relativeStart = parseInt(start, 10) || 0;
      var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);
      var end = arguments[2];
      var relativeEnd = end === undefined ? len : parseInt(end) || 0;
      var _final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);
      for (; k < _final; k++) {
        obj[k] = value;
      }
      return obj;
    };

    // https://github.com/jsPolyfill/Array.prototype.find
    Array.prototype.find = Array.prototype.find || function (callback) {
      if (this === null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
      } else if (typeof callback !== 'function') {
        throw new TypeError('callback must be a function');
      }
      var list = Object(this);

      // always has an positive integer as length
      var length = list.length >>> 0;
      var thisArg = arguments[1];
      for (var i = 0; i < length; i++) {
        var element = list[i];
        if (callback.call(thisArg, element, i, list)) {
          return element;
        }
      }
    };

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON
    if (!('EPSILON' in Number)) {
      Number.EPSILON = 2.220446049250313e-16;
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
    if (typeof Object.assign !== 'function') {
      Object.assign = function (target) {
        if (target === undefined || target === null) {
          throw new TypeError('Cannot convert undefined or null to object');
        }
        var output = Object(target);
        for (var index = 1; index < arguments.length; index++) {
          var source = arguments[index];
          if (source !== undefined && source !== null) {
            for (var nextKey in source) {
              if (source.hasOwnProperty(nextKey)) {
                output[nextKey] = source[nextKey];
              }
            }
          }
        }
        return output;
      };
    }

    // https://github.com/KhaledElAnsari/String.prototype.padStart
    String.prototype.padStart = String.prototype.padStart || function (targetLength, padString) {
      targetLength = Math.floor(targetLength) || 0;
      if (targetLength < this.length) {
        return String(this);
      }
      padString = padString ? String(padString) : ' ';
      var pad = '';
      var len = targetLength - this.length;
      var i = 0;
      while (pad.length < len) {
        if (!padString[i]) {
          i = 0;
        }
        pad += padString[i];
        i++;
      }
      return pad + String(this).slice(0);
    };

    function _arrayLikeToArray(r, a) {
      (null == a || a > r.length) && (a = r.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
      return n;
    }
    function _arrayWithHoles(r) {
      if (Array.isArray(r)) return r;
    }
    function _arrayWithoutHoles(r) {
      if (Array.isArray(r)) return _arrayLikeToArray(r);
    }
    function _createForOfIteratorHelper(r, e) {
      var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (!t) {
        if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
          t && (r = t);
          var n = 0,
            F = function () {};
          return {
            s: F,
            n: function () {
              return n >= r.length ? {
                done: true
              } : {
                done: false,
                value: r[n++]
              };
            },
            e: function (r) {
              throw r;
            },
            f: F
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var o,
        a = true,
        u = false;
      return {
        s: function () {
          t = t.call(r);
        },
        n: function () {
          var r = t.next();
          return a = r.done, r;
        },
        e: function (r) {
          u = true, o = r;
        },
        f: function () {
          try {
            a || null == t.return || t.return();
          } finally {
            if (u) throw o;
          }
        }
      };
    }
    function _defineProperty(e, r, t) {
      return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
        value: t,
        enumerable: true,
        configurable: true,
        writable: true
      }) : e[r] = t, e;
    }
    function _iterableToArray(r) {
      if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
    }
    function _iterableToArrayLimit(r, l) {
      var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
      if (null != t) {
        var e,
          n,
          i,
          u,
          a = [],
          f = true,
          o = false;
        try {
          if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = !1;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
          o = true, n = r;
        } finally {
          try {
            if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function ownKeys(e, r) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function (r) {
          return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
      }
      return t;
    }
    function _objectSpread2(e) {
      for (var r = 1; r < arguments.length; r++) {
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), true).forEach(function (r) {
          _defineProperty(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
          Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
      }
      return e;
    }
    function _slicedToArray(r, e) {
      return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
    }
    function _toArray(r) {
      return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest();
    }
    function _toConsumableArray(r) {
      return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
    }
    function _toPrimitive(t, r) {
      if ("object" != typeof t || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r);
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }
    function _toPropertyKey(t) {
      var i = _toPrimitive(t, "string");
      return "symbol" == typeof i ? i : i + "";
    }
    function _typeof(o) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, _typeof(o);
    }
    function _unsupportedIterableToArray(r, a) {
      if (r) {
        if ("string" == typeof r) return _arrayLikeToArray(r, a);
        var t = {}.toString.call(r).slice(8, -1);
        return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
      }
    }

    var hexFormatOptions = {
      separator: ' ',
      prefix: ''
    };

    var INT8_SIZE = 1;
    var INT16_SIZE = 2;
    var INT24_SIZE = 3;
    var INT32_SIZE = 4;
    var log = Math.log,
      pow = Math.pow,
      LN2 = Math.LN2;
    var readFloat = function readFloat(buffer, offset, isLittleEndian, mLen, bytes) {
      var e,
        m,
        eLen = bytes * 8 - mLen - 1,
        eMax = (1 << eLen) - 1,
        eBias = eMax >> 1,
        nBits = -7,
        i = isLittleEndian ? bytes - 1 : 0,
        d = isLittleEndian ? -1 : 1,
        s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 0x100 + buffer[offset + i], i += d, nBits -= 8);
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 0x100 + buffer[offset + i], i += d, nBits -= 8);
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : s ? -Infinity : Infinity;
      } else {
        m = m + pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * pow(2, e - mLen);
    };
    var writeFloat = function writeFloat(buffer, offset, value, isLittleEndian, mLen, bytes) {
      var e,
        m,
        c,
        eLen = bytes * 8 - mLen - 1,
        eMax = (1 << eLen) - 1,
        eBias = eMax >> 1,
        rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
        i = isLittleEndian ? 0 : bytes - 1,
        d = isLittleEndian ? 1 : -1,
        s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value < 0 && (value = -value);
      if (value !== value || value === Infinity) {
        m = value !== value ? 1 : 0;
        e = eMax;
      } else {
        e = log(value) / LN2 | 0;
        if (value * (c = pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * pow(2, eBias - 1) * pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 0x100, mLen -= 8);
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 0x100, eLen -= 8);
      buffer[offset + i - d] |= s * 0x80;
    };
    var be2 = [1, 0];
    var be3 = [2, 1, 0];
    var be4 = [3, 2, 1, 0];
    var le2 = [0, 1];
    var le3 = [0, 1, 2];
    var le4 = [0, 1, 2, 3];
    var readUint8 = function readUint8(buffer, offset) {
      return buffer[offset];
    };
    var readUint16 = function readUint16(buffer, offset, isLittleEndian) {
      var order = isLittleEndian ? le2 : be2;
      var b0 = buffer[offset + order[0]];
      var b1 = buffer[offset + order[1]] << 8;
      return b0 | b1;
    };
    var readUint24 = function readUint24(buffer, offset, isLittleEndian) {
      var order = isLittleEndian ? le3 : be3;
      var b0 = buffer[offset + order[0]];
      var b1 = buffer[offset + order[1]] << 8;
      var b2 = buffer[offset + order[2]] << 16;
      return b0 | b1 | b2;
    };
    var readUint32 = function readUint32(buffer, offset, isLittleEndian) {
      var order = isLittleEndian ? le4 : be4;
      var b0 = buffer[offset + order[3]] * 0x1000000;
      var b1 = buffer[offset + order[2]] * 0x10000;
      var b2 = buffer[offset + order[1]] * 0x100;
      var b3 = buffer[offset + order[0]];
      return b0 + b1 + b2 + b3;
    };
    var writeUint8 = function writeUint8(buffer, offset, value) {
      buffer[offset] = value & 0xff;
    };
    var writeUint16 = function writeUint16(buffer, offset, value, isLittleEndian) {
      var order = isLittleEndian ? le2 : be2;
      buffer[offset + order[0]] = value & 0xff;
      buffer[offset + order[1]] = value >>> 8 & 0xff;
    };
    var writeUint24 = function writeUint24(buffer, offset, value, isLittleEndian) {
      var order = isLittleEndian ? le3 : be3;
      buffer[offset + order[0]] = value & 0xff;
      buffer[offset + order[1]] = value >>> 8 & 0xff;
      buffer[offset + order[2]] = value >>> 16 & 0xff;
    };
    var writeUint32 = function writeUint32(buffer, offset, value, isLittleEndian) {
      var order = isLittleEndian ? le4 : be4;
      buffer[offset + order[0]] = value & 0xff;
      buffer[offset + order[1]] = value >>> 8 & 0xff;
      buffer[offset + order[2]] = value >>> 16 & 0xff;
      buffer[offset + order[3]] = value >>> 24 & 0xff;
    };
    function BinaryBuffer(dataOrLength) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (typeof dataOrLength === 'number') {
        var bytes = new Array(dataOrLength).fill(0);
        this.data = bytes;
      } else {
        this.data = dataOrLength;
      }
      this.offset = 0;
      this.isLittleEndian = isLittleEndian;
    }
    BinaryBuffer.prototype = {
      toUint8Array: function toUint8Array() {
        return this.data;
      },
      seek: function seek(position) {
        if (position < 0 || position >= this.data.length) {
          throw new Error('Invalid position.');
        }
        this.offset = position;
      },
      setInt8: function setInt8(value) {
        writeUint8(this.data, this.offset, value < 0 ? value | 0x100 : value);
        this.offset += INT8_SIZE;
      },
      getInt8: function getInt8() {
        var result = readUint8(this.data, this.offset);
        this.offset += INT8_SIZE;
        return result & 0x80 ? result ^ -256 : result;
      },
      setUint8: function setUint8(value) {
        writeUint8(this.data, this.offset, value);
        this.offset += INT8_SIZE;
      },
      getUint8: function getUint8() {
        var result = readUint8(this.data, this.offset);
        this.offset += INT8_SIZE;
        return result;
      },
      setInt16: function setInt16(value) {
        var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
        writeUint16(this.data, this.offset, value < 0 ? value | 0x10000 : value, isLittleEndian);
        this.offset += INT16_SIZE;
      },
      getInt16: function getInt16() {
        var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
        var result = readUint16(this.data, this.offset, isLittleEndian);
        this.offset += INT16_SIZE;
        return result & 0x8000 ? result ^ -65536 : result;
      },
      setUint16: function setUint16(value) {
        var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
        writeUint16(this.data, this.offset, value, isLittleEndian);
        this.offset += INT16_SIZE;
      },
      getUint16: function getUint16() {
        var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
        var result = readUint16(this.data, this.offset, isLittleEndian);
        this.offset += INT16_SIZE;
        return result;
      },
      setInt24: function setInt24(value) {
        var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
        writeUint24(this.data, this.offset, value < 0 ? value | 0x1000000 : value, isLittleEndian);
        this.offset += INT24_SIZE;
      },
      getInt24: function getInt24() {
        var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
        var result = readUint24(this.data, this.offset, isLittleEndian);
        this.offset += INT24_SIZE;
        return result & 0x800000 ? result ^ -16777216 : result;
      },
      setUint24: function setUint24(value) {
        var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
        writeUint24(this.data, this.offset, value, isLittleEndian);
        this.offset += INT24_SIZE;
      },
      getUint24: function getUint24() {
        var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
        var result = readUint24(this.data, this.offset, isLittleEndian);
        this.offset += INT24_SIZE;
        return result;
      },
      setInt32: function setInt32(value) {
        var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
        writeUint32(this.data, this.offset, value < 0 ? value | 0x100000000 : value, isLittleEndian);
        this.offset += INT32_SIZE;
      },
      getInt32: function getInt32() {
        var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
        var result = readUint32(this.data, this.offset, isLittleEndian);
        this.offset += INT32_SIZE;
        return result & 0x80000000 ? result ^ -4294967296 : result;
      },
      setUint32: function setUint32(value) {
        var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
        writeUint32(this.data, this.offset, value, isLittleEndian);
        this.offset += INT32_SIZE;
      },
      getUint32: function getUint32() {
        var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
        var result = readUint32(this.data, this.offset, isLittleEndian);
        this.offset += INT32_SIZE;
        return result;
      },
      setFloat32: function setFloat32(value) {
        var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
        writeFloat(this.data, this.offset, value, isLittleEndian, 23, 4);
        this.offset += INT32_SIZE;
      },
      getFloat32: function getFloat32() {
        var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
        var result = readFloat(this.data, this.offset, isLittleEndian, 23, 4);
        this.offset += INT32_SIZE;
        return result;
      },
      setString: function setString(value) {
        this.setUint8(value.length);
        for (var index = 0; index < value.length; ++index) {
          this.setUint8(value.charCodeAt(index));
        }
      },
      getString: function getString() {
        var size = this.getUint8();
        var endIndex = this.offset + size;
        var chars = [];
        while (this.offset < endIndex) {
          chars.push(String.fromCharCode(this.getUint8()));
        }
        return chars.join('');
      },
      getBytesToOffset: function getBytesToOffset() {
        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offset;
        return this.data.slice(0, offset);
      },
      getBytesLeft: function getBytesLeft() {
        return this.getBytes(this.bytesLeft);
      },
      getBytes: function getBytes(length) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
        this.offset = offset + length;
        return this.data.slice(offset, this.offset);
      },
      setBytes: function setBytes(data) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
        var bytes = this.data;
        bytes.splice.apply(bytes, [offset, data.length].concat(_toConsumableArray(data)));
        this.data = bytes;
        this.offset = offset + data.length;
      }
    };
    Object.defineProperties(BinaryBuffer.prototype, {
      size: {
        get: function get() {
          return this.data.length;
        }
      },
      isEmpty: {
        get: function get() {
          if (this.offset > this.data.length) {
            throw new Error("current offset ".concat(this.offset, " is outside the bounds of the buffer"));
          }
          return this.data.length - this.offset === 0;
        }
      },
      bytesLeft: {
        get: function get() {
          return this.data.length - this.offset;
        }
      },
      position: {
        get: function get() {
          return this.offset;
        }
      }
    });

    var fromObject = function fromObject() {
      var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var booleanObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var result = 0;
      for (var name in booleanObject) {
        if (name in bitMask && booleanObject[name]) {
          result |= bitMask[name];
        }
      }
      return result;
    };
    var toObject = function toObject() {
      var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var result = {};
      for (var name in bitMask) {
        result[name] = (value & bitMask[name]) !== 0;
      }
      return result;
    };
    var extractBits = function extractBits(value, bitsNumber, startIndex) {
      return (1 << bitsNumber) - 1 & value >> startIndex - 1;
    };
    var fillBits = function fillBits(value, bitsNumber, startIndex, valueToSet) {
      var mask = (1 << bitsNumber) - 1 << startIndex - 1;
      var newValueToSet = valueToSet;
      var result = value;
      result &= ~mask;
      newValueToSet <<= startIndex - 1;
      result |= newValueToSet;
      return result;
    };

    var getBytesFromHex = (function (hex) {
      var cleanHex = hex.trim();
      if (!cleanHex) {
        return [];
      }
      cleanHex = cleanHex.replace(/0x/g, '').split(/\s+/).map(function (_byte) {
        return _byte.padStart(2, '0');
      }).join('');
      if (cleanHex.length % 2 !== 0) {
        cleanHex = "0".concat(cleanHex);
      }
      var resultLength = cleanHex.length / 2;
      var bytes = new Array(resultLength);
      for (var index = 0; index < resultLength; index++) {
        bytes[index] = parseInt(cleanHex.substring(index * 2, index * 2 + 2), 16);
      }
      return bytes;
    });

    var DEVICE_TYPE_INVALID_CHAR = 'x';
    var nibbles1 = ['.', '1', '3', 'R', 'M'];
    var nibbles2 = ['.', 'A', 'G', 'R', 'T', 'D'];
    var nibbles3 = ['.', '0', '1', '2', '3', '4', '5'];
    var nibbles4 = ['.', 'A', 'B', 'C', 'D', 'E', 'F'];
    var nibbles5 = ['.', 'A', 'B', 'C', 'D', 'E', 'F', 'H', 'K', 'G'];
    var nibbles6 = ['.', '1', '2', '3', '4'];
    var nibbles7 = ['.', 'L', 'M', 'Z', 'K'];
    var nibbles8 = ['.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
    var nibbles9 = ['.', 'D', 'B', 'C', 'E', 'P', 'R', 'O', 'L', 'F', 'S', 'M', 'Y', 'G', 'N', 'U'];
    var nibbles10 = ['.', '0', '1', '2', '3', '4', '5', '6', 'P', 'R', 'L', 'E', 'G', '-', '/'];
    var nibbles11 = ['.', 'H', 'A', 'T', '0', '0', '0', '0', '0', '1', '2', '3', '4', '0', '0', '0'];
    var nibbles12 = ['.', '0', '1', '2', '3', '4', '5', '6', '7', '8', 'I', 'X', 'G', 'W', 'M', '-'];
    var mtx1DeviceTypeDescriptorMask = {
      typeMeterG: 1 << 0,
      downgradedToA: 1 << 4,
      supportMeterInfo: 1 << 6
    };
    var mtx3DeviceTypeDescriptorMask = {
      typeMeterTransformer: 1 << 0,
      downgradedToR: 1 << 3,
      typeMeterG: 1 << 4,
      supportMeterInfo: 1 << 6,
      reactiveByQuadrants: 1 << 7
    };
    var mtx3DeviceTypeDescriptorFromByte = function mtx3DeviceTypeDescriptorFromByte(_byte) {
      var descriptor = toObject(mtx3DeviceTypeDescriptorMask, _byte);
      return _objectSpread2(_objectSpread2({
        meterType: 'mtx3'
      }, descriptor), {}, {
        typeMeterG: !descriptor.typeMeterG
      });
    };
    var mtx3DeviceTypeDescriptorToByte = function mtx3DeviceTypeDescriptorToByte(descriptor) {
      return fromObject(mtx3DeviceTypeDescriptorMask, _objectSpread2(_objectSpread2({}, descriptor), {}, {
        typeMeterG: !descriptor.typeMeterG
      }));
    };
    var splitByte = function splitByte(_byte2) {
      return [_byte2 >> 4, _byte2 & 0x0F];
    };
    var splitToNibbles = function splitToNibbles(data) {
      var result = new Array(data.length * 2).fill(0);
      data.forEach(function (_byte3, index) {
        var _splitByte = splitByte(_byte3),
          _splitByte2 = _slicedToArray(_splitByte, 2),
          high = _splitByte2[0],
          low = _splitByte2[1];
        result[index * 2] = high;
        result[index * 2 + 1] = low;
      });
      return result;
    };
    var joinNibbles = function joinNibbles(nibbles) {
      var hex = [];
      nibbles.forEach(function (nibble) {
        return hex.push(nibble.toString(16));
      });
      if (nibbles.length & 1) {
        hex.push('0');
      }
      return getBytesFromHex(hex.join(''));
    };
    var fromBytesMtx = function fromBytesMtx(nibbles) {
      var _nibbles1$nibbles$, _nibbles2$nibbles$, _nibbles3$nibbles$, _nibbles3$nibbles$2, _nibbles4$nibbles$, _nibbles5$nibbles$, _nibbles6$nibbles$, _nibbles7$nibbles$, _nibbles8$nibbles$;
      if (nibbles.length !== 14 && nibbles.length !== 16) {
        throw new Error('Device type bytes wrong size');
      }
      var type = ['MTX '];
      type.push((_nibbles1$nibbles$ = nibbles1[nibbles[0]]) !== null && _nibbles1$nibbles$ !== void 0 ? _nibbles1$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
      type.push((_nibbles2$nibbles$ = nibbles2[nibbles[1]]) !== null && _nibbles2$nibbles$ !== void 0 ? _nibbles2$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
      type.push((_nibbles3$nibbles$ = nibbles3[nibbles[2]]) !== null && _nibbles3$nibbles$ !== void 0 ? _nibbles3$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
      type.push((_nibbles3$nibbles$2 = nibbles3[nibbles[3]]) !== null && _nibbles3$nibbles$2 !== void 0 ? _nibbles3$nibbles$2 : DEVICE_TYPE_INVALID_CHAR);
      type.push('.');
      type.push((_nibbles4$nibbles$ = nibbles4[nibbles[4]]) !== null && _nibbles4$nibbles$ !== void 0 ? _nibbles4$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
      type.push((_nibbles5$nibbles$ = nibbles5[nibbles[5]]) !== null && _nibbles5$nibbles$ !== void 0 ? _nibbles5$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
      type.push('.');
      type.push((_nibbles6$nibbles$ = nibbles6[nibbles[6]]) !== null && _nibbles6$nibbles$ !== void 0 ? _nibbles6$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
      type.push((_nibbles7$nibbles$ = nibbles7[nibbles[7]]) !== null && _nibbles7$nibbles$ !== void 0 ? _nibbles7$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
      var revision = nibbles[8];
      type.push((_nibbles8$nibbles$ = nibbles8[nibbles[9]]) !== null && _nibbles8$nibbles$ !== void 0 ? _nibbles8$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
      type.push('-');
      var deviceProtocolIndex;
      if (nibbles.length < 14 || nibbles[12] === 0 && nibbles[13] === 0) {
        var _nibbles9$nibbles$;
        type.push((_nibbles9$nibbles$ = nibbles9[nibbles[10]]) !== null && _nibbles9$nibbles$ !== void 0 ? _nibbles9$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
        deviceProtocolIndex = 11;
      } else if (nibbles[13] === 0) {
        var _nibbles9$nibbles$2, _nibbles9$nibbles$3;
        type.push((_nibbles9$nibbles$2 = nibbles9[nibbles[10]]) !== null && _nibbles9$nibbles$2 !== void 0 ? _nibbles9$nibbles$2 : DEVICE_TYPE_INVALID_CHAR);
        type.push((_nibbles9$nibbles$3 = nibbles9[nibbles[11]]) !== null && _nibbles9$nibbles$3 !== void 0 ? _nibbles9$nibbles$3 : DEVICE_TYPE_INVALID_CHAR);
        deviceProtocolIndex = 12;
      } else {
        var _nibbles9$nibbles$4, _nibbles9$nibbles$5, _nibbles9$nibbles$6;
        type.push((_nibbles9$nibbles$4 = nibbles9[nibbles[10]]) !== null && _nibbles9$nibbles$4 !== void 0 ? _nibbles9$nibbles$4 : DEVICE_TYPE_INVALID_CHAR);
        type.push((_nibbles9$nibbles$5 = nibbles9[nibbles[11]]) !== null && _nibbles9$nibbles$5 !== void 0 ? _nibbles9$nibbles$5 : DEVICE_TYPE_INVALID_CHAR);
        type.push((_nibbles9$nibbles$6 = nibbles9[nibbles[12]]) !== null && _nibbles9$nibbles$6 !== void 0 ? _nibbles9$nibbles$6 : DEVICE_TYPE_INVALID_CHAR);
        deviceProtocolIndex = 13;
      }
      var deviceProtocolNibble = nibbles[deviceProtocolIndex];
      if (deviceProtocolNibble && deviceProtocolNibble !== 0) {
        var _nibbles11$deviceProt;
        type.push((_nibbles11$deviceProt = nibbles11[deviceProtocolNibble]) !== null && _nibbles11$deviceProt !== void 0 ? _nibbles11$deviceProt : DEVICE_TYPE_INVALID_CHAR);
      }
      return {
        type: type.join(''),
        revision: revision
      };
    };
    var toBytesMtx = function toBytesMtx(type, prefix, revision) {
      var nibbles = [];
      if (type.length < 11) {
        throw new Error('Wrong format');
      }
      nibbles.push(nibbles1.indexOf(type[0]));
      nibbles.push(nibbles2.indexOf(type[1]));
      nibbles.push(nibbles3.indexOf(type[2]));
      nibbles.push(nibbles3.indexOf(type[3]));
      if (type[4] !== '.') {
        throw new Error('Wrong format');
      }
      nibbles.push(nibbles4.indexOf(type[5]));
      nibbles.push(nibbles5.indexOf(type[6]));
      if (type[7] !== '.') {
        throw new Error('Wrong format');
      }
      nibbles.push(nibbles6.indexOf(type[8]));
      nibbles.push(nibbles7.indexOf(type[9]));
      nibbles.push(revision !== null && revision !== void 0 ? revision : 0);
      nibbles.push(nibbles8.indexOf(type[10]));
      if (type[11] !== '-') {
        throw new Error('Wrong format');
      }
      var deviceProtocolIndex = type.length > 13 ? type.length - 1 : type.length;
      for (var index = 12; index < deviceProtocolIndex; index++) {
        nibbles.push(nibbles9.indexOf(type[index]));
      }
      if (deviceProtocolIndex < type.length) {
        nibbles.push(nibbles11.indexOf(type[deviceProtocolIndex]));
      }
      var bytes = joinNibbles(nibbles);
      var result = new Array(9).fill(0);
      result[0] = 0;
      for (var _index = 0; _index < bytes.length; _index++) {
        result[_index + (bytes.length < 8 ? 1 : 0)] = bytes[_index];
      }
      return result;
    };
    var fromBytesMtx2 = function fromBytesMtx2(nibbles) {
      var _nibbles1$nibbles$2, _nibbles2$nibbles$2;
      if (nibbles.length < 14) {
        throw new Error('The buffer is too small');
      }
      var type = ['MTX '];
      var separator = nibbles[1] === 5 ? '-' : ' ';
      type.push((_nibbles1$nibbles$2 = nibbles1[nibbles[0]]) !== null && _nibbles1$nibbles$2 !== void 0 ? _nibbles1$nibbles$2 : DEVICE_TYPE_INVALID_CHAR);
      type.push((_nibbles2$nibbles$2 = nibbles2[nibbles[1]]) !== null && _nibbles2$nibbles$2 !== void 0 ? _nibbles2$nibbles$2 : DEVICE_TYPE_INVALID_CHAR);
      type.push(separator);
      for (var index = 2; index < nibbles.length; index++) {
        if (nibbles[index] !== 0) {
          var _nibbles10$nibbles$in;
          type.push((_nibbles10$nibbles$in = nibbles10[nibbles[index]]) !== null && _nibbles10$nibbles$in !== void 0 ? _nibbles10$nibbles$in : DEVICE_TYPE_INVALID_CHAR);
        }
      }
      return {
        type: type.join('')
      };
    };
    var toBytesMtx2 = function toBytesMtx2(type) {
      if (type.length < 3) {
        throw new Error('Wrong format');
      }
      var nibbles = [];
      nibbles.push(nibbles1.indexOf(type[0]));
      nibbles.push(nibbles2.indexOf(type[1]));
      for (var index = 3; index < type.length; index++) {
        nibbles.push(nibbles10.indexOf(type[index]));
      }
      var bytes = joinNibbles(nibbles);
      if (bytes.length === 8) {
        return bytes;
      }
      if (bytes.length > 8) {
        throw new Error('Wrong format');
      }
      var result = new Array(8).fill(0);
      for (var _index2 = 0; _index2 < bytes.length; _index2++) {
        result[_index2] = bytes[_index2];
      }
      return result;
    };
    var fromBytesM = function fromBytesM(nibbles) {
      var _nibbles1$nibbles$3;
      if (nibbles.length < 14) {
        throw new Error('The buffer is too small');
      }
      var type = [];
      type.push((_nibbles1$nibbles$3 = nibbles1[nibbles[0]]) !== null && _nibbles1$nibbles$3 !== void 0 ? _nibbles1$nibbles$3 : DEVICE_TYPE_INVALID_CHAR);
      for (var index = 1; index < nibbles.length; index++) {
        if (nibbles[index] !== 0) {
          var _nibbles12$nibbles$in;
          type.push((_nibbles12$nibbles$in = nibbles12[nibbles[index]]) !== null && _nibbles12$nibbles$in !== void 0 ? _nibbles12$nibbles$in : DEVICE_TYPE_INVALID_CHAR);
        }
      }
      return {
        type: type.join('')
      };
    };
    var toBytesM = function toBytesM(type) {
      if (type.length < 1) {
        throw new Error('Wrong format');
      }
      var nibbles = [];
      nibbles.push(nibbles1.indexOf(type[0]));
      for (var index = 1; index < type.length; index++) {
        nibbles.push(nibbles12.indexOf(type[index]));
      }
      var bytes = joinNibbles(nibbles);
      var result = new Array(8).fill(0);
      for (var _index3 = 0; _index3 < bytes.length && _index3 < 8; _index3++) {
        result[_index3] = bytes[_index3];
      }
      return result;
    };
    var fromBytes$27 = function fromBytes(bytes) {
      if (bytes.length !== 9) {
        throw new Error('The buffer is too small');
      }
      var result;
      var reserve = [0x00, 0x05, 0x06, 0x07, 0x09, 0x7f, 0xef];
      var position = reserve.indexOf(bytes[0]) !== -1 ? 2 : 0;
      var nibbles = splitToNibbles(bytes.slice(0, 8));
      var deviceTypeNibble = nibbles[position];
      var deviceType = nibbles1[deviceTypeNibble];
      if (deviceType === '1' || deviceType === '3') {
        result = _objectSpread2(_objectSpread2({}, fromBytesMtx(nibbles.slice(position))), {}, {
          descriptor: deviceType === '3' ? mtx3DeviceTypeDescriptorFromByte(bytes[8]) : _objectSpread2({
            meterType: 'mtx1'
          }, toObject(mtx1DeviceTypeDescriptorMask, bytes[8]))
        });
      } else {
        result = deviceType === 'M' ? fromBytesM(nibbles) : fromBytesMtx2(nibbles);
      }
      return result;
    };
    var toBytes$28 = function toBytes(_ref, prefix) {
      var type = _ref.type,
        revision = _ref.revision,
        descriptor = _ref.descriptor;
      if (!type.startsWith('MTX ')) {
        throw new Error('Wrong format');
      }
      var result;
      var content = type.substring(4);
      var deviceTypeSymbol = type[4];
      if (deviceTypeSymbol === '1' || deviceTypeSymbol === '3') {
        result = toBytesMtx(content, prefix, revision);
      } else {
        result = deviceTypeSymbol === 'M' ? toBytesM(content) : toBytesMtx2(content);
      }
      if (descriptor !== null && descriptor !== void 0 && descriptor.meterType) {
        result[8] = descriptor.meterType === 'mtx1' ? fromObject(mtx1DeviceTypeDescriptorMask, descriptor) : mtx3DeviceTypeDescriptorToByte(descriptor);
      } else {
        result[8] = 0;
      }
      return result;
    };

    var getHexFromBytes = (function (bytes) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _Object$assign = Object.assign({}, hexFormatOptions, options),
        separator = _Object$assign.separator,
        prefix = _Object$assign.prefix;
      return bytes.map(function (_byte) {
        return "".concat(prefix).concat(_byte.toString(16).padStart(2, '0'));
      }).join(separator);
    });

    var DATA_REQUEST = 0x50;
    var DATA_RESPONSE = 0x51;
    var IDENT_REQUEST = 0x52;
    var IDENT_RESPONSE = 0x53;
    var L2_SET_ADDRESS_REQUEST = 0x54;
    var L2_SET_ADDRESS_RESPONSE = 0x55;
    var L2_CHECK_ADDRESS_REQUEST = 0x56;
    var L2_CHECK_ADDRESS_RESPONSE = 0x57;
    var L2_RM_ADDRESS_REQUEST = 0x58;
    var L2_RM_ADDRESS_RESPONSE = 0x59;
    var FRAGMENT_REQUEST = 0x5A;
    var FRAGMENT_RESPONSE = 0x5B;
    var INVALID = 0xFF;

    var frameTypes = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DATA_REQUEST: DATA_REQUEST,
        DATA_RESPONSE: DATA_RESPONSE,
        FRAGMENT_REQUEST: FRAGMENT_REQUEST,
        FRAGMENT_RESPONSE: FRAGMENT_RESPONSE,
        IDENT_REQUEST: IDENT_REQUEST,
        IDENT_RESPONSE: IDENT_RESPONSE,
        INVALID: INVALID,
        L2_CHECK_ADDRESS_REQUEST: L2_CHECK_ADDRESS_REQUEST,
        L2_CHECK_ADDRESS_RESPONSE: L2_CHECK_ADDRESS_RESPONSE,
        L2_RM_ADDRESS_REQUEST: L2_RM_ADDRESS_REQUEST,
        L2_RM_ADDRESS_RESPONSE: L2_RM_ADDRESS_RESPONSE,
        L2_SET_ADDRESS_REQUEST: L2_SET_ADDRESS_REQUEST,
        L2_SET_ADDRESS_RESPONSE: L2_SET_ADDRESS_RESPONSE
    });

    var invertObject = (function (source) {
      var target = {};
      for (var property in source) {
        var value = source[property];
        target[value] = property;
      }
      return target;
    });

    var frameNames = invertObject(frameTypes);

    var ENERGY_REGISTER_FAULT = 0x01;
    var VENDOR_PAR_FAULT = 0x02;
    var OP_PAR_FAULT = 0x03;
    var ACCESS_LOCKED = 0x10;
    var ERR_ACCESS = 0x11;
    var CASE_OPEN$1 = 0x12;
    var CASE_CLOSE = 0x13;
    var MAGNETIC_ON$1 = 0x14;
    var MAGNETIC_OFF = 0x15;
    var CHANGE_ACCESS_KEY0 = 0x20;
    var CHANGE_ACCESS_KEY1 = 0x21;
    var CHANGE_ACCESS_KEY2 = 0x22;
    var CHANGE_ACCESS_KEY3 = 0x23;
    var CHANGE_PAR_LOCAL = 0x24;
    var CHANGE_PAR_REMOTE = 0x25;
    var CMD_CHANGE_TIME = 0x26;
    var CMD_RELAY_ON = 0x27;
    var CMD_RELAY_OFF = 0x28;
    var CHANGE_COR_TIME = 0x29;
    var ENERGY_REGISTER_OVERFLOW = 0x31;
    var CHANGE_TARIFF_TABLE = 0x32;
    var SET_TARIFF_TABLE = 0x33;
    var SUMMER_TIME = 0x34;
    var WINTER_TIME = 0x35;
    var RELAY_ON = 0x36;
    var RELAY_OFF = 0x37;
    var RESTART$1 = 0x38;
    var WD_RESTART = 0x39;
    var POWER_B_ON = 0x3c;
    var POWER_B_OFF = 0x3d;
    var POWER_C_ON = 0x3e;
    var POWER_C_OFF = 0x3f;
    var V_MAX_OK = 0x40;
    var V_MAX_OVER = 0x41;
    var V_MIN_OK = 0x42;
    var V_MIN_OVER = 0x43;
    var T_MAX_OK = 0x44;
    var T_MAX_OVER = 0x45;
    var T_MIN_OK = 0x46;
    var T_MIN_OVER = 0x47;
    var F_MAX_OK = 0x48;
    var F_MAX_OVER = 0x49;
    var F_MIN_OK = 0x4a;
    var F_MIN_OVER = 0x4b;
    var I_MAX_OK = 0x4c;
    var I_MAX_OVER = 0x4d;
    var P_MAX_OK = 0x4e;
    var P_MAX_OVER = 0x4f;
    var POWER_SALDO_OK = 0x50;
    var POWER_SALDO_OVER = 0x51;
    var BATTERY_OK = 0x52;
    var BATTERY_FAULT = 0x53;
    var CALIBRATION_OK = 0x54;
    var CALIBRATION_FAULT = 0x55;
    var CLOCK_OK = 0x56;
    var CLOCK_FAULT = 0x57;
    var POWER_A_OFF = 0x58;
    var POWER_A_ON = 0x59;
    var CMD_RELAY_2_ON = 0x60;
    var CMD_RELAY_2_OFF = 0x61;
    var CROSS_ZERO_ENT0 = 0x62;
    var CROSS_ZERO_ENT1 = 0x63;
    var CROSS_ZERO_ENT2 = 0x64;
    var CROSS_ZERO_ENT3 = 0x65;
    var CALIBRATION_FLAG_SET = 0x66;
    var CALIBRATION_FLAG_RESET = 0x67;
    var BAD_TEST_EEPROM = 0x68;
    var BAD_TEST_FRAM = 0x69;
    var SET_NEW_SALDO = 0x70;
    var SALDO_PARAM_BAD = 0x71;
    var ACC_PARAM_BAD = 0x72;
    var ACC_PARAM_EXT_BAD = 0x73;
    var CALC_PERIOD_BAD = 0x74;
    var BLOCK_TARIFF_BAD = 0x75;
    var CALIBRATION_PARAM_BAD = 0x76;
    var WINTER_SUMMER_BAD = 0x77;
    var SALDO_EN_BAD = 0x78;
    var TIME_CORRECT$1 = 0x79;
    var CASE_KLEMA_OPEN = 0x7a;
    var CASE_KLEMA_CLOSE = 0x7b;
    var CASE_MODULE_OPEN$1 = 0x7c;
    var CASE_MODULE_CLOSE = 0x7d;
    var POWER_GOOD_DIO = 0x7e;
    var RELAY_HARD_BAD_OFF = 0x90;
    var RELAY_HARD_ON = 0x91;
    var RELAY_HARD_BAD_ON = 0x93;
    var RELAY_HARD_OFF = 0x94;
    var CHANGE_TARIFF_TBL_2 = 0x98;
    var SET_SALDO_PARAM = 0x9c;
    var POWER_OVER_RELAY_OFF = 0x9d;
    var CROSS_ZERO_EXPORT_ENT0 = 0x9e;
    var CROSS_ZERO_EXPORT_ENT1 = 0x9f;
    var CROSS_ZERO_EXPORT_ENT2 = 0xa0;
    var CROSS_ZERO_EXPORT_ENT3 = 0xa1;
    var TIME_CORRECT_NEW = 0xa2;
    var EM_MAGNETIC_ON = 0xb0;
    var EM_MAGNETIC_OFF = 0xb1;
    var CURRENT_UNEQUAL_FAULT = 0xb2;
    var CURRENT_UNEQUAL_OK = 0xb3;
    var BIPOLAR_POWER_FAULT = 0xb4;
    var BIPOLAR_POWER_OK = 0xb5;
    var RESET_EM_FLAG = 0xB6;
    var RESET_MAGNET_FLAG = 0xB7;
    var CHANGE_PARAM_CANAL = 0xB9;
    var RELAY_OFF_BAD_SALDO = 0xBA;
    var SET_DEMAND_EN_1MIN = 0xE0;
    var SET_DEMAND_EN_3MIN = 0xE1;
    var SET_DEMAND_EN_5MIN = 0xE2;
    var SET_DEMAND_EN_10MIN = 0xE3;
    var SET_DEMAND_EN_15MIN = 0xE4;
    var SET_DEMAND_EN_30MIN = 0xE5;
    var SET_DEMAND_EN_60MIN = 0xE6;
    var P_MAX_A_MINUS_OK = 0xE7;
    var P_MAX_A_MINUS_OVER = 0xE8;

    var events = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ACCESS_LOCKED: ACCESS_LOCKED,
        ACC_PARAM_BAD: ACC_PARAM_BAD,
        ACC_PARAM_EXT_BAD: ACC_PARAM_EXT_BAD,
        BAD_TEST_EEPROM: BAD_TEST_EEPROM,
        BAD_TEST_FRAM: BAD_TEST_FRAM,
        BATTERY_FAULT: BATTERY_FAULT,
        BATTERY_OK: BATTERY_OK,
        BIPOLAR_POWER_FAULT: BIPOLAR_POWER_FAULT,
        BIPOLAR_POWER_OK: BIPOLAR_POWER_OK,
        BLOCK_TARIFF_BAD: BLOCK_TARIFF_BAD,
        CALC_PERIOD_BAD: CALC_PERIOD_BAD,
        CALIBRATION_FAULT: CALIBRATION_FAULT,
        CALIBRATION_FLAG_RESET: CALIBRATION_FLAG_RESET,
        CALIBRATION_FLAG_SET: CALIBRATION_FLAG_SET,
        CALIBRATION_OK: CALIBRATION_OK,
        CALIBRATION_PARAM_BAD: CALIBRATION_PARAM_BAD,
        CASE_CLOSE: CASE_CLOSE,
        CASE_KLEMA_CLOSE: CASE_KLEMA_CLOSE,
        CASE_KLEMA_OPEN: CASE_KLEMA_OPEN,
        CASE_MODULE_CLOSE: CASE_MODULE_CLOSE,
        CASE_MODULE_OPEN: CASE_MODULE_OPEN$1,
        CASE_OPEN: CASE_OPEN$1,
        CHANGE_ACCESS_KEY0: CHANGE_ACCESS_KEY0,
        CHANGE_ACCESS_KEY1: CHANGE_ACCESS_KEY1,
        CHANGE_ACCESS_KEY2: CHANGE_ACCESS_KEY2,
        CHANGE_ACCESS_KEY3: CHANGE_ACCESS_KEY3,
        CHANGE_COR_TIME: CHANGE_COR_TIME,
        CHANGE_PARAM_CANAL: CHANGE_PARAM_CANAL,
        CHANGE_PAR_LOCAL: CHANGE_PAR_LOCAL,
        CHANGE_PAR_REMOTE: CHANGE_PAR_REMOTE,
        CHANGE_TARIFF_TABLE: CHANGE_TARIFF_TABLE,
        CHANGE_TARIFF_TBL_2: CHANGE_TARIFF_TBL_2,
        CLOCK_FAULT: CLOCK_FAULT,
        CLOCK_OK: CLOCK_OK,
        CMD_CHANGE_TIME: CMD_CHANGE_TIME,
        CMD_RELAY_2_OFF: CMD_RELAY_2_OFF,
        CMD_RELAY_2_ON: CMD_RELAY_2_ON,
        CMD_RELAY_OFF: CMD_RELAY_OFF,
        CMD_RELAY_ON: CMD_RELAY_ON,
        CROSS_ZERO_ENT0: CROSS_ZERO_ENT0,
        CROSS_ZERO_ENT1: CROSS_ZERO_ENT1,
        CROSS_ZERO_ENT2: CROSS_ZERO_ENT2,
        CROSS_ZERO_ENT3: CROSS_ZERO_ENT3,
        CROSS_ZERO_EXPORT_ENT0: CROSS_ZERO_EXPORT_ENT0,
        CROSS_ZERO_EXPORT_ENT1: CROSS_ZERO_EXPORT_ENT1,
        CROSS_ZERO_EXPORT_ENT2: CROSS_ZERO_EXPORT_ENT2,
        CROSS_ZERO_EXPORT_ENT3: CROSS_ZERO_EXPORT_ENT3,
        CURRENT_UNEQUAL_FAULT: CURRENT_UNEQUAL_FAULT,
        CURRENT_UNEQUAL_OK: CURRENT_UNEQUAL_OK,
        EM_MAGNETIC_OFF: EM_MAGNETIC_OFF,
        EM_MAGNETIC_ON: EM_MAGNETIC_ON,
        ENERGY_REGISTER_FAULT: ENERGY_REGISTER_FAULT,
        ENERGY_REGISTER_OVERFLOW: ENERGY_REGISTER_OVERFLOW,
        ERR_ACCESS: ERR_ACCESS,
        F_MAX_OK: F_MAX_OK,
        F_MAX_OVER: F_MAX_OVER,
        F_MIN_OK: F_MIN_OK,
        F_MIN_OVER: F_MIN_OVER,
        I_MAX_OK: I_MAX_OK,
        I_MAX_OVER: I_MAX_OVER,
        MAGNETIC_OFF: MAGNETIC_OFF,
        MAGNETIC_ON: MAGNETIC_ON$1,
        OP_PAR_FAULT: OP_PAR_FAULT,
        POWER_A_OFF: POWER_A_OFF,
        POWER_A_ON: POWER_A_ON,
        POWER_B_OFF: POWER_B_OFF,
        POWER_B_ON: POWER_B_ON,
        POWER_C_OFF: POWER_C_OFF,
        POWER_C_ON: POWER_C_ON,
        POWER_GOOD_DIO: POWER_GOOD_DIO,
        POWER_OVER_RELAY_OFF: POWER_OVER_RELAY_OFF,
        POWER_SALDO_OK: POWER_SALDO_OK,
        POWER_SALDO_OVER: POWER_SALDO_OVER,
        P_MAX_A_MINUS_OK: P_MAX_A_MINUS_OK,
        P_MAX_A_MINUS_OVER: P_MAX_A_MINUS_OVER,
        P_MAX_OK: P_MAX_OK,
        P_MAX_OVER: P_MAX_OVER,
        RELAY_HARD_BAD_OFF: RELAY_HARD_BAD_OFF,
        RELAY_HARD_BAD_ON: RELAY_HARD_BAD_ON,
        RELAY_HARD_OFF: RELAY_HARD_OFF,
        RELAY_HARD_ON: RELAY_HARD_ON,
        RELAY_OFF: RELAY_OFF,
        RELAY_OFF_BAD_SALDO: RELAY_OFF_BAD_SALDO,
        RELAY_ON: RELAY_ON,
        RESET_EM_FLAG: RESET_EM_FLAG,
        RESET_MAGNET_FLAG: RESET_MAGNET_FLAG,
        RESTART: RESTART$1,
        SALDO_EN_BAD: SALDO_EN_BAD,
        SALDO_PARAM_BAD: SALDO_PARAM_BAD,
        SET_DEMAND_EN_10MIN: SET_DEMAND_EN_10MIN,
        SET_DEMAND_EN_15MIN: SET_DEMAND_EN_15MIN,
        SET_DEMAND_EN_1MIN: SET_DEMAND_EN_1MIN,
        SET_DEMAND_EN_30MIN: SET_DEMAND_EN_30MIN,
        SET_DEMAND_EN_3MIN: SET_DEMAND_EN_3MIN,
        SET_DEMAND_EN_5MIN: SET_DEMAND_EN_5MIN,
        SET_DEMAND_EN_60MIN: SET_DEMAND_EN_60MIN,
        SET_NEW_SALDO: SET_NEW_SALDO,
        SET_SALDO_PARAM: SET_SALDO_PARAM,
        SET_TARIFF_TABLE: SET_TARIFF_TABLE,
        SUMMER_TIME: SUMMER_TIME,
        TIME_CORRECT: TIME_CORRECT$1,
        TIME_CORRECT_NEW: TIME_CORRECT_NEW,
        T_MAX_OK: T_MAX_OK,
        T_MAX_OVER: T_MAX_OVER,
        T_MIN_OK: T_MIN_OK,
        T_MIN_OVER: T_MIN_OVER,
        VENDOR_PAR_FAULT: VENDOR_PAR_FAULT,
        V_MAX_OK: V_MAX_OK,
        V_MAX_OVER: V_MAX_OVER,
        V_MIN_OK: V_MIN_OK,
        V_MIN_OVER: V_MIN_OVER,
        WD_RESTART: WD_RESTART,
        WINTER_SUMMER_BAD: WINTER_SUMMER_BAD,
        WINTER_TIME: WINTER_TIME
    });

    var eventNames = invertObject(events);

    var defaultFrameHeader = {
      type: DATA_REQUEST,
      destination: 0xffff,
      source: 0xfffe
    };
    var TARIFF_PLAN_SIZE = 11;
    var OPERATOR_PARAMETERS_SIZE = 74;
    var SEASON_PROFILE_DAYS_NUMBER = 7;
    var SEASON_PROFILE_SIZE = 2 + SEASON_PROFILE_DAYS_NUMBER;
    var TARIFF_NUMBER$1 = 4;
    var PACKED_ENERGY_TYPE_SIZE = 1;
    var ENERGY_SIZE = 4;
    var DATE_SIZE$3 = 3;
    var MIN_HALF_HOUR_PERIODS = 48;
    var MAX_HALF_HOUR_PERIODS = 50;
    var MIN_HALF_HOUR_COMMAND_SIZE = 3 + MIN_HALF_HOUR_PERIODS * 2;
    var MAX_HALF_HOUR_COMMAND_SIZE = 4 + MAX_HALF_HOUR_PERIODS * 2;
    var baseDisplaySetMask = {
      SET_ALL_SEGMENT_DISPLAY: 0x0001,
      SOFTWARE_VERSION: 0x0002,
      TOTAL_ACTIVE_ENERGY: 0x0004,
      ACTIVE_ENERGY_T1: 0x0008,
      ACTIVE_ENERGY_T2: 0x0010,
      ACTIVE_ENERGY_T3: 0x0020,
      ACTIVE_ENERGY_T4: 0x0040,
      ACTIVE_POWER_PER_PHASE: 0x0080,
      ACTIVE_POWER_IN_NEUTRAL: 0x0100,
      CURRENT_IN_PHASE: 0x0200,
      CURRENT_IN_NEUTRAL: 0x0400,
      VOLTAGE: 0x0800,
      HOUR_MINUTE_SECOND: 0x1000,
      DATE_MONTH_YEAR: 0x2000,
      TOTAL_EXPORTED_ACTIVE_ENERGY: 0x4000,
      EXPORTED_ACTIVE_ENERGY_T1: 0x8000,
      EXPORTED_ACTIVE_ENERGY_T2: 0x00010000,
      EXPORTED_ACTIVE_ENERGY_T3: 0x00020000,
      EXPORTED_ACTIVE_ENERGY_T4: 0x00040000,
      POWER_FACTOR_PHASE_A: 0x00080000,
      POWER_FACTOR_PHASE_B: 0x00100000,
      BATTERY_VOLTAGE: 0x00200000,
      POWER_THRESHOLD_T1: 0x00400000,
      POWER_THRESHOLD_T2: 0x00800000,
      POWER_THRESHOLD_T3: 0x01000000,
      POWER_THRESHOLD_T4: 0x02000000,
      CURRENT_BALANCE: 0x20000000
    };
    var displaySetMask = _objectSpread2(_objectSpread2({}, baseDisplaySetMask), {}, {
      AUTO_SCREEN_SCROLLING: 0x80000000
    });
    var displaySetExtMask = _objectSpread2(_objectSpread2({}, baseDisplaySetMask), {}, {
      MAGNET_INDUCTION: 0x08000000,
      OPTOPORT_SPEED: 0x40000000,
      SORT_DISPLAY_SCREENS: 0x80000000
    });
    var relaySet1Mask = {
      RELAY_ON_Y: 0x01,
      RELAY_ON_CENTER: 0x02,
      RELAY_ON_PB: 0x04,
      RELAY_ON_TARIFF_1: 0x08,
      RELAY_ON_TARIFF_2: 0x10,
      RELAY_ON_TARIFF_3: 0x20,
      RELAY_ON_TARIFF_4: 0x40,
      RELAY_ON_V_GOOD: 0x80
    };
    var relaySet2Mask = {
      RELAY_OFF_Y: 0x01,
      RELAY_OFF_CENTER: 0x02,
      RELAY_OFF_TARIFF_1: 0x04,
      RELAY_OFF_TARIFF_2: 0x08,
      RELAY_OFF_TARIFF_3: 0x10,
      RELAY_OFF_TARIFF_4: 0x20,
      RELAY_OFF_I_LIMIT: 0x40,
      RELAY_OFF_V_BAD: 0x80
    };
    var relaySet3Mask = {
      RELAY_OFF_LIM_TARIFF_1: 0x02,
      RELAY_OFF_LIM_TARIFF_2: 0x04,
      RELAY_OFF_LIM_TARIFF_3: 0x08,
      RELAY_OFF_LIM_TARIFF_4: 0x10,
      RELAY_OFF_PF_MIN: 0x20
    };
    var relaySet4Mask = {
      RELAY_ON_TIMEOUT: 0x01,
      RELAY_ON_SALDO: 0x02,
      RELAY_OFF_SALDO: 0x04,
      RELAY_OFF_SALDO_SOFT: 0x08,
      RELAY_OFF_MAGNET: 0x10,
      RELAY_ON_MAGNET_TIMEOUT: 0x20,
      RELAY_ON_MAGNET_AUTO: 0x40
    };
    var relaySet5Mask = {
      RELAY_OFF_UNEQUAL_CURRENT: 0x01,
      RELAY_ON_UNEQUAL_CURRENT: 0x02,
      RELAY_OFF_BIPOLAR_POWER: 0x04,
      RELAY_ON_BIPOLAR_POWER: 0x08
    };
    var define1Mask = {
      BLOCK_KEY_OPTOPORT: 0x02,
      MAGNET_SCREEN_CONST: 0x20
    };
    var eventStatusMask = {
      CASE_OPEN: Math.pow(2, 0),
      MAGNETIC_ON: Math.pow(2, 1),
      PARAMETERS_UPDATE_REMOTE: Math.pow(2, 2),
      PARAMETERS_UPDATE_LOCAL: Math.pow(2, 3),
      RESTART: Math.pow(2, 4),
      ERROR_ACCESS: Math.pow(2, 5),
      TIME_SET: Math.pow(2, 6),
      TIME_CORRECT: Math.pow(2, 7),
      DEVICE_FAILURE: Math.pow(2, 8),
      CASE_TERMINAL_OPEN: Math.pow(2, 9),
      CASE_MODULE_OPEN: Math.pow(2, 10),
      TARIFF_TABLE_SET: Math.pow(2, 11),
      TARIFF_TABLE_GET: Math.pow(2, 12),
      PROTECTION_RESET_EM: Math.pow(2, 13),
      PROTECTION_RESET_MAGNETIC: Math.pow(2, 14)
    };
    var extendedCurrentValues2RelayStatusMask = {
      RELAY_STATE: Math.pow(2, 0),
      RELAY_UBAD: Math.pow(2, 1),
      RELAY_UNEQ_CURRENT: Math.pow(2, 4),
      RELAY_OFF_CENTER: Math.pow(2, 5),
      RELAY_IMAX: Math.pow(2, 6),
      RELAY_PMAX: Math.pow(2, 7)
    };
    var extendedCurrentValues2RelayStatus2Mask = {
      RELAY_COSFI: Math.pow(2, 0),
      RELAY_SALDO_OFF_FLAG: Math.pow(2, 1),
      RELAY_UNEQUAL_CURRENT_OFF: Math.pow(2, 2),
      RELAY_BIPOLAR_POWER_OFF: Math.pow(2, 3),
      RELAY_SALDO_OFF_ON_MAX_POWER: Math.pow(2, 4),
      RELAY_HARD_ST1: Math.pow(2, 5)
    };
    var extendedCurrentValues2Status1Mask = {
      MAXVA: Math.pow(2, 0),
      MINVA: Math.pow(2, 1),
      MAXT: Math.pow(2, 2),
      MINT: Math.pow(2, 3),
      MAXF: Math.pow(2, 4),
      MINF: Math.pow(2, 5),
      MAXIA: Math.pow(2, 6),
      MAXP: Math.pow(2, 7)
    };
    var extendedCurrentValues2Status2Mask = {
      MAX_POWER_SALDO: Math.pow(2, 0),
      BATTERY_VBAT_BAD: Math.pow(2, 1),
      CLOCK_UNSET: Math.pow(2, 3),
      MIN_COS_FI: Math.pow(2, 5)
    };
    var extendedCurrentValues2Status3Mask = {
      UNEQUAL_CURRENT: Math.pow(2, 0),
      BIPOLAR_POWER: Math.pow(2, 1),
      POWER_A_NEGATIVE: Math.pow(2, 6),
      POWER_B_NEGATIVE: Math.pow(2, 7)
    };
    var operatorParametersExtended3RelaySetMask = {
      RELAY_OFF_LIMIT_P_MINUS_T1: 0x08,
      RELAY_OFF_LIMIT_P_MINUS_T2: 0x10,
      RELAY_OFF_LIMIT_P_MINUS_T3: 0x20,
      RELAY_OFF_LIMIT_P_MINUS_T4: 0x40
    };
    function getPackedEnergies(buffer, energyType, tariffMapByte) {
      var _byte = tariffMapByte >> TARIFF_NUMBER$1;
      var energies = new Array(TARIFF_NUMBER$1).fill(0);
      energies.forEach(function (energy, index) {
        var isTariffExists = !!extractBits(_byte, 1, index + 1);
        if (isTariffExists) {
          energies[index] = buffer.getUint32();
        } else {
          energies[index] = null;
        }
      });
      return energies;
    }
    function setPackedEnergyType(buffer, energyType, energies) {
      var indexShift = 1 + TARIFF_NUMBER$1;
      var tariffsByte = energyType;
      energies.forEach(function (energy, index) {
        tariffsByte = fillBits(tariffsByte, 1, index + indexShift, Number(!!energy));
      });
      buffer.setUint8(tariffsByte);
    }
    function getEnergyPeriod(period) {
      if (period === 0xffff) {
        return {
          tariff: undefined,
          energy: undefined
        };
      }
      return {
        tariff: period >> 14 & 0x03,
        energy: period & 0x3fff
      };
    }
    function setEnergyPeriod(buffer, _ref) {
      var tariff = _ref.tariff,
        energy = _ref.energy;
      if (tariff !== undefined && energy !== undefined) {
        buffer.setUint16(tariff << 14 | energy & 0x3fff);
      } else {
        buffer.setUint16(0xffff);
      }
    }
    function CommandBinaryBuffer$1(dataOrLength) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      BinaryBuffer.call(this, dataOrLength, isLittleEndian);
    }
    CommandBinaryBuffer$1.prototype = Object.create(BinaryBuffer.prototype);
    CommandBinaryBuffer$1.prototype.constructor = CommandBinaryBuffer$1;
    CommandBinaryBuffer$1.getDayProfileFromByte = function (value) {
      return {
        tariff: extractBits(value, 2, 1),
        isFirstHalfHour: !extractBits(value, 1, 3),
        hour: extractBits(value, 5, 4)
      };
    };
    CommandBinaryBuffer$1.getByteFromDayProfile = function (dayProfile) {
      var value = 0;
      value = fillBits(value, 2, 1, dayProfile.tariff);
      value = fillBits(value, 1, 3, +!dayProfile.isFirstHalfHour);
      value = fillBits(value, 5, 4, dayProfile.hour);
      return value;
    };
    CommandBinaryBuffer$1.getDefaultSeasonProfile = function () {
      return {
        month: 1,
        date: 1,
        dayIndexes: [0, 0, 0, 0, 0, 0, 0]
      };
    };
    CommandBinaryBuffer$1.getDefaultOperatorParameters = function () {
      return {
        vpThreshold: 265000,
        vThreshold: 156000,
        ipThreshold: 120000,
        pmaxThreshold0: 31800,
        pmaxThreshold1: 31800,
        pmaxThreshold2: 31800,
        pmaxThreshold3: 31800,
        speedOptoPort: 0,
        tint: 30,
        calcPeriodDate: 1,
        timeoutDisplay: 127,
        timeoutScreen: 7,
        displaySet: toObject(displaySetMask, 0x80003184),
        relaySet4: toObject(relaySet4Mask, 0),
        relaySet3: toObject(relaySet3Mask, 0),
        relaySet2: toObject(relaySet2Mask, 3),
        relaySet1: toObject(relaySet1Mask, 3),
        displayType: 0,
        ten: 0,
        timeoutRefresh: 240,
        deltaCorMin: 15,
        timeoutMagnetOff: 5,
        timeoutMagnetOn: 5,
        define1: toObject(define1Mask, 0),
        timeoutRelayOn: 1,
        timeoutRelayKey: 0,
        timeoutRelayAuto: 5,
        timeoutBadVAVB: 5,
        freqMax: 55,
        freqMin: 45,
        phMin: 0,
        year: 0,
        month: 0,
        date: 0,
        energyDecimalPoint: 2,
        typeMeter: 0,
        timeoutIMax: 5,
        timeoutPMax: 5,
        timeoutCos: 5,
        pMaxDef: 1,
        displaySetExt: toObject(displaySetExtMask, 0x8383fff),
        timeoutUneqCurrent: 5,
        timeoutBipolarPower: 5,
        relaySet5: toObject(relaySet5Mask, 0),
        timeCorrectPeriod: 24,
        timeCorrectPassHalfhour: false
      };
    };
    CommandBinaryBuffer$1.getDefaultOperatorParametersExtended3 = function () {
      return {
        pmaxMinusThreshold0: 0,
        pmaxMinusThreshold1: 0,
        pmaxMinusThreshold2: 0,
        pmaxMinusThreshold3: 0,
        relaySet: toObject(operatorParametersExtended3RelaySetMask, 0)
      };
    };
    CommandBinaryBuffer$1.prototype.getFrameHeader = function () {
      var type = this.getUint8();
      var typeName = frameNames[type];
      var destination = this.getUint16();
      var source = this.getUint16();
      return {
        type: type,
        typeName: typeName,
        destination: destination,
        source: source
      };
    };
    CommandBinaryBuffer$1.prototype.setFrameHeader = function (_ref2) {
      var _ref2$type = _ref2.type,
        type = _ref2$type === void 0 ? defaultFrameHeader.type : _ref2$type,
        _ref2$destination = _ref2.destination,
        destination = _ref2$destination === void 0 ? defaultFrameHeader.destination : _ref2$destination,
        _ref2$source = _ref2.source,
        source = _ref2$source === void 0 ? defaultFrameHeader.source : _ref2$source;
      this.setUint8(type);
      this.setUint16(destination);
      this.setUint16(source);
    };
    CommandBinaryBuffer$1.prototype.getDeviceId = function () {
      var manufacturer = getHexFromBytes(this.getBytes(3), {
        separator: ''
      });
      var type = this.getUint8();
      var year = this.getUint8();
      var serial = getHexFromBytes(this.getBytes(3), {
        separator: ''
      });
      return {
        manufacturer: manufacturer,
        type: type,
        year: year,
        serial: serial
      };
    };
    CommandBinaryBuffer$1.prototype.setDeviceId = function (_ref3) {
      var manufacturer = _ref3.manufacturer,
        type = _ref3.type,
        year = _ref3.year,
        serial = _ref3.serial;
      this.setBytes(getBytesFromHex(manufacturer));
      this.setUint8(type);
      this.setUint8(year);
      this.setBytes(getBytesFromHex(serial));
    };
    CommandBinaryBuffer$1.prototype.getDateTime = function () {
      return {
        isSummerTime: !!this.getUint8(),
        seconds: this.getUint8(),
        minutes: this.getUint8(),
        hours: this.getUint8(),
        day: this.getUint8(),
        date: this.getUint8(),
        month: this.getUint8(),
        year: this.getUint8()
      };
    };
    CommandBinaryBuffer$1.prototype.setDateTime = function (dateTime) {
      this.setUint8(dateTime.isSummerTime ? 1 : 0);
      this.setUint8(dateTime.seconds);
      this.setUint8(dateTime.minutes);
      this.setUint8(dateTime.hours);
      this.setUint8(dateTime.day || 0);
      this.setUint8(dateTime.date);
      this.setUint8(dateTime.month);
      this.setUint8(dateTime.year);
    };
    CommandBinaryBuffer$1.prototype.getTariffPlan = function () {
      return {
        id: this.getUint32(),
        tariffSet: this.getUint8(),
        activateYear: this.getUint8(),
        activateMonth: this.getUint8(),
        activateDay: this.getUint8(),
        specialProfilesArraySize: this.getUint8(),
        seasonProfilesArraySize: this.getUint8(),
        dayProfilesArraySize: this.getUint8()
      };
    };
    CommandBinaryBuffer$1.prototype.setTariffPlan = function (tariffPlan) {
      this.setUint32(tariffPlan.id);
      this.setUint8(tariffPlan.tariffSet);
      this.setUint8(tariffPlan.activateYear);
      this.setUint8(tariffPlan.activateMonth);
      this.setUint8(tariffPlan.activateDay);
      this.setUint8(tariffPlan.specialProfilesArraySize);
      this.setUint8(tariffPlan.seasonProfilesArraySize);
      this.setUint8(tariffPlan.dayProfilesArraySize);
    };
    CommandBinaryBuffer$1.prototype.getTimeCorrectionParameters = function () {
      return {
        monthTransitionSummer: this.getUint8(),
        dateTransitionSummer: this.getUint8(),
        hoursTransitionSummer: this.getUint8(),
        hoursCorrectSummer: this.getUint8(),
        monthTransitionWinter: this.getUint8(),
        dateTransitionWinter: this.getUint8(),
        hoursTransitionWinter: this.getUint8(),
        hoursCorrectWinter: this.getUint8(),
        isCorrectionNeeded: this.getUint8() === 1
      };
    };
    CommandBinaryBuffer$1.prototype.setTimeCorrectionParameters = function (parameters) {
      this.setUint8(parameters.monthTransitionSummer);
      this.setUint8(parameters.dateTransitionSummer);
      this.setUint8(parameters.hoursTransitionSummer);
      this.setUint8(parameters.hoursCorrectSummer);
      this.setUint8(parameters.monthTransitionWinter);
      this.setUint8(parameters.dateTransitionWinter);
      this.setUint8(parameters.hoursTransitionWinter);
      this.setUint8(parameters.hoursCorrectWinter);
      this.setUint8(+parameters.isCorrectionNeeded);
    };
    CommandBinaryBuffer$1.prototype.getDayProfile = function () {
      return CommandBinaryBuffer$1.getDayProfileFromByte(this.getUint8());
    };
    CommandBinaryBuffer$1.prototype.setDayProfile = function (dayProfile) {
      this.setUint8(CommandBinaryBuffer$1.getByteFromDayProfile(dayProfile));
    };
    CommandBinaryBuffer$1.prototype.getSeasonProfile = function () {
      var _this = this;
      return {
        month: this.getUint8(),
        date: this.getUint8(),
        dayIndexes: new Array(SEASON_PROFILE_DAYS_NUMBER).fill(0).map(function () {
          return _this.getUint8();
        })
      };
    };
    CommandBinaryBuffer$1.prototype.setSeasonProfile = function (seasonProfile) {
      var _this2 = this;
      this.setUint8(seasonProfile.month);
      this.setUint8(seasonProfile.date);
      seasonProfile.dayIndexes.forEach(function (value) {
        return _this2.setUint8(value);
      });
    };
    CommandBinaryBuffer$1.prototype.getSpecialDay = function () {
      return {
        month: this.getUint8(),
        date: this.getUint8(),
        dayIndex: this.getUint8(),
        isPeriodic: this.getUint8() === 0
      };
    };
    CommandBinaryBuffer$1.prototype.setSpecialDay = function (specialDay) {
      this.setUint8(specialDay.month);
      this.setUint8(specialDay.date);
      this.setUint8(specialDay.dayIndex);
      this.setUint8(+!specialDay.isPeriodic);
    };
    CommandBinaryBuffer$1.prototype.getDeviceType = function () {
      return fromBytes$27(this.getBytes(9));
    };
    CommandBinaryBuffer$1.prototype.setDeviceType = function (deviceType) {
      this.setBytes(toBytes$28(deviceType));
    };
    CommandBinaryBuffer$1.prototype.getOperatorParameters = function () {
      var operatorParameters = {
        vpThreshold: this.getUint32(),
        vThreshold: this.getUint32(),
        ipThreshold: this.getUint32(),
        pmaxThreshold0: this.getUint32(),
        pmaxThreshold1: this.getUint32(),
        pmaxThreshold2: this.getUint32(),
        pmaxThreshold3: this.getUint32(),
        speedOptoPort: this.getUint8(),
        tint: this.getUint8(),
        calcPeriodDate: this.getUint8(),
        timeoutDisplay: this.getUint8(),
        timeoutScreen: this.getUint8(),
        displaySet: toObject(displaySetMask, this.getUint32()),
        relaySet4: toObject(relaySet4Mask, this.getUint8()),
        relaySet3: toObject(relaySet3Mask, this.getUint8()),
        relaySet2: toObject(relaySet2Mask, this.getUint8()),
        relaySet1: toObject(relaySet1Mask, this.getUint8()),
        displayType: this.getUint8(),
        ten: this.getUint8(),
        timeoutRefresh: this.getUint16(),
        deltaCorMin: this.getUint8(),
        timeoutMagnetOff: this.getUint8(),
        timeoutMagnetOn: this.getUint8(),
        define1: toObject(define1Mask, this.getUint8()),
        timeoutRelayOn: this.getUint8(),
        timeoutRelayKey: this.getUint8(),
        timeoutRelayAuto: this.getUint8(),
        timeoutBadVAVB: this.getUint8(),
        freqMax: this.getUint8(),
        freqMin: this.getUint8(),
        phMin: this.getUint16(),
        year: this.getUint8(),
        month: this.getUint8(),
        date: this.getUint8(),
        energyDecimalPoint: this.getUint8(),
        typeMeter: this.getUint8(),
        timeoutIMax: this.getUint8(),
        timeoutPMax: this.getUint8(),
        timeoutCos: this.getUint8(),
        pMaxDef: this.getUint8(),
        displaySetExt: toObject(displaySetExtMask, this.getUint32()),
        timeoutUneqCurrent: this.getUint8(),
        timeoutBipolarPower: this.getUint8(),
        relaySet5: toObject(relaySet5Mask, this.getUint8()),
        timeCorrectPeriod: 0,
        timeCorrectPassHalfhour: false
      };
      var timeCorrectPeriod = this.getUint8();
      operatorParameters.timeCorrectPeriod = timeCorrectPeriod & 0x7f;
      operatorParameters.timeCorrectPassHalfhour = !!(timeCorrectPeriod & 0x80);
      return operatorParameters;
    };
    CommandBinaryBuffer$1.prototype.setOperatorParameters = function (operatorParameters) {
      var timeCorrectPeriod = operatorParameters.timeCorrectPeriod | (operatorParameters.timeCorrectPassHalfhour ? 0x80 : 0);
      this.setUint32(operatorParameters.vpThreshold);
      this.setUint32(operatorParameters.vThreshold);
      this.setUint32(operatorParameters.ipThreshold);
      this.setUint32(operatorParameters.pmaxThreshold0);
      this.setUint32(operatorParameters.pmaxThreshold1);
      this.setUint32(operatorParameters.pmaxThreshold2);
      this.setUint32(operatorParameters.pmaxThreshold3);
      this.setUint8(operatorParameters.speedOptoPort);
      this.setUint8(operatorParameters.tint);
      this.setUint8(operatorParameters.calcPeriodDate);
      this.setUint8(operatorParameters.timeoutDisplay);
      this.setUint8(operatorParameters.timeoutScreen);
      this.setUint32(fromObject(displaySetMask, operatorParameters.displaySet));
      this.setUint8(fromObject(relaySet4Mask, operatorParameters.relaySet4));
      this.setUint8(fromObject(relaySet3Mask, operatorParameters.relaySet3));
      this.setUint8(fromObject(relaySet2Mask, operatorParameters.relaySet2));
      this.setUint8(fromObject(relaySet1Mask, operatorParameters.relaySet1));
      this.setUint8(operatorParameters.displayType);
      this.setUint8(operatorParameters.ten);
      this.setUint16(operatorParameters.timeoutRefresh);
      this.setUint8(operatorParameters.deltaCorMin);
      this.setUint8(operatorParameters.timeoutMagnetOff);
      this.setUint8(operatorParameters.timeoutMagnetOn);
      this.setUint8(fromObject(define1Mask, operatorParameters.define1));
      this.setUint8(operatorParameters.timeoutRelayOn);
      this.setUint8(operatorParameters.timeoutRelayKey);
      this.setUint8(operatorParameters.timeoutRelayAuto);
      this.setUint8(operatorParameters.timeoutBadVAVB);
      this.setUint8(operatorParameters.freqMax);
      this.setUint8(operatorParameters.freqMin);
      this.setUint16(operatorParameters.phMin);
      this.setUint8(operatorParameters.year);
      this.setUint8(operatorParameters.month);
      this.setUint8(operatorParameters.date);
      this.setUint8(operatorParameters.energyDecimalPoint);
      this.setUint8(operatorParameters.typeMeter);
      this.setUint8(operatorParameters.timeoutIMax);
      this.setUint8(operatorParameters.timeoutPMax);
      this.setUint8(operatorParameters.timeoutCos);
      this.setUint8(operatorParameters.pMaxDef);
      this.setUint32(fromObject(displaySetExtMask, operatorParameters.displaySetExt));
      this.setUint8(operatorParameters.timeoutUneqCurrent);
      this.setUint8(operatorParameters.timeoutBipolarPower);
      this.setUint8(fromObject(relaySet5Mask, operatorParameters.relaySet5));
      this.setUint8(timeCorrectPeriod);
    };
    CommandBinaryBuffer$1.prototype.getPackedEnergyWithType = function () {
      var _byte2 = this.getUint8();
      var energyType = extractBits(_byte2, TARIFF_NUMBER$1, 1);
      var energies = getPackedEnergies(this, energyType, _byte2);
      return {
        energyType: energyType,
        energies: energies
      };
    };
    CommandBinaryBuffer$1.prototype.setPackedEnergyWithType = function (_ref4) {
      var _this3 = this;
      var energyType = _ref4.energyType,
        energies = _ref4.energies;
      if (energyType) {
        setPackedEnergyType(this, energyType, energies);
      }
      energies.forEach(function (energy) {
        if (energy !== null) {
          _this3.setUint32(energy);
        }
      });
    };
    CommandBinaryBuffer$1.prototype.getEnergies = function () {
      var _this4 = this;
      return new Array(TARIFF_NUMBER$1).fill(0).map(function () {
        return _this4.getInt32();
      });
    };
    CommandBinaryBuffer$1.prototype.setEnergies = function (energies) {
      var _this5 = this;
      energies.forEach(function (value) {
        return _this5.setUint32(value);
      });
    };
    CommandBinaryBuffer$1.prototype.getDate = function () {
      return {
        year: this.getUint8(),
        month: this.getUint8(),
        date: this.getUint8()
      };
    };
    CommandBinaryBuffer$1.prototype.setDate = function (date) {
      this.setUint8(date.year);
      this.setUint8(date.month);
      this.setUint8(date.date);
    };
    CommandBinaryBuffer$1.prototype.getSaldoParameters = function () {
      var _this6 = this;
      return {
        coefficients: new Array(4).fill(0).map(function () {
          return _this6.getUint32();
        }),
        decimalPointTariff: this.getUint8(),
        indicationThreshold: this.getInt32(),
        relayThreshold: this.getInt32(),
        mode: this.getUint8(),
        saldoOffTimeBegin: this.getUint8(),
        saldoOffTimeEnd: this.getUint8(),
        decimalPointIndication: this.getUint8(),
        powerThreshold: this.getUint32(),
        creditThreshold: this.getInt32()
      };
    };
    CommandBinaryBuffer$1.prototype.setSaldoParameters = function (saldoParameters) {
      var _this7 = this;
      saldoParameters.coefficients.forEach(function (value) {
        return _this7.setUint32(value);
      });
      this.setUint8(saldoParameters.decimalPointTariff);
      this.setInt32(saldoParameters.indicationThreshold);
      this.setInt32(saldoParameters.relayThreshold);
      this.setUint8(saldoParameters.mode);
      this.setUint8(saldoParameters.saldoOffTimeBegin);
      this.setUint8(saldoParameters.saldoOffTimeEnd);
      this.setUint8(saldoParameters.decimalPointIndication);
      this.setUint32(saldoParameters.powerThreshold);
      this.setInt32(saldoParameters.creditThreshold);
    };
    CommandBinaryBuffer$1.prototype.getEnergyPeriods = function (periodsNumber) {
      var _this8 = this;
      var periods = new Array(periodsNumber).fill(0).map(function () {
        return _this8.getUint16();
      });
      return periods.map(function (period) {
        return getEnergyPeriod(period);
      });
    };
    CommandBinaryBuffer$1.prototype.setEnergyPeriods = function (periods) {
      var _this9 = this;
      periods.forEach(function (period) {
        return setEnergyPeriod(_this9, period);
      });
    };
    CommandBinaryBuffer$1.prototype.getEventStatus = function () {
      var eventStatus = this.getUint16();
      return toObject(eventStatusMask, eventStatus);
    };
    CommandBinaryBuffer$1.prototype.setEventStatus = function (parameters) {
      this.setUint16(fromObject(eventStatusMask, parameters));
    };
    CommandBinaryBuffer$1.prototype.getExtendedCurrentValues2 = function () {
      var uBattery = this.getUint16();
      var relayStatus = toObject(extendedCurrentValues2RelayStatusMask, this.getUint8());
      var relayStatus2 = toObject(extendedCurrentValues2RelayStatus2Mask, this.getUint8());
      var status1 = toObject(extendedCurrentValues2Status1Mask, this.getUint8());
      var status2 = toObject(extendedCurrentValues2Status2Mask, this.getUint8());
      var status3 = toObject(extendedCurrentValues2Status3Mask, this.getUint8());
      return {
        uBattery: uBattery,
        relayStatus: relayStatus,
        relayStatus2: relayStatus2,
        status1: status1,
        status2: status2,
        status3: status3
      };
    };
    CommandBinaryBuffer$1.prototype.setExtendedCurrentValues2 = function (parameters) {
      var uBattery = parameters.uBattery,
        relayStatus = parameters.relayStatus,
        relayStatus2 = parameters.relayStatus2,
        status1 = parameters.status1,
        status2 = parameters.status2,
        status3 = parameters.status3;
      this.setUint16(uBattery);
      this.setUint8(fromObject(extendedCurrentValues2RelayStatusMask, relayStatus));
      this.setUint8(fromObject(extendedCurrentValues2RelayStatus2Mask, relayStatus2));
      this.setUint8(fromObject(extendedCurrentValues2Status1Mask, status1));
      this.setUint8(fromObject(extendedCurrentValues2Status2Mask, status2));
      this.setUint8(fromObject(extendedCurrentValues2Status3Mask, status3));
    };
    CommandBinaryBuffer$1.prototype.getEvent = function () {
      var data = {
        hours: this.getUint8(),
        minutes: this.getUint8(),
        seconds: this.getUint8(),
        event: this.getUint8()
      };
      var event = data.event;
      var bytesLeft = this.bytesLeft;
      data.eventName = eventNames[event];
      switch (event) {
        case POWER_OVER_RELAY_OFF:
          if (bytesLeft < 4) {
            return data;
          }
          data.power = [this.getUint8(), this.getUint8(), this.getUint8(), this.getUint8()];
          break;
        case CMD_CHANGE_TIME:
        case TIME_CORRECT$1:
          if (bytesLeft < 8) {
            return data;
          }
          data.newDate = this.getDateTime();
          break;
      }
      return data;
    };
    CommandBinaryBuffer$1.prototype.setEvent = function (event) {
      this.setUint8(event.hours);
      this.setUint8(event.minutes);
      this.setUint8(event.seconds);
      this.setUint8(event.event);
      switch (event.event) {
        case POWER_OVER_RELAY_OFF:
          var _iterator = _createForOfIteratorHelper(event.power),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var item = _step.value;
              this.setUint8(item);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          break;
        case CMD_CHANGE_TIME:
        case TIME_CORRECT$1:
          this.setDateTime(event.newDate);
          break;
      }
    };
    CommandBinaryBuffer$1.prototype.getDemand = function () {
      var date0 = this.getUint8();
      var date1 = this.getUint8();
      return {
        date: {
          year: date0 >> 1,
          month: date0 << 3 & 0x0f | date1 >> 5,
          date: date1 & 0x1f
        },
        energyType: this.getUint8(),
        firstIndex: this.getUint16(),
        count: this.getUint8(),
        period: this.getUint8()
      };
    };
    CommandBinaryBuffer$1.prototype.setDemand = function (parameters) {
      var date0 = parameters.date.year << 1 | parameters.date.month >> 3 & 0x01;
      var date1 = parameters.date.month << 5 & 0xe0 | parameters.date.date & 0x1f;
      this.setUint8(date0);
      this.setUint8(date1);
      this.setUint8(parameters.energyType);
      this.setUint16(parameters.firstIndex);
      this.setUint8(parameters.count);
      this.setUint8(parameters.period);
    };
    CommandBinaryBuffer$1.prototype.getDemandParameters = function () {
      var channelParam1 = this.getUint8();
      var counterInterval = this.getUint8();
      var channelParam2 = this.getUint8();
      return {
        channelParam1: channelParam1,
        counterInterval: counterInterval,
        channelParam2: channelParam2
      };
    };
    CommandBinaryBuffer$1.prototype.setDemandParameters = function (parameters) {
      this.setUint8(parameters.channelParam1);
      this.setUint8(parameters.counterInterval);
      this.setUint8(parameters.channelParam2);
      this.setUint8(0);
    };
    CommandBinaryBuffer$1.prototype.getDayMaxDemandResponse = function () {
      var _this0 = this;
      var date = this.getDate();
      var power = new Array(TARIFF_NUMBER$1).fill(0).map(function () {
        return {
          hours: _this0.getUint8(),
          minutes: _this0.getUint8(),
          power: _this0.getUint32()
        };
      });
      return {
        date: date,
        power: power
      };
    };
    CommandBinaryBuffer$1.prototype.setDayMaxDemandResponse = function (parameters) {
      var _this1 = this;
      this.setDate(parameters.date);
      parameters.power.forEach(function (value) {
        _this1.setUint8(value.hours);
        _this1.setUint8(value.minutes);
        _this1.setUint32(value.power);
      });
    };
    CommandBinaryBuffer$1.prototype.getOperatorParametersExtended3 = function () {
      return {
        pmaxMinusThreshold0: this.getUint32(),
        pmaxMinusThreshold1: this.getUint32(),
        pmaxMinusThreshold2: this.getUint32(),
        pmaxMinusThreshold3: this.getUint32(),
        relaySet: toObject(operatorParametersExtended3RelaySetMask, this.getUint8())
      };
    };
    CommandBinaryBuffer$1.prototype.setOperatorParametersExtended3 = function (parameters) {
      var pmaxMinusThreshold0 = parameters.pmaxMinusThreshold0,
        pmaxMinusThreshold1 = parameters.pmaxMinusThreshold1,
        pmaxMinusThreshold2 = parameters.pmaxMinusThreshold2,
        pmaxMinusThreshold3 = parameters.pmaxMinusThreshold3,
        relaySet = parameters.relaySet;
      this.setUint32(pmaxMinusThreshold0);
      this.setUint32(pmaxMinusThreshold1);
      this.setUint32(pmaxMinusThreshold2);
      this.setUint32(pmaxMinusThreshold3);
      this.setUint8(fromObject(operatorParametersExtended3RelaySetMask, relaySet));
    };
    CommandBinaryBuffer$1.prototype.getMonthMaxPowerByTariffs = function () {
      var _this10 = this;
      return new Array(TARIFF_NUMBER$1).fill(0).map(function () {
        return {
          date: _this10.getUint8(),
          hours: _this10.getUint8(),
          minutes: _this10.getUint8(),
          power: _this10.getUint32()
        };
      });
    };
    CommandBinaryBuffer$1.prototype.setMonthMaxPowerByTariffs = function (tariffs) {
      var _this11 = this;
      tariffs.forEach(function (tariff) {
        _this11.setUint8(tariff.date);
        _this11.setUint8(tariff.hours);
        _this11.setUint8(tariff.minutes);
        _this11.setUint32(tariff.power);
      });
    };
    var getPackedEnergiesWithDateSize = function getPackedEnergiesWithDateSize(parameters) {
      if (parameters !== null && parameters !== void 0 && parameters.energyType) {
        var energiesNumber = parameters.energies.filter(function (energy) {
          return energy !== null;
        }).length;
        return DATE_SIZE$3 + PACKED_ENERGY_TYPE_SIZE + energiesNumber * ENERGY_SIZE;
      }
      return DATE_SIZE$3 + ENERGY_SIZE * TARIFF_NUMBER$1;
    };

    var HEX = 1;

    var defaultFormatOptions = {
      bytesConversionFormat: HEX,
      bytesConversionFormatOptions: {}
    };

    _objectSpread2(_objectSpread2({}, defaultFormatOptions), {}, {
      dlms: false
    });
    var toBytes$27 = function toBytes(commandId) {
      var commandBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return [commandId, commandBytes.length].concat(_toConsumableArray(commandBytes));
    };

    var UNENCRYPTED = 0x00;
    var READ_ONLY = 0x03;

    var getEventStatus = 0x01;
    var getEnergyDayPrevious = 0x03;
    var getDeviceType = 0x04;
    var getDeviceId = 0x05;
    var getDateTime = 0x07;
    var setDateTime = 0x08;
    var setAccessKey = 0x09;
    var getCurrentValues = 0x0d;
    var getEnergy = 0x0f;
    var setDayProfile = 0x10;
    var setSeasonProfile = 0x11;
    var setSpecialDay = 0x12;
    var activateRatePlan = 0x13;
    var prepareRatePlan = 0x14;
    var getHalfHourDemand = 0x15;
    var getDayDemand = 0x16;
    var getMonthDemand = 0x17;
    var turnRelayOn = 0x18;
    var turnRelayOff = 0x19;
    var setCorrectTime = 0x1c;
    var getOperatorParameters = 0x1e;
    var setOperatorParameters = 0x1f;
    var getVersion = 0x28;
    var getSaldo = 0x29;
    var setSaldo = 0x2a;
    var getRatePlanInfo = 0x2c;
    var getExtendedCurrentValues2 = 0x2d;
    var getSaldoParameters = 0x2e;
    var setSaldoParameters = 0x2f;
    var getDayMaxDemand = 0x31;
    var getMonthMaxDemand = 0x32;
    var getEvents = 0x33;
    var getEventsCounters = 0x34;
    var resetPowerMaxDay = 0x35;
    var resetPowerMaxMonth = 0x36;
    var getCurrentStatusMeter = 0x39;
    var getExtendedCurrentValues = 0x3a;
    var getDayProfile = 0x3b;
    var getSeasonProfile = 0x3c;
    var getSpecialDay = 0x3d;
    var getCorrectTime = 0x3e;
    var getCriticalEvent = 0x41;
    var runTariffPlan = 0x46;
    var getDayMaxDemandPrevious = 0x4a;
    var getHalfHourDemandPrevious = 0x4b;
    var getDayDemandExport = 0x4f;
    var getEnergyExportDayPrevious = 0x50;
    var getMonthDemandExport = 0x52;
    var getHalfHourDemandExport = 0x53;
    var getDayMaxDemandExport = 0x58;
    var getMonthMaxDemandExport = 0x59;
    var getEnergyExport = 0x5b;
    var setCorrectDateTime = 0x5c;
    var setDisplayParam = 0x5d;
    var getDisplayParam = 0x5e;
    var setSpecialOperation = 0x64;
    var getMagneticFieldThreshold = 0x6d;
    var getHalfHourEnergies = 0x6f;
    var getBuildVersion = 0x70;
    var getOperatorParametersExtended3 = 0x71;
    var setOperatorParametersExtended3 = 0x72;
    var setDemandParameters = 0x74;
    var getDemandParameters = 0x75;
    var getDemand = 0x76;
    var getMeterInfo = 0x7a;

    var downlinkIds = /*#__PURE__*/Object.freeze({
        __proto__: null,
        activateRatePlan: activateRatePlan,
        getBuildVersion: getBuildVersion,
        getCorrectTime: getCorrectTime,
        getCriticalEvent: getCriticalEvent,
        getCurrentStatusMeter: getCurrentStatusMeter,
        getCurrentValues: getCurrentValues,
        getDateTime: getDateTime,
        getDayDemand: getDayDemand,
        getDayDemandExport: getDayDemandExport,
        getDayMaxDemand: getDayMaxDemand,
        getDayMaxDemandExport: getDayMaxDemandExport,
        getDayMaxDemandPrevious: getDayMaxDemandPrevious,
        getDayProfile: getDayProfile,
        getDemand: getDemand,
        getDemandParameters: getDemandParameters,
        getDeviceId: getDeviceId,
        getDeviceType: getDeviceType,
        getDisplayParam: getDisplayParam,
        getEnergy: getEnergy,
        getEnergyDayPrevious: getEnergyDayPrevious,
        getEnergyExport: getEnergyExport,
        getEnergyExportDayPrevious: getEnergyExportDayPrevious,
        getEventStatus: getEventStatus,
        getEvents: getEvents,
        getEventsCounters: getEventsCounters,
        getExtendedCurrentValues: getExtendedCurrentValues,
        getExtendedCurrentValues2: getExtendedCurrentValues2,
        getHalfHourDemand: getHalfHourDemand,
        getHalfHourDemandExport: getHalfHourDemandExport,
        getHalfHourDemandPrevious: getHalfHourDemandPrevious,
        getHalfHourEnergies: getHalfHourEnergies,
        getMagneticFieldThreshold: getMagneticFieldThreshold,
        getMeterInfo: getMeterInfo,
        getMonthDemand: getMonthDemand,
        getMonthDemandExport: getMonthDemandExport,
        getMonthMaxDemand: getMonthMaxDemand,
        getMonthMaxDemandExport: getMonthMaxDemandExport,
        getOperatorParameters: getOperatorParameters,
        getOperatorParametersExtended3: getOperatorParametersExtended3,
        getRatePlanInfo: getRatePlanInfo,
        getSaldo: getSaldo,
        getSaldoParameters: getSaldoParameters,
        getSeasonProfile: getSeasonProfile,
        getSpecialDay: getSpecialDay,
        getVersion: getVersion,
        prepareRatePlan: prepareRatePlan,
        resetPowerMaxDay: resetPowerMaxDay,
        resetPowerMaxMonth: resetPowerMaxMonth,
        runTariffPlan: runTariffPlan,
        setAccessKey: setAccessKey,
        setCorrectDateTime: setCorrectDateTime,
        setCorrectTime: setCorrectTime,
        setDateTime: setDateTime,
        setDayProfile: setDayProfile,
        setDemandParameters: setDemandParameters,
        setDisplayParam: setDisplayParam,
        setOperatorParameters: setOperatorParameters,
        setOperatorParametersExtended3: setOperatorParametersExtended3,
        setSaldo: setSaldo,
        setSaldoParameters: setSaldoParameters,
        setSeasonProfile: setSeasonProfile,
        setSpecialDay: setSpecialDay,
        setSpecialOperation: setSpecialOperation,
        turnRelayOff: turnRelayOff,
        turnRelayOn: turnRelayOn
    });

    var downlinkNames = invertObject(downlinkIds);

    var id$24 = activateRatePlan;
    var maxSize$1G = 1 + TARIFF_PLAN_SIZE;
    var fromBytes$26 = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        tariffTable: buffer.getUint8(),
        tariffPlan: buffer.getTariffPlan()
      };
    };
    var toBytes$26 = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1G);
      buffer.setUint8(parameters.tariffTable);
      buffer.setTariffPlan(parameters.tariffPlan);
      return toBytes$27(id$24, buffer.data);
    };

    var id$23 = getBuildVersion;
    var maxSize$1F = 0;
    var fromBytes$25 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1F) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$25 = function toBytes() {
      return toBytes$27(id$23);
    };

    var id$22 = getCorrectTime;
    var maxSize$1E = 0;
    var fromBytes$24 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1E) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$24 = function toBytes() {
      return toBytes$27(id$22);
    };

    var CASE_OPEN = 0;
    var MAGNETIC_ON = 1;
    var PARAMETERS_UPDATE_REMOTE = 2;
    var PARAMETERS_UPDATE_LOCAL = 3;
    var RESTART = 4;
    var ERROR_ACCESS = 5;
    var TIME_SET = 6;
    var TIME_CORRECT = 7;
    var DEVICE_FAILURE = 8;
    var CASE_TERMINAL_OPEN = 9;
    var CASE_MODULE_OPEN = 10;
    var TARIFF_TABLE_SET = 11;
    var TARIFF_TABLE_GET = 12;
    var PROTECTION_RESET_EM = 13;
    var PROTECTION_RESET_MAGNETIC = 14;

    var criticalEvents = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CASE_MODULE_OPEN: CASE_MODULE_OPEN,
        CASE_OPEN: CASE_OPEN,
        CASE_TERMINAL_OPEN: CASE_TERMINAL_OPEN,
        DEVICE_FAILURE: DEVICE_FAILURE,
        ERROR_ACCESS: ERROR_ACCESS,
        MAGNETIC_ON: MAGNETIC_ON,
        PARAMETERS_UPDATE_LOCAL: PARAMETERS_UPDATE_LOCAL,
        PARAMETERS_UPDATE_REMOTE: PARAMETERS_UPDATE_REMOTE,
        PROTECTION_RESET_EM: PROTECTION_RESET_EM,
        PROTECTION_RESET_MAGNETIC: PROTECTION_RESET_MAGNETIC,
        RESTART: RESTART,
        TARIFF_TABLE_GET: TARIFF_TABLE_GET,
        TARIFF_TABLE_SET: TARIFF_TABLE_SET,
        TIME_CORRECT: TIME_CORRECT,
        TIME_SET: TIME_SET
    });

    var criticalEventNames = invertObject(criticalEvents);

    var id$21 = getCriticalEvent;
    var maxSize$1D = 2;
    var fromBytes$23 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1D) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      var _bytes = _slicedToArray(bytes, 2),
        event = _bytes[0],
        index = _bytes[1];
      return {
        event: event,
        name: criticalEventNames[event],
        index: index
      };
    };
    var toBytes$23 = function toBytes(parameters) {
      return toBytes$27(id$21, [parameters.event, parameters.index]);
    };

    var id$20 = getCurrentStatusMeter;
    var maxSize$1C = 0;
    var fromBytes$22 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1C) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$22 = function toBytes() {
      return toBytes$27(id$20);
    };

    var id$1$ = getCurrentValues;
    var maxSize$1B = 0;
    var fromBytes$21 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1B) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$21 = function toBytes() {
      return toBytes$27(id$1$);
    };

    var id$1_ = getDateTime;
    var maxSize$1A = 0;
    var fromBytes$20 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1A) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$20 = function toBytes() {
      return toBytes$27(id$1_);
    };

    var MIN_COMMAND_SIZE$5 = 3;
    var MAX_COMMAND_SIZE$5 = 4;
    var id$1Z = getDayDemand;
    var fromBytes$1$ = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      if (bytes.length === MAX_COMMAND_SIZE$5) {
        return {
          date: buffer.getDate(),
          energyType: buffer.getUint8()
        };
      }
      return {
        date: buffer.getDate()
      };
    };
    var toBytes$1$ = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(parameters !== null && parameters !== void 0 && parameters.energyType ? MAX_COMMAND_SIZE$5 : MIN_COMMAND_SIZE$5);
      buffer.setDate(parameters === null || parameters === void 0 ? void 0 : parameters.date);
      if (parameters !== null && parameters !== void 0 && parameters.energyType) {
        buffer.setUint8(parameters.energyType);
      }
      return toBytes$27(id$1Z, buffer.data);
    };

    var MIN_COMMAND_SIZE$4 = 3;
    var MAX_COMMAND_SIZE$4 = 4;
    var id$1Y = getDayDemandExport;
    var fromBytes$1_ = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      if (bytes.length === MAX_COMMAND_SIZE$4) {
        return {
          date: buffer.getDate(),
          energyType: buffer.getUint8()
        };
      }
      return {
        date: buffer.getDate()
      };
    };
    var toBytes$1_ = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(parameters !== null && parameters !== void 0 && parameters.energyType ? MAX_COMMAND_SIZE$4 : MIN_COMMAND_SIZE$4);
      buffer.setDate(parameters === null || parameters === void 0 ? void 0 : parameters.date);
      if (parameters !== null && parameters !== void 0 && parameters.energyType) {
        buffer.setUint8(parameters.energyType);
      }
      return toBytes$27(id$1Y, buffer.data);
    };

    var id$1X = getDayMaxDemand;
    var maxSize$1z = 3;
    var fromBytes$1Z = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        date: buffer.getDate()
      };
    };
    var toBytes$1Z = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1z);
      buffer.setDate(parameters.date);
      return toBytes$27(id$1X, buffer.data);
    };

    var id$1W = getDayMaxDemandExport;
    var maxSize$1y = 3;
    var fromBytes$1Y = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        date: buffer.getDate()
      };
    };
    var toBytes$1Y = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1y);
      buffer.setDate(parameters.date);
      return toBytes$27(id$1W, buffer.data);
    };

    var id$1V = getDayMaxDemandPrevious;
    var maxSize$1x = 0;
    var fromBytes$1X = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1x) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1X = function toBytes() {
      return toBytes$27(id$1V);
    };

    var id$1U = getDayProfile;
    var maxSize$1w = 3;
    var fromBytes$1W = function fromBytes(_ref) {
      var _ref2 = _slicedToArray(_ref, 3),
        tariffTable = _ref2[0],
        index = _ref2[1],
        isActive = _ref2[2];
      return {
        tariffTable: tariffTable,
        index: index,
        isActive: isActive === 0
      };
    };
    var toBytes$1W = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1w);
      buffer.setUint8(parameters.tariffTable);
      buffer.setUint8(parameters.index);
      buffer.setUint8(parameters.isActive ? 0 : 1);
      return toBytes$27(id$1U, buffer.data);
    };

    var A_PLUS = 0x01;
    var A_MINUS = 0x02;

    var id$1T = getDemand;
    var maxSize$1v = 7;
    var fromBytes$1V = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getDemand();
    };
    var toBytes$1V = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1v);
      buffer.setDemand(parameters);
      return toBytes$27(id$1T, buffer.data);
    };

    var validateCommandPayload = (function (commandName, bytes, expectedLength) {
      if (!commandName) {
        throw new Error('Command name is required.');
      }
      if (bytes && !Array.isArray(bytes)) {
        throw new Error("Invalid payload for ".concat(commandName, ". Expected array, got: ").concat(_typeof(bytes), "."));
      }
      if (bytes.length !== expectedLength) {
        var hex = getHexFromBytes(bytes, {
          separator: ''
        });
        throw new Error("Wrong buffer size for ".concat(commandName, ": ").concat(bytes.length, ". Expected: ").concat(expectedLength, ". Payload: 0x").concat(hex, "."));
      }
    });

    var id$1S = getDemandParameters;
    var name$3 = downlinkNames[getDemandParameters];
    var maxSize$1u = 0;
    var fromBytes$1U = function fromBytes(bytes) {
      validateCommandPayload(name$3, bytes, maxSize$1u);
      return {};
    };
    var toBytes$1U = function toBytes() {
      return toBytes$27(id$1S);
    };

    var id$1R = getDeviceId;
    var maxSize$1t = 0;
    var fromBytes$1T = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1t) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1T = function toBytes() {
      return toBytes$27(id$1R);
    };

    var id$1Q = getDeviceType;
    var maxSize$1s = 0;
    var fromBytes$1S = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1s) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1S = function toBytes() {
      return toBytes$27(id$1Q);
    };

    var OK = 0;
    var UNKNOWN_COMMAND = 0x80;
    var NOT_ALIGNED_DATA = 0x81;
    var DECRYPTION_FAILURE = 0x82;
    var UNKNOWN_PROTOCOL = 0x83;
    var BAD_MESSAGE = 0x84;
    var BAD_DATA_LENGTH = 0x85;
    var BAD_ARRAY_INDEX = 0x86;
    var NOT_PREPARED_RATE_PLAN = 0x87;
    var BAD_RATE_PLAN_ID = 0x88;
    var BAD_RATE_PLAN_SIZE = 0x89;
    var BAD_RESPONSE_LENGTH = 0x90;
    var NO_DATA_FOR_DATE = 0x91;
    var CALIBRATION_DISABLED = 0x92;
    var ACCESS_DENIED = 0x93;
    var BAD_SALDO_WRITE = 0x95;
    var BLOCKED_METER = 0x97;
    var UNENCRYPTED_COMMAND_DISABLED = 0x98;
    var TIME_CORRECTION_FAILURE = 0x99;
    var INVALID_CORRECTION_INTERVAL = 0x9a;
    var TIME_CORRECTION_OUT_HALF_HOUR_DISABLED = 0x9b;
    var BAD_BLOCK_NUMBER = 0x9c;
    var OUT_OFF_RANGE = 0x9f;
    var SET_METER_TYPE_FAILURE = 0xa0;
    var INTERNAL = 0xf0;

    var resultCodes = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ACCESS_DENIED: ACCESS_DENIED,
        BAD_ARRAY_INDEX: BAD_ARRAY_INDEX,
        BAD_BLOCK_NUMBER: BAD_BLOCK_NUMBER,
        BAD_DATA_LENGTH: BAD_DATA_LENGTH,
        BAD_MESSAGE: BAD_MESSAGE,
        BAD_RATE_PLAN_ID: BAD_RATE_PLAN_ID,
        BAD_RATE_PLAN_SIZE: BAD_RATE_PLAN_SIZE,
        BAD_RESPONSE_LENGTH: BAD_RESPONSE_LENGTH,
        BAD_SALDO_WRITE: BAD_SALDO_WRITE,
        BLOCKED_METER: BLOCKED_METER,
        CALIBRATION_DISABLED: CALIBRATION_DISABLED,
        DECRYPTION_FAILURE: DECRYPTION_FAILURE,
        INTERNAL: INTERNAL,
        INVALID_CORRECTION_INTERVAL: INVALID_CORRECTION_INTERVAL,
        NOT_ALIGNED_DATA: NOT_ALIGNED_DATA,
        NOT_PREPARED_RATE_PLAN: NOT_PREPARED_RATE_PLAN,
        NO_DATA_FOR_DATE: NO_DATA_FOR_DATE,
        OK: OK,
        OUT_OFF_RANGE: OUT_OFF_RANGE,
        SET_METER_TYPE_FAILURE: SET_METER_TYPE_FAILURE,
        TIME_CORRECTION_FAILURE: TIME_CORRECTION_FAILURE,
        TIME_CORRECTION_OUT_HALF_HOUR_DISABLED: TIME_CORRECTION_OUT_HALF_HOUR_DISABLED,
        UNENCRYPTED_COMMAND_DISABLED: UNENCRYPTED_COMMAND_DISABLED,
        UNKNOWN_COMMAND: UNKNOWN_COMMAND,
        UNKNOWN_PROTOCOL: UNKNOWN_PROTOCOL
    });

    var resultNames = invertObject(resultCodes);

    var SET_ALL_SEGMENT_DISPLAY = 1;
    var SOFTWARE_VERSION = 2;
    var TOTAL_ACTIVE_ENERGY = 3;
    var ACTIVE_ENERGY_T1 = 4;
    var ACTIVE_ENERGY_T2 = 5;
    var ACTIVE_ENERGY_T3 = 6;
    var ACTIVE_ENERGY_T4 = 7;
    var ACTIVE_POWER_PER_PHASE = 8;
    var ACTIVE_POWER_IN_NEUTRAL = 9;
    var CURRENT_IN_PHASE = 10;
    var CURRENT_IN_NEUTRAL = 11;
    var VOLTAGE = 12;
    var HOUR_MINUTE_SECOND = 13;
    var DATE_MONTH_YEAR = 14;
    var TOTAL_EXPORTED_ACTIVE_ENERGY = 15;
    var EXPORTED_ACTIVE_ENERGY_T1 = 16;
    var EXPORTED_ACTIVE_ENERGY_T2 = 17;
    var EXPORTED_ACTIVE_ENERGY_T3 = 18;
    var EXPORTED_ACTIVE_ENERGY_T4 = 19;
    var POWER_FACTOR_PHASE_A = 20;
    var POWER_FACTOR_PHASE_B = 21;
    var BATTERY_VOLTAGE = 22;
    var POWER_THRESHOLD_T1 = 23;
    var POWER_THRESHOLD_T2 = 24;
    var POWER_THRESHOLD_T3 = 25;
    var POWER_THRESHOLD_T4 = 26;
    var MAGNET_INDUCTION = 28;
    var CURRENT_BALANCE = 30;
    var OPTOPORT_SPEED = 31;

    var screenIds = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ACTIVE_ENERGY_T1: ACTIVE_ENERGY_T1,
        ACTIVE_ENERGY_T2: ACTIVE_ENERGY_T2,
        ACTIVE_ENERGY_T3: ACTIVE_ENERGY_T3,
        ACTIVE_ENERGY_T4: ACTIVE_ENERGY_T4,
        ACTIVE_POWER_IN_NEUTRAL: ACTIVE_POWER_IN_NEUTRAL,
        ACTIVE_POWER_PER_PHASE: ACTIVE_POWER_PER_PHASE,
        BATTERY_VOLTAGE: BATTERY_VOLTAGE,
        CURRENT_BALANCE: CURRENT_BALANCE,
        CURRENT_IN_NEUTRAL: CURRENT_IN_NEUTRAL,
        CURRENT_IN_PHASE: CURRENT_IN_PHASE,
        DATE_MONTH_YEAR: DATE_MONTH_YEAR,
        EXPORTED_ACTIVE_ENERGY_T1: EXPORTED_ACTIVE_ENERGY_T1,
        EXPORTED_ACTIVE_ENERGY_T2: EXPORTED_ACTIVE_ENERGY_T2,
        EXPORTED_ACTIVE_ENERGY_T3: EXPORTED_ACTIVE_ENERGY_T3,
        EXPORTED_ACTIVE_ENERGY_T4: EXPORTED_ACTIVE_ENERGY_T4,
        HOUR_MINUTE_SECOND: HOUR_MINUTE_SECOND,
        MAGNET_INDUCTION: MAGNET_INDUCTION,
        OPTOPORT_SPEED: OPTOPORT_SPEED,
        POWER_FACTOR_PHASE_A: POWER_FACTOR_PHASE_A,
        POWER_FACTOR_PHASE_B: POWER_FACTOR_PHASE_B,
        POWER_THRESHOLD_T1: POWER_THRESHOLD_T1,
        POWER_THRESHOLD_T2: POWER_THRESHOLD_T2,
        POWER_THRESHOLD_T3: POWER_THRESHOLD_T3,
        POWER_THRESHOLD_T4: POWER_THRESHOLD_T4,
        SET_ALL_SEGMENT_DISPLAY: SET_ALL_SEGMENT_DISPLAY,
        SOFTWARE_VERSION: SOFTWARE_VERSION,
        TOTAL_ACTIVE_ENERGY: TOTAL_ACTIVE_ENERGY,
        TOTAL_EXPORTED_ACTIVE_ENERGY: TOTAL_EXPORTED_ACTIVE_ENERGY,
        VOLTAGE: VOLTAGE
    });

    invertObject(screenIds);

    var getDayEnergies = 0x78;
    var getDayMaxPower = 0x79;
    var errorResponse = 0xfe;

    var uplinkIds = /*#__PURE__*/Object.freeze({
        __proto__: null,
        activateRatePlan: activateRatePlan,
        errorResponse: errorResponse,
        getBuildVersion: getBuildVersion,
        getCorrectTime: getCorrectTime,
        getCriticalEvent: getCriticalEvent,
        getCurrentStatusMeter: getCurrentStatusMeter,
        getCurrentValues: getCurrentValues,
        getDateTime: getDateTime,
        getDayDemand: getDayDemand,
        getDayDemandExport: getDayDemandExport,
        getDayEnergies: getDayEnergies,
        getDayMaxDemand: getDayMaxDemand,
        getDayMaxDemandExport: getDayMaxDemandExport,
        getDayMaxDemandPrevious: getDayMaxDemandPrevious,
        getDayMaxPower: getDayMaxPower,
        getDayProfile: getDayProfile,
        getDemand: getDemand,
        getDemandParameters: getDemandParameters,
        getDeviceId: getDeviceId,
        getDeviceType: getDeviceType,
        getDisplayParam: getDisplayParam,
        getEnergy: getEnergy,
        getEnergyDayPrevious: getEnergyDayPrevious,
        getEnergyExport: getEnergyExport,
        getEnergyExportDayPrevious: getEnergyExportDayPrevious,
        getEventStatus: getEventStatus,
        getEvents: getEvents,
        getEventsCounters: getEventsCounters,
        getExtendedCurrentValues: getExtendedCurrentValues,
        getExtendedCurrentValues2: getExtendedCurrentValues2,
        getHalfHourDemand: getHalfHourDemand,
        getHalfHourDemandExport: getHalfHourDemandExport,
        getHalfHourDemandPrevious: getHalfHourDemandPrevious,
        getHalfHourEnergies: getHalfHourEnergies,
        getMagneticFieldThreshold: getMagneticFieldThreshold,
        getMeterInfo: getMeterInfo,
        getMonthDemand: getMonthDemand,
        getMonthDemandExport: getMonthDemandExport,
        getMonthMaxDemand: getMonthMaxDemand,
        getMonthMaxDemandExport: getMonthMaxDemandExport,
        getOperatorParameters: getOperatorParameters,
        getOperatorParametersExtended3: getOperatorParametersExtended3,
        getRatePlanInfo: getRatePlanInfo,
        getSaldo: getSaldo,
        getSaldoParameters: getSaldoParameters,
        getSeasonProfile: getSeasonProfile,
        getSpecialDay: getSpecialDay,
        getVersion: getVersion,
        prepareRatePlan: prepareRatePlan,
        resetPowerMaxDay: resetPowerMaxDay,
        resetPowerMaxMonth: resetPowerMaxMonth,
        runTariffPlan: runTariffPlan,
        setAccessKey: setAccessKey,
        setCorrectDateTime: setCorrectDateTime,
        setCorrectTime: setCorrectTime,
        setDateTime: setDateTime,
        setDayProfile: setDayProfile,
        setDemandParameters: setDemandParameters,
        setDisplayParam: setDisplayParam,
        setOperatorParameters: setOperatorParameters,
        setOperatorParametersExtended3: setOperatorParametersExtended3,
        setSaldo: setSaldo,
        setSaldoParameters: setSaldoParameters,
        setSeasonProfile: setSeasonProfile,
        setSpecialDay: setSpecialDay,
        setSpecialOperation: setSpecialOperation,
        turnRelayOff: turnRelayOff,
        turnRelayOn: turnRelayOn
    });

    var uplinkNames = invertObject(uplinkIds);

    var id$1P = getDisplayParam;
    var maxSize$1r = 1;
    var fromBytes$1R = function fromBytes(_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
        displayMode = _ref2[0];
      return {
        displayMode: displayMode
      };
    };
    var toBytes$1R = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1r);
      buffer.setUint8(parameters.displayMode);
      return toBytes$27(id$1P, buffer.data);
    };

    var MIN_COMMAND_SIZE$3 = 0;
    var MAX_COMMAND_SIZE$3 = 1;
    var id$1O = getEnergy;
    var fromBytes$1Q = function fromBytes(bytes) {
      if (bytes.length === MAX_COMMAND_SIZE$3) {
        return {
          energyType: bytes[0]
        };
      }
      return {};
    };
    var toBytes$1Q = function toBytes() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var buffer = new CommandBinaryBuffer$1(parameters !== null && parameters !== void 0 && parameters.energyType ? MAX_COMMAND_SIZE$3 : MIN_COMMAND_SIZE$3);
      if (parameters !== null && parameters !== void 0 && parameters.energyType) {
        buffer.setUint8(parameters.energyType);
      }
      return toBytes$27(id$1O, buffer.data);
    };

    var MIN_COMMAND_SIZE$2 = 0;
    var MAX_COMMAND_SIZE$2 = 1;
    var id$1N = getEnergyDayPrevious;
    var fromBytes$1P = function fromBytes(bytes) {
      var length = bytes.length;
      if (length !== MAX_COMMAND_SIZE$2 && length !== MIN_COMMAND_SIZE$2) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      if (length === MAX_COMMAND_SIZE$2) {
        return {
          energyType: bytes[0]
        };
      }
      return {};
    };
    var toBytes$1P = function toBytes(parameters) {
      if (parameters.energyType) {
        return toBytes$27(id$1N, [parameters.energyType]);
      }
      return toBytes$27(id$1N);
    };

    var MIN_COMMAND_SIZE$1 = 0;
    var MAX_COMMAND_SIZE$1 = 1;
    var id$1M = getEnergyExport;
    var fromBytes$1O = function fromBytes(bytes) {
      if (bytes.length === MAX_COMMAND_SIZE$1) {
        return {
          energyType: bytes[0]
        };
      }
      return {};
    };
    var toBytes$1O = function toBytes() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var buffer = new CommandBinaryBuffer$1(parameters !== null && parameters !== void 0 && parameters.energyType ? MAX_COMMAND_SIZE$1 : MIN_COMMAND_SIZE$1);
      if (parameters !== null && parameters !== void 0 && parameters.energyType) {
        buffer.setUint8(parameters.energyType);
      }
      return toBytes$27(id$1M, buffer.data);
    };

    var MIN_COMMAND_SIZE = 0;
    var MAX_COMMAND_SIZE = 1;
    var id$1L = getEnergyExportDayPrevious;
    var fromBytes$1N = function fromBytes(bytes) {
      var length = bytes.length;
      if (length !== MAX_COMMAND_SIZE && length !== MIN_COMMAND_SIZE) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      if (length === MAX_COMMAND_SIZE) {
        return {
          energyType: bytes[0]
        };
      }
      return {};
    };
    var toBytes$1N = function toBytes(parameters) {
      if (parameters.energyType) {
        return toBytes$27(id$1L, [parameters.energyType]);
      }
      return toBytes$27(id$1L);
    };

    var id$1K = getEvents;
    var maxSize$1q = 4;
    var fromBytes$1M = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1q) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      var buffer = new CommandBinaryBuffer$1(bytes);
      var date = buffer.getDate();
      var offset = buffer.getUint8();
      return {
        date: date,
        offset: offset
      };
    };
    var toBytes$1M = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1q);
      buffer.setDate(parameters.date);
      buffer.setUint8(parameters.offset);
      return toBytes$27(id$1K, buffer.data);
    };

    var id$1J = getEventsCounters;
    var maxSize$1p = 0;
    var fromBytes$1L = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1p) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1L = function toBytes() {
      return toBytes$27(id$1J);
    };

    var id$1I = getEventStatus;
    var maxSize$1o = 0;
    var fromBytes$1K = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1o) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1K = function toBytes() {
      return toBytes$27(id$1I);
    };

    var id$1H = getExtendedCurrentValues;
    var maxSize$1n = 0;
    var fromBytes$1J = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1n) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1J = function toBytes() {
      return toBytes$27(id$1H);
    };

    var id$1G = getExtendedCurrentValues2;
    var maxSize$1m = 0;
    var fromBytes$1I = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1m) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1I = function toBytes() {
      return toBytes$27(id$1G);
    };

    var id$1F = getHalfHourDemand;
    var maxSize$1l = 3;
    var fromBytes$1H = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        date: buffer.getDate()
      };
    };
    var toBytes$1H = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1l);
      buffer.setDate(parameters.date);
      return toBytes$27(id$1F, buffer.data);
    };

    var id$1E = getHalfHourDemandExport;
    var maxSize$1k = 3;
    var fromBytes$1G = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        date: buffer.getDate()
      };
    };
    var toBytes$1G = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1k);
      buffer.setDate(parameters.date);
      return toBytes$27(id$1E, buffer.data);
    };

    var id$1D = getHalfHourDemandPrevious;
    var maxSize$1j = 0;
    var fromBytes$1F = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1j) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1F = function toBytes() {
      return toBytes$27(id$1D);
    };

    var TARIFF_NUMBER = 4;
    var ENERGY_NAMES = ['A+', 'A+R+', 'A+R-', 'A-', 'A-R+', 'A-R-'];
    var UNDEFINED_ENERGY_VALUE = 0xffffffff;
    var energiesMask = {
      'A+': 0x01,
      'A+R+': 0x02,
      'A+R-': 0x04,
      'A-': 0x08,
      'A-R+': 0x10,
      'A-R-': 0x20
    };
    var getEnergiesFlags = function getEnergiesFlags(energies) {
      var booleanObject = {};
      Object.keys(energies).forEach(function (name) {
        booleanObject[name] = !!energies[name];
      });
      return fromObject(energiesMask, booleanObject);
    };
    var getAPlusTariffBit = function getAPlusTariffBit(tariff) {
      return tariff < TARIFF_NUMBER ? 1 << tariff : 0;
    };
    var getAMinusTariffBit = function getAMinusTariffBit(tariff) {
      return tariff < TARIFF_NUMBER ? 1 << tariff << 4 : 0;
    };
    var getTariffEnergiesFlag = function getTariffEnergiesFlag(tariff, energies) {
      var flag = 0;
      if (tariff < TARIFF_NUMBER) {
        if (energies['A+'] || energies['A+R+'] || energies['A+R-']) {
          flag |= getAPlusTariffBit(tariff);
        }
        if (energies['A-'] || energies['A-R+'] || energies['A-R-']) {
          flag |= getAMinusTariffBit(tariff);
        }
      }
      return flag;
    };
    function CommandBinaryBuffer(dataOrLength) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      BinaryBuffer.call(this, dataOrLength, isLittleEndian);
    }
    CommandBinaryBuffer.prototype = Object.create(BinaryBuffer.prototype);
    CommandBinaryBuffer.prototype.constructor = CommandBinaryBuffer;
    CommandBinaryBuffer.prototype.getDate = function () {
      var date0 = this.getUint8();
      var date1 = this.getUint8();
      return {
        year: date0 >> 1,
        month: date0 << 3 & 0x0f | date1 >> 5,
        date: date1 & 0x1f
      };
    };
    CommandBinaryBuffer.prototype.setDate = function (_ref) {
      var year = _ref.year,
        month = _ref.month,
        date = _ref.date;
      var date0 = year << 1 | month >> 3 & 0x01;
      var date1 = month << 5 & 0xe0 | date & 0x1f;
      this.setUint8(date0);
      this.setUint8(date1);
    };
    CommandBinaryBuffer.prototype.getEnergiesFlags = function () {
      var _byte = this.getUint8();
      return toObject(energiesMask, _byte);
    };
    CommandBinaryBuffer.prototype.setEnergiesFlags = function (energies) {
      this.setUint8(getEnergiesFlags(energies));
    };
    CommandBinaryBuffer.prototype.getHalfHourEnergy1 = function (halfhoursNumber) {
      var halfhours = [];
      for (var index = 0; index < halfhoursNumber; index++) {
        var value = this.getUint16();
        var tariff = value >> 14 & 3;
        var energy = value & 16383;
        halfhours.push(value === UNDEFINED_ENERGY_VALUE ? undefined : {
          tariff: tariff,
          energy: energy
        });
      }
      return halfhours;
    };
    CommandBinaryBuffer.prototype.setHalfHourEnergy1 = function (halfhours) {
      if (halfhours) {
        for (var index = 0; index < halfhours.length; index++) {
          var _halfhours$index = halfhours[index],
            tariff = _halfhours$index.tariff,
            energy = _halfhours$index.energy;
          var value = tariff << 14 | energy;
          this.setUint16(value === undefined ? UNDEFINED_ENERGY_VALUE : value);
        }
      }
    };
    CommandBinaryBuffer.prototype.getHalfHourEnergy3 = function (halfhoursNumber) {
      var halfhours = [];
      for (var index = 0; index < halfhoursNumber; index++) {
        var value = this.getUint16();
        halfhours.push(value === UNDEFINED_ENERGY_VALUE ? undefined : value);
      }
      return halfhours;
    };
    CommandBinaryBuffer.prototype.setHalfHourEnergy3 = function (halfhours) {
      if (halfhours) {
        for (var index = 0; index < halfhours.length; index++) {
          var value = halfhours[index];
          this.setUint16(value === undefined ? UNDEFINED_ENERGY_VALUE : value);
        }
      }
    };
    CommandBinaryBuffer.prototype.getHalfHourEnergies1 = function (energiesFlags, halfhoursNumber) {
      var _this = this;
      var energies = {};
      ENERGY_NAMES.forEach(function (energyName) {
        if (energiesFlags[energyName]) {
          energies[energyName] = _this.getHalfHourEnergy1(halfhoursNumber);
        }
      });
      return energies;
    };
    CommandBinaryBuffer.prototype.getHalfHourEnergies3 = function (energiesFlags, halfhoursNumber) {
      var _this2 = this;
      var energies = {};
      ENERGY_NAMES.forEach(function (energyName) {
        if (energiesFlags[energyName]) {
          energies[energyName] = _this2.getHalfHourEnergy3(halfhoursNumber);
        }
      });
      return energies;
    };
    CommandBinaryBuffer.prototype.setHalfHourEnergies1 = function (energies) {
      var _this3 = this;
      ENERGY_NAMES.forEach(function (energyName) {
        _this3.setHalfHourEnergy1(energies[energyName]);
      });
    };
    CommandBinaryBuffer.prototype.setHalfHourEnergies3 = function (energies) {
      var _this4 = this;
      ENERGY_NAMES.forEach(function (energyName) {
        _this4.setHalfHourEnergy3(energies[energyName]);
      });
    };
    CommandBinaryBuffer.prototype.getAPlusTariffEnergies = function (energyFlags) {
      var energies = {};
      if (energyFlags & energiesMask['A+']) {
        energies['A+'] = this.getUint32();
      }
      if (energyFlags & energiesMask['A+R+']) {
        energies['A+R+'] = this.getUint32();
      }
      if (energyFlags & energiesMask['A+R-']) {
        energies['A+R-'] = this.getUint32();
      }
      return energies;
    };
    CommandBinaryBuffer.prototype.setAPlusTariffEnergies = function (energies) {
      if (energies) {
        if (energies['A+']) {
          this.setUint32(energies['A+']);
        }
        if (energies['A+R+']) {
          this.setUint32(energies['A+R+']);
        }
        if (energies['A+R-']) {
          this.setUint32(energies['A+R-']);
        }
      }
    };
    CommandBinaryBuffer.prototype.getAMinusTariffEnergies = function (energyFlags) {
      var energies = {};
      if (energyFlags & energiesMask['A-']) {
        energies['A-'] = this.getUint32();
      }
      if (energyFlags & energiesMask['A-R+']) {
        energies['A-R+'] = this.getUint32();
      }
      if (energyFlags & energiesMask['A-R-']) {
        energies['A-R-'] = this.getUint32();
      }
      return energies;
    };
    CommandBinaryBuffer.prototype.setAMinusTariffEnergies = function (energies) {
      if (energies) {
        if (energies['A-']) {
          this.setUint32(energies['A-']);
        }
        if (energies['A-R+']) {
          this.setUint32(energies['A-R+']);
        }
        if (energies['A-R-']) {
          this.setUint32(energies['A-R-']);
        }
      }
    };
    CommandBinaryBuffer.prototype.getTariffsEnergies = function () {
      var energyFlags = this.getUint8();
      var tariffFlags = this.getUint8();
      var tariffs = new Array(TARIFF_NUMBER).fill(null);
      for (var index = 0; index < TARIFF_NUMBER; index++) {
        if (tariffFlags & getAPlusTariffBit(index)) {
          tariffs[index] = this.getAPlusTariffEnergies(energyFlags);
        }
      }
      for (var _index = 0; _index < TARIFF_NUMBER; _index++) {
        if (tariffFlags & getAMinusTariffBit(_index)) {
          tariffs[_index] = _objectSpread2(_objectSpread2({}, tariffs[_index]), this.getAMinusTariffEnergies(energyFlags));
        }
      }
      return tariffs;
    };
    CommandBinaryBuffer.prototype.setTariffsEnergies = function (tariffs) {
      var _this5 = this;
      var energiesFlags = 0;
      var tariffsFlags = 0;
      tariffs.forEach(function (tariff, index) {
        if (tariff) {
          energiesFlags |= getEnergiesFlags(tariff);
          tariffsFlags |= getTariffEnergiesFlag(index, tariff);
        }
      });
      this.setUint8(energiesFlags);
      this.setUint8(tariffsFlags);
      tariffs.forEach(function (tariff) {
        return _this5.setAPlusTariffEnergies(tariff);
      });
      tariffs.forEach(function (tariff) {
        return _this5.setAMinusTariffEnergies(tariff);
      });
    };
    CommandBinaryBuffer.prototype.getPowerMax = function () {
      return {
        hours: this.getUint8(),
        minutes: this.getUint8(),
        power: this.getUint32()
      };
    };
    CommandBinaryBuffer.prototype.setPowerMax = function (value) {
      if (value) {
        var hours = value.hours,
          minutes = value.minutes,
          power = value.power;
        this.setUint8(hours);
        this.setUint8(minutes);
        this.setUint32(power);
      }
    };
    CommandBinaryBuffer.prototype.getAPlusTariffPowerMax = function (energyFlags) {
      var energies = {};
      if (energyFlags & energiesMask['A+']) {
        energies['A+'] = this.getPowerMax();
      }
      if (energyFlags & energiesMask['A+R+']) {
        energies['A+R+'] = this.getPowerMax();
      }
      if (energyFlags & energiesMask['A+R-']) {
        energies['A+R-'] = this.getPowerMax();
      }
      return energies;
    };
    CommandBinaryBuffer.prototype.setAPlusTariffPowerMax = function (energies) {
      if (energies) {
        this.setPowerMax(energies['A+']);
        this.setPowerMax(energies['A+R+']);
        this.setPowerMax(energies['A+R+']);
      }
    };
    CommandBinaryBuffer.prototype.getAMinusTariffPowerMax = function (energyFlags) {
      var energies = {};
      if (energyFlags & energiesMask['A-']) {
        energies['A-'] = this.getPowerMax();
      }
      if (energyFlags & energiesMask['A-R+']) {
        energies['A-R+'] = this.getPowerMax();
      }
      if (energyFlags & energiesMask['A-R-']) {
        energies['A-R-'] = this.getPowerMax();
      }
      return energies;
    };
    CommandBinaryBuffer.prototype.setAMinusTariffPowerMax = function (energies) {
      if (energies) {
        this.setPowerMax(energies['A-']);
        this.setPowerMax(energies['A-R+']);
        this.setPowerMax(energies['A-R-']);
      }
    };
    CommandBinaryBuffer.prototype.getTariffsPowerMax = function () {
      var energyFlags = this.getUint8();
      var tariffFlags = this.getUint8();
      var tariffs = new Array(TARIFF_NUMBER).fill(null);
      for (var index = 0; index < TARIFF_NUMBER; index++) {
        if (tariffFlags & getAPlusTariffBit(index)) {
          tariffs[index] = this.getAPlusTariffPowerMax(energyFlags);
        }
      }
      for (var _index2 = 0; _index2 < TARIFF_NUMBER; _index2++) {
        if (tariffFlags & getAMinusTariffBit(_index2)) {
          tariffs[_index2] = _objectSpread2(_objectSpread2({}, tariffs[_index2]), this.getAMinusTariffPowerMax(energyFlags));
        }
      }
      return tariffs;
    };
    CommandBinaryBuffer.prototype.setTariffsPowerMax = function (tariffs) {
      var _this6 = this;
      var energiesFlags = 0;
      var tariffsFlags = 0;
      tariffs.forEach(function (tariff, index) {
        if (tariff) {
          energiesFlags |= getEnergiesFlags(tariff);
          tariffsFlags |= getTariffEnergiesFlag(index, tariff);
        }
      });
      this.setUint8(energiesFlags);
      this.setUint8(tariffsFlags);
      tariffs.forEach(function (tariff) {
        return _this6.setAPlusTariffPowerMax(tariff);
      });
      tariffs.forEach(function (tariff) {
        return _this6.setAMinusTariffPowerMax(tariff);
      });
    };

    var id$1C = getHalfHourEnergies;
    var maxSize$1i = 5;
    var fromBytes$1E = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer(bytes);
      return {
        date: buffer.getDate(),
        energies: buffer.getEnergiesFlags(),
        firstHalfhour: buffer.getUint8(),
        halfhoursNumber: buffer.getUint8()
      };
    };
    var toBytes$1E = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer(maxSize$1i);
      buffer.setDate(parameters.date);
      buffer.setEnergiesFlags(parameters.energies);
      buffer.setUint8(parameters.firstHalfhour);
      buffer.setUint8(parameters.halfhoursNumber);
      return toBytes$27(id$1C, buffer.data);
    };

    var id$1B = getMagneticFieldThreshold;
    var maxSize$1h = 0;
    var fromBytes$1D = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1h) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1D = function toBytes() {
      return toBytes$27(id$1B);
    };

    var id$1A = getMeterInfo;
    var maxSize$1g = 0;
    var fromBytes$1C = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1g) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1C = function toBytes() {
      return toBytes$27(id$1A);
    };

    var id$1z = getMonthDemand;
    var maxSize$1f = 2;
    var fromBytes$1B = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        year: buffer.getUint8(),
        month: buffer.getUint8()
      };
    };
    var toBytes$1B = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1f);
      buffer.setUint8(parameters.year);
      buffer.setUint8(parameters.month);
      return toBytes$27(id$1z, buffer.data);
    };

    var id$1y = getMonthDemandExport;
    var maxSize$1e = 2;
    var fromBytes$1A = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        year: buffer.getUint8(),
        month: buffer.getUint8()
      };
    };
    var toBytes$1A = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1e);
      buffer.setUint8(parameters.year);
      buffer.setUint8(parameters.month);
      return toBytes$27(id$1y, buffer.data);
    };

    var id$1x = getMonthMaxDemand;
    var fromBytes$1z = function fromBytes(bytes) {
      var _bytes = _slicedToArray(bytes, 2),
        year = _bytes[0],
        month = _bytes[1];
      return {
        year: year,
        month: month
      };
    };
    var toBytes$1z = function toBytes(_ref) {
      var year = _ref.year,
        month = _ref.month;
      return toBytes$27(id$1x, [year, month]);
    };

    var id$1w = getMonthMaxDemandExport;
    var fromBytes$1y = function fromBytes(bytes) {
      var _bytes = _slicedToArray(bytes, 2),
        year = _bytes[0],
        month = _bytes[1];
      return {
        year: year,
        month: month
      };
    };
    var toBytes$1y = function toBytes(_ref) {
      var year = _ref.year,
        month = _ref.month;
      return toBytes$27(id$1w, [year, month]);
    };

    var id$1v = getOperatorParameters;
    var maxSize$1d = 0;
    var fromBytes$1x = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1d) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1x = function toBytes() {
      return toBytes$27(id$1v);
    };

    var id$1u = getOperatorParametersExtended3;
    var maxSize$1c = 0;
    var fromBytes$1w = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1c) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1w = function toBytes() {
      return toBytes$27(id$1u);
    };

    var id$1t = getRatePlanInfo;
    var fromBytes$1v = function fromBytes(bytes) {
      return {
        tariffTable: bytes[0]
      };
    };
    var toBytes$1v = function toBytes(parameters) {
      return toBytes$27(id$1t, [parameters.tariffTable]);
    };

    var id$1s = getSaldo;
    var maxSize$1b = 0;
    var fromBytes$1u = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1b) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1u = function toBytes() {
      return toBytes$27(id$1s);
    };

    var id$1r = getSaldoParameters;
    var maxSize$1a = 0;
    var fromBytes$1t = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1a) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1t = function toBytes() {
      return toBytes$27(id$1r);
    };

    var id$1q = getSeasonProfile;
    var maxSize$19 = 3;
    var fromBytes$1s = function fromBytes(_ref) {
      var _ref2 = _slicedToArray(_ref, 3),
        tariffTable = _ref2[0],
        index = _ref2[1],
        isActive = _ref2[2];
      return {
        tariffTable: tariffTable,
        index: index,
        isActive: isActive === 0
      };
    };
    var toBytes$1s = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$19);
      buffer.setUint8(parameters.tariffTable);
      buffer.setUint8(parameters.index);
      buffer.setUint8(parameters.isActive ? 0 : 1);
      return toBytes$27(id$1q, buffer.data);
    };

    var id$1p = getSpecialDay;
    var maxSize$18 = 3;
    var fromBytes$1r = function fromBytes(_ref) {
      var _ref2 = _slicedToArray(_ref, 3),
        tariffTable = _ref2[0],
        index = _ref2[1],
        isActive = _ref2[2];
      return {
        tariffTable: tariffTable,
        index: index,
        isActive: isActive === 0
      };
    };
    var toBytes$1r = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$18);
      buffer.setUint8(parameters.tariffTable);
      buffer.setUint8(parameters.index);
      buffer.setUint8(parameters.isActive ? 0 : 1);
      return toBytes$27(id$1p, buffer.data);
    };

    var id$1o = getVersion;
    var maxSize$17 = 0;
    var fromBytes$1q = function fromBytes(bytes) {
      if (bytes.length !== maxSize$17) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1q = function toBytes() {
      return toBytes$27(id$1o);
    };

    var id$1n = prepareRatePlan;
    var maxSize$16 = 5;
    var fromBytes$1p = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        tariffTable: buffer.getUint8(),
        id: buffer.getUint32()
      };
    };
    var toBytes$1p = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$16);
      buffer.setUint8(parameters.tariffTable);
      buffer.setUint32(parameters.id);
      return toBytes$27(id$1n, buffer.data);
    };

    var id$1m = resetPowerMaxDay;
    var maxSize$15 = 0;
    var fromBytes$1o = function fromBytes(bytes) {
      if (bytes.length !== maxSize$15) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1o = function toBytes() {
      return toBytes$27(id$1m);
    };

    var id$1l = resetPowerMaxMonth;
    var maxSize$14 = 0;
    var fromBytes$1n = function fromBytes(bytes) {
      if (bytes.length !== maxSize$14) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1n = function toBytes() {
      return toBytes$27(id$1l);
    };

    var id$1k = runTariffPlan;
    var fromBytes$1m = function fromBytes(bytes) {
      return {
        tariffTable: bytes[0]
      };
    };
    var toBytes$1m = function toBytes(parameters) {
      return toBytes$27(id$1k, [parameters.tariffTable]);
    };

    var KEY_SIZE = 16;
    var id$1j = setAccessKey;
    var maxSize$13 = 1 + KEY_SIZE;
    var fromBytes$1l = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        accessLevel: buffer.getUint8(),
        key: buffer.getBytes(KEY_SIZE)
      };
    };
    var toBytes$1l = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$13);
      buffer.setUint8(parameters.accessLevel);
      buffer.setBytes(parameters.key);
      return toBytes$27(id$1j, buffer.data);
    };

    var id$1i = setCorrectDateTime;
    var maxSize$12 = 2;
    var fromBytes$1k = function fromBytes(bytes) {
      if (bytes.length !== maxSize$12) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        seconds: buffer.getInt16()
      };
    };
    var toBytes$1k = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$12);
      buffer.setInt16(parameters.seconds);
      return toBytes$27(id$1i, buffer.data);
    };

    var id$1h = setCorrectTime;
    var maxSize$11 = 9;
    var fromBytes$1j = function fromBytes(bytes) {
      if (bytes.length !== maxSize$11) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getTimeCorrectionParameters();
    };
    var toBytes$1j = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$11);
      buffer.setTimeCorrectionParameters(parameters);
      return toBytes$27(id$1h, buffer.data);
    };

    var id$1g = setDateTime;
    var maxSize$10 = 8;
    var fromBytes$1i = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getDateTime();
    };
    var toBytes$1i = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$10);
      buffer.setDateTime(parameters);
      return toBytes$27(id$1g, buffer.data);
    };

    var MAX_PERIODS_NUMBER$1 = 8;
    var PERIODS_FINAL_BYTE$1 = 0xff;
    var id$1f = setDayProfile;
    var fromBytes$1h = function fromBytes(bytes) {
      var finalByteIndex = bytes.indexOf(PERIODS_FINAL_BYTE$1);
      var cleanBytes = finalByteIndex === -1 ? bytes : bytes.slice(0, finalByteIndex);
      var buffer = new CommandBinaryBuffer$1(cleanBytes);
      return {
        tariffTable: buffer.getUint8(),
        index: buffer.getUint8(),
        periods: _toConsumableArray(cleanBytes.slice(buffer.offset)).map(CommandBinaryBuffer$1.getDayProfileFromByte)
      };
    };
    var toBytes$1h = function toBytes(parameters) {
      var hasPeriodsFinalByte = parameters.periods.length < MAX_PERIODS_NUMBER$1;
      var size = 2 + parameters.periods.length + +hasPeriodsFinalByte;
      var buffer = new CommandBinaryBuffer$1(size);
      buffer.setUint8(parameters.tariffTable);
      buffer.setUint8(parameters.index);
      parameters.periods.forEach(function (period) {
        buffer.setDayProfile(period);
      });
      if (hasPeriodsFinalByte) {
        buffer.setUint8(PERIODS_FINAL_BYTE$1);
      }
      return toBytes$27(id$1f, buffer.data);
    };

    var id$1e = setDemandParameters;
    var name$2 = downlinkNames[setDemandParameters];
    var maxSize$ = 4;
    var fromBytes$1g = function fromBytes(bytes) {
      validateCommandPayload(name$2, bytes, maxSize$);
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getDemandParameters();
    };
    var toBytes$1g = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$);
      buffer.setDemandParameters(parameters);
      return toBytes$27(id$1e, buffer.data);
    };

    var id$1d = setDisplayParam;
    var maxSize$_ = 33;
    var fromBytes$1f = function fromBytes(bytes) {
      if (bytes.length < 1 || bytes.length > maxSize$_) {
        throw new Error('Invalid SetDisplayParam data size.');
      }
      var _bytes = _toArray(bytes),
        displayMode = _bytes[0],
        order = _bytes.slice(1);
      return {
        displayMode: displayMode,
        order: order
      };
    };
    var toBytes$1f = function toBytes(parameters) {
      return toBytes$27(id$1d, [parameters.displayMode].concat(_toConsumableArray(parameters.order)));
    };

    var id$1c = setOperatorParameters;
    var maxSize$Z = OPERATOR_PARAMETERS_SIZE;
    var fromBytes$1e = function fromBytes(bytes) {
      if (bytes.length !== maxSize$Z) {
        throw new Error('Invalid SetOpParams data size.');
      }
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getOperatorParameters();
    };
    var toBytes$1e = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$Z);
      buffer.setOperatorParameters(parameters);
      return toBytes$27(id$1c, buffer.data);
    };

    var id$1b = setOperatorParametersExtended3;
    var maxSize$Y = 17;
    var fromBytes$1d = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getOperatorParametersExtended3();
    };
    var toBytes$1d = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$Y);
      buffer.setOperatorParametersExtended3(parameters);
      return toBytes$27(id$1b, buffer.data);
    };

    var id$1a = setSaldo;
    var maxSize$X = 12;
    var fromBytes$1c = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        date: {
          month: buffer.getUint8(),
          date: buffer.getUint8(),
          hours: buffer.getUint8(),
          minutes: buffer.getUint8()
        },
        saldoNew: buffer.getInt32(),
        saldoOld: buffer.getInt32()
      };
    };
    var toBytes$1c = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$X);
      buffer.setUint8(parameters.date.month);
      buffer.setUint8(parameters.date.date);
      buffer.setUint8(parameters.date.hours);
      buffer.setUint8(parameters.date.minutes);
      buffer.setInt32(parameters.saldoNew);
      buffer.setInt32(parameters.saldoOld);
      return toBytes$27(id$1a, buffer.data);
    };

    var id$19 = setSaldoParameters;
    var maxSize$W = 37;
    var fromBytes$1b = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getSaldoParameters();
    };
    var toBytes$1b = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$W);
      buffer.setSaldoParameters(parameters);
      return toBytes$27(id$19, buffer.data);
    };

    var id$18 = setSeasonProfile;
    var maxSize$V = SEASON_PROFILE_SIZE;
    var fromBytes$1a = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return _objectSpread2({
        tariffTable: buffer.getUint8(),
        index: buffer.getUint8()
      }, buffer.getSeasonProfile());
    };
    var toBytes$1a = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$V);
      buffer.setUint8(parameters.tariffTable);
      buffer.setUint8(parameters.index);
      buffer.setSeasonProfile(parameters);
      return toBytes$27(id$18, buffer.data);
    };

    var id$17 = setSpecialDay;
    var maxSize$U = 6;
    var fromBytes$19 = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return _objectSpread2({
        tariffTable: buffer.getUint8(),
        index: buffer.getUint8()
      }, buffer.getSpecialDay());
    };
    var toBytes$19 = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$U);
      buffer.setUint8(parameters.tariffTable);
      buffer.setUint8(parameters.index);
      buffer.setSpecialDay(parameters);
      return toBytes$27(id$17, buffer.data);
    };

    var id$16 = setSpecialOperation;
    var maxSize$T = 2;
    var fromBytes$18 = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var type = buffer.getUint8();
      var flags = buffer.getUint8();
      var readScreensInfo = !!(flags & 0x80);
      var resetElectroMagneticIndication = !!(flags & 1);
      var resetMagneticIndication = !!(flags & 2);
      return {
        type: type,
        readScreensInfo: readScreensInfo,
        resetElectroMagneticIndication: resetElectroMagneticIndication,
        resetMagneticIndication: resetMagneticIndication
      };
    };
    var toBytes$18 = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$T);
      var flags = 0;
      if (parameters.readScreensInfo) {
        flags |= 0x80;
      }
      if (parameters.resetElectroMagneticIndication) {
        flags |= 1;
      }
      if (parameters.resetMagneticIndication) {
        flags |= 2;
      }
      buffer.setUint8(parameters.type);
      buffer.setUint8(flags);
      return toBytes$27(id$16, buffer.data);
    };

    var id$15 = turnRelayOff;
    var maxSize$S = 0;
    var fromBytes$17 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$S) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$17 = function toBytes() {
      return toBytes$27(id$15);
    };

    var id$14 = turnRelayOn;
    var maxSize$R = 0;
    var fromBytes$16 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$R) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$16 = function toBytes() {
      return toBytes$27(id$14);
    };

    // this is required to shadow crypto-js implementation
    var aes = {
      encrypt: function encrypt() {},
      decrypt: function decrypt() {}
    };

    var calculateLrc = (function (data) {
      var initialLrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0x55;
      var lrc = initialLrc;
      data.forEach(function (item) {
        lrc ^= item;
      });
      return lrc;
    });

    var ACCESS_LEVEL_MASK = 0x03;
    var MESSAGE_HEADER_SIZE = 2;
    var BLOCK_SIZE = 16;
    var COMMANDS_END_MARK = [0];
    var COMMAND_HEADER_SIZE = 2;
    var getFromBytes$2 = function getFromBytes(fromBytesMap, nameMap) {
      return function () {
        var bytes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var aesKey = config === null || config === void 0 ? void 0 : config.aesKey;
        var commands = [];
        var _bytes = _slicedToArray(bytes, 2),
          messageId = _bytes[0],
          maskedAccessLevel = _bytes[1];
        var accessLevel = maskedAccessLevel & ACCESS_LEVEL_MASK;
        var message = {
          messageId: messageId,
          accessLevel: accessLevel,
          commands: commands,
          bytes: bytes,
          lrc: {
            received: undefined,
            calculated: 0
          }
        };
        var messageBody = bytes.slice(MESSAGE_HEADER_SIZE);
        var error;
        if (aesKey && accessLevel !== UNENCRYPTED) {
          messageBody = _toConsumableArray(aes.decrypt(aesKey, messageBody));
        }
        var receivedLrc = messageBody[messageBody.length - 1];
        messageBody = messageBody.slice(0, -1);
        var calculatedLrc = calculateLrc(messageBody);
        if (accessLevel !== UNENCRYPTED || receivedLrc !== 0) {
          if (receivedLrc !== calculatedLrc) {
            error = 'Mismatch LRC.';
          }
        }
        var accessLevel2 = messageBody[0] & ACCESS_LEVEL_MASK;
        var commandsData = messageBody.slice(1);
        if (accessLevel !== accessLevel2) {
          error = 'Mismatch access levels.';
        }
        var position = 0;
        do {
          var commandId = commandsData[position];
          var commandBodySize = commandsData[position + 1];
          var commandSize = COMMAND_HEADER_SIZE + commandBodySize;
          var commandBody = commandsData.slice(position + COMMAND_HEADER_SIZE, position + commandSize);
          var command = {
            id: commandId,
            name: nameMap[commandId],
            headerSize: COMMAND_HEADER_SIZE,
            bytes: commandsData.slice(position, position + commandSize)
          };
          if (!commandId) {
            break;
          }
          try {
            if (!fromBytesMap[commandId]) {
              throw new Error("Unsupported command id: ".concat(commandId, "!"));
            }
            command.parameters = fromBytesMap[commandId](commandBody, config);
            commands.push(command);
          } catch (exception) {
            commands.push({
              command: command,
              error: exception.message
            });
          }
          position += commandSize;
        } while (position <= commandsData.length);
        message.lrc.calculated = calculatedLrc;
        message.lrc.received = receivedLrc;
        if (error) {
          return {
            message: message,
            error: error
          };
        }
        return message;
      };
    };
    var getToBytes$1 = function getToBytes(toBytesMap) {
      return function (commands, _ref) {
        var _ref2;
        var _ref$messageId = _ref.messageId,
          messageId = _ref$messageId === void 0 ? 1 : _ref$messageId,
          _ref$accessLevel = _ref.accessLevel,
          accessLevel = _ref$accessLevel === void 0 ? READ_ONLY : _ref$accessLevel,
          aesKey = _ref.aesKey;
        var commandBytes = commands.map(function (command) {
          if ('id' in command) {
            return toBytesMap[command.id](command.parameters || {});
          }
          if ('command' in command) {
            return command.command.bytes;
          }
          throw new Error('wrong command format');
        });
        var maskedAccessLevel = accessLevel | 0x10;
        var header = [messageId, maskedAccessLevel];
        var body = (_ref2 = []).concat.apply(_ref2, [maskedAccessLevel].concat(_toConsumableArray(commandBytes), [COMMANDS_END_MARK]));
        if (accessLevel !== UNENCRYPTED) {
          var padding = (body.length + 1) % BLOCK_SIZE;
          if (padding) {
            body = body.concat(new Array(BLOCK_SIZE - padding).fill(0));
          }
        }
        body = body.concat(calculateLrc(body));
        if (aesKey && accessLevel !== UNENCRYPTED) {
          body = _toConsumableArray(aes.encrypt(aesKey, body));
        }
        return header.concat(body);
      };
    };

    var toBytesMap$1 = {};
    var fromBytesMap$1 = {};
    var toBytes$15 = getToBytes$1(toBytesMap$1);
    toBytesMap$1[id$24] = toBytes$26;
    toBytesMap$1[id$23] = toBytes$25;
    toBytesMap$1[id$22] = toBytes$24;
    toBytesMap$1[id$21] = toBytes$23;
    toBytesMap$1[id$20] = toBytes$22;
    toBytesMap$1[id$1$] = toBytes$21;
    toBytesMap$1[id$1_] = toBytes$20;
    toBytesMap$1[id$1Z] = toBytes$1$;
    toBytesMap$1[id$1Y] = toBytes$1_;
    toBytesMap$1[id$1X] = toBytes$1Z;
    toBytesMap$1[id$1W] = toBytes$1Y;
    toBytesMap$1[id$1V] = toBytes$1X;
    toBytesMap$1[id$1U] = toBytes$1W;
    toBytesMap$1[id$1T] = toBytes$1V;
    toBytesMap$1[id$1S] = toBytes$1U;
    toBytesMap$1[id$1R] = toBytes$1T;
    toBytesMap$1[id$1Q] = toBytes$1S;
    toBytesMap$1[id$1P] = toBytes$1R;
    toBytesMap$1[id$1O] = toBytes$1Q;
    toBytesMap$1[id$1N] = toBytes$1P;
    toBytesMap$1[id$1M] = toBytes$1O;
    toBytesMap$1[id$1L] = toBytes$1N;
    toBytesMap$1[id$1K] = toBytes$1M;
    toBytesMap$1[id$1J] = toBytes$1L;
    toBytesMap$1[id$1I] = toBytes$1K;
    toBytesMap$1[id$1H] = toBytes$1J;
    toBytesMap$1[id$1G] = toBytes$1I;
    toBytesMap$1[id$1F] = toBytes$1H;
    toBytesMap$1[id$1E] = toBytes$1G;
    toBytesMap$1[id$1D] = toBytes$1F;
    toBytesMap$1[id$1C] = toBytes$1E;
    toBytesMap$1[id$1B] = toBytes$1D;
    toBytesMap$1[id$1A] = toBytes$1C;
    toBytesMap$1[id$1z] = toBytes$1B;
    toBytesMap$1[id$1y] = toBytes$1A;
    toBytesMap$1[id$1x] = toBytes$1z;
    toBytesMap$1[id$1w] = toBytes$1y;
    toBytesMap$1[id$1v] = toBytes$1x;
    toBytesMap$1[id$1u] = toBytes$1w;
    toBytesMap$1[id$1t] = toBytes$1v;
    toBytesMap$1[id$1s] = toBytes$1u;
    toBytesMap$1[id$1r] = toBytes$1t;
    toBytesMap$1[id$1q] = toBytes$1s;
    toBytesMap$1[id$1p] = toBytes$1r;
    toBytesMap$1[id$1o] = toBytes$1q;
    toBytesMap$1[id$1n] = toBytes$1p;
    toBytesMap$1[id$1m] = toBytes$1o;
    toBytesMap$1[id$1l] = toBytes$1n;
    toBytesMap$1[id$1k] = toBytes$1m;
    toBytesMap$1[id$1j] = toBytes$1l;
    toBytesMap$1[id$1i] = toBytes$1k;
    toBytesMap$1[id$1h] = toBytes$1j;
    toBytesMap$1[id$1g] = toBytes$1i;
    toBytesMap$1[id$1f] = toBytes$1h;
    toBytesMap$1[id$1e] = toBytes$1g;
    toBytesMap$1[id$1d] = toBytes$1f;
    toBytesMap$1[id$1c] = toBytes$1e;
    toBytesMap$1[id$1b] = toBytes$1d;
    toBytesMap$1[id$1a] = toBytes$1c;
    toBytesMap$1[id$19] = toBytes$1b;
    toBytesMap$1[id$18] = toBytes$1a;
    toBytesMap$1[id$17] = toBytes$19;
    toBytesMap$1[id$16] = toBytes$18;
    toBytesMap$1[id$15] = toBytes$17;
    toBytesMap$1[id$14] = toBytes$16;
    fromBytesMap$1[id$24] = fromBytes$26;
    fromBytesMap$1[id$23] = fromBytes$25;
    fromBytesMap$1[id$22] = fromBytes$24;
    fromBytesMap$1[id$21] = fromBytes$23;
    fromBytesMap$1[id$20] = fromBytes$22;
    fromBytesMap$1[id$1$] = fromBytes$21;
    fromBytesMap$1[id$1_] = fromBytes$20;
    fromBytesMap$1[id$1Z] = fromBytes$1$;
    fromBytesMap$1[id$1Y] = fromBytes$1_;
    fromBytesMap$1[id$1X] = fromBytes$1Z;
    fromBytesMap$1[id$1W] = fromBytes$1Y;
    fromBytesMap$1[id$1V] = fromBytes$1X;
    fromBytesMap$1[id$1U] = fromBytes$1W;
    fromBytesMap$1[id$1T] = fromBytes$1V;
    fromBytesMap$1[id$1S] = fromBytes$1U;
    fromBytesMap$1[id$1R] = fromBytes$1T;
    fromBytesMap$1[id$1Q] = fromBytes$1S;
    fromBytesMap$1[id$1P] = fromBytes$1R;
    fromBytesMap$1[id$1O] = fromBytes$1Q;
    fromBytesMap$1[id$1N] = fromBytes$1P;
    fromBytesMap$1[id$1M] = fromBytes$1O;
    fromBytesMap$1[id$1L] = fromBytes$1N;
    fromBytesMap$1[id$1K] = fromBytes$1M;
    fromBytesMap$1[id$1J] = fromBytes$1L;
    fromBytesMap$1[id$1I] = fromBytes$1K;
    fromBytesMap$1[id$1H] = fromBytes$1J;
    fromBytesMap$1[id$1G] = fromBytes$1I;
    fromBytesMap$1[id$1F] = fromBytes$1H;
    fromBytesMap$1[id$1E] = fromBytes$1G;
    fromBytesMap$1[id$1D] = fromBytes$1F;
    fromBytesMap$1[id$1C] = fromBytes$1E;
    fromBytesMap$1[id$1B] = fromBytes$1D;
    fromBytesMap$1[id$1A] = fromBytes$1C;
    fromBytesMap$1[id$1z] = fromBytes$1B;
    fromBytesMap$1[id$1y] = fromBytes$1A;
    fromBytesMap$1[id$1x] = fromBytes$1z;
    fromBytesMap$1[id$1w] = fromBytes$1y;
    fromBytesMap$1[id$1v] = fromBytes$1x;
    fromBytesMap$1[id$1u] = fromBytes$1w;
    fromBytesMap$1[id$1t] = fromBytes$1v;
    fromBytesMap$1[id$1s] = fromBytes$1u;
    fromBytesMap$1[id$1r] = fromBytes$1t;
    fromBytesMap$1[id$1q] = fromBytes$1s;
    fromBytesMap$1[id$1p] = fromBytes$1r;
    fromBytesMap$1[id$1o] = fromBytes$1q;
    fromBytesMap$1[id$1n] = fromBytes$1p;
    fromBytesMap$1[id$1m] = fromBytes$1o;
    fromBytesMap$1[id$1l] = fromBytes$1n;
    fromBytesMap$1[id$1k] = fromBytes$1m;
    fromBytesMap$1[id$1j] = fromBytes$1l;
    fromBytesMap$1[id$1i] = fromBytes$1k;
    fromBytesMap$1[id$1h] = fromBytes$1j;
    fromBytesMap$1[id$1g] = fromBytes$1i;
    fromBytesMap$1[id$1f] = fromBytes$1h;
    fromBytesMap$1[id$1e] = fromBytes$1g;
    fromBytesMap$1[id$1d] = fromBytes$1f;
    fromBytesMap$1[id$1c] = fromBytes$1e;
    fromBytesMap$1[id$1b] = fromBytes$1d;
    fromBytesMap$1[id$1a] = fromBytes$1c;
    fromBytesMap$1[id$19] = fromBytes$1b;
    fromBytesMap$1[id$18] = fromBytes$1a;
    fromBytesMap$1[id$17] = fromBytes$19;
    fromBytesMap$1[id$16] = fromBytes$18;
    fromBytesMap$1[id$15] = fromBytes$17;
    fromBytesMap$1[id$14] = fromBytes$16;

    var id$13 = activateRatePlan;
    var maxSize$Q = 0;
    var fromBytes$15 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$Q) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$14 = function toBytes() {
      return toBytes$27(id$13);
    };

    var id$12 = errorResponse;
    var maxSize$P = 2;
    var getFromBytes$1 = function getFromBytes(commandNamesParameter) {
      return function (bytes) {
        var buffer = new CommandBinaryBuffer$1(bytes);
        var errorCommandId = buffer.getUint8();
        var errorCode = buffer.getUint8();
        return {
          commandId: errorCommandId,
          commandName: commandNamesParameter[errorCommandId],
          errorCode: errorCode,
          errorName: resultNames[errorCode]
        };
      };
    };
    var fromBytes$14 = getFromBytes$1(uplinkNames);
    var toBytes$13 = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$P);
      buffer.setUint8(parameters.commandId);
      buffer.setUint8(parameters.errorCode);
      return toBytes$27(id$12, buffer.data);
    };

    var id$11 = getBuildVersion;
    var maxSize$O = 6;
    var fromBytes$13 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$O) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      var _bytes = _slicedToArray(bytes, 6),
        date = _bytes[0],
        month = _bytes[1],
        year = _bytes[2],
        n3 = _bytes[3],
        n2 = _bytes[4],
        n1 = _bytes[5];
      return {
        date: {
          date: date,
          month: month,
          year: year
        },
        version: "".concat(n3, ".").concat(n2, ".").concat(n1)
      };
    };
    var toBytes$12 = function toBytes(parameters) {
      var date = parameters.date,
        version = parameters.version;
      var versionParts = version.split('.').map(function (part) {
        return parseInt(part, 10);
      });
      return toBytes$27(id$11, [date.date, date.month, date.year].concat(_toConsumableArray(versionParts)));
    };

    var id$10 = getCorrectTime;
    var maxSize$N = 9;
    var fromBytes$12 = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getTimeCorrectionParameters();
    };
    var toBytes$11 = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$N);
      buffer.setTimeCorrectionParameters(parameters);
      return toBytes$27(id$10, buffer.data);
    };

    var id$ = getCriticalEvent;
    var maxSize$M = 9;
    var fromBytes$11 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$M) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      var _bytes = _slicedToArray(bytes, 9),
        event = _bytes[0],
        index = _bytes[1],
        year = _bytes[2],
        month = _bytes[3],
        date = _bytes[4],
        hours = _bytes[5],
        minutes = _bytes[6],
        seconds = _bytes[7],
        count = _bytes[8];
      return {
        event: event,
        name: criticalEventNames[event],
        index: index,
        date: {
          year: year,
          month: month,
          date: date,
          hours: hours,
          minutes: minutes,
          seconds: seconds
        },
        count: count
      };
    };
    var toBytes$10 = function toBytes(parameters) {
      var event = parameters.event,
        index = parameters.index,
        date = parameters.date,
        count = parameters.count;
      return toBytes$27(id$, [event, index, date.year, date.month, date.date, date.hours, date.minutes, date.seconds, count]);
    };

    var id$_ = getCurrentStatusMeter;
    var maxSize$L = 31;
    var calibrationFlagsMask = {
      calibrationEnable: 0x01,
      hardkey: 0x02,
      keyPressTest: 0x04,
      keyOpenkeyTest: 0x08,
      keyGerkonTest: 0x10,
      keyOpenKlemaTest: 0x20,
      keyOpenModuleTest: 0x40,
      keyPress2Test: 0x80
    };
    var fromBytes$10 = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var operatingSeconds = buffer.getUint32();
      var tbadVAVB = buffer.getUint32();
      var tbadImaxAll = buffer.getUint32();
      var tbadPmaxAll = buffer.getUint32();
      buffer.getUint32();
      var tbadFREQ = buffer.getUint32();
      var relayStatus = toObject(extendedCurrentValues2RelayStatusMask, buffer.getUint8());
      var statusEvent1 = buffer.getUint8();
      var statusEvent2 = buffer.getUint8();
      var calibrationFlags = toObject(calibrationFlagsMask, buffer.getUint8());
      var currentTariffs = {
        'A+': buffer.getUint8(),
        'A-': buffer.getUint8()
      };
      var isSummerTime = !!(buffer.getUint8() & 1);
      var statusEventValue = statusEvent1 | statusEvent2 << 8;
      return {
        operatingSeconds: operatingSeconds,
        tbadVAVB: tbadVAVB,
        tbadImaxAll: tbadImaxAll,
        tbadPmaxAll: tbadPmaxAll,
        tbadFREQ: tbadFREQ,
        relayStatus: relayStatus,
        statusEvent: toObject(eventStatusMask, statusEventValue),
        calibrationFlags: calibrationFlags,
        currentTariffs: currentTariffs,
        isSummerTime: isSummerTime
      };
    };
    var toBytes$ = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$L);
      var statusEventValue = fromObject(eventStatusMask, parameters.statusEvent);
      buffer.setUint32(parameters.operatingSeconds);
      buffer.setUint32(parameters.tbadVAVB);
      buffer.setUint32(parameters.tbadImaxAll);
      buffer.setUint32(parameters.tbadPmaxAll);
      buffer.setUint32(0);
      buffer.setUint32(parameters.tbadFREQ);
      buffer.setUint8(fromObject(extendedCurrentValues2RelayStatusMask, parameters.relayStatus));
      buffer.setUint8(statusEventValue & 0xff);
      buffer.setUint8(statusEventValue >> 8 & 0xff);
      buffer.setUint8(fromObject(calibrationFlagsMask, parameters.calibrationFlags));
      buffer.setUint8(parameters.currentTariffs['A+']);
      buffer.setUint8(parameters.currentTariffs['A-']);
      buffer.setUint8(parameters.isSummerTime ? 1 : 0);
      return toBytes$27(id$_, buffer.data);
    };

    var id$Z = getCurrentValues;
    var maxSize$K = 32;
    var fromBytes$ = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        powerA: buffer.getInt32(),
        iaRms: buffer.getInt32(),
        vavbRms: buffer.getInt32(),
        varA: buffer.getInt32(),
        pfA: buffer.getInt16() / 1000,
        ibRms: buffer.getInt32(),
        powerB: buffer.getInt32(),
        varB: buffer.getInt32(),
        pfB: buffer.getInt16() / 1000
      };
    };
    var toBytes$_ = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$K);
      buffer.setInt32(parameters.powerA);
      buffer.setInt32(parameters.iaRms);
      buffer.setInt32(parameters.vavbRms);
      buffer.setInt32(parameters.varA);
      buffer.setInt16(parameters.pfA * 1000);
      buffer.setInt32(parameters.ibRms);
      buffer.setInt32(parameters.powerB);
      buffer.setInt32(parameters.varB);
      buffer.setInt16(parameters.pfB * 1000);
      return toBytes$27(id$Z, buffer.data);
    };

    var id$Y = getDateTime;
    var maxSize$J = 8;
    var fromBytes$_ = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getDateTime();
    };
    var toBytes$Z = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$J);
      buffer.setDateTime(parameters);
      return toBytes$27(id$Y, buffer.data);
    };

    var COMMAND_SIZE$5 = 19;
    var id$X = getDayDemand;
    var fromBytes$Z = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var parameters;
      if (bytes.length === COMMAND_SIZE$5) {
        parameters = {
          date: buffer.getDate(),
          energies: buffer.getEnergies()
        };
      } else {
        parameters = _objectSpread2({
          date: buffer.getDate()
        }, buffer.getPackedEnergyWithType());
      }
      return parameters;
    };
    var toBytes$Y = function toBytes(parameters) {
      var size = COMMAND_SIZE$5;
      if (parameters !== null && parameters !== void 0 && parameters.energyType) {
        var energiesNumber = parameters.energies.filter(function (energy) {
          return energy !== null;
        }).length;
        size = DATE_SIZE$3 + PACKED_ENERGY_TYPE_SIZE + energiesNumber * ENERGY_SIZE;
      }
      var buffer = new CommandBinaryBuffer$1(size);
      buffer.setDate(parameters.date);
      buffer.setPackedEnergyWithType(parameters);
      return toBytes$27(id$X, buffer.data);
    };

    var COMMAND_SIZE$4 = 19;
    var id$W = getDayDemandExport;
    var fromBytes$Y = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var parameters;
      if (bytes.length === COMMAND_SIZE$4) {
        parameters = {
          date: buffer.getDate(),
          energies: buffer.getEnergies()
        };
      } else {
        parameters = _objectSpread2({
          date: buffer.getDate()
        }, buffer.getPackedEnergyWithType());
      }
      return parameters;
    };
    var toBytes$X = function toBytes(parameters) {
      var size = COMMAND_SIZE$4;
      if (parameters !== null && parameters !== void 0 && parameters.energyType) {
        var energiesNumber = parameters.energies.filter(function (energy) {
          return energy !== null;
        }).length;
        size = DATE_SIZE$3 + PACKED_ENERGY_TYPE_SIZE + energiesNumber * ENERGY_SIZE;
      }
      var buffer = new CommandBinaryBuffer$1(size);
      buffer.setDate(parameters.date);
      buffer.setPackedEnergyWithType(parameters);
      return toBytes$27(id$W, buffer.data);
    };

    var DATE_SIZE$2 = 2;
    var ENERGY_FLAGS_SIZE$2 = 1;
    var TARIFF_FLAGS_SIZE$1 = 1;
    var MAX_TARIFFS_ENERGIES_SIZE$1 = 6 * 4 * 4;
    var id$V = getDayEnergies;
    var maxSize$I = DATE_SIZE$2 + ENERGY_FLAGS_SIZE$2 + TARIFF_FLAGS_SIZE$1 + MAX_TARIFFS_ENERGIES_SIZE$1;
    var fromBytes$X = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer(bytes);
      return {
        date: buffer.getDate(),
        energies: buffer.getTariffsEnergies()
      };
    };
    var toBytes$W = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer(maxSize$I);
      buffer.setDate(parameters.date);
      buffer.setTariffsEnergies(parameters.energies);
      return toBytes$27(id$V, buffer.getBytesToOffset());
    };

    var id$U = getDayMaxDemand;
    var maxSize$H = 27;
    var fromBytes$W = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getDayMaxDemandResponse();
    };
    var toBytes$V = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$H);
      buffer.setDayMaxDemandResponse(parameters);
      return toBytes$27(id$U, buffer.getBytesToOffset());
    };

    var id$T = getDayMaxDemandExport;
    var maxSize$G = 27;
    var fromBytes$V = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getDayMaxDemandResponse();
    };
    var toBytes$U = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$G);
      buffer.setDayMaxDemandResponse(parameters);
      return toBytes$27(id$T, buffer.getBytesToOffset());
    };

    var id$S = getDayMaxDemandPrevious;
    var maxSize$F = 27;
    var fromBytes$U = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getDayMaxDemandResponse();
    };
    var toBytes$T = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$F);
      buffer.setDayMaxDemandResponse(parameters);
      return toBytes$27(id$S, buffer.getBytesToOffset());
    };

    var DATE_SIZE$1 = 2;
    var ENERGY_FLAGS_SIZE$1 = 1;
    var TARIFF_FLAGS_SIZE = 1;
    var MAX_TARIFFS_ENERGIES_SIZE = 6 * 4 * (1 + 1 + 4);
    var id$R = getDayMaxPower;
    var maxSize$E = DATE_SIZE$1 + ENERGY_FLAGS_SIZE$1 + TARIFF_FLAGS_SIZE + MAX_TARIFFS_ENERGIES_SIZE;
    var fromBytes$T = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer(bytes);
      return {
        date: buffer.getDate(),
        tariffs: buffer.getTariffsPowerMax()
      };
    };
    var toBytes$S = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer(maxSize$E);
      buffer.setDate(parameters.date);
      buffer.setTariffsPowerMax(parameters.tariffs);
      return toBytes$27(id$R, buffer.getBytesToOffset());
    };

    var MAX_PERIODS_NUMBER = 8;
    var PERIODS_FINAL_BYTE = 0xff;
    var id$Q = getDayProfile;
    var fromBytes$S = function fromBytes(bytes) {
      var finalByteIndex = bytes.indexOf(PERIODS_FINAL_BYTE);
      var cleanData = finalByteIndex === -1 ? bytes : bytes.slice(0, finalByteIndex);
      return {
        periods: _toConsumableArray(cleanData).map(CommandBinaryBuffer$1.getDayProfileFromByte)
      };
    };
    var toBytes$R = function toBytes(parameters) {
      var hasPeriodsFinalByte = parameters.periods.length < MAX_PERIODS_NUMBER;
      var size = parameters.periods.length + +hasPeriodsFinalByte;
      var buffer = new CommandBinaryBuffer$1(size);
      parameters.periods.forEach(function (period) {
        buffer.setDayProfile(period);
      });
      if (hasPeriodsFinalByte) {
        buffer.setUint8(PERIODS_FINAL_BYTE);
      }
      return toBytes$27(id$Q, buffer.data);
    };

    var ADDITIONAL_HOUR = 25;
    var getRecordIndex = function getRecordIndex(hours, minutes, periodMin) {
      return Math.trunc((hours * 60 + minutes) / periodMin);
    };
    var getLastSummerHourIndex = function getLastSummerHourIndex(periodMin) {
      return getRecordIndex(ADDITIONAL_HOUR, 0, periodMin);
    };
    var energyFromWord = function energyFromWord(word, index, periodMin) {
      if (word === 0xffff) {
        return null;
      }
      var indexLastSummerRecord = getLastSummerHourIndex(periodMin);
      if (index === indexLastSummerRecord) {
        return {
          lastSummerHour: word >> 8 & 0xff
        };
      }
      return periodMin === 60 ? {
        energy: word
      } : {
        tariff: word >> 14 & 0x03,
        energy: word & 0x3fff
      };
    };
    var energyToWord = function energyToWord(data) {
      if (data === null) {
        return 0xffff;
      }
      var energy = data.energy,
        tariff = data.tariff,
        lastSummerHour = data.lastSummerHour;
      if (lastSummerHour) {
        return lastSummerHour << 8 | 0xff;
      }
      return tariff ? tariff << 14 | energy & 0x3fff : energy;
    };
    var energyFromBinary = function energyFromBinary(bytes, offset) {
      var periodMin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
      return bytes.reduce(function (collector, value, index) {
        collector.push(energyFromWord(value, (offset !== null && offset !== void 0 ? offset : 0) + index, periodMin));
        return collector;
      }, []);
    };
    var energyToBinary = function energyToBinary(energies) {
      return energies.reduce(function (collector, value) {
        collector.push(energyToWord(value));
        return collector;
      }, []);
    };
    var voltageFromWord = function voltageFromWord(word, index, periodMin) {
      if (word === 0xffff) {
        return 0xffff;
      }
      var indexLastSummerRecord = getLastSummerHourIndex(periodMin);
      return index === indexLastSummerRecord ? {
        lastSummerHour: word >> 8 & 0xff
      } : {
        voltage: word
      };
    };
    var voltageToWord = function voltageToWord(_ref) {
      var voltage = _ref.voltage,
        lastSummerHour = _ref.lastSummerHour;
      if (lastSummerHour) {
        return lastSummerHour << 8 | 0xff;
      }
      return voltage;
    };
    var voltageFromBinary = function voltageFromBinary(bytes, offset) {
      var periodMin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
      return bytes.reduce(function (collector, value, index) {
        collector.push(voltageFromWord(value, (offset !== null && offset !== void 0 ? offset : 0) + index, periodMin));
        return collector;
      }, []);
    };
    var voltageToBinary = function voltageToBinary(energies) {
      return energies.reduce(function (collector, value) {
        collector.push(voltageToWord(value));
        return collector;
      }, []);
    };

    var id$P = getDemand;
    var fromBytes$R = function fromBytes(bytes) {
      if (!bytes || bytes.length < maxSize$1v) {
        throw new Error('Invalid uplink GetDemand byte length.');
      }
      var buffer = new CommandBinaryBuffer$1(bytes);
      var parameters = buffer.getDemand();
      if (bytes.length !== maxSize$1v + 2 * parameters.count) {
        throw new Error('Invalid uplink GetDemand demands byte length.');
      }
      var demandsBytes = new Array(parameters.count).fill(0).map(function () {
        return buffer.getUint16();
      });
      var isEnergiesDemand = parameters.energyType === A_PLUS || parameters.energyType === A_MINUS;
      parameters.demands = isEnergiesDemand ? energyFromBinary(demandsBytes, parameters.firstIndex, parameters.period) : voltageFromBinary(demandsBytes, parameters.firstIndex, parameters.period);
      return parameters;
    };
    var toBytes$Q = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$1v + parameters.count * 2);
      buffer.setDemand(parameters);
      if (parameters.energyType === A_PLUS || parameters.energyType === A_MINUS) {
        energyToBinary(parameters.demands).forEach(function (value) {
          return buffer.setUint16(value);
        });
      } else {
        voltageToBinary(parameters.demands).forEach(function (value) {
          return buffer.setUint16(value);
        });
      }
      return toBytes$27(id$P, buffer.data);
    };

    var id$O = getDemandParameters;
    var name$1 = uplinkNames[getDemandParameters];
    var maxSize$D = 4;
    var fromBytes$Q = function fromBytes(bytes) {
      validateCommandPayload(name$1, bytes, maxSize$D);
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getDemandParameters();
    };
    var toBytes$P = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$D);
      buffer.setDemandParameters(parameters);
      return toBytes$27(id$O, buffer.data);
    };

    var id$N = getDeviceId;
    var maxSize$C = 8;
    var fromBytes$P = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getDeviceId();
    };
    var toBytes$O = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$C);
      buffer.setDeviceId(parameters);
      return toBytes$27(id$N, buffer.data);
    };

    var id$M = getDeviceType;
    var maxSize$B = 9;
    var fromBytes$O = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getDeviceType();
    };
    var toBytes$N = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$B);
      buffer.setDeviceType(parameters);
      return toBytes$27(id$M, buffer.data);
    };

    var id$L = getDisplayParam;
    var fromBytes$N = function fromBytes(bytes) {
      var _bytes = _toArray(bytes),
        displayMode = _bytes[0],
        order = _bytes.slice(1);
      return {
        displayMode: displayMode,
        order: order
      };
    };
    var toBytes$M = function toBytes(parameters) {
      return toBytes$27(id$L, [parameters.displayMode].concat(_toConsumableArray(parameters.order)));
    };

    var COMMAND_SIZE$3 = 16;
    var id$K = getEnergy;
    var fromBytes$M = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var parameters;
      if (bytes.length === COMMAND_SIZE$3) {
        parameters = {
          energies: buffer.getEnergies()
        };
      } else {
        parameters = buffer.getPackedEnergyWithType();
      }
      return parameters;
    };
    var toBytes$L = function toBytes(parameters) {
      var size = COMMAND_SIZE$3;
      if (parameters !== null && parameters !== void 0 && parameters.energyType) {
        var energiesNumber = parameters.energies.filter(function (energy) {
          return energy !== null;
        }).length;
        size = PACKED_ENERGY_TYPE_SIZE + energiesNumber * ENERGY_SIZE;
      }
      var buffer = new CommandBinaryBuffer$1(size);
      buffer.setPackedEnergyWithType(parameters);
      return toBytes$27(id$K, buffer.data);
    };

    var COMMAND_SIZE$2 = 19;
    var id$J = getEnergyDayPrevious;
    var fromBytes$L = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var parameters;
      if (bytes.length === COMMAND_SIZE$2) {
        parameters = {
          date: buffer.getDate(),
          energies: buffer.getEnergies()
        };
      } else {
        parameters = _objectSpread2({
          date: buffer.getDate()
        }, buffer.getPackedEnergyWithType());
      }
      return parameters;
    };
    var toBytes$K = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(getPackedEnergiesWithDateSize(parameters));
      buffer.setDate(parameters.date);
      buffer.setPackedEnergyWithType(parameters);
      return toBytes$27(id$J, buffer.data);
    };

    var COMMAND_SIZE$1 = 16;
    var id$I = getEnergyExport;
    var fromBytes$K = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var parameters;
      if (bytes.length === COMMAND_SIZE$1) {
        parameters = {
          energies: buffer.getEnergies()
        };
      } else {
        parameters = buffer.getPackedEnergyWithType();
      }
      return parameters;
    };
    var toBytes$J = function toBytes(parameters) {
      var size = COMMAND_SIZE$1;
      if (parameters !== null && parameters !== void 0 && parameters.energyType) {
        var energiesNumber = parameters.energies.filter(function (energy) {
          return energy !== null;
        }).length;
        size = PACKED_ENERGY_TYPE_SIZE + energiesNumber * ENERGY_SIZE;
      }
      var buffer = new CommandBinaryBuffer$1(size);
      buffer.setPackedEnergyWithType(parameters);
      return toBytes$27(id$I, buffer.data);
    };

    var COMMAND_SIZE = 19;
    var id$H = getEnergyExportDayPrevious;
    var fromBytes$J = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var parameters;
      if (bytes.length === COMMAND_SIZE) {
        parameters = {
          date: buffer.getDate(),
          energies: buffer.getEnergies()
        };
      } else {
        parameters = _objectSpread2({
          date: buffer.getDate()
        }, buffer.getPackedEnergyWithType());
      }
      return parameters;
    };
    var toBytes$I = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(getPackedEnergiesWithDateSize(parameters));
      buffer.setDate(parameters.date);
      buffer.setPackedEnergyWithType(parameters);
      return toBytes$27(id$H, buffer.data);
    };

    var BODY_WITHOUT_EVENTS_SIZE = 3 + 1;
    var EVENT_SIZE = 4;
    var id$G = getEvents;
    var maxSize$A = BODY_WITHOUT_EVENTS_SIZE + 255 * EVENT_SIZE;
    var getFromBytes = function getFromBytes(BinaryBufferConstructor) {
      return function (bytes) {
        if (bytes.length > maxSize$A) {
          throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
        }
        var buffer = new BinaryBufferConstructor(bytes);
        var date = buffer.getDate();
        var eventsNumber = buffer.getUint8();
        var events = [];
        while (!buffer.isEmpty) {
          events.push(buffer.getEvent());
        }
        return {
          date: date,
          eventsNumber: eventsNumber,
          events: events
        };
      };
    };
    var getToBytes = function getToBytes(BinaryBufferConstructor) {
      return function (parameters) {
        var buffer = new BinaryBufferConstructor(maxSize$A);
        buffer.setDate(parameters.date);
        buffer.setUint8(parameters.eventsNumber);
        var _iterator = _createForOfIteratorHelper(parameters.events),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var event = _step.value;
            buffer.setEvent(event);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return toBytes$27(id$G, buffer.getBytesToOffset());
      };
    };
    var fromBytes$I = getFromBytes(CommandBinaryBuffer$1);
    var toBytes$H = getToBytes(CommandBinaryBuffer$1);

    var COMMAND_BODY_SIZE = 14;
    var OLD_COMMAND_BODY_SIZE = 20;
    var id$F = getEventsCounters;
    var fromBytes$H = function fromBytes(bytes) {
      if (bytes.length !== COMMAND_BODY_SIZE && bytes.length !== OLD_COMMAND_BODY_SIZE) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      var buffer = new CommandBinaryBuffer$1(bytes);
      var restart = buffer.getUint16();
      var powerOff = buffer.getUint16();
      var localParametersChange = buffer.getUint16();
      var remoteParametersChange = buffer.getUint16();
      var accessError = buffer.getUint16();
      var accessClosed = buffer.getUint16();
      var setClock = buffer.getUint16();
      return {
        accessClosed: accessClosed,
        accessError: accessError,
        localParametersChange: localParametersChange,
        remoteParametersChange: remoteParametersChange,
        powerOff: powerOff,
        restart: restart,
        setClock: setClock
      };
    };
    var toBytes$G = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(COMMAND_BODY_SIZE);
      buffer.setUint16(parameters.restart);
      buffer.setUint16(parameters.powerOff);
      buffer.setUint16(parameters.localParametersChange);
      buffer.setUint16(parameters.remoteParametersChange);
      buffer.setUint16(parameters.accessError);
      buffer.setUint16(parameters.accessClosed);
      buffer.setUint16(parameters.setClock);
      return toBytes$27(id$F, buffer.data);
    };

    var id$E = getEventStatus;
    var maxSize$z = 2;
    var fromBytes$G = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes, true);
      return buffer.getEventStatus();
    };
    var toBytes$F = function toBytes(eventStatus) {
      var buffer = new CommandBinaryBuffer$1(maxSize$z, true);
      buffer.setEventStatus(eventStatus);
      return toBytes$27(id$E, buffer.data);
    };

    var id$D = getExtendedCurrentValues;
    var maxSize$y = 4;
    var fromBytes$F = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        temperature: buffer.getInt16(),
        frequency: buffer.getInt16()
      };
    };
    var toBytes$E = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$y);
      buffer.setInt16(parameters.temperature);
      buffer.setInt16(parameters.frequency);
      return toBytes$27(id$D, buffer.data);
    };

    var id$C = getExtendedCurrentValues2;
    var maxSize$x = 7;
    var fromBytes$E = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getExtendedCurrentValues2();
    };
    var toBytes$D = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$x);
      buffer.setExtendedCurrentValues2(parameters);
      return toBytes$27(id$C, buffer.data);
    };

    var id$B = getHalfHourDemand;
    var fromBytes$D = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var hasDst = bytes.length > MIN_HALF_HOUR_COMMAND_SIZE;
      var date = buffer.getDate();
      var periods = buffer.getEnergyPeriods(hasDst ? MAX_HALF_HOUR_PERIODS : MIN_HALF_HOUR_PERIODS);
      if (hasDst) {
        return {
          date: date,
          periods: periods,
          dstHour: buffer.getUint8()
        };
      }
      return {
        date: date,
        periods: periods
      };
    };
    var toBytes$C = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(parameters.periods.length > MIN_HALF_HOUR_PERIODS ? MAX_HALF_HOUR_COMMAND_SIZE : MIN_HALF_HOUR_COMMAND_SIZE);
      buffer.setDate(parameters.date);
      buffer.setEnergyPeriods(parameters.periods);
      if (parameters.dstHour) {
        buffer.setUint8(parameters.dstHour);
      }
      return toBytes$27(id$B, buffer.data);
    };

    var id$A = getHalfHourDemandExport;
    var fromBytes$C = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var hasDst = bytes.length > MIN_HALF_HOUR_COMMAND_SIZE;
      var date = buffer.getDate();
      var periods = buffer.getEnergyPeriods(hasDst ? MAX_HALF_HOUR_PERIODS : MIN_HALF_HOUR_PERIODS);
      if (hasDst) {
        return {
          date: date,
          periods: periods,
          dstHour: buffer.getUint8()
        };
      }
      return {
        date: date,
        periods: periods
      };
    };
    var toBytes$B = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(parameters.periods.length > MIN_HALF_HOUR_PERIODS ? MAX_HALF_HOUR_COMMAND_SIZE : MIN_HALF_HOUR_COMMAND_SIZE);
      buffer.setDate(parameters.date);
      buffer.setEnergyPeriods(parameters.periods);
      if (parameters.dstHour) {
        buffer.setUint8(parameters.dstHour);
      }
      return toBytes$27(id$A, buffer.data);
    };

    var id$z = getHalfHourDemandPrevious;
    var fromBytes$B = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var hasDst = bytes.length > MIN_HALF_HOUR_COMMAND_SIZE;
      var date = buffer.getDate();
      var periods = buffer.getEnergyPeriods(hasDst ? MAX_HALF_HOUR_PERIODS : MIN_HALF_HOUR_PERIODS);
      if (hasDst) {
        return {
          date: date,
          periods: periods,
          dstHour: buffer.getUint8()
        };
      }
      return {
        date: date,
        periods: periods
      };
    };
    var toBytes$A = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(parameters.periods.length > MIN_HALF_HOUR_PERIODS ? MAX_HALF_HOUR_COMMAND_SIZE : MIN_HALF_HOUR_COMMAND_SIZE);
      buffer.setDate(parameters.date);
      buffer.setEnergyPeriods(parameters.periods);
      if (parameters.dstHour) {
        buffer.setUint8(parameters.dstHour);
      }
      return toBytes$27(id$z, buffer.data);
    };

    var DATE_SIZE = 2;
    var ENERGY_FLAGS_SIZE = 1;
    var START_HALFHOUR_SIZE = 1;
    var HALFHOURS_NUMBER_SIZE = 1;
    var MAX_HALFHOURS_ENERGY_SIZE = 247;
    var id$y = getHalfHourEnergies;
    var maxSize$w = DATE_SIZE + ENERGY_FLAGS_SIZE + START_HALFHOUR_SIZE + HALFHOURS_NUMBER_SIZE + MAX_HALFHOURS_ENERGY_SIZE;
    var fromBytes$A = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer(bytes);
      var date = buffer.getDate();
      var energiesFlags = buffer.getEnergiesFlags();
      var firstHalfhour = buffer.getUint8();
      var halfhoursNumber = buffer.getUint8();
      return {
        date: date,
        firstHalfhour: firstHalfhour,
        halfhoursNumber: halfhoursNumber,
        energies: buffer.getHalfHourEnergies1(energiesFlags, halfhoursNumber)
      };
    };
    var toBytes$z = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer(maxSize$w);
      var date = parameters.date,
        firstHalfhour = parameters.firstHalfhour,
        halfhoursNumber = parameters.halfhoursNumber,
        energies = parameters.energies;
      buffer.setDate(date);
      buffer.setEnergiesFlags(energies);
      buffer.setUint8(firstHalfhour);
      buffer.setUint8(halfhoursNumber);
      buffer.setHalfHourEnergies1(energies);
      return toBytes$27(id$y, buffer.getBytesToOffset());
    };

    var id$x = getMagneticFieldThreshold;
    var maxSize$v = 10;
    var fromBytes$z = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        induction: buffer.getUint16(),
        threshold: buffer.getUint16(),
        inductionCoefficient: buffer.getUint16() / 100,
        reserved: buffer.getUint32()
      };
    };
    var toBytes$y = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$v);
      buffer.setUint16(parameters.induction);
      buffer.setUint16(parameters.threshold);
      buffer.setUint16(parameters.inductionCoefficient * 100);
      buffer.setUint32(parameters.reserved);
      return toBytes$27(id$x, buffer.data);
    };

    var id$w = getMeterInfo;
    var fromBytes$y = function fromBytes(_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
        ten = _ref2[0];
      return {
        ten: ten
      };
    };
    var toBytes$x = function toBytes(_ref3) {
      var ten = _ref3.ten;
      return toBytes$27(id$w, [ten]);
    };

    var id$v = getMonthDemand;
    var maxSize$u = 18;
    var fromBytes$x = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        year: buffer.getUint8(),
        month: buffer.getUint8(),
        energies: buffer.getEnergies()
      };
    };
    var toBytes$w = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$u);
      buffer.setUint8(parameters.year);
      buffer.setUint8(parameters.month);
      buffer.setEnergies(parameters.energies);
      return toBytes$27(id$v, buffer.data);
    };

    var id$u = getMonthDemandExport;
    var maxSize$t = 18;
    var fromBytes$w = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        year: buffer.getUint8(),
        month: buffer.getUint8(),
        energies: buffer.getEnergies()
      };
    };
    var toBytes$v = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$t);
      buffer.setUint8(parameters.year);
      buffer.setUint8(parameters.month);
      buffer.setEnergies(parameters.energies);
      return toBytes$27(id$u, buffer.data);
    };

    var id$t = getMonthMaxDemand;
    var maxSize$s = 2 + TARIFF_NUMBER$1 * 7;
    var fromBytes$v = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        year: buffer.getUint8(),
        month: buffer.getUint8(),
        tariffs: buffer.getMonthMaxPowerByTariffs()
      };
    };
    var toBytes$u = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$s);
      buffer.setUint8(parameters.year);
      buffer.setUint8(parameters.month);
      buffer.setMonthMaxPowerByTariffs(parameters.tariffs);
      return toBytes$27(id$t, buffer.data);
    };

    var id$s = getMonthMaxDemandExport;
    var maxSize$r = 2 + TARIFF_NUMBER$1 * 7;
    var fromBytes$u = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        year: buffer.getUint8(),
        month: buffer.getUint8(),
        tariffs: buffer.getMonthMaxPowerByTariffs()
      };
    };
    var toBytes$t = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$r);
      buffer.setUint8(parameters.year);
      buffer.setUint8(parameters.month);
      buffer.setMonthMaxPowerByTariffs(parameters.tariffs);
      return toBytes$27(id$s, buffer.data);
    };

    var id$r = getOperatorParameters;
    var maxSize$q = OPERATOR_PARAMETERS_SIZE;
    var fromBytes$t = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getOperatorParameters();
    };
    var toBytes$s = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$q);
      buffer.setOperatorParameters(parameters);
      return toBytes$27(id$r, buffer.data);
    };

    var id$q = getOperatorParametersExtended3;
    var maxSize$p = 17;
    var fromBytes$s = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getOperatorParametersExtended3();
    };
    var toBytes$r = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$p);
      buffer.setOperatorParametersExtended3(parameters);
      return toBytes$27(id$q, buffer.data);
    };

    var id$p = getRatePlanInfo;
    var maxSize$o = 1 + TARIFF_PLAN_SIZE * 2;
    var fromBytes$r = function fromBytes(bytes) {
      if (bytes.length !== maxSize$o) {
        throw new Error('Invalid getRatePlanInfo data size.');
      }
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        tariffTable: buffer.getUint8(),
        activePlan: buffer.getTariffPlan(),
        passivePlan: buffer.getTariffPlan()
      };
    };
    var toBytes$q = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$o);
      buffer.setUint8(parameters.tariffTable);
      buffer.setTariffPlan(parameters.activePlan);
      buffer.setTariffPlan(parameters.passivePlan);
      return toBytes$27(id$p, buffer.data);
    };

    var id$o = getSaldo;
    var maxSize$n = 29;
    var fromBytes$q = function fromBytes(bytes) {
      if (bytes.length !== maxSize$n) {
        throw new Error('Invalid getSaldo data size.');
      }
      var buffer = new CommandBinaryBuffer$1(bytes);
      return {
        currentSaldo: buffer.getInt32(),
        count: buffer.getUint8(),
        energy: new Array(4).fill(0).map(function () {
          return buffer.getInt32();
        }),
        beginSaldoOfPeriod: buffer.getInt32(),
        date: {
          month: buffer.getUint8(),
          date: buffer.getUint8(),
          hours: buffer.getUint8(),
          minutes: buffer.getUint8()
        }
      };
    };
    var toBytes$p = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$n);
      buffer.setInt32(parameters.currentSaldo);
      buffer.setUint8(parameters.count);
      parameters.energy.forEach(function (value) {
        return buffer.setInt32(value);
      });
      buffer.setInt32(parameters.beginSaldoOfPeriod);
      buffer.setUint8(parameters.date.month);
      buffer.setUint8(parameters.date.date);
      buffer.setUint8(parameters.date.hours);
      buffer.setUint8(parameters.date.minutes);
      return toBytes$27(id$o, buffer.data);
    };

    var id$n = getSaldoParameters;
    var maxSize$m = 37;
    var fromBytes$p = function fromBytes(bytes) {
      if (bytes.length !== maxSize$m) {
        throw new Error('Invalid getSaldoParameters data size.');
      }
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getSaldoParameters();
    };
    var toBytes$o = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$m);
      buffer.setSaldoParameters(parameters);
      return toBytes$27(id$n, buffer.data);
    };

    var id$m = getSeasonProfile;
    var maxSize$l = 9;
    var fromBytes$o = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getSeasonProfile();
    };
    var toBytes$n = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$l);
      buffer.setSeasonProfile(parameters);
      return toBytes$27(id$m, buffer.data);
    };

    var id$l = getSpecialDay;
    var maxSize$k = 4;
    var fromBytes$n = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      return buffer.getSpecialDay();
    };
    var toBytes$m = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$k);
      buffer.setSpecialDay(parameters);
      return toBytes$27(id$l, buffer.data);
    };

    var id$k = getVersion;
    var fromBytes$m = function fromBytes(bytes) {
      return {
        version: String.fromCharCode.apply(null, _toConsumableArray(bytes))
      };
    };
    var toBytes$l = function toBytes(parameters) {
      var version = parameters.version.split('').map(function (_char) {
        return _char.charCodeAt(0);
      });
      return toBytes$27(id$k, version);
    };

    var id$j = prepareRatePlan;
    var maxSize$j = 0;
    var fromBytes$l = function fromBytes(bytes) {
      if (bytes.length !== maxSize$j) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$k = function toBytes() {
      return toBytes$27(id$j);
    };

    var id$i = resetPowerMaxDay;
    var maxSize$i = 0;
    var fromBytes$k = function fromBytes(bytes) {
      if (bytes.length !== maxSize$i) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$j = function toBytes() {
      return toBytes$27(id$i);
    };

    var id$h = resetPowerMaxMonth;
    var maxSize$h = 0;
    var fromBytes$j = function fromBytes(bytes) {
      if (bytes.length !== maxSize$h) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$i = function toBytes() {
      return toBytes$27(id$h);
    };

    var id$g = runTariffPlan;
    var maxSize$g = 0;
    var fromBytes$i = function fromBytes(bytes) {
      if (bytes.length !== maxSize$g) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$h = function toBytes() {
      return toBytes$27(id$g);
    };

    var id$f = setAccessKey;
    var maxSize$f = 0;
    var fromBytes$h = function fromBytes(bytes) {
      if (bytes.length !== maxSize$f) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$g = function toBytes() {
      return toBytes$27(id$f);
    };

    var id$e = setCorrectDateTime;
    var maxSize$e = 0;
    var fromBytes$g = function fromBytes(bytes) {
      if (bytes.length !== maxSize$e) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$f = function toBytes() {
      return toBytes$27(id$e);
    };

    var id$d = setCorrectTime;
    var maxSize$d = 0;
    var fromBytes$f = function fromBytes(bytes) {
      if (bytes.length !== maxSize$d) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$e = function toBytes() {
      return toBytes$27(id$d);
    };

    var id$c = setDateTime;
    var maxSize$c = 0;
    var fromBytes$e = function fromBytes(bytes) {
      if (bytes.length !== maxSize$c) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$d = function toBytes() {
      return toBytes$27(id$c);
    };

    var id$b = setDayProfile;
    var maxSize$b = 0;
    var fromBytes$d = function fromBytes(bytes) {
      if (bytes.length !== maxSize$b) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$c = function toBytes() {
      return toBytes$27(id$b);
    };

    var id$a = setDemandParameters;
    var name = uplinkNames[setDemandParameters];
    var maxSize$a = 0;
    var fromBytes$c = function fromBytes(bytes) {
      validateCommandPayload(name, bytes, maxSize$a);
      return {};
    };
    var toBytes$b = function toBytes() {
      return toBytes$27(id$a);
    };

    var id$9 = setDisplayParam;
    var maxSize$9 = 0;
    var fromBytes$b = function fromBytes(bytes) {
      if (bytes.length !== maxSize$9) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$a = function toBytes() {
      return toBytes$27(id$9);
    };

    var id$8 = setOperatorParameters;
    var maxSize$8 = 0;
    var fromBytes$a = function fromBytes(bytes) {
      if (bytes.length !== maxSize$8) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$9 = function toBytes() {
      return toBytes$27(id$8);
    };

    var id$7 = setOperatorParametersExtended3;
    var maxSize$7 = 0;
    var fromBytes$9 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$7) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$8 = function toBytes() {
      return toBytes$27(id$7);
    };

    var id$6 = setSaldo;
    var maxSize$6 = 0;
    var fromBytes$8 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$6) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$7 = function toBytes() {
      return toBytes$27(id$6);
    };

    var id$5 = setSaldoParameters;
    var maxSize$5 = 0;
    var fromBytes$7 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$5) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$6 = function toBytes() {
      return toBytes$27(id$5);
    };

    var id$4 = setSeasonProfile;
    var maxSize$4 = 0;
    var fromBytes$6 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$4) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$5 = function toBytes() {
      return toBytes$27(id$4);
    };

    var id$3 = setSpecialDay;
    var maxSize$3 = 0;
    var fromBytes$5 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$3) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$4 = function toBytes() {
      return toBytes$27(id$3);
    };

    var id$2 = setSpecialOperation;
    var maxSize$2 = 1;
    var fromBytes$4 = function fromBytes(bytes) {
      var buffer = new CommandBinaryBuffer$1(bytes);
      var flags = buffer.getUint8();
      var electroMagneticIndication = !!(flags & 1);
      var magneticIndication = !!(flags & 2);
      return {
        electroMagneticIndication: electroMagneticIndication,
        magneticIndication: magneticIndication
      };
    };
    var toBytes$3 = function toBytes(parameters) {
      var buffer = new CommandBinaryBuffer$1(maxSize$2);
      var flags = 0;
      if (parameters.electroMagneticIndication) {
        flags |= 1;
      }
      if (parameters.magneticIndication) {
        flags |= 2;
      }
      buffer.setUint8(flags);
      return toBytes$27(id$2, buffer.data);
    };

    var id$1 = turnRelayOff;
    var maxSize$1 = 0;
    var fromBytes$3 = function fromBytes(bytes) {
      if (bytes.length !== maxSize$1) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$2 = function toBytes() {
      return toBytes$27(id$1);
    };

    var id = turnRelayOn;
    var maxSize = 0;
    var fromBytes$2 = function fromBytes(bytes) {
      if (bytes.length !== maxSize) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      return {};
    };
    var toBytes$1 = function toBytes() {
      return toBytes$27(id);
    };

    var toBytesMap = {};
    var fromBytesMap = {};
    var nameMap = uplinkNames;
    var fromBytes$1 = getFromBytes$2(fromBytesMap, nameMap);
    toBytesMap[id$13] = toBytes$14;
    toBytesMap[id$12] = toBytes$13;
    toBytesMap[id$11] = toBytes$12;
    toBytesMap[id$10] = toBytes$11;
    toBytesMap[id$] = toBytes$10;
    toBytesMap[id$_] = toBytes$;
    toBytesMap[id$Z] = toBytes$_;
    toBytesMap[id$Y] = toBytes$Z;
    toBytesMap[id$X] = toBytes$Y;
    toBytesMap[id$W] = toBytes$X;
    toBytesMap[id$V] = toBytes$W;
    toBytesMap[id$U] = toBytes$V;
    toBytesMap[id$T] = toBytes$U;
    toBytesMap[id$S] = toBytes$T;
    toBytesMap[id$R] = toBytes$S;
    toBytesMap[id$Q] = toBytes$R;
    toBytesMap[id$P] = toBytes$Q;
    toBytesMap[id$O] = toBytes$P;
    toBytesMap[id$N] = toBytes$O;
    toBytesMap[id$M] = toBytes$N;
    toBytesMap[id$L] = toBytes$M;
    toBytesMap[id$K] = toBytes$L;
    toBytesMap[id$J] = toBytes$K;
    toBytesMap[id$I] = toBytes$J;
    toBytesMap[id$H] = toBytes$I;
    toBytesMap[id$G] = toBytes$H;
    toBytesMap[id$F] = toBytes$G;
    toBytesMap[id$E] = toBytes$F;
    toBytesMap[id$D] = toBytes$E;
    toBytesMap[id$C] = toBytes$D;
    toBytesMap[id$B] = toBytes$C;
    toBytesMap[id$A] = toBytes$B;
    toBytesMap[id$z] = toBytes$A;
    toBytesMap[id$y] = toBytes$z;
    toBytesMap[id$x] = toBytes$y;
    toBytesMap[id$w] = toBytes$x;
    toBytesMap[id$v] = toBytes$w;
    toBytesMap[id$u] = toBytes$v;
    toBytesMap[id$t] = toBytes$u;
    toBytesMap[id$s] = toBytes$t;
    toBytesMap[id$r] = toBytes$s;
    toBytesMap[id$q] = toBytes$r;
    toBytesMap[id$p] = toBytes$q;
    toBytesMap[id$o] = toBytes$p;
    toBytesMap[id$n] = toBytes$o;
    toBytesMap[id$m] = toBytes$n;
    toBytesMap[id$l] = toBytes$m;
    toBytesMap[id$k] = toBytes$l;
    toBytesMap[id$j] = toBytes$k;
    toBytesMap[id$i] = toBytes$j;
    toBytesMap[id$h] = toBytes$i;
    toBytesMap[id$g] = toBytes$h;
    toBytesMap[id$f] = toBytes$g;
    toBytesMap[id$e] = toBytes$f;
    toBytesMap[id$d] = toBytes$e;
    toBytesMap[id$c] = toBytes$d;
    toBytesMap[id$b] = toBytes$c;
    toBytesMap[id$a] = toBytes$b;
    toBytesMap[id$9] = toBytes$a;
    toBytesMap[id$8] = toBytes$9;
    toBytesMap[id$7] = toBytes$8;
    toBytesMap[id$6] = toBytes$7;
    toBytesMap[id$5] = toBytes$6;
    toBytesMap[id$4] = toBytes$5;
    toBytesMap[id$3] = toBytes$4;
    toBytesMap[id$2] = toBytes$3;
    toBytesMap[id$1] = toBytes$2;
    toBytesMap[id] = toBytes$1;
    fromBytesMap[id$13] = fromBytes$15;
    fromBytesMap[id$12] = fromBytes$14;
    fromBytesMap[id$11] = fromBytes$13;
    fromBytesMap[id$10] = fromBytes$12;
    fromBytesMap[id$] = fromBytes$11;
    fromBytesMap[id$_] = fromBytes$10;
    fromBytesMap[id$Z] = fromBytes$;
    fromBytesMap[id$Y] = fromBytes$_;
    fromBytesMap[id$X] = fromBytes$Z;
    fromBytesMap[id$W] = fromBytes$Y;
    fromBytesMap[id$V] = fromBytes$X;
    fromBytesMap[id$U] = fromBytes$W;
    fromBytesMap[id$T] = fromBytes$V;
    fromBytesMap[id$S] = fromBytes$U;
    fromBytesMap[id$R] = fromBytes$T;
    fromBytesMap[id$Q] = fromBytes$S;
    fromBytesMap[id$P] = fromBytes$R;
    fromBytesMap[id$O] = fromBytes$Q;
    fromBytesMap[id$N] = fromBytes$P;
    fromBytesMap[id$M] = fromBytes$O;
    fromBytesMap[id$L] = fromBytes$N;
    fromBytesMap[id$K] = fromBytes$M;
    fromBytesMap[id$J] = fromBytes$L;
    fromBytesMap[id$I] = fromBytes$K;
    fromBytesMap[id$H] = fromBytes$J;
    fromBytesMap[id$G] = fromBytes$I;
    fromBytesMap[id$F] = fromBytes$H;
    fromBytesMap[id$E] = fromBytes$G;
    fromBytesMap[id$D] = fromBytes$F;
    fromBytesMap[id$C] = fromBytes$E;
    fromBytesMap[id$B] = fromBytes$D;
    fromBytesMap[id$A] = fromBytes$C;
    fromBytesMap[id$z] = fromBytes$B;
    fromBytesMap[id$y] = fromBytes$A;
    fromBytesMap[id$x] = fromBytes$z;
    fromBytesMap[id$w] = fromBytes$y;
    fromBytesMap[id$v] = fromBytes$x;
    fromBytesMap[id$u] = fromBytes$w;
    fromBytesMap[id$t] = fromBytes$v;
    fromBytesMap[id$s] = fromBytes$u;
    fromBytesMap[id$r] = fromBytes$t;
    fromBytesMap[id$q] = fromBytes$s;
    fromBytesMap[id$p] = fromBytes$r;
    fromBytesMap[id$o] = fromBytes$q;
    fromBytesMap[id$n] = fromBytes$p;
    fromBytesMap[id$m] = fromBytes$o;
    fromBytesMap[id$l] = fromBytes$n;
    fromBytesMap[id$k] = fromBytes$m;
    fromBytesMap[id$j] = fromBytes$l;
    fromBytesMap[id$i] = fromBytes$k;
    fromBytesMap[id$h] = fromBytes$j;
    fromBytesMap[id$g] = fromBytes$i;
    fromBytesMap[id$f] = fromBytes$h;
    fromBytesMap[id$e] = fromBytes$g;
    fromBytesMap[id$d] = fromBytes$f;
    fromBytesMap[id$c] = fromBytes$e;
    fromBytesMap[id$b] = fromBytes$d;
    fromBytesMap[id$a] = fromBytes$c;
    fromBytesMap[id$9] = fromBytes$b;
    fromBytesMap[id$8] = fromBytes$a;
    fromBytesMap[id$7] = fromBytes$9;
    fromBytesMap[id$6] = fromBytes$8;
    fromBytesMap[id$5] = fromBytes$7;
    fromBytesMap[id$4] = fromBytes$6;
    fromBytesMap[id$3] = fromBytes$5;
    fromBytesMap[id$2] = fromBytes$4;
    fromBytesMap[id$1] = fromBytes$3;
    fromBytesMap[id] = fromBytes$2;

    // 0b10010001 (segmentIndex: 1, segmentsNumber: 1, isLast: true)
    var SINGLE_SEGMENT_FLAG = 0x91;
    var DATA_SEGMENT_COMMAND_ID = 0x1e;
    var get = function get(bytes) {
      // check if it is a DataSegment command
      if (bytes[0] !== DATA_SEGMENT_COMMAND_ID) {
        return {};
      }

      // DataSegment command size
      var size = bytes[1];

      // segment metadata
      var flag = bytes[3];

      // payload
      var data = bytes.slice(4, size + 2);

      // lrc is not needed for MTX
      // const expectedLrc = calculateLrc(bytes.slice(0, size + 2));
      // const actualLrc = bytes[size + 2];

      // just a single data segment with correct lrc
      if (flag === SINGLE_SEGMENT_FLAG /* && expectedLrc === actualLrc */) {
        return data;
      }
      return null;
    };
    var set = function set(bytes) {
      var body = [DATA_SEGMENT_COMMAND_ID, bytes.length + 2, 0, SINGLE_SEGMENT_FLAG].concat(_toConsumableArray(bytes));
      return [].concat(_toConsumableArray(body), [calculateLrc(body)]);
    };

    // export
    fromBytes = fromBytes$1;
    toBytes = toBytes$15;
    getDataSegment = get;
    setDataSegment = set;

})();
//#endregion
