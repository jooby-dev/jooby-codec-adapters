// encoded message should be less than this size
// to be able to send to a device
const MAX_DATA_SEGMENT_SIZE = 50;

// will have encoder/decoder after init
let message;

// helpers for data segments
let getDataSegment;
let setDataSegment;

// helper
const decode = ( fromBytes, input ) => {
    const data = {bytes: input.bytes, message: null};
    const segment = getDataSegment(input.bytes);
    const warnings = [];
    const errors = [];

    // just a single data segment
    if ( segment ) {
        const decodeResult = fromBytes(segment);

        if ( decodeResult.error ) {
            errors.push(decodeResult.error);
            // there may be some partially decoded result
            data.message = decodeResult.message;
        } else {
            data.message = decodeResult;
        }
    } else {
        warnings.push('should be present one data segment');
    }

    return {data, warnings, errors};
};

/*
  Get bytes from message.

  Input is an object with the following fields:
    * data - object with data to encode
    * data.commands - array of commands
    * data.config - object with messageId, accessLevel and aesKey
    * fPort - downlink fPort

  Output must be an object with the following fields:
    * bytes - byte array containing the downlink payload
*/
function encodeDownlink ( input ) {
    const bytes = message.downlink.toBytes(input.data.commands, input.data.config || {});
    const result = {fPort: 1};

    // send nothing if not fit in a single data segment
    if ( bytes.length > MAX_DATA_SEGMENT_SIZE ) {
        result.bytes = [];
        result.warnings = ['payload is too big for a single data segment'];
    } else {
        result.bytes = setDataSegment(bytes);
    }

    return result;
}


/*
  Get message from bytes.

  Input is an object with the following fields:
    * bytes - byte array containing the uplink payload, e.g. [255, 230, 255, 0]
    * fPort - uplink fPort

  Output must be an object with the following fields:
    * data - object representing the decoded payload
*/
function decodeUplink ( input ) {
    return decode(message.uplink.fromBytes, input);
}


/*
  Get message from bytes.

  Input is an object with the following fields:
    * bytes - byte array containing the downlink payload, e.g. [255, 230, 255, 0]
    * fPort - downlink fPort

  Output must be an object with the following fields:
    * data - object representing the decoded payload
*/
function decodeDownlink ( input ) {
    return decode(message.downlink.fromBytes, input);
}


//#region [autogenerated jooby-codec bundle from index.js]
import { describe, it } from 'node:test';
import assert from 'node:assert';

var getBytesFromHex = hex => {
  let cleanHex = hex.trim();
  if (!cleanHex) {
    return [];
  }
  cleanHex = cleanHex.replace(/0x/g, '').split(/\s+/).map(byte => byte.padStart(2, '0')).join('');
  if (cleanHex.length % 2 !== 0) {
    cleanHex = `0${cleanHex}`;
  }
  const resultLength = cleanHex.length / 2;
  const bytes = new Array(resultLength);
  for (let index = 0; index < resultLength; index++) {
    bytes[index] = parseInt(cleanHex.substring(index * 2, index * 2 + 2), 16);
  }
  return bytes;
};

const hexFormatOptions = {
  separator: ' ',
  prefix: ''
};

var getHexFromBytes = (function (bytes) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const {
    separator,
    prefix
  } = Object.assign({}, hexFormatOptions, options);
  return bytes.map(byte => `${prefix}${byte.toString(16).padStart(2, '0')}`).join(separator);
});

const INT8_SIZE = 1;
const INT16_SIZE = 2;
const INT24_SIZE = 3;
const INT32_SIZE = 4;
const {
  log,
  pow,
  LN2
} = Math;
const readFloat = (buffer, offset, isLittleEndian, mLen, bytes) => {
  var e,
    m,
    eLen = bytes * 8 - mLen - 1,
    eMax = (1 << eLen) - 1,
    eBias = eMax >> 1,
    nBits = -7,
    i = isLittleEndian ? bytes - 1 : 0,
    d = isLittleEndian ? -1 : 1,
    s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 0x100 + buffer[offset + i], i += d, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 0x100 + buffer[offset + i], i += d, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * pow(2, e - mLen);
};
const writeFloat = (buffer, offset, value, isLittleEndian, mLen, bytes) => {
  var e,
    m,
    c,
    eLen = bytes * 8 - mLen - 1,
    eMax = (1 << eLen) - 1,
    eBias = eMax >> 1,
    rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
    i = isLittleEndian ? 0 : bytes - 1,
    d = isLittleEndian ? 1 : -1,
    s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value < 0 && (value = -value);
  if (value !== value || value === Infinity) {
    m = value !== value ? 1 : 0;
    e = eMax;
  } else {
    e = log(value) / LN2 | 0;
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 0x100, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 0x100, eLen -= 8);
  buffer[offset + i - d] |= s * 0x80;
};
const be2 = [1, 0];
const be3 = [2, 1, 0];
const be4 = [3, 2, 1, 0];
const le2 = [0, 1];
const le3 = [0, 1, 2];
const le4 = [0, 1, 2, 3];
const readUint8 = (buffer, offset) => buffer[offset];
const readUint16 = (buffer, offset, isLittleEndian) => {
  const order = isLittleEndian ? le2 : be2;
  const b0 = buffer[offset + order[0]];
  const b1 = buffer[offset + order[1]] << 8;
  return b0 | b1;
};
const readUint24 = (buffer, offset, isLittleEndian) => {
  const order = isLittleEndian ? le3 : be3;
  const b0 = buffer[offset + order[0]];
  const b1 = buffer[offset + order[1]] << 8;
  const b2 = buffer[offset + order[2]] << 16;
  return b0 | b1 | b2;
};
const readUint32 = (buffer, offset, isLittleEndian) => {
  const order = isLittleEndian ? le4 : be4;
  const b0 = buffer[offset + order[3]] * 0x1000000;
  const b1 = buffer[offset + order[2]] * 0x10000;
  const b2 = buffer[offset + order[1]] * 0x100;
  const b3 = buffer[offset + order[0]];
  return b0 + b1 + b2 + b3;
};
const writeUint8 = (buffer, offset, value) => {
  buffer[offset] = value & 0xff;
};
const writeUint16 = (buffer, offset, value, isLittleEndian) => {
  const order = isLittleEndian ? le2 : be2;
  buffer[offset + order[0]] = value & 0xff;
  buffer[offset + order[1]] = value >>> 8 & 0xff;
};
const writeUint24 = (buffer, offset, value, isLittleEndian) => {
  const order = isLittleEndian ? le3 : be3;
  buffer[offset + order[0]] = value & 0xff;
  buffer[offset + order[1]] = value >>> 8 & 0xff;
  buffer[offset + order[2]] = value >>> 16 & 0xff;
};
const writeUint32 = (buffer, offset, value, isLittleEndian) => {
  const order = isLittleEndian ? le4 : be4;
  buffer[offset + order[0]] = value & 0xff;
  buffer[offset + order[1]] = value >>> 8 & 0xff;
  buffer[offset + order[2]] = value >>> 16 & 0xff;
  buffer[offset + order[3]] = value >>> 24 & 0xff;
};
function BinaryBuffer(dataOrLength) {
  let isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (typeof dataOrLength === 'number') {
    const bytes = new Array(dataOrLength).fill(0);
    this.data = bytes;
  } else {
    this.data = dataOrLength;
  }
  this.offset = 0;
  this.isLittleEndian = isLittleEndian;
}
BinaryBuffer.prototype = {
  toUint8Array() {
    return this.data;
  },
  seek(position) {
    if (position < 0 || position >= this.data.length) {
      throw new Error('Invalid position.');
    }
    this.offset = position;
  },
  setInt8(value) {
    writeUint8(this.data, this.offset, value < 0 ? value | 0x100 : value);
    this.offset += INT8_SIZE;
  },
  getInt8() {
    const result = readUint8(this.data, this.offset);
    this.offset += INT8_SIZE;
    return result & 0x80 ? result ^ -256 : result;
  },
  setUint8(value) {
    writeUint8(this.data, this.offset, value);
    this.offset += INT8_SIZE;
  },
  getUint8() {
    const result = readUint8(this.data, this.offset);
    this.offset += INT8_SIZE;
    return result;
  },
  setInt16(value) {
    let isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint16(this.data, this.offset, value < 0 ? value | 0x10000 : value, isLittleEndian);
    this.offset += INT16_SIZE;
  },
  getInt16() {
    let isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    const result = readUint16(this.data, this.offset, isLittleEndian);
    this.offset += INT16_SIZE;
    return result & 0x8000 ? result ^ -65536 : result;
  },
  setUint16(value) {
    let isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint16(this.data, this.offset, value, isLittleEndian);
    this.offset += INT16_SIZE;
  },
  getUint16() {
    let isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    const result = readUint16(this.data, this.offset, isLittleEndian);
    this.offset += INT16_SIZE;
    return result;
  },
  setInt24(value) {
    let isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint24(this.data, this.offset, value < 0 ? value | 0x1000000 : value, isLittleEndian);
    this.offset += INT24_SIZE;
  },
  getInt24() {
    let isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    const result = readUint24(this.data, this.offset, isLittleEndian);
    this.offset += INT24_SIZE;
    return result & 0x800000 ? result ^ -16777216 : result;
  },
  setUint24(value) {
    let isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint24(this.data, this.offset, value, isLittleEndian);
    this.offset += INT24_SIZE;
  },
  getUint24() {
    let isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    const result = readUint24(this.data, this.offset, isLittleEndian);
    this.offset += INT24_SIZE;
    return result;
  },
  setInt32(value) {
    let isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint32(this.data, this.offset, value < 0 ? value | 0x100000000 : value, isLittleEndian);
    this.offset += INT32_SIZE;
  },
  getInt32() {
    let isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    const result = readUint32(this.data, this.offset, isLittleEndian);
    this.offset += INT32_SIZE;
    return result & 0x80000000 ? result ^ -4294967296 : result;
  },
  setUint32(value) {
    let isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint32(this.data, this.offset, value, isLittleEndian);
    this.offset += INT32_SIZE;
  },
  getUint32() {
    let isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    const result = readUint32(this.data, this.offset, isLittleEndian);
    this.offset += INT32_SIZE;
    return result;
  },
  setFloat32(value) {
    let isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeFloat(this.data, this.offset, value, isLittleEndian, 23, 4);
    this.offset += INT32_SIZE;
  },
  getFloat32() {
    let isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    const result = readFloat(this.data, this.offset, isLittleEndian, 23, 4);
    this.offset += INT32_SIZE;
    return result;
  },
  setString(value) {
    this.setUint8(value.length);
    for (let index = 0; index < value.length; ++index) {
      this.setUint8(value.charCodeAt(index));
    }
  },
  getString() {
    const size = this.getUint8();
    const endIndex = this.offset + size;
    const chars = [];
    while (this.offset < endIndex) {
      chars.push(String.fromCharCode(this.getUint8()));
    }
    return chars.join('');
  },
  getBytesToOffset() {
    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offset;
    return this.data.slice(0, offset);
  },
  getBytesLeft() {
    return this.getBytes(this.bytesLeft);
  },
  getBytes(length) {
    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
    this.offset = offset + length;
    return this.data.slice(offset, this.offset);
  },
  setBytes(data) {
    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
    const bytes = this.data;
    bytes.splice(offset, data.length, ...data);
    this.data = bytes;
    this.offset = offset + data.length;
  }
};
Object.defineProperties(BinaryBuffer.prototype, {
  size: {
    get() {
      return this.data.length;
    }
  },
  isEmpty: {
    get() {
      if (this.offset > this.data.length) {
        throw new Error(`current offset ${this.offset} is outside the bounds of the buffer`);
      }
      return this.data.length - this.offset === 0;
    }
  },
  bytesLeft: {
    get() {
      return this.data.length - this.offset;
    }
  },
  position: {
    get() {
      return this.offset;
    }
  }
});

const fromObject = function () {
  let bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let booleanObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let result = 0;
  for (const name in booleanObject) {
    if (name in bitMask && booleanObject[name]) {
      result |= bitMask[name];
    }
  }
  return result;
};
const toObject = function () {
  let bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  const result = {};
  for (const name in bitMask) {
    result[name] = (value & bitMask[name]) !== 0;
  }
  return result;
};
const extractBits = (value, bitsNumber, startIndex) => (1 << bitsNumber) - 1 & value >> startIndex - 1;
const fillBits = (value, bitsNumber, startIndex, valueToSet) => {
  const mask = (1 << bitsNumber) - 1 << startIndex - 1;
  let newValueToSet = valueToSet;
  let result = value;
  result &= ~mask;
  newValueToSet <<= startIndex - 1;
  result |= newValueToSet;
  return result;
};

const DEVICE_TYPE_INVALID_CHAR = 'x';
const nibbles1 = ['.', '1', '3', 'R', 'M'];
const nibbles2 = ['.', 'A', 'G', 'R', 'T', 'D'];
const nibbles3 = ['.', '0', '1', '2', '3', '4', '5'];
const nibbles4 = ['.', 'A', 'B', 'C', 'D', 'E', 'F'];
const nibbles5 = ['.', 'A', 'B', 'C', 'D', 'E', 'F', 'H', 'K', 'G'];
const nibbles6 = ['.', '1', '2', '3', '4'];
const nibbles7 = ['.', 'L', 'M', 'Z', 'K'];
const nibbles8 = ['.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
const nibbles9 = ['.', 'D', 'B', 'C', 'E', 'P', 'R', 'O', 'L', 'F', 'S', 'M', 'Y', 'G', 'N', 'U'];
const nibbles10 = ['.', '0', '1', '2', '3', '4', '5', '6', 'P', 'R', 'L', 'E', 'G', '-', '/'];
const nibbles11 = ['.', 'H', 'A', 'T', '0', '0', '0', '0', '0', '1', '2', '3', '4', '0', '0', '0'];
const nibbles12 = ['.', '0', '1', '2', '3', '4', '5', '6', '7', '8', 'I', 'X', 'G', 'W', 'M', '-'];
const splitByte = byte => [byte >> 4, byte & 0x0F];
const splitToNibbles = data => {
  const result = new Array(data.length * 2).fill(0);
  data.forEach((byte, index) => {
    const [high, low] = splitByte(byte);
    result[index * 2] = high;
    result[index * 2 + 1] = low;
  });
  return result;
};
const joinNibbles = nibbles => {
  const hex = [];
  nibbles.forEach(nibble => hex.push(nibble.toString(16)));
  if (nibbles.length & 1) {
    hex.push('0');
  }
  return getBytesFromHex(hex.join(''));
};
const fromBytesMtx = nibbles => {
  if (nibbles.length !== 14 && nibbles.length !== 16) {
    throw new Error('Device type bytes wrong size');
  }
  const type = ['MTX '];
  type.push(nibbles1[nibbles[0]] ?? DEVICE_TYPE_INVALID_CHAR);
  type.push(nibbles2[nibbles[1]] ?? DEVICE_TYPE_INVALID_CHAR);
  type.push(nibbles3[nibbles[2]] ?? DEVICE_TYPE_INVALID_CHAR);
  type.push(nibbles3[nibbles[3]] ?? DEVICE_TYPE_INVALID_CHAR);
  type.push('.');
  type.push(nibbles4[nibbles[4]] ?? DEVICE_TYPE_INVALID_CHAR);
  type.push(nibbles5[nibbles[5]] ?? DEVICE_TYPE_INVALID_CHAR);
  type.push('.');
  type.push(nibbles6[nibbles[6]] ?? DEVICE_TYPE_INVALID_CHAR);
  type.push(nibbles7[nibbles[7]] ?? DEVICE_TYPE_INVALID_CHAR);
  const revision = nibbles[8];
  type.push(nibbles8[nibbles[9]] ?? DEVICE_TYPE_INVALID_CHAR);
  type.push('-');
  let deviceProtocolIndex;
  if (nibbles.length < 14 || nibbles[12] === 0 && nibbles[13] === 0) {
    type.push(nibbles9[nibbles[10]] ?? DEVICE_TYPE_INVALID_CHAR);
    deviceProtocolIndex = 11;
  } else if (nibbles[13] === 0) {
    type.push(nibbles9[nibbles[10]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles9[nibbles[11]] ?? DEVICE_TYPE_INVALID_CHAR);
    deviceProtocolIndex = 12;
  } else {
    type.push(nibbles9[nibbles[10]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles9[nibbles[11]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles9[nibbles[12]] ?? DEVICE_TYPE_INVALID_CHAR);
    deviceProtocolIndex = 13;
  }
  const deviceProtocolNibble = nibbles[deviceProtocolIndex];
  if (deviceProtocolNibble && deviceProtocolNibble !== 0) {
    type.push(nibbles11[deviceProtocolNibble] ?? DEVICE_TYPE_INVALID_CHAR);
  }
  return {
    type: type.join(''),
    revision,
    meterType: 0
  };
};
const toBytesMtx = (type, prefix, revision) => {
  const nibbles = [];
  if (type.length < 11) {
    throw new Error('Wrong format');
  }
  nibbles.push(nibbles1.indexOf(type[0]));
  nibbles.push(nibbles2.indexOf(type[1]));
  nibbles.push(nibbles3.indexOf(type[2]));
  nibbles.push(nibbles3.indexOf(type[3]));
  if (type[4] !== '.') {
    throw new Error('Wrong format');
  }
  nibbles.push(nibbles4.indexOf(type[5]));
  nibbles.push(nibbles5.indexOf(type[6]));
  if (type[7] !== '.') {
    throw new Error('Wrong format');
  }
  nibbles.push(nibbles6.indexOf(type[8]));
  nibbles.push(nibbles7.indexOf(type[9]));
  nibbles.push(revision ?? 0);
  nibbles.push(nibbles8.indexOf(type[10]));
  if (type[11] !== '-') {
    throw new Error('Wrong format');
  }
  const deviceProtocolIndex = type.length > 13 ? type.length - 1 : type.length;
  for (let index = 12; index < deviceProtocolIndex; index++) {
    nibbles.push(nibbles9.indexOf(type[index]));
  }
  if (deviceProtocolIndex < type.length) {
    nibbles.push(nibbles11.indexOf(type[deviceProtocolIndex]));
  }
  const bytes = joinNibbles(nibbles);
  const result = new Array(9).fill(0);
  result[0] = 0;
  for (let index = 0; index < bytes.length; index++) {
    result[index + (bytes.length < 8 ? 1 : 0)] = bytes[index];
  }
  return result;
};
const fromBytesMtx2 = nibbles => {
  if (nibbles.length < 14) {
    throw new Error('The buffer is too small');
  }
  const type = ['MTX '];
  const separator = nibbles[1] === 5 ? '-' : ' ';
  type.push(nibbles1[nibbles[0]] ?? DEVICE_TYPE_INVALID_CHAR);
  type.push(nibbles2[nibbles[1]] ?? DEVICE_TYPE_INVALID_CHAR);
  type.push(separator);
  for (let index = 2; index < nibbles.length; index++) {
    if (nibbles[index] !== 0) {
      type.push(nibbles10[nibbles[index]] ?? DEVICE_TYPE_INVALID_CHAR);
    }
  }
  return {
    type: type.join(''),
    meterType: 0
  };
};
const toBytesMtx2 = type => {
  if (type.length < 3) {
    throw new Error('Wrong format');
  }
  const nibbles = [];
  nibbles.push(nibbles1.indexOf(type[0]));
  nibbles.push(nibbles2.indexOf(type[1]));
  for (let index = 3; index < type.length; index++) {
    nibbles.push(nibbles10.indexOf(type[index]));
  }
  const bytes = joinNibbles(nibbles);
  if (bytes.length === 8) {
    return bytes;
  }
  if (bytes.length > 8) {
    throw new Error('Wrong format');
  }
  const result = new Array(8).fill(0);
  for (let index = 0; index < bytes.length; index++) {
    result[index] = bytes[index];
  }
  return result;
};
const fromBytesM = nibbles => {
  if (nibbles.length < 14) {
    throw new Error('The buffer is too small');
  }
  const type = [];
  type.push(nibbles1[nibbles[0]] ?? DEVICE_TYPE_INVALID_CHAR);
  for (let index = 1; index < nibbles.length; index++) {
    if (nibbles[index] !== 0) {
      type.push(nibbles12[nibbles[index]] ?? DEVICE_TYPE_INVALID_CHAR);
    }
  }
  return {
    type: type.join(''),
    meterType: 0
  };
};
const toBytesM = type => {
  if (type.length < 1) {
    throw new Error('Wrong format');
  }
  const nibbles = [];
  nibbles.push(nibbles1.indexOf(type[0]));
  for (let index = 1; index < type.length; index++) {
    nibbles.push(nibbles12.indexOf(type[index]));
  }
  const bytes = joinNibbles(nibbles);
  const result = new Array(8).fill(0);
  for (let index = 0; index < bytes.length && index < 8; index++) {
    result[index] = bytes[index];
  }
  return result;
};
const fromBytes$23 = bytes => {
  if (bytes.length !== 9) {
    throw new Error('The buffer is too small');
  }
  let result;
  const reserve = [0x00, 0x05, 0x06, 0x07, 0x09, 0x7f, 0xef];
  const position = reserve.indexOf(bytes[0]) !== -1 ? 2 : 0;
  const nibbles = splitToNibbles(bytes.slice(0, 8));
  const deviceTypeNibble = nibbles[position];
  const deviceType = nibbles1[deviceTypeNibble];
  if (deviceType === '1' || deviceType === '3') {
    result = fromBytesMtx(nibbles.slice(position));
  } else {
    result = deviceType === 'M' ? fromBytesM(nibbles) : fromBytesMtx2(nibbles);
  }
  result.meterType = bytes[8];
  return result;
};
const toBytes$24 = (_ref, prefix) => {
  let {
    type,
    revision,
    meterType
  } = _ref;
  if (!type.startsWith('MTX ')) {
    throw new Error('Wrong format');
  }
  let result;
  const content = type.substring(4);
  const deviceTypeSymbol = type[4];
  if (deviceTypeSymbol === '1' || deviceTypeSymbol === '3') {
    result = toBytesMtx(content, prefix, revision);
  } else {
    result = deviceTypeSymbol === 'M' ? toBytesM(content) : toBytesMtx2(content);
  }
  result[8] = meterType;
  return result;
};

const DATA_REQUEST = 0x50;
const DATA_RESPONSE = 0x51;
const IDENT_REQUEST = 0x52;
const IDENT_RESPONSE = 0x53;
const L2_SET_ADDRESS_REQUEST = 0x54;
const L2_SET_ADDRESS_RESPONSE = 0x55;
const L2_CHECK_ADDRESS_REQUEST = 0x56;
const L2_CHECK_ADDRESS_RESPONSE = 0x57;
const L2_RM_ADDRESS_REQUEST = 0x58;
const L2_RM_ADDRESS_RESPONSE = 0x59;
const FRAGMENT_REQUEST = 0x5A;
const FRAGMENT_RESPONSE = 0x5B;
const INVALID = 0xFF;

var frameTypes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DATA_REQUEST: DATA_REQUEST,
    DATA_RESPONSE: DATA_RESPONSE,
    FRAGMENT_REQUEST: FRAGMENT_REQUEST,
    FRAGMENT_RESPONSE: FRAGMENT_RESPONSE,
    IDENT_REQUEST: IDENT_REQUEST,
    IDENT_RESPONSE: IDENT_RESPONSE,
    INVALID: INVALID,
    L2_CHECK_ADDRESS_REQUEST: L2_CHECK_ADDRESS_REQUEST,
    L2_CHECK_ADDRESS_RESPONSE: L2_CHECK_ADDRESS_RESPONSE,
    L2_RM_ADDRESS_REQUEST: L2_RM_ADDRESS_REQUEST,
    L2_RM_ADDRESS_RESPONSE: L2_RM_ADDRESS_RESPONSE,
    L2_SET_ADDRESS_REQUEST: L2_SET_ADDRESS_REQUEST,
    L2_SET_ADDRESS_RESPONSE: L2_SET_ADDRESS_RESPONSE
});

var invertObject = source => {
  const target = {};
  for (const property in source) {
    const value = source[property];
    target[value] = property;
  }
  return target;
};

var frameNames = invertObject(frameTypes);

const ENERGY_REG_FAULT = 0x01;
const VENDOR_PAR_FAULT = 0x02;
const OP_PAR_FAULT = 0x03;
const ACCESS_CLOSED = 0x10;
const ERR_ACCESS = 0x11;
const CASE_OPEN$1 = 0x12;
const CASE_CLOSE = 0x13;
const MAGNETIC_ON$1 = 0x14;
const MAGNETIC_OFF = 0x15;
const CHANGE_ACCESS_KEY0 = 0x20;
const CHANGE_ACCESS_KEY1 = 0x21;
const CHANGE_ACCESS_KEY2 = 0x22;
const CHANGE_ACCESS_KEY3 = 0x23;
const CHANGE_PAR_LOCAL = 0x24;
const CHANGE_PAR_REMOTE = 0x25;
const CMD_CHANGE_TIME = 0x26;
const CMD_RELAY_ON = 0x27;
const CMD_RELAY_OFF = 0x28;
const CHANGE_COR_TIME = 0x29;
const ENERGY_REG_OVERFLOW = 0x31;
const CHANGE_TARIFF_TBL = 0x32;
const SET_TARIFF_TBL = 0x33;
const SUMMER_TIME = 0x34;
const WINTER_TIME = 0x35;
const RELAY_ON = 0x36;
const RELAY_OFF = 0x37;
const RESTART$1 = 0x38;
const WD_RESTART = 0x39;
const V_MAX_OK = 0x40;
const V_MAX_OVER = 0x41;
const V_MIN_OK = 0x42;
const V_MIN_OVER = 0x43;
const T_MAX_OK = 0x44;
const T_MAX_OVER = 0x45;
const T_MIN_OK = 0x46;
const T_MIN_OVER = 0x47;
const F_MAX_OK = 0x48;
const F_MAX_OVER = 0x49;
const F_MIN_OK = 0x4A;
const F_MIN_OVER = 0x4B;
const I_MAX_OK = 0x4C;
const I_MAX_OVER = 0x4D;
const P_MAX_OK = 0x4E;
const P_MAX_OVER = 0x4F;
const POWERSALDO_OK = 0x50;
const POWERSALDO_OVER = 0x51;
const BAT_OK = 0x52;
const BAT_FAULT = 0x53;
const CAL_OK = 0x54;
const CAL_FAULT = 0x55;
const CLOCK_OK = 0x56;
const CLOCK_FAULT = 0x57;
const POWER_A_OFF = 0x58;
const POWER_A_ON = 0x59;
const CMD_RELAY_2_ON = 0x60;
const CMD_RELAY_2_OFF = 0x61;
const CROSSZERO_ENT0 = 0x62;
const CROSSZERO_ENT1 = 0x63;
const CROSSZERO_ENT2 = 0x64;
const CROSSZERO_ENT3 = 0x65;
const CALFLAG_SET = 0x66;
const CALFLAG_RESET = 0x67;
const BAD_TEST_EEPROM = 0x68;
const BAD_TEST_FRAM = 0x69;
const SET_NEW_SALDO = 0x70;
const SALDO_PARAM_BAD = 0x71;
const ACCPARAM_BAD = 0x72;
const ACCPARAM_EXT_BAD = 0x73;
const CALC_PERIOD_BAD = 0x74;
const BLOCK_TARIFF_BAD = 0x75;
const CALIBR_PARAM_BAD = 0x76;
const WINTER_SUMMER_BAD = 0x77;
const SALDO_EN_BAD = 0x78;
const TIME_CORRECT$1 = 0x79;
const CASE_TERMINAL_OPEN$1 = 0x7A;
const CASE_TERMINAL_CLOSE = 0x7B;
const CASE_MODULE_OPEN$1 = 0x7C;
const CASE_MODULE_CLOSE = 0x7D;
const RELAY_HARD_BAD_OFF = 0x90;
const RELAY_HARD_ON = 0x91;
const RELAY_HARD_BAD_ON = 0x93;
const RELAY_HARD_OFF = 0x94;
const SET_SALDO_PARAM = 0x9C;
const POWER_OVER_RELAY_OFF = 0x9D;
const CROSSZERO_EXP_ENT0 = 0x9E;
const CROSSZERO_EXP_ENT1 = 0x9F;
const CROSSZERO_EXP_ENT2 = 0xA0;
const CROSSZERO_EXP_ENT3 = 0xA1;
const TIME_CORRECT_NEW = 0xA2;
const EM_MAGNETIC_ON = 0xB0;
const EM_MAGNETIC_OFF = 0xB1;
const CURRENT_UNEQUIL_FAULT = 0xB2;
const CURRENT_UNEQUIL_OK = 0xB3;
const BIPOLAR_POWER_FAULT = 0xB4;
const BIPOLAR_POWER_OK = 0xB5;
const RESET_EM_FLAG = 0xB6;
const RESET_MAGN_FLAG = 0xB7;
const NVRAM_FAULT = 0xD0;
const SET_DEMAND_EN_1MIN = 0xE0;
const SET_DEMAND_EN_3MIN = 0xE1;
const SET_DEMAND_EN_5MIN = 0xE2;
const SET_DEMAND_EN_10MIN = 0xE3;
const SET_DEMAND_EN_15MIN = 0xE4;
const SET_DEMAND_EN_30MIN = 0xE5;
const SET_DEMAND_EN_60MIN = 0xE6;

var events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_CLOSED: ACCESS_CLOSED,
    ACCPARAM_BAD: ACCPARAM_BAD,
    ACCPARAM_EXT_BAD: ACCPARAM_EXT_BAD,
    BAD_TEST_EEPROM: BAD_TEST_EEPROM,
    BAD_TEST_FRAM: BAD_TEST_FRAM,
    BAT_FAULT: BAT_FAULT,
    BAT_OK: BAT_OK,
    BIPOLAR_POWER_FAULT: BIPOLAR_POWER_FAULT,
    BIPOLAR_POWER_OK: BIPOLAR_POWER_OK,
    BLOCK_TARIFF_BAD: BLOCK_TARIFF_BAD,
    CALC_PERIOD_BAD: CALC_PERIOD_BAD,
    CALFLAG_RESET: CALFLAG_RESET,
    CALFLAG_SET: CALFLAG_SET,
    CALIBR_PARAM_BAD: CALIBR_PARAM_BAD,
    CAL_FAULT: CAL_FAULT,
    CAL_OK: CAL_OK,
    CASE_CLOSE: CASE_CLOSE,
    CASE_MODULE_CLOSE: CASE_MODULE_CLOSE,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN$1,
    CASE_OPEN: CASE_OPEN$1,
    CASE_TERMINAL_CLOSE: CASE_TERMINAL_CLOSE,
    CASE_TERMINAL_OPEN: CASE_TERMINAL_OPEN$1,
    CHANGE_ACCESS_KEY0: CHANGE_ACCESS_KEY0,
    CHANGE_ACCESS_KEY1: CHANGE_ACCESS_KEY1,
    CHANGE_ACCESS_KEY2: CHANGE_ACCESS_KEY2,
    CHANGE_ACCESS_KEY3: CHANGE_ACCESS_KEY3,
    CHANGE_COR_TIME: CHANGE_COR_TIME,
    CHANGE_PAR_LOCAL: CHANGE_PAR_LOCAL,
    CHANGE_PAR_REMOTE: CHANGE_PAR_REMOTE,
    CHANGE_TARIFF_TBL: CHANGE_TARIFF_TBL,
    CLOCK_FAULT: CLOCK_FAULT,
    CLOCK_OK: CLOCK_OK,
    CMD_CHANGE_TIME: CMD_CHANGE_TIME,
    CMD_RELAY_2_OFF: CMD_RELAY_2_OFF,
    CMD_RELAY_2_ON: CMD_RELAY_2_ON,
    CMD_RELAY_OFF: CMD_RELAY_OFF,
    CMD_RELAY_ON: CMD_RELAY_ON,
    CROSSZERO_ENT0: CROSSZERO_ENT0,
    CROSSZERO_ENT1: CROSSZERO_ENT1,
    CROSSZERO_ENT2: CROSSZERO_ENT2,
    CROSSZERO_ENT3: CROSSZERO_ENT3,
    CROSSZERO_EXP_ENT0: CROSSZERO_EXP_ENT0,
    CROSSZERO_EXP_ENT1: CROSSZERO_EXP_ENT1,
    CROSSZERO_EXP_ENT2: CROSSZERO_EXP_ENT2,
    CROSSZERO_EXP_ENT3: CROSSZERO_EXP_ENT3,
    CURRENT_UNEQUIL_FAULT: CURRENT_UNEQUIL_FAULT,
    CURRENT_UNEQUIL_OK: CURRENT_UNEQUIL_OK,
    EM_MAGNETIC_OFF: EM_MAGNETIC_OFF,
    EM_MAGNETIC_ON: EM_MAGNETIC_ON,
    ENERGY_REG_FAULT: ENERGY_REG_FAULT,
    ENERGY_REG_OVERFLOW: ENERGY_REG_OVERFLOW,
    ERR_ACCESS: ERR_ACCESS,
    F_MAX_OK: F_MAX_OK,
    F_MAX_OVER: F_MAX_OVER,
    F_MIN_OK: F_MIN_OK,
    F_MIN_OVER: F_MIN_OVER,
    I_MAX_OK: I_MAX_OK,
    I_MAX_OVER: I_MAX_OVER,
    MAGNETIC_OFF: MAGNETIC_OFF,
    MAGNETIC_ON: MAGNETIC_ON$1,
    NVRAM_FAULT: NVRAM_FAULT,
    OP_PAR_FAULT: OP_PAR_FAULT,
    POWERSALDO_OK: POWERSALDO_OK,
    POWERSALDO_OVER: POWERSALDO_OVER,
    POWER_A_OFF: POWER_A_OFF,
    POWER_A_ON: POWER_A_ON,
    POWER_OVER_RELAY_OFF: POWER_OVER_RELAY_OFF,
    P_MAX_OK: P_MAX_OK,
    P_MAX_OVER: P_MAX_OVER,
    RELAY_HARD_BAD_OFF: RELAY_HARD_BAD_OFF,
    RELAY_HARD_BAD_ON: RELAY_HARD_BAD_ON,
    RELAY_HARD_OFF: RELAY_HARD_OFF,
    RELAY_HARD_ON: RELAY_HARD_ON,
    RELAY_OFF: RELAY_OFF,
    RELAY_ON: RELAY_ON,
    RESET_EM_FLAG: RESET_EM_FLAG,
    RESET_MAGN_FLAG: RESET_MAGN_FLAG,
    RESTART: RESTART$1,
    SALDO_EN_BAD: SALDO_EN_BAD,
    SALDO_PARAM_BAD: SALDO_PARAM_BAD,
    SET_DEMAND_EN_10MIN: SET_DEMAND_EN_10MIN,
    SET_DEMAND_EN_15MIN: SET_DEMAND_EN_15MIN,
    SET_DEMAND_EN_1MIN: SET_DEMAND_EN_1MIN,
    SET_DEMAND_EN_30MIN: SET_DEMAND_EN_30MIN,
    SET_DEMAND_EN_3MIN: SET_DEMAND_EN_3MIN,
    SET_DEMAND_EN_5MIN: SET_DEMAND_EN_5MIN,
    SET_DEMAND_EN_60MIN: SET_DEMAND_EN_60MIN,
    SET_NEW_SALDO: SET_NEW_SALDO,
    SET_SALDO_PARAM: SET_SALDO_PARAM,
    SET_TARIFF_TBL: SET_TARIFF_TBL,
    SUMMER_TIME: SUMMER_TIME,
    TIME_CORRECT: TIME_CORRECT$1,
    TIME_CORRECT_NEW: TIME_CORRECT_NEW,
    T_MAX_OK: T_MAX_OK,
    T_MAX_OVER: T_MAX_OVER,
    T_MIN_OK: T_MIN_OK,
    T_MIN_OVER: T_MIN_OVER,
    VENDOR_PAR_FAULT: VENDOR_PAR_FAULT,
    V_MAX_OK: V_MAX_OK,
    V_MAX_OVER: V_MAX_OVER,
    V_MIN_OK: V_MIN_OK,
    V_MIN_OVER: V_MIN_OVER,
    WD_RESTART: WD_RESTART,
    WINTER_SUMMER_BAD: WINTER_SUMMER_BAD,
    WINTER_TIME: WINTER_TIME
});

var eventNames = invertObject(events);

const defaultFrameHeader = {
  type: DATA_REQUEST,
  destination: 0xffff,
  source: 0xfffe
};
const TARIFF_PLAN_SIZE = 11;
const OPERATOR_PARAMETERS_SIZE = 74;
const SEASON_PROFILE_DAYS_NUMBER = 7;
const SEASON_PROFILE_SIZE = 2 + SEASON_PROFILE_DAYS_NUMBER;
const TARIFF_NUMBER$1 = 4;
const PACKED_ENERGY_TYPE_SIZE = 1;
const ENERGY_SIZE = 4;
const DATE_SIZE$3 = 3;
const MIN_HALF_HOUR_PERIODS = 48;
const MAX_HALF_HOUR_PERIODS = 50;
const MIN_HALF_HOUR_COMMAND_SIZE = 3 + MIN_HALF_HOUR_PERIODS * 2;
const MAX_HALF_HOUR_COMMAND_SIZE = 4 + MAX_HALF_HOUR_PERIODS * 2;
const baseDisplaySetMask = {
  SET_ALL_SEGMENT_DISPLAY: 0x0001,
  SOFTWARE_VERSION: 0x0002,
  TOTAL_ACTIVE_ENERGY: 0x0004,
  ACTIVE_ENERGY_T1: 0x0008,
  ACTIVE_ENERGY_T2: 0x0010,
  ACTIVE_ENERGY_T3: 0x0020,
  ACTIVE_ENERGY_T4: 0x0040,
  ACTIVE_POWER_PER_PHASE: 0x0080,
  ACTIVE_POWER_IN_NEUTRAL: 0x0100,
  CURRENT_IN_PHASE: 0x0200,
  CURRENT_IN_NEUTRAL: 0x0400,
  VOLTAGE: 0x0800,
  HOUR_MINUTE_SECOND: 0x1000,
  DATE_MONTH_YEAR: 0x2000,
  TOTAL_EXPORTED_ACTIVE_ENERGY: 0x4000,
  EXPORTED_ACTIVE_ENERGY_T1: 0x8000,
  EXPORTED_ACTIVE_ENERGY_T2: 0x00010000,
  EXPORTED_ACTIVE_ENERGY_T3: 0x00020000,
  EXPORTED_ACTIVE_ENERGY_T4: 0x00040000,
  POWER_COEFFICIENT_PHASE_A: 0x00080000,
  POWER_COEFFICIENT_PHASE_B: 0x00100000,
  BATTERY_VOLTAGE: 0x00200000,
  POWER_THRESHOLD_T1: 0x00400000,
  POWER_THRESHOLD_T2: 0x00800000,
  POWER_THRESHOLD_T3: 0x01000000,
  POWER_THRESHOLD_T4: 0x02000000,
  CURRENT_BALANCE: 0x20000000
};
const displaySetMask = {
  ...baseDisplaySetMask,
  AUTO_SCREEN_SCROLLING: 0x80000000
};
const displaySetExtMask = {
  ...baseDisplaySetMask,
  MAGNET_INDUCTION: 0x08000000,
  OPTOPORT_SPEED: 0x40000000,
  SORT_DISPLAY_SCREENS: 0x80000000
};
const relaySet1Mask = {
  RELAY_ON_Y: 0x01,
  RELAY_ON_CENTER: 0x02,
  RELAY_ON_PB: 0x04,
  RELAY_ON_TARIFF_0: 0x08,
  RELAY_ON_TARIFF_1: 0x10,
  RELAY_ON_TARIFF_2: 0x20,
  RELAY_ON_TARIFF_3: 0x40,
  RELAY_ON_V_GOOD: 0x80
};
const relaySet2Mask = {
  RELAY_OFF_Y: 0x01,
  RELAY_OFF_CENTER: 0x02,
  RELAY_OFF_TARIFF_0: 0x04,
  RELAY_OFF_TARIFF_1: 0x08,
  RELAY_OFF_TARIFF_2: 0x10,
  RELAY_OFF_TARIFF_3: 0x20,
  RELAY_OFF_I_LIMIT: 0x40,
  RELAY_OFF_V_BAD: 0x80
};
const relaySet3Mask = {
  RELAY_OFF_LIM_TARIFF_0: 0x02,
  RELAY_OFF_LIM_TARIFF_1: 0x04,
  RELAY_OFF_LIM_TARIFF_2: 0x08,
  RELAY_OFF_LIM_TARIFF_3: 0x10,
  RELAY_OFF_PF_MIN: 0x20
};
const relaySet4Mask = {
  RELAY_ON_TIMEOUT: 0x01,
  RELAY_ON_SALDO: 0x02,
  RELAY_OFF_SALDO: 0x04,
  RELAY_OFF_SALDO_SOFT: 0x08,
  RELAY_OFF_MAGNET: 0x10,
  RELAY_ON_MAGNET_TIMEOUT: 0x20,
  RELAY_ON_MAGNET_AUTO: 0x40
};
const relaySet5Mask = {
  RELAY_OFF_UNEQUAL_CURRENT: 0x01,
  RELAY_ON_UNEQUAL_CURRENT: 0x02,
  RELAY_OFF_BIPOLAR_POWER: 0x04,
  RELAY_ON_BIPOLAR_POWER: 0x08
};
const define1Mask = {
  BLOCK_KEY_OPTOPORT: 0x02,
  MAGNET_SCREEN_CONST: 0x20
};
const eventStatusMask = {
  CASE_OPEN: 2 ** 0,
  MAGNETIC_ON: 2 ** 1,
  PARAMETERS_UPDATE_REMOTE: 2 ** 2,
  PARAMETERS_UPDATE_LOCAL: 2 ** 3,
  RESTART: 2 ** 4,
  ERROR_ACCESS: 2 ** 5,
  TIME_SET: 2 ** 6,
  TIME_CORRECT: 2 ** 7,
  DEVICE_FAILURE: 2 ** 8,
  CASE_TERMINAL_OPEN: 2 ** 9,
  CASE_MODULE_OPEN: 2 ** 10,
  TARIFF_TABLE_SET: 2 ** 11,
  TARIFF_TABLE_GET: 2 ** 12,
  PROTECTION_RESET_EM: 2 ** 13,
  PROTECTION_RESET_MAGNETIC: 2 ** 14
};
const extendedCurrentValues2RelayStatusMask = {
  RELAY_STATE: 2 ** 0,
  RELAY_UBAD: 2 ** 1,
  RELAY_UNEQ_CURRENT: 2 ** 4,
  RELAY_OFF_CENTER: 2 ** 5,
  RELAY_IMAX: 2 ** 6,
  RELAY_PMAX: 2 ** 7
};
const extendedCurrentValues2RelayStatus2Mask = {
  RELAY_COSFI: 2 ** 0,
  RELAY_SALDO_OFF_FLAG: 2 ** 1,
  RELAY_UNEQUIL_CURRENT_OFF: 2 ** 2,
  RELAY_BIPOLAR_POWER_OFF: 2 ** 3,
  RELAY_SALDO_OFF_ON_MAX_POWER: 2 ** 4,
  RELAY_HARD_ST1: 2 ** 5
};
const extendedCurrentValues2Status1Mask = {
  MAXVA: 2 ** 0,
  MINVA: 2 ** 1,
  MAXT: 2 ** 2,
  MINT: 2 ** 3,
  MAXF: 2 ** 4,
  MINF: 2 ** 5,
  MAXIA: 2 ** 6,
  MAXP: 2 ** 7
};
const extendedCurrentValues2Status2Mask = {
  MAX_POWER_SALDO: 2 ** 0,
  BATTERY_VBAT_BAD: 2 ** 1,
  CLOCK_UNSET: 2 ** 3,
  MIN_COS_FI: 2 ** 5
};
const extendedCurrentValues2Status3Mask = {
  UNEQUIL_CURRENT: 2 ** 0,
  BIPOLAR_POWER: 2 ** 1,
  POWER_A_NEGATIVE: 2 ** 6,
  POWER_B_NEGATIVE: 2 ** 7
};
const operatorParametersExtended3RelaySetMask = {
  RELAY_OFF_LIMIT_P_MINUS_T1: 0x04,
  RELAY_OFF_LIMIT_P_MINUS_T2: 0x08,
  RELAY_OFF_LIMIT_P_MINUS_T3: 0x10,
  RELAY_OFF_LIMIT_P_MINUS_T4: 0x20
};
function getPackedEnergies(buffer, energyType, tariffMapByte) {
  const byte = tariffMapByte >> TARIFF_NUMBER$1;
  const energies = new Array(TARIFF_NUMBER$1).fill(0);
  energies.forEach((energy, index) => {
    const isTariffExists = !!extractBits(byte, 1, index + 1);
    if (isTariffExists) {
      energies[index] = buffer.getUint32();
    } else {
      energies[index] = null;
    }
  });
  return energies;
}
function setPackedEnergyType(buffer, energyType, energies) {
  const indexShift = 1 + TARIFF_NUMBER$1;
  let tariffsByte = energyType;
  energies.forEach((energy, index) => {
    tariffsByte = fillBits(tariffsByte, 1, index + indexShift, Number(!!energy));
  });
  buffer.setUint8(tariffsByte);
}
function getEnergyPeriod(period) {
  if (period === 0xffff) {
    return {
      tariff: undefined,
      energy: undefined
    };
  }
  return {
    tariff: period >> 14 & 0x03,
    energy: period & 0x3fff
  };
}
function setEnergyPeriod(buffer, _ref) {
  let {
    tariff,
    energy
  } = _ref;
  if (tariff !== undefined && energy !== undefined) {
    buffer.setUint16(tariff << 14 | energy & 0x3fff);
  } else {
    buffer.setUint16(0xffff);
  }
}
function CommandBinaryBuffer$1(dataOrLength) {
  let isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  BinaryBuffer.call(this, dataOrLength, isLittleEndian);
}
CommandBinaryBuffer$1.prototype = Object.create(BinaryBuffer.prototype);
CommandBinaryBuffer$1.prototype.constructor = CommandBinaryBuffer$1;
CommandBinaryBuffer$1.getDayProfileFromByte = value => ({
  tariff: extractBits(value, 2, 1),
  isFirstHalfHour: !extractBits(value, 1, 3),
  hour: extractBits(value, 5, 4)
});
CommandBinaryBuffer$1.getByteFromDayProfile = dayProfile => {
  let value = 0;
  value = fillBits(value, 2, 1, dayProfile.tariff);
  value = fillBits(value, 1, 3, +!dayProfile.isFirstHalfHour);
  value = fillBits(value, 5, 4, dayProfile.hour);
  return value;
};
CommandBinaryBuffer$1.getDefaultSeasonProfile = () => ({
  month: 1,
  date: 1,
  dayIndexes: [0, 0, 0, 0, 0, 0, 0]
});
CommandBinaryBuffer$1.getDefaultOperatorParameters = () => ({
  vpThreshold: 265000,
  vThreshold: 156000,
  ipThreshold: 120000,
  pmaxThreshold0: 31800,
  pmaxThreshold1: 31800,
  pmaxThreshold2: 31800,
  pmaxThreshold3: 31800,
  speedOptoPort: 0,
  tint: 30,
  calcPeriodDate: 1,
  timeoutDisplay: 127,
  timeoutScreen: 7,
  displaySet: toObject(displaySetMask, 0x80003184),
  relaySet4: toObject(relaySet4Mask, 0),
  relaySet3: toObject(relaySet3Mask, 0),
  relaySet2: toObject(relaySet2Mask, 3),
  relaySet1: toObject(relaySet1Mask, 3),
  displayType: 0,
  ten: 0,
  timeoutRefresh: 240,
  deltaCorMin: 15,
  timeoutMagnetOff: 5,
  timeoutMagnetOn: 5,
  define1: toObject(define1Mask, 0),
  timeoutRelayOn: 1,
  timeoutRelayKey: 0,
  timeoutRelayAuto: 5,
  timeoutBadVAVB: 5,
  freqMax: 55,
  freqMin: 45,
  phMin: 0,
  year: 0,
  month: 0,
  date: 0,
  energyDecimalPoint: 2,
  typeMeter: 0,
  timeoutIMax: 5,
  timeoutPMax: 5,
  timeoutCos: 5,
  pMaxDef: 1,
  displaySetExt: toObject(displaySetExtMask, 0x8383fff),
  timeoutUneqCurrent: 5,
  timeoutBipolarPower: 5,
  relaySet5: toObject(relaySet5Mask, 0),
  timeCorrectPeriod: 24,
  timeCorrectPassHalfhour: false
});
CommandBinaryBuffer$1.prototype.getFrameHeader = function () {
  const type = this.getUint8();
  const typeName = frameNames[type];
  const destination = this.getUint16();
  const source = this.getUint16();
  return {
    type,
    typeName,
    destination,
    source
  };
};
CommandBinaryBuffer$1.prototype.setFrameHeader = function (_ref2) {
  let {
    type = defaultFrameHeader.type,
    destination = defaultFrameHeader.destination,
    source = defaultFrameHeader.source
  } = _ref2;
  this.setUint8(type);
  this.setUint16(destination);
  this.setUint16(source);
};
CommandBinaryBuffer$1.prototype.getDeviceId = function () {
  const manufacturer = getHexFromBytes(this.getBytes(3), {
    separator: ''
  });
  const type = this.getUint8();
  const year = this.getUint8();
  const serial = getHexFromBytes(this.getBytes(3), {
    separator: ''
  });
  return {
    manufacturer,
    type,
    year,
    serial
  };
};
CommandBinaryBuffer$1.prototype.setDeviceId = function (_ref3) {
  let {
    manufacturer,
    type,
    year,
    serial
  } = _ref3;
  this.setBytes(getBytesFromHex(manufacturer));
  this.setUint8(type);
  this.setUint8(year);
  this.setBytes(getBytesFromHex(serial));
};
CommandBinaryBuffer$1.prototype.getDateTime = function () {
  return {
    isSummerTime: !!this.getUint8(),
    seconds: this.getUint8(),
    minutes: this.getUint8(),
    hours: this.getUint8(),
    day: this.getUint8(),
    date: this.getUint8(),
    month: this.getUint8(),
    year: this.getUint8()
  };
};
CommandBinaryBuffer$1.prototype.setDateTime = function (dateTime) {
  this.setUint8(dateTime.isSummerTime ? 1 : 0);
  this.setUint8(dateTime.seconds);
  this.setUint8(dateTime.minutes);
  this.setUint8(dateTime.hours);
  this.setUint8(dateTime.day || 0);
  this.setUint8(dateTime.date);
  this.setUint8(dateTime.month);
  this.setUint8(dateTime.year);
};
CommandBinaryBuffer$1.prototype.getTariffPlan = function () {
  return {
    id: this.getUint32(),
    tariffSet: this.getUint8(),
    activateYear: this.getUint8(),
    activateMonth: this.getUint8(),
    activateDay: this.getUint8(),
    specialProfilesArraySize: this.getUint8(),
    seasonProfilesArraySize: this.getUint8(),
    dayProfilesArraySize: this.getUint8()
  };
};
CommandBinaryBuffer$1.prototype.setTariffPlan = function (tariffPlan) {
  this.setUint32(tariffPlan.id);
  this.setUint8(tariffPlan.tariffSet);
  this.setUint8(tariffPlan.activateYear);
  this.setUint8(tariffPlan.activateMonth);
  this.setUint8(tariffPlan.activateDay);
  this.setUint8(tariffPlan.specialProfilesArraySize);
  this.setUint8(tariffPlan.seasonProfilesArraySize);
  this.setUint8(tariffPlan.dayProfilesArraySize);
};
CommandBinaryBuffer$1.prototype.getTimeCorrectionParameters = function () {
  return {
    monthTransitionSummer: this.getUint8(),
    dateTransitionSummer: this.getUint8(),
    hoursTransitionSummer: this.getUint8(),
    hoursCorrectSummer: this.getUint8(),
    monthTransitionWinter: this.getUint8(),
    dateTransitionWinter: this.getUint8(),
    hoursTransitionWinter: this.getUint8(),
    hoursCorrectWinter: this.getUint8(),
    isCorrectionNeeded: this.getUint8() === 1
  };
};
CommandBinaryBuffer$1.prototype.setTimeCorrectionParameters = function (parameters) {
  this.setUint8(parameters.monthTransitionSummer);
  this.setUint8(parameters.dateTransitionSummer);
  this.setUint8(parameters.hoursTransitionSummer);
  this.setUint8(parameters.hoursCorrectSummer);
  this.setUint8(parameters.monthTransitionWinter);
  this.setUint8(parameters.dateTransitionWinter);
  this.setUint8(parameters.hoursTransitionWinter);
  this.setUint8(parameters.hoursCorrectWinter);
  this.setUint8(+parameters.isCorrectionNeeded);
};
CommandBinaryBuffer$1.prototype.getDayProfile = function () {
  return CommandBinaryBuffer$1.getDayProfileFromByte(this.getUint8());
};
CommandBinaryBuffer$1.prototype.setDayProfile = function (dayProfile) {
  this.setUint8(CommandBinaryBuffer$1.getByteFromDayProfile(dayProfile));
};
CommandBinaryBuffer$1.prototype.getSeasonProfile = function () {
  return {
    month: this.getUint8(),
    date: this.getUint8(),
    dayIndexes: new Array(SEASON_PROFILE_DAYS_NUMBER).fill(0).map(() => this.getUint8())
  };
};
CommandBinaryBuffer$1.prototype.setSeasonProfile = function (seasonProfile) {
  this.setUint8(seasonProfile.month);
  this.setUint8(seasonProfile.date);
  seasonProfile.dayIndexes.forEach(value => this.setUint8(value));
};
CommandBinaryBuffer$1.prototype.getSpecialDay = function () {
  return {
    month: this.getUint8(),
    date: this.getUint8(),
    dayIndex: this.getUint8(),
    isPeriodic: this.getUint8() === 0
  };
};
CommandBinaryBuffer$1.prototype.setSpecialDay = function (specialDay) {
  this.setUint8(specialDay.month);
  this.setUint8(specialDay.date);
  this.setUint8(specialDay.dayIndex);
  this.setUint8(+!specialDay.isPeriodic);
};
CommandBinaryBuffer$1.prototype.getDeviceType = function () {
  return fromBytes$23(this.getBytes(9));
};
CommandBinaryBuffer$1.prototype.setDeviceType = function (deviceType) {
  this.setBytes(toBytes$24(deviceType));
};
CommandBinaryBuffer$1.prototype.getOperatorParameters = function () {
  const operatorParameters = {
    vpThreshold: this.getUint32(),
    vThreshold: this.getUint32(),
    ipThreshold: this.getUint32(),
    pmaxThreshold0: this.getUint32(),
    pmaxThreshold1: this.getUint32(),
    pmaxThreshold2: this.getUint32(),
    pmaxThreshold3: this.getUint32(),
    speedOptoPort: this.getUint8(),
    tint: this.getUint8(),
    calcPeriodDate: this.getUint8(),
    timeoutDisplay: this.getUint8(),
    timeoutScreen: this.getUint8(),
    displaySet: toObject(displaySetMask, this.getUint32()),
    relaySet4: toObject(relaySet4Mask, this.getUint8()),
    relaySet3: toObject(relaySet3Mask, this.getUint8()),
    relaySet2: toObject(relaySet2Mask, this.getUint8()),
    relaySet1: toObject(relaySet1Mask, this.getUint8()),
    displayType: this.getUint8(),
    ten: this.getUint8(),
    timeoutRefresh: this.getUint16(),
    deltaCorMin: this.getUint8(),
    timeoutMagnetOff: this.getUint8(),
    timeoutMagnetOn: this.getUint8(),
    define1: toObject(define1Mask, this.getUint8()),
    timeoutRelayOn: this.getUint8(),
    timeoutRelayKey: this.getUint8(),
    timeoutRelayAuto: this.getUint8(),
    timeoutBadVAVB: this.getUint8(),
    freqMax: this.getUint8(),
    freqMin: this.getUint8(),
    phMin: this.getUint16(),
    year: this.getUint8(),
    month: this.getUint8(),
    date: this.getUint8(),
    energyDecimalPoint: this.getUint8(),
    typeMeter: this.getUint8(),
    timeoutIMax: this.getUint8(),
    timeoutPMax: this.getUint8(),
    timeoutCos: this.getUint8(),
    pMaxDef: this.getUint8(),
    displaySetExt: toObject(displaySetExtMask, this.getUint32()),
    timeoutUneqCurrent: this.getUint8(),
    timeoutBipolarPower: this.getUint8(),
    relaySet5: toObject(relaySet5Mask, this.getUint8()),
    timeCorrectPeriod: 0,
    timeCorrectPassHalfhour: false
  };
  const timeCorrectPeriod = this.getUint8();
  operatorParameters.timeCorrectPeriod = timeCorrectPeriod & 0x7f;
  operatorParameters.timeCorrectPassHalfhour = !!(timeCorrectPeriod & 0x80);
  return operatorParameters;
};
CommandBinaryBuffer$1.prototype.setOperatorParameters = function (operatorParameters) {
  const timeCorrectPeriod = operatorParameters.timeCorrectPeriod | (operatorParameters.timeCorrectPassHalfhour ? 0x80 : 0);
  this.setUint32(operatorParameters.vpThreshold);
  this.setUint32(operatorParameters.vThreshold);
  this.setUint32(operatorParameters.ipThreshold);
  this.setUint32(operatorParameters.pmaxThreshold0);
  this.setUint32(operatorParameters.pmaxThreshold1);
  this.setUint32(operatorParameters.pmaxThreshold2);
  this.setUint32(operatorParameters.pmaxThreshold3);
  this.setUint8(operatorParameters.speedOptoPort);
  this.setUint8(operatorParameters.tint);
  this.setUint8(operatorParameters.calcPeriodDate);
  this.setUint8(operatorParameters.timeoutDisplay);
  this.setUint8(operatorParameters.timeoutScreen);
  this.setUint32(fromObject(displaySetMask, operatorParameters.displaySet));
  this.setUint8(fromObject(relaySet4Mask, operatorParameters.relaySet4));
  this.setUint8(fromObject(relaySet3Mask, operatorParameters.relaySet3));
  this.setUint8(fromObject(relaySet2Mask, operatorParameters.relaySet2));
  this.setUint8(fromObject(relaySet1Mask, operatorParameters.relaySet1));
  this.setUint8(operatorParameters.displayType);
  this.setUint8(operatorParameters.ten);
  this.setUint16(operatorParameters.timeoutRefresh);
  this.setUint8(operatorParameters.deltaCorMin);
  this.setUint8(operatorParameters.timeoutMagnetOff);
  this.setUint8(operatorParameters.timeoutMagnetOn);
  this.setUint8(fromObject(define1Mask, operatorParameters.define1));
  this.setUint8(operatorParameters.timeoutRelayOn);
  this.setUint8(operatorParameters.timeoutRelayKey);
  this.setUint8(operatorParameters.timeoutRelayAuto);
  this.setUint8(operatorParameters.timeoutBadVAVB);
  this.setUint8(operatorParameters.freqMax);
  this.setUint8(operatorParameters.freqMin);
  this.setUint16(operatorParameters.phMin);
  this.setUint8(operatorParameters.year);
  this.setUint8(operatorParameters.month);
  this.setUint8(operatorParameters.date);
  this.setUint8(operatorParameters.energyDecimalPoint);
  this.setUint8(operatorParameters.typeMeter);
  this.setUint8(operatorParameters.timeoutIMax);
  this.setUint8(operatorParameters.timeoutPMax);
  this.setUint8(operatorParameters.timeoutCos);
  this.setUint8(operatorParameters.pMaxDef);
  this.setUint32(fromObject(displaySetExtMask, operatorParameters.displaySetExt));
  this.setUint8(operatorParameters.timeoutUneqCurrent);
  this.setUint8(operatorParameters.timeoutBipolarPower);
  this.setUint8(fromObject(relaySet5Mask, operatorParameters.relaySet5));
  this.setUint8(timeCorrectPeriod);
};
CommandBinaryBuffer$1.prototype.getPackedEnergyWithType = function () {
  const byte = this.getUint8();
  const energyType = extractBits(byte, TARIFF_NUMBER$1, 1);
  const energies = getPackedEnergies(this, energyType, byte);
  return {
    energyType,
    energies
  };
};
CommandBinaryBuffer$1.prototype.setPackedEnergyWithType = function (_ref4) {
  let {
    energyType,
    energies
  } = _ref4;
  if (energyType) {
    setPackedEnergyType(this, energyType, energies);
  }
  energies.forEach(energy => {
    if (energy !== null) {
      this.setUint32(energy);
    }
  });
};
CommandBinaryBuffer$1.prototype.getEnergies = function () {
  return new Array(TARIFF_NUMBER$1).fill(0).map(() => this.getInt32());
};
CommandBinaryBuffer$1.prototype.setEnergies = function (energies) {
  energies.forEach(value => this.setUint32(value));
};
CommandBinaryBuffer$1.prototype.getDate = function () {
  return {
    year: this.getUint8(),
    month: this.getUint8(),
    date: this.getUint8()
  };
};
CommandBinaryBuffer$1.prototype.setDate = function (date) {
  this.setUint8(date.year);
  this.setUint8(date.month);
  this.setUint8(date.date);
};
CommandBinaryBuffer$1.prototype.getSaldoParameters = function () {
  return {
    coefficients: new Array(4).fill(0).map(() => this.getUint32()),
    decimalPointTariff: this.getUint8(),
    indicationThreshold: this.getInt32(),
    relayThreshold: this.getInt32(),
    mode: this.getUint8(),
    saldoOffTimeBegin: this.getUint8(),
    saldoOffTimeEnd: this.getUint8(),
    decimalPointIndication: this.getUint8(),
    powerThreshold: this.getUint32(),
    creditThreshold: this.getInt32()
  };
};
CommandBinaryBuffer$1.prototype.setSaldoParameters = function (saldoParameters) {
  saldoParameters.coefficients.forEach(value => this.setUint32(value));
  this.setUint8(saldoParameters.decimalPointTariff);
  this.setInt32(saldoParameters.indicationThreshold);
  this.setInt32(saldoParameters.relayThreshold);
  this.setUint8(saldoParameters.mode);
  this.setUint8(saldoParameters.saldoOffTimeBegin);
  this.setUint8(saldoParameters.saldoOffTimeEnd);
  this.setUint8(saldoParameters.decimalPointIndication);
  this.setUint32(saldoParameters.powerThreshold);
  this.setInt32(saldoParameters.creditThreshold);
};
CommandBinaryBuffer$1.prototype.getEnergyPeriods = function (periodsNumber) {
  const periods = new Array(periodsNumber).fill(0).map(() => this.getUint16());
  return periods.map(period => getEnergyPeriod(period));
};
CommandBinaryBuffer$1.prototype.setEnergyPeriods = function (periods) {
  periods.forEach(period => setEnergyPeriod(this, period));
};
CommandBinaryBuffer$1.prototype.getEventStatus = function () {
  const eventStatus = this.getUint16();
  return toObject(eventStatusMask, eventStatus);
};
CommandBinaryBuffer$1.prototype.setEventStatus = function (parameters) {
  this.setUint16(fromObject(eventStatusMask, parameters));
};
CommandBinaryBuffer$1.prototype.getExtendedCurrentValues2 = function () {
  const uBattery = this.getUint16();
  const relayStatus = toObject(extendedCurrentValues2RelayStatusMask, this.getUint8());
  const relayStatus2 = toObject(extendedCurrentValues2RelayStatus2Mask, this.getUint8());
  const status1 = toObject(extendedCurrentValues2Status1Mask, this.getUint8());
  const status2 = toObject(extendedCurrentValues2Status2Mask, this.getUint8());
  const status3 = toObject(extendedCurrentValues2Status3Mask, this.getUint8());
  return {
    uBattery,
    relayStatus,
    relayStatus2,
    status1,
    status2,
    status3
  };
};
CommandBinaryBuffer$1.prototype.setExtendedCurrentValues2 = function (parameters) {
  const {
    uBattery,
    relayStatus,
    relayStatus2,
    status1,
    status2,
    status3
  } = parameters;
  this.setUint16(uBattery);
  this.setUint8(fromObject(extendedCurrentValues2RelayStatusMask, relayStatus));
  this.setUint8(fromObject(extendedCurrentValues2RelayStatus2Mask, relayStatus2));
  this.setUint8(fromObject(extendedCurrentValues2Status1Mask, status1));
  this.setUint8(fromObject(extendedCurrentValues2Status2Mask, status2));
  this.setUint8(fromObject(extendedCurrentValues2Status3Mask, status3));
};
CommandBinaryBuffer$1.prototype.getEvent = function () {
  const data = {
    hours: this.getUint8(),
    minutes: this.getUint8(),
    seconds: this.getUint8(),
    event: this.getUint8()
  };
  const {
    event
  } = data;
  const {
    bytesLeft
  } = this;
  data.eventName = eventNames[event];
  switch (event) {
    case POWER_OVER_RELAY_OFF:
      if (bytesLeft < 4) {
        return data;
      }
      data.power = [this.getUint8(), this.getUint8(), this.getUint8(), this.getUint8()];
      break;
    case CMD_CHANGE_TIME:
    case TIME_CORRECT$1:
      if (bytesLeft < 8) {
        return data;
      }
      data.newDate = this.getDateTime();
      break;
  }
  return data;
};
CommandBinaryBuffer$1.prototype.setEvent = function (event) {
  this.setUint8(event.hours);
  this.setUint8(event.minutes);
  this.setUint8(event.seconds);
  this.setUint8(event.event);
  switch (event.event) {
    case POWER_OVER_RELAY_OFF:
      for (const item of event.power) {
        this.setUint8(item);
      }
      break;
    case CMD_CHANGE_TIME:
    case TIME_CORRECT$1:
      this.setDateTime(event.newDate);
      break;
  }
};
CommandBinaryBuffer$1.prototype.getDemand = function () {
  const date0 = this.getUint8();
  const date1 = this.getUint8();
  return {
    date: {
      year: date0 >> 1,
      month: date0 << 3 & 0x0f | date1 >> 5,
      date: date1 & 0x1f
    },
    energyType: this.getUint8(),
    firstIndex: this.getUint16(),
    count: this.getUint8(),
    period: this.getUint8()
  };
};
CommandBinaryBuffer$1.prototype.setDemand = function (parameters) {
  const date0 = parameters.date.year << 1 | parameters.date.month >> 3 & 0x01;
  const date1 = parameters.date.month << 5 & 0xe0 | parameters.date.date & 0x1f;
  this.setUint8(date0);
  this.setUint8(date1);
  this.setUint8(parameters.energyType);
  this.setUint16(parameters.firstIndex);
  this.setUint8(parameters.count);
  this.setUint8(parameters.period);
};
CommandBinaryBuffer$1.prototype.getDayMaxDemandResponse = function () {
  const date = this.getDate();
  const power = new Array(TARIFF_NUMBER$1).fill(0).map(() => ({
    hours: this.getUint8(),
    minutes: this.getUint8(),
    power: this.getUint32()
  }));
  return {
    date,
    power
  };
};
CommandBinaryBuffer$1.prototype.setDayMaxDemandResponse = function (parameters) {
  this.setDate(parameters.date);
  parameters.power.forEach(value => {
    this.setUint8(value.hours);
    this.setUint8(value.minutes);
    this.setUint32(value.power);
  });
};
CommandBinaryBuffer$1.prototype.getOperatorParametersExtended3 = function () {
  return {
    pmaxMinusThreshold0: this.getUint32(),
    pmaxMinusThreshold1: this.getUint32(),
    pmaxMinusThreshold2: this.getUint32(),
    pmaxMinusThreshold3: this.getUint32(),
    relaySet: toObject(operatorParametersExtended3RelaySetMask, this.getUint8())
  };
};
CommandBinaryBuffer$1.prototype.setOperatorParametersExtended3 = function (parameters) {
  const {
    pmaxMinusThreshold0,
    pmaxMinusThreshold1,
    pmaxMinusThreshold2,
    pmaxMinusThreshold3,
    relaySet
  } = parameters;
  this.setUint32(pmaxMinusThreshold0);
  this.setUint32(pmaxMinusThreshold1);
  this.setUint32(pmaxMinusThreshold2);
  this.setUint32(pmaxMinusThreshold3);
  this.setUint8(fromObject(operatorParametersExtended3RelaySetMask, relaySet));
};
CommandBinaryBuffer$1.prototype.getMonthMaxPowerByTariffs = function () {
  return new Array(TARIFF_NUMBER$1).fill(0).map(() => ({
    date: this.getUint8(),
    hours: this.getUint8(),
    minutes: this.getUint8(),
    power: this.getUint32()
  }));
};
CommandBinaryBuffer$1.prototype.setMonthMaxPowerByTariffs = function (tariffs) {
  tariffs.forEach(tariff => {
    this.setUint8(tariff.date);
    this.setUint8(tariff.hours);
    this.setUint8(tariff.minutes);
    this.setUint32(tariff.power);
  });
};
const getPackedEnergiesWithDateSize = parameters => {
  if (parameters?.energyType) {
    const energiesNumber = parameters.energies.filter(energy => energy !== null).length;
    return DATE_SIZE$3 + PACKED_ENERGY_TYPE_SIZE + energiesNumber * ENERGY_SIZE;
  }
  return DATE_SIZE$3 + ENERGY_SIZE * TARIFF_NUMBER$1;
};

const HEX = 1;

const defaultFormatOptions = {
  bytesConversionFormat: HEX,
  bytesConversionFormatOptions: {}
};

const defaultDlmsJsonOptions = {
  ...defaultFormatOptions,
  dlms: false
};
const toBytes$23 = function (commandId) {
  let commandBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return [commandId, commandBytes.length, ...commandBytes];
};

const UNENCRYPTED = 0x00;
const READ_WRITE = 0x02;
const READ_ONLY = 0x03;

const getEventStatus$2 = 0x01;
const getEnergyDayPrevious$2 = 0x03;
const getDeviceType$2 = 0x04;
const getDeviceId$2 = 0x05;
const getDateTime$2 = 0x07;
const setDateTime$2 = 0x08;
const setAccessKey$2 = 0x09;
const getCurrentValues$2 = 0x0d;
const getEnergy$2 = 0x0f;
const setDayProfile$2 = 0x10;
const setSeasonProfile$2 = 0x11;
const setSpecialDay$2 = 0x12;
const activateRatePlan$2 = 0x13;
const prepareRatePlan$2 = 0x14;
const getHalfHourDemand$2 = 0x15;
const getDayDemand$2 = 0x16;
const getMonthDemand$2 = 0x17;
const turnRelayOn$2 = 0x18;
const turnRelayOff$2 = 0x19;
const setCorrectTime$2 = 0x1c;
const getOperatorParameters$2 = 0x1e;
const setOperatorParameters$2 = 0x1f;
const getVersion$2 = 0x28;
const getSaldo$2 = 0x29;
const setSaldo$2 = 0x2a;
const getRatePlanInfo$2 = 0x2c;
const getExtendedCurrentValues2$2 = 0x2d;
const getSaldoParameters$2 = 0x2e;
const setSaldoParameters$2 = 0x2f;
const getDayMaxDemand$2 = 0x31;
const getMonthMaxDemand$2 = 0x32;
const getEvents$2 = 0x33;
const getEventsCounters$2 = 0x34;
const resetPowerMaxDay$2 = 0x35;
const resetPowerMaxMonth$2 = 0x36;
const getCurrentStatusMeter$2 = 0x39;
const getExtendedCurrentValues$2 = 0x3a;
const getDayProfile$2 = 0x3b;
const getSeasonProfile$2 = 0x3c;
const getSpecialDay$2 = 0x3d;
const getCorrectTime$2 = 0x3e;
const getCriticalEvent$2 = 0x41;
const runTariffPlan$2 = 0x46;
const getDayMaxDemandPrevious$2 = 0x4a;
const getHalfHourDemandPrevious$2 = 0x4b;
const getDayDemandExport$2 = 0x4f;
const getEnergyExportDayPrevious$2 = 0x50;
const getMonthDemandExport$2 = 0x52;
const getHalfHourDemandExport$2 = 0x53;
const getDayMaxDemandExport$2 = 0x58;
const getMonthMaxDemandExport$2 = 0x59;
const getEnergyExport$2 = 0x5b;
const setCorrectDateTime$2 = 0x5c;
const setDisplayParam$2 = 0x5d;
const getDisplayParam$2 = 0x5e;
const setSpecialOperation$2 = 0x64;
const getMagneticFieldThreshold$2 = 0x6d;
const getHalfhoursEnergies$2 = 0x6f;
const getBuildVersion$2 = 0x70;
const getOperatorParametersExtended3$2 = 0x71;
const setOperatorParametersExtended3$2 = 0x72;
const getDemand$2 = 0x76;
const getMeterInfo$2 = 0x7a;

var downlinkIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan$2,
    getBuildVersion: getBuildVersion$2,
    getCorrectTime: getCorrectTime$2,
    getCriticalEvent: getCriticalEvent$2,
    getCurrentStatusMeter: getCurrentStatusMeter$2,
    getCurrentValues: getCurrentValues$2,
    getDateTime: getDateTime$2,
    getDayDemand: getDayDemand$2,
    getDayDemandExport: getDayDemandExport$2,
    getDayMaxDemand: getDayMaxDemand$2,
    getDayMaxDemandExport: getDayMaxDemandExport$2,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious$2,
    getDayProfile: getDayProfile$2,
    getDemand: getDemand$2,
    getDeviceId: getDeviceId$2,
    getDeviceType: getDeviceType$2,
    getDisplayParam: getDisplayParam$2,
    getEnergy: getEnergy$2,
    getEnergyDayPrevious: getEnergyDayPrevious$2,
    getEnergyExport: getEnergyExport$2,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious$2,
    getEventStatus: getEventStatus$2,
    getEvents: getEvents$2,
    getEventsCounters: getEventsCounters$2,
    getExtendedCurrentValues: getExtendedCurrentValues$2,
    getExtendedCurrentValues2: getExtendedCurrentValues2$2,
    getHalfHourDemand: getHalfHourDemand$2,
    getHalfHourDemandExport: getHalfHourDemandExport$2,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious$2,
    getHalfhoursEnergies: getHalfhoursEnergies$2,
    getMagneticFieldThreshold: getMagneticFieldThreshold$2,
    getMeterInfo: getMeterInfo$2,
    getMonthDemand: getMonthDemand$2,
    getMonthDemandExport: getMonthDemandExport$2,
    getMonthMaxDemand: getMonthMaxDemand$2,
    getMonthMaxDemandExport: getMonthMaxDemandExport$2,
    getOperatorParameters: getOperatorParameters$2,
    getOperatorParametersExtended3: getOperatorParametersExtended3$2,
    getRatePlanInfo: getRatePlanInfo$2,
    getSaldo: getSaldo$2,
    getSaldoParameters: getSaldoParameters$2,
    getSeasonProfile: getSeasonProfile$2,
    getSpecialDay: getSpecialDay$2,
    getVersion: getVersion$2,
    prepareRatePlan: prepareRatePlan$2,
    resetPowerMaxDay: resetPowerMaxDay$2,
    resetPowerMaxMonth: resetPowerMaxMonth$2,
    runTariffPlan: runTariffPlan$2,
    setAccessKey: setAccessKey$2,
    setCorrectDateTime: setCorrectDateTime$2,
    setCorrectTime: setCorrectTime$2,
    setDateTime: setDateTime$2,
    setDayProfile: setDayProfile$2,
    setDisplayParam: setDisplayParam$2,
    setOperatorParameters: setOperatorParameters$2,
    setOperatorParametersExtended3: setOperatorParametersExtended3$2,
    setSaldo: setSaldo$2,
    setSaldoParameters: setSaldoParameters$2,
    setSeasonProfile: setSeasonProfile$2,
    setSpecialDay: setSpecialDay$2,
    setSpecialOperation: setSpecialOperation$2,
    turnRelayOff: turnRelayOff$2,
    turnRelayOn: turnRelayOn$2
});

var downlinkNames = invertObject(downlinkIds);

const id$20 = activateRatePlan$2;
const name$20 = downlinkNames[activateRatePlan$2];
const headerSize$20 = 2;
const maxSize$20 = 1 + TARIFF_PLAN_SIZE;
const accessLevel$20 = READ_WRITE;
const isLoraOnly$20 = false;
const examples$20 = {
  'set rate plan request': {
    id: id$20,
    name: name$20,
    headerSize: headerSize$20,
    maxSize: maxSize$20,
    accessLevel: accessLevel$20,
    parameters: {
      tariffTable: 0,
      tariffPlan: {
        id: 1,
        tariffSet: 2,
        activateYear: 3,
        activateMonth: 4,
        activateDay: 5,
        specialProfilesArraySize: 6,
        seasonProfilesArraySize: 7,
        dayProfilesArraySize: 8
      }
    },
    bytes: [0x13, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]
  }
};
const fromBytes$22 = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    tariffTable: buffer.getUint8(),
    tariffPlan: buffer.getTariffPlan()
  };
};
const toBytes$22 = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$20);
  buffer.setUint8(parameters.tariffTable);
  buffer.setTariffPlan(parameters.tariffPlan);
  return toBytes$23(id$20, buffer.data);
};

var activateRatePlan$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$20,
    examples: examples$20,
    fromBytes: fromBytes$22,
    headerSize: headerSize$20,
    id: id$20,
    isLoraOnly: isLoraOnly$20,
    maxSize: maxSize$20,
    name: name$20,
    toBytes: toBytes$22
});

const id$1$ = getBuildVersion$2;
const name$1$ = downlinkNames[getBuildVersion$2];
const headerSize$1$ = 2;
const accessLevel$1$ = READ_ONLY;
const maxSize$1$ = 0;
const isLoraOnly$1$ = false;
const examples$1$ = {
  'simple request': {
    id: id$1$,
    name: name$1$,
    headerSize: headerSize$1$,
    maxSize: maxSize$1$,
    accessLevel: accessLevel$1$,
    parameters: {},
    bytes: [0x70, 0x00]
  }
};
const fromBytes$21 = bytes => {
  if (bytes.length !== maxSize$1$) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$21 = () => toBytes$23(id$1$);

var getBuildVersion$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1$,
    examples: examples$1$,
    fromBytes: fromBytes$21,
    headerSize: headerSize$1$,
    id: id$1$,
    isLoraOnly: isLoraOnly$1$,
    maxSize: maxSize$1$,
    name: name$1$,
    toBytes: toBytes$21
});

const id$1_ = getCorrectTime$2;
const name$1_ = downlinkNames[getCorrectTime$2];
const headerSize$1_ = 2;
const maxSize$1_ = 0;
const accessLevel$1_ = READ_ONLY;
const isLoraOnly$1_ = false;
const examples$1_ = {
  'simple request': {
    id: id$1_,
    name: name$1_,
    headerSize: headerSize$1_,
    maxSize: maxSize$1_,
    accessLevel: accessLevel$1_,
    parameters: {},
    bytes: [0x3e, 0x00]
  }
};
const fromBytes$20 = bytes => {
  if (bytes.length !== maxSize$1_) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$20 = () => toBytes$23(id$1_);

var getCorrectTime$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1_,
    examples: examples$1_,
    fromBytes: fromBytes$20,
    headerSize: headerSize$1_,
    id: id$1_,
    isLoraOnly: isLoraOnly$1_,
    maxSize: maxSize$1_,
    name: name$1_,
    toBytes: toBytes$20
});

const CASE_OPEN = 0;
const MAGNETIC_ON = 1;
const PARAMETERS_UPDATE_REMOTE = 2;
const PARAMETERS_UPDATE_LOCAL = 3;
const RESTART = 4;
const ERROR_ACCESS = 5;
const TIME_SET = 6;
const TIME_CORRECT = 7;
const DEVICE_FAILURE = 8;
const CASE_TERMINAL_OPEN = 9;
const CASE_MODULE_OPEN = 10;
const TARIFF_TABLE_SET = 11;
const TARIFF_TABLE_GET = 12;
const PROTECTION_RESET_EM = 13;
const PROTECTION_RESET_MAGNETIC = 14;

var criticalEvents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN,
    CASE_OPEN: CASE_OPEN,
    CASE_TERMINAL_OPEN: CASE_TERMINAL_OPEN,
    DEVICE_FAILURE: DEVICE_FAILURE,
    ERROR_ACCESS: ERROR_ACCESS,
    MAGNETIC_ON: MAGNETIC_ON,
    PARAMETERS_UPDATE_LOCAL: PARAMETERS_UPDATE_LOCAL,
    PARAMETERS_UPDATE_REMOTE: PARAMETERS_UPDATE_REMOTE,
    PROTECTION_RESET_EM: PROTECTION_RESET_EM,
    PROTECTION_RESET_MAGNETIC: PROTECTION_RESET_MAGNETIC,
    RESTART: RESTART,
    TARIFF_TABLE_GET: TARIFF_TABLE_GET,
    TARIFF_TABLE_SET: TARIFF_TABLE_SET,
    TIME_CORRECT: TIME_CORRECT,
    TIME_SET: TIME_SET
});

var criticalEventNames = invertObject(criticalEvents);

const id$1Z = getCriticalEvent$2;
const name$1Z = downlinkNames[getCriticalEvent$2];
const headerSize$1Z = 2;
const accessLevel$1Z = READ_ONLY;
const maxSize$1Z = 2;
const isLoraOnly$1Z = false;
const examples$1Z = {
  'simple request': {
    id: id$1Z,
    name: name$1Z,
    headerSize: headerSize$1Z,
    accessLevel: accessLevel$1Z,
    maxSize: maxSize$1Z,
    parameters: {
      event: 1,
      name: 'MAGNETIC_ON',
      index: 22
    },
    bytes: [0x41, 0x02, 0x01, 0x16]
  }
};
const fromBytes$1$ = bytes => {
  if (bytes.length !== maxSize$1Z) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  const [event, index] = bytes;
  return {
    event,
    name: criticalEventNames[event],
    index
  };
};
const toBytes$1$ = parameters => toBytes$23(id$1Z, [parameters.event, parameters.index]);

var getCriticalEvent$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1Z,
    examples: examples$1Z,
    fromBytes: fromBytes$1$,
    headerSize: headerSize$1Z,
    id: id$1Z,
    isLoraOnly: isLoraOnly$1Z,
    maxSize: maxSize$1Z,
    name: name$1Z,
    toBytes: toBytes$1$
});

const id$1Y = getCurrentStatusMeter$2;
const name$1Y = downlinkNames[getCurrentStatusMeter$2];
const headerSize$1Y = 2;
const accessLevel$1Y = READ_ONLY;
const maxSize$1Y = 0;
const isLoraOnly$1Y = false;
const examples$1Y = {
  'simple request': {
    id: id$1Y,
    name: name$1Y,
    headerSize: headerSize$1Y,
    maxSize: maxSize$1Y,
    accessLevel: accessLevel$1Y,
    parameters: {},
    bytes: [0x39, 0x00]
  }
};
const fromBytes$1_ = bytes => {
  if (bytes.length !== maxSize$1Y) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1_ = () => toBytes$23(id$1Y);

var getCurrentStatusMeter$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1Y,
    examples: examples$1Y,
    fromBytes: fromBytes$1_,
    headerSize: headerSize$1Y,
    id: id$1Y,
    isLoraOnly: isLoraOnly$1Y,
    maxSize: maxSize$1Y,
    name: name$1Y,
    toBytes: toBytes$1_
});

const id$1X = getCurrentValues$2;
const name$1X = downlinkNames[getCurrentValues$2];
const headerSize$1X = 2;
const maxSize$1X = 0;
const accessLevel$1X = READ_ONLY;
const isLoraOnly$1X = false;
const examples$1X = {
  'simple request': {
    id: id$1X,
    name: name$1X,
    headerSize: headerSize$1X,
    maxSize: maxSize$1X,
    accessLevel: accessLevel$1X,
    parameters: {},
    bytes: [0x0d, 0x00]
  }
};
const fromBytes$1Z = bytes => {
  if (bytes.length !== maxSize$1X) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1Z = () => toBytes$23(id$1X);

var getCurrentValues$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1X,
    examples: examples$1X,
    fromBytes: fromBytes$1Z,
    headerSize: headerSize$1X,
    id: id$1X,
    isLoraOnly: isLoraOnly$1X,
    maxSize: maxSize$1X,
    name: name$1X,
    toBytes: toBytes$1Z
});

const id$1W = getDateTime$2;
const name$1W = downlinkNames[getDateTime$2];
const headerSize$1W = 2;
const maxSize$1W = 0;
const accessLevel$1W = READ_ONLY;
const isLoraOnly$1W = false;
const examples$1W = {
  'simple request': {
    id: id$1W,
    name: name$1W,
    headerSize: headerSize$1W,
    maxSize: maxSize$1W,
    accessLevel: accessLevel$1W,
    parameters: {},
    bytes: [0x07, 0x00]
  }
};
const fromBytes$1Y = bytes => {
  if (bytes.length !== maxSize$1W) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1Y = () => toBytes$23(id$1W);

var getDateTime$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1W,
    examples: examples$1W,
    fromBytes: fromBytes$1Y,
    headerSize: headerSize$1W,
    id: id$1W,
    isLoraOnly: isLoraOnly$1W,
    maxSize: maxSize$1W,
    name: name$1W,
    toBytes: toBytes$1Y
});

const A_PLUS$1 = 1;
const A_MINUS$1 = 2;

const MIN_COMMAND_SIZE$5 = 3;
const MAX_COMMAND_SIZE$b = 4;
const id$1V = getDayDemand$2;
const name$1V = downlinkNames[getDayDemand$2];
const headerSize$1V = 2;
const maxSize$1V = MAX_COMMAND_SIZE$b;
const accessLevel$1V = READ_ONLY;
const isLoraOnly$1V = false;
const examples$1V = {
  'request day values for 2024.03.22 00:00:00 GMT': {
    id: id$1V,
    name: name$1V,
    headerSize: headerSize$1V,
    maxSize: maxSize$1V,
    accessLevel: accessLevel$1V,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      }
    },
    bytes: [0x16, 0x03, 0x18, 0x03, 0x16]
  },
  'request day values with energy type for 2024.03.22 00:00:00 GMT': {
    id: id$1V,
    name: name$1V,
    headerSize: headerSize$1V,
    maxSize: maxSize$1V,
    accessLevel: accessLevel$1V,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      energyType: A_PLUS$1
    },
    bytes: [0x16, 0x04, 0x18, 0x03, 0x16, 0x01]
  }
};
const fromBytes$1X = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  if (bytes.length === MAX_COMMAND_SIZE$b) {
    return {
      date: buffer.getDate(),
      energyType: buffer.getUint8()
    };
  }
  return {
    date: buffer.getDate()
  };
};
const toBytes$1X = parameters => {
  const buffer = new CommandBinaryBuffer$1(parameters?.energyType ? MAX_COMMAND_SIZE$b : MIN_COMMAND_SIZE$5);
  buffer.setDate(parameters?.date);
  if (parameters?.energyType) {
    buffer.setUint8(parameters.energyType);
  }
  return toBytes$23(id$1V, buffer.data);
};

var getDayDemand$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1V,
    examples: examples$1V,
    fromBytes: fromBytes$1X,
    headerSize: headerSize$1V,
    id: id$1V,
    isLoraOnly: isLoraOnly$1V,
    maxSize: maxSize$1V,
    name: name$1V,
    toBytes: toBytes$1X
});

const MIN_COMMAND_SIZE$4 = 3;
const MAX_COMMAND_SIZE$a = 4;
const id$1U = getDayDemandExport$2;
const name$1U = downlinkNames[getDayDemandExport$2];
const headerSize$1U = 2;
const maxSize$1U = MAX_COMMAND_SIZE$a;
const accessLevel$1U = READ_ONLY;
const isLoraOnly$1U = false;
const examples$1U = {
  'request day values for 2024.03.22 00:00:00 GMT': {
    id: id$1U,
    name: name$1U,
    headerSize: headerSize$1U,
    maxSize: maxSize$1U,
    accessLevel: accessLevel$1U,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      }
    },
    bytes: [0x4f, 0x03, 0x18, 0x03, 0x16]
  },
  'request day values with energy type for 2024.03.22 00:00:00 GMT': {
    id: id$1U,
    name: name$1U,
    headerSize: headerSize$1U,
    maxSize: maxSize$1U,
    accessLevel: accessLevel$1U,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      energyType: A_PLUS$1
    },
    bytes: [0x4f, 0x04, 0x18, 0x03, 0x16, 0x01]
  }
};
const fromBytes$1W = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  if (bytes.length === MAX_COMMAND_SIZE$a) {
    return {
      date: buffer.getDate(),
      energyType: buffer.getUint8()
    };
  }
  return {
    date: buffer.getDate()
  };
};
const toBytes$1W = parameters => {
  const buffer = new CommandBinaryBuffer$1(parameters?.energyType ? MAX_COMMAND_SIZE$a : MIN_COMMAND_SIZE$4);
  buffer.setDate(parameters?.date);
  if (parameters?.energyType) {
    buffer.setUint8(parameters.energyType);
  }
  return toBytes$23(id$1U, buffer.data);
};

var getDayDemandExport$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1U,
    examples: examples$1U,
    fromBytes: fromBytes$1W,
    headerSize: headerSize$1U,
    id: id$1U,
    isLoraOnly: isLoraOnly$1U,
    maxSize: maxSize$1U,
    name: name$1U,
    toBytes: toBytes$1W
});

const id$1T = getDayMaxDemand$2;
const name$1T = downlinkNames[getDayMaxDemand$2];
const headerSize$1T = 2;
const maxSize$1T = 3;
const accessLevel$1T = READ_ONLY;
const isLoraOnly$1T = false;
const examples$1T = {
  'request for 2024.03.22': {
    id: id$1T,
    name: name$1T,
    headerSize: headerSize$1T,
    maxSize: maxSize$1T,
    accessLevel: accessLevel$1T,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      }
    },
    bytes: [0x31, 0x03, 0x18, 0x03, 0x16]
  }
};
const fromBytes$1V = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    date: buffer.getDate()
  };
};
const toBytes$1V = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1T);
  buffer.setDate(parameters.date);
  return toBytes$23(id$1T, buffer.data);
};

var getDayMaxDemand$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1T,
    examples: examples$1T,
    fromBytes: fromBytes$1V,
    headerSize: headerSize$1T,
    id: id$1T,
    isLoraOnly: isLoraOnly$1T,
    maxSize: maxSize$1T,
    name: name$1T,
    toBytes: toBytes$1V
});

const id$1S = getDayMaxDemandExport$2;
const name$1S = downlinkNames[getDayMaxDemandExport$2];
const headerSize$1S = 2;
const maxSize$1S = 3;
const accessLevel$1S = READ_ONLY;
const isLoraOnly$1S = false;
const examples$1S = {
  'request for 2024.03.22': {
    id: id$1S,
    name: name$1S,
    headerSize: headerSize$1S,
    maxSize: maxSize$1S,
    accessLevel: accessLevel$1S,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      }
    },
    bytes: [0x58, 0x03, 0x18, 0x03, 0x16]
  }
};
const fromBytes$1U = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    date: buffer.getDate()
  };
};
const toBytes$1U = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1S);
  buffer.setDate(parameters.date);
  return toBytes$23(id$1S, buffer.data);
};

var getDayMaxDemandExport$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1S,
    examples: examples$1S,
    fromBytes: fromBytes$1U,
    headerSize: headerSize$1S,
    id: id$1S,
    isLoraOnly: isLoraOnly$1S,
    maxSize: maxSize$1S,
    name: name$1S,
    toBytes: toBytes$1U
});

const id$1R = getDayMaxDemandPrevious$2;
const name$1R = downlinkNames[getDayMaxDemandPrevious$2];
const headerSize$1R = 2;
const accessLevel$1R = READ_ONLY;
const maxSize$1R = 0;
const isLoraOnly$1R = false;
const examples$1R = {
  'simple request': {
    id: id$1R,
    name: name$1R,
    headerSize: headerSize$1R,
    maxSize: maxSize$1R,
    accessLevel: accessLevel$1R,
    parameters: {},
    bytes: [0x4a, 0x00]
  }
};
const fromBytes$1T = bytes => {
  if (bytes.length !== maxSize$1R) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1T = () => toBytes$23(id$1R);

var getDayMaxDemandPrevious$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1R,
    examples: examples$1R,
    fromBytes: fromBytes$1T,
    headerSize: headerSize$1R,
    id: id$1R,
    isLoraOnly: isLoraOnly$1R,
    maxSize: maxSize$1R,
    name: name$1R,
    toBytes: toBytes$1T
});

const id$1Q = getDayProfile$2;
const name$1Q = downlinkNames[getDayProfile$2];
const headerSize$1Q = 2;
const maxSize$1Q = 3;
const accessLevel$1Q = READ_ONLY;
const isLoraOnly$1Q = false;
const examples$1Q = {
  'request for active tariff table A+': {
    id: id$1Q,
    name: name$1Q,
    maxSize: maxSize$1Q,
    headerSize: headerSize$1Q,
    accessLevel: accessLevel$1Q,
    parameters: {
      tariffTable: 0,
      index: 3,
      isActive: true
    },
    bytes: [0x3b, 0x03, 0x00, 0x03, 0x00]
  }
};
const fromBytes$1S = _ref => {
  let [tariffTable, index, isActive] = _ref;
  return {
    tariffTable,
    index,
    isActive: isActive === 0
  };
};
const toBytes$1S = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1Q);
  buffer.setUint8(parameters.tariffTable);
  buffer.setUint8(parameters.index);
  buffer.setUint8(parameters.isActive ? 0 : 1);
  return toBytes$23(id$1Q, buffer.data);
};

var getDayProfile$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1Q,
    examples: examples$1Q,
    fromBytes: fromBytes$1S,
    headerSize: headerSize$1Q,
    id: id$1Q,
    isLoraOnly: isLoraOnly$1Q,
    maxSize: maxSize$1Q,
    name: name$1Q,
    toBytes: toBytes$1S
});

const A_PLUS = 0x01;
const A_MINUS = 0x02;
const VOLTAGE_10 = 0x40;
const VOLTAGE$1 = 0xa0;

const id$1P = getDemand$2;
const name$1P = downlinkNames[getDemand$2];
const headerSize$1P = 2;
const maxSize$1P = 7;
const accessLevel$1P = READ_ONLY;
const isLoraOnly$1P = false;
const examples$1P = {
  'request for A+': {
    id: id$1P,
    name: name$1P,
    headerSize: headerSize$1P,
    maxSize: maxSize$1P,
    parameters: {
      date: {
        year: 21,
        month: 6,
        date: 18
      },
      energyType: A_PLUS,
      firstIndex: 0,
      count: 2,
      period: 30
    },
    bytes: [0x76, 0x07, 0x2a, 0xd2, 0x01, 0x00, 0x00, 0x02, 0x1e]
  }
};
const fromBytes$1R = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getDemand();
};
const toBytes$1R = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1P);
  buffer.setDemand(parameters);
  return toBytes$23(id$1P, buffer.data);
};

var getDemand$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1P,
    examples: examples$1P,
    fromBytes: fromBytes$1R,
    headerSize: headerSize$1P,
    id: id$1P,
    isLoraOnly: isLoraOnly$1P,
    maxSize: maxSize$1P,
    name: name$1P,
    toBytes: toBytes$1R
});

const id$1O = getDeviceId$2;
const name$1O = downlinkNames[getDeviceId$2];
const headerSize$1O = 2;
const accessLevel$1O = READ_ONLY;
const maxSize$1O = 0;
const isLoraOnly$1O = false;
const examples$1O = {
  'simple request': {
    id: id$1O,
    name: name$1O,
    headerSize: headerSize$1O,
    accessLevel: accessLevel$1O,
    maxSize: maxSize$1O,
    parameters: {},
    bytes: [0x05, 0x00]
  }
};
const fromBytes$1Q = bytes => {
  if (bytes.length !== maxSize$1O) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1Q = () => toBytes$23(id$1O);

var getDeviceId$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1O,
    examples: examples$1O,
    fromBytes: fromBytes$1Q,
    headerSize: headerSize$1O,
    id: id$1O,
    isLoraOnly: isLoraOnly$1O,
    maxSize: maxSize$1O,
    name: name$1O,
    toBytes: toBytes$1Q
});

const id$1N = getDeviceType$2;
const name$1N = downlinkNames[getDeviceType$2];
const headerSize$1N = 2;
const accessLevel$1N = READ_ONLY;
const maxSize$1N = 0;
const isLoraOnly$1N = false;
const examples$1N = {
  'simple request': {
    id: id$1N,
    name: name$1N,
    headerSize: headerSize$1N,
    maxSize: maxSize$1N,
    accessLevel: accessLevel$1N,
    parameters: {},
    bytes: [0x04, 0x00]
  }
};
const fromBytes$1P = data => {
  if (data.length !== maxSize$1N) {
    throw new Error(`Wrong buffer size: ${data.length}.`);
  }
  return {};
};
const toBytes$1P = () => toBytes$23(id$1N);

var getDeviceType$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1N,
    examples: examples$1N,
    fromBytes: fromBytes$1P,
    headerSize: headerSize$1N,
    id: id$1N,
    isLoraOnly: isLoraOnly$1N,
    maxSize: maxSize$1N,
    name: name$1N,
    toBytes: toBytes$1P
});

const id$1M = getDisplayParam$2;
const name$1M = downlinkNames[getDisplayParam$2];
const headerSize$1M = 2;
const maxSize$1M = 1;
const accessLevel$1M = READ_ONLY;
const isLoraOnly$1M = false;
const examples$1M = {
  'get additional display parameters': {
    id: id$1M,
    name: name$1M,
    headerSize: headerSize$1M,
    maxSize: maxSize$1M,
    accessLevel: accessLevel$1M,
    parameters: {
      displayMode: 1
    },
    bytes: [0x5e, 0x01, 0x01]
  }
};
const fromBytes$1O = _ref => {
  let [displayMode] = _ref;
  return {
    displayMode
  };
};
const toBytes$1O = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1M);
  buffer.setUint8(parameters.displayMode);
  return toBytes$23(id$1M, buffer.data);
};

var getDisplayParam$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1M,
    examples: examples$1M,
    fromBytes: fromBytes$1O,
    headerSize: headerSize$1M,
    id: id$1M,
    isLoraOnly: isLoraOnly$1M,
    maxSize: maxSize$1M,
    name: name$1M,
    toBytes: toBytes$1O
});

const MIN_COMMAND_SIZE$3 = 0;
const MAX_COMMAND_SIZE$9 = 1;
const id$1L = getEnergy$2;
const name$1L = downlinkNames[getEnergy$2];
const headerSize$1L = 2;
const maxSize$1L = MAX_COMMAND_SIZE$9;
const accessLevel$1L = READ_ONLY;
const isLoraOnly$1L = false;
const examples$1L = {
  'get default A+ energy': {
    id: id$1L,
    name: name$1L,
    headerSize: headerSize$1L,
    maxSize: maxSize$1L,
    accessLevel: accessLevel$1L,
    parameters: {},
    bytes: [0x0f, 0x00]
  },
  'get A- energy': {
    id: id$1L,
    name: name$1L,
    headerSize: headerSize$1L,
    maxSize: maxSize$1L,
    accessLevel: accessLevel$1L,
    parameters: {
      energyType: A_MINUS$1
    },
    bytes: [0x0f, 0x01, 0x02]
  }
};
const fromBytes$1N = bytes => {
  if (bytes.length === MAX_COMMAND_SIZE$9) {
    return {
      energyType: bytes[0]
    };
  }
  return {};
};
const toBytes$1N = function () {
  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const buffer = new CommandBinaryBuffer$1(parameters?.energyType ? MAX_COMMAND_SIZE$9 : MIN_COMMAND_SIZE$3);
  if (parameters?.energyType) {
    buffer.setUint8(parameters.energyType);
  }
  return toBytes$23(id$1L, buffer.data);
};

var getEnergy$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1L,
    examples: examples$1L,
    fromBytes: fromBytes$1N,
    headerSize: headerSize$1L,
    id: id$1L,
    isLoraOnly: isLoraOnly$1L,
    maxSize: maxSize$1L,
    name: name$1L,
    toBytes: toBytes$1N
});

const MIN_COMMAND_SIZE$2 = 0;
const MAX_COMMAND_SIZE$8 = 1;
const id$1K = getEnergyDayPrevious$2;
const name$1K = downlinkNames[getEnergyDayPrevious$2];
const headerSize$1K = 2;
const maxSize$1K = MAX_COMMAND_SIZE$8;
const accessLevel$1K = READ_ONLY;
const isLoraOnly$1K = false;
const examples$1K = {
  'simple request': {
    id: id$1K,
    name: name$1K,
    headerSize: headerSize$1K,
    maxSize: maxSize$1K,
    accessLevel: accessLevel$1K,
    parameters: {},
    bytes: [0x03, 0x00]
  },
  'request A- energy': {
    id: id$1K,
    name: name$1K,
    headerSize: headerSize$1K,
    maxSize: maxSize$1K,
    accessLevel: accessLevel$1K,
    parameters: {
      energyType: A_MINUS$1
    },
    bytes: [0x03, 0x01, 0x02]
  }
};
const fromBytes$1M = bytes => {
  const {
    length
  } = bytes;
  if (length !== MAX_COMMAND_SIZE$8 && length !== MIN_COMMAND_SIZE$2) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  if (length === MAX_COMMAND_SIZE$8) {
    return {
      energyType: bytes[0]
    };
  }
  return {};
};
const toBytes$1M = parameters => {
  if (parameters.energyType) {
    return toBytes$23(id$1K, [parameters.energyType]);
  }
  return toBytes$23(id$1K);
};

var getEnergyDayPrevious$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1K,
    examples: examples$1K,
    fromBytes: fromBytes$1M,
    headerSize: headerSize$1K,
    id: id$1K,
    isLoraOnly: isLoraOnly$1K,
    maxSize: maxSize$1K,
    name: name$1K,
    toBytes: toBytes$1M
});

const MIN_COMMAND_SIZE$1 = 0;
const MAX_COMMAND_SIZE$7 = 1;
const id$1J = getEnergyExport$2;
const name$1J = downlinkNames[getEnergyExport$2];
const headerSize$1J = 2;
const maxSize$1J = MAX_COMMAND_SIZE$7;
const accessLevel$1J = READ_ONLY;
const isLoraOnly$1J = false;
const examples$1J = {
  'get default A+ energy': {
    id: id$1J,
    name: name$1J,
    headerSize: headerSize$1J,
    maxSize: maxSize$1J,
    accessLevel: accessLevel$1J,
    parameters: {},
    bytes: [0x5b, 0x00]
  },
  'get A- energy': {
    id: id$1J,
    name: name$1J,
    headerSize: headerSize$1J,
    maxSize: maxSize$1J,
    accessLevel: accessLevel$1J,
    parameters: {
      energyType: A_MINUS$1
    },
    bytes: [0x5b, 0x01, 0x02]
  }
};
const fromBytes$1L = bytes => {
  if (bytes.length === MAX_COMMAND_SIZE$7) {
    return {
      energyType: bytes[0]
    };
  }
  return {};
};
const toBytes$1L = function () {
  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const buffer = new CommandBinaryBuffer$1(parameters?.energyType ? MAX_COMMAND_SIZE$7 : MIN_COMMAND_SIZE$1);
  if (parameters?.energyType) {
    buffer.setUint8(parameters.energyType);
  }
  return toBytes$23(id$1J, buffer.data);
};

var getEnergyExport$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1J,
    examples: examples$1J,
    fromBytes: fromBytes$1L,
    headerSize: headerSize$1J,
    id: id$1J,
    isLoraOnly: isLoraOnly$1J,
    maxSize: maxSize$1J,
    name: name$1J,
    toBytes: toBytes$1L
});

const MIN_COMMAND_SIZE = 0;
const MAX_COMMAND_SIZE$6 = 1;
const id$1I = getEnergyExportDayPrevious$2;
const name$1I = downlinkNames[getEnergyExportDayPrevious$2];
const headerSize$1I = 2;
const maxSize$1I = MAX_COMMAND_SIZE$6;
const accessLevel$1I = READ_ONLY;
const isLoraOnly$1I = false;
const examples$1I = {
  'simple request': {
    id: id$1I,
    name: name$1I,
    headerSize: headerSize$1I,
    maxSize: maxSize$1I,
    accessLevel: accessLevel$1I,
    parameters: {},
    bytes: [0x50, 0x00]
  },
  'request A- energy': {
    id: id$1I,
    name: name$1I,
    headerSize: headerSize$1I,
    maxSize: maxSize$1I,
    accessLevel: accessLevel$1I,
    parameters: {
      energyType: A_MINUS$1
    },
    bytes: [0x50, 0x01, 0x02]
  }
};
const fromBytes$1K = bytes => {
  const {
    length
  } = bytes;
  if (length !== MAX_COMMAND_SIZE$6 && length !== MIN_COMMAND_SIZE) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  if (length === MAX_COMMAND_SIZE$6) {
    return {
      energyType: bytes[0]
    };
  }
  return {};
};
const toBytes$1K = parameters => {
  if (parameters.energyType) {
    return toBytes$23(id$1I, [parameters.energyType]);
  }
  return toBytes$23(id$1I);
};

var getEnergyExportDayPrevious$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1I,
    examples: examples$1I,
    fromBytes: fromBytes$1K,
    headerSize: headerSize$1I,
    id: id$1I,
    isLoraOnly: isLoraOnly$1I,
    maxSize: maxSize$1I,
    name: name$1I,
    toBytes: toBytes$1K
});

const id$1H = getEvents$2;
const name$1H = downlinkNames[getEvents$2];
const headerSize$1H = 2;
const accessLevel$1H = READ_ONLY;
const maxSize$1H = 4;
const isLoraOnly$1H = false;
const examples$1H = {
  'simple request': {
    id: id$1H,
    name: name$1H,
    headerSize: headerSize$1H,
    accessLevel: accessLevel$1H,
    maxSize: maxSize$1H,
    parameters: {
      date: {
        year: 24,
        month: 2,
        date: 12
      },
      offset: 23
    },
    bytes: [0x33, 0x04, 0x18, 0x02, 0x0c, 0x17]
  }
};
const fromBytes$1J = bytes => {
  if (bytes.length !== maxSize$1H) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  const buffer = new CommandBinaryBuffer$1(bytes);
  const date = buffer.getDate();
  const offset = buffer.getUint8();
  return {
    date,
    offset
  };
};
const toBytes$1J = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1H);
  buffer.setDate(parameters.date);
  buffer.setUint8(parameters.offset);
  return toBytes$23(id$1H, buffer.data);
};

var getEvents$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1H,
    examples: examples$1H,
    fromBytes: fromBytes$1J,
    headerSize: headerSize$1H,
    id: id$1H,
    isLoraOnly: isLoraOnly$1H,
    maxSize: maxSize$1H,
    name: name$1H,
    toBytes: toBytes$1J
});

const id$1G = getEventsCounters$2;
const name$1G = downlinkNames[getEventsCounters$2];
const headerSize$1G = 2;
const accessLevel$1G = READ_ONLY;
const maxSize$1G = 0;
const isLoraOnly$1G = false;
const examples$1G = {
  'simple request': {
    id: id$1G,
    name: name$1G,
    headerSize: headerSize$1G,
    accessLevel: accessLevel$1G,
    maxSize: maxSize$1G,
    parameters: {},
    bytes: [0x34, 0x00]
  }
};
const fromBytes$1I = bytes => {
  if (bytes.length !== maxSize$1G) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1I = () => toBytes$23(id$1G);

var getEventsCounters$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1G,
    examples: examples$1G,
    fromBytes: fromBytes$1I,
    headerSize: headerSize$1G,
    id: id$1G,
    isLoraOnly: isLoraOnly$1G,
    maxSize: maxSize$1G,
    name: name$1G,
    toBytes: toBytes$1I
});

const id$1F = getEventStatus$2;
const name$1F = downlinkNames[getEventStatus$2];
const headerSize$1F = 2;
const accessLevel$1F = READ_ONLY;
const maxSize$1F = 0;
const isLoraOnly$1F = false;
const examples$1F = {
  'simple request': {
    id: id$1F,
    name: name$1F,
    headerSize: headerSize$1F,
    accessLevel: accessLevel$1F,
    maxSize: maxSize$1F,
    parameters: {},
    bytes: [0x01, 0x00]
  }
};
const fromBytes$1H = bytes => {
  if (bytes.length !== maxSize$1F) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1H = () => toBytes$23(id$1F);

var getEventStatus$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1F,
    examples: examples$1F,
    fromBytes: fromBytes$1H,
    headerSize: headerSize$1F,
    id: id$1F,
    isLoraOnly: isLoraOnly$1F,
    maxSize: maxSize$1F,
    name: name$1F,
    toBytes: toBytes$1H
});

const id$1E = getExtendedCurrentValues$2;
const name$1E = downlinkNames[getExtendedCurrentValues$2];
const headerSize$1E = 2;
const maxSize$1E = 0;
const accessLevel$1E = READ_ONLY;
const isLoraOnly$1E = false;
const examples$1E = {
  'simple request': {
    id: id$1E,
    name: name$1E,
    headerSize: headerSize$1E,
    maxSize: maxSize$1E,
    accessLevel: accessLevel$1E,
    parameters: {},
    bytes: [0x3a, 0x00]
  }
};
const fromBytes$1G = bytes => {
  if (bytes.length !== maxSize$1E) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1G = () => toBytes$23(id$1E);

var getExtendedCurrentValues$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1E,
    examples: examples$1E,
    fromBytes: fromBytes$1G,
    headerSize: headerSize$1E,
    id: id$1E,
    isLoraOnly: isLoraOnly$1E,
    maxSize: maxSize$1E,
    name: name$1E,
    toBytes: toBytes$1G
});

const id$1D = getExtendedCurrentValues2$2;
const name$1D = downlinkNames[getExtendedCurrentValues2$2];
const headerSize$1D = 2;
const accessLevel$1D = READ_ONLY;
const maxSize$1D = 0;
const isLoraOnly$1D = false;
const examples$1D = {
  'simple request': {
    id: id$1D,
    name: name$1D,
    headerSize: headerSize$1D,
    maxSize: maxSize$1D,
    accessLevel: accessLevel$1D,
    parameters: {},
    bytes: [0x2d, 0x00]
  }
};
const fromBytes$1F = bytes => {
  if (bytes.length !== maxSize$1D) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1F = () => toBytes$23(id$1D);

var getExtendedCurrentValues2$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1D,
    examples: examples$1D,
    fromBytes: fromBytes$1F,
    headerSize: headerSize$1D,
    id: id$1D,
    isLoraOnly: isLoraOnly$1D,
    maxSize: maxSize$1D,
    name: name$1D,
    toBytes: toBytes$1F
});

const id$1C = getHalfHourDemand$2;
const name$1C = downlinkNames[getHalfHourDemand$2];
const headerSize$1C = 2;
const maxSize$1C = 3;
const accessLevel$1C = READ_ONLY;
const isLoraOnly$1C = false;
const examples$1C = {
  'request archive values for 2024.03.22': {
    id: id$1C,
    name: name$1C,
    headerSize: headerSize$1C,
    maxSize: maxSize$1C,
    accessLevel: accessLevel$1C,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      }
    },
    bytes: [0x15, 0x03, 0x18, 0x03, 0x16]
  }
};
const fromBytes$1E = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    date: buffer.getDate()
  };
};
const toBytes$1E = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1C);
  buffer.setDate(parameters.date);
  return toBytes$23(id$1C, buffer.data);
};

var getHalfHourDemand$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1C,
    examples: examples$1C,
    fromBytes: fromBytes$1E,
    headerSize: headerSize$1C,
    id: id$1C,
    isLoraOnly: isLoraOnly$1C,
    maxSize: maxSize$1C,
    name: name$1C,
    toBytes: toBytes$1E
});

const id$1B = getHalfHourDemandExport$2;
const name$1B = downlinkNames[getHalfHourDemandExport$2];
const headerSize$1B = 2;
const maxSize$1B = 3;
const accessLevel$1B = READ_ONLY;
const isLoraOnly$1B = false;
const examples$1B = {
  'request archive values for 2024.03.22': {
    id: id$1B,
    name: name$1B,
    headerSize: headerSize$1B,
    maxSize: maxSize$1B,
    accessLevel: accessLevel$1B,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      }
    },
    bytes: [0x53, 0x03, 0x18, 0x03, 0x16]
  }
};
const fromBytes$1D = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    date: buffer.getDate()
  };
};
const toBytes$1D = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1B);
  buffer.setDate(parameters.date);
  return toBytes$23(id$1B, buffer.data);
};

var getHalfHourDemandExport$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1B,
    examples: examples$1B,
    fromBytes: fromBytes$1D,
    headerSize: headerSize$1B,
    id: id$1B,
    isLoraOnly: isLoraOnly$1B,
    maxSize: maxSize$1B,
    name: name$1B,
    toBytes: toBytes$1D
});

const id$1A = getHalfHourDemandPrevious$2;
const name$1A = downlinkNames[getHalfHourDemandPrevious$2];
const headerSize$1A = 2;
const accessLevel$1A = READ_ONLY;
const maxSize$1A = 0;
const isLoraOnly$1A = false;
const examples$1A = {
  'simple request': {
    id: id$1A,
    name: name$1A,
    headerSize: headerSize$1A,
    maxSize: maxSize$1A,
    accessLevel: accessLevel$1A,
    parameters: {},
    bytes: [0x4b, 0x00]
  }
};
const fromBytes$1C = data => {
  if (data.length !== maxSize$1A) {
    throw new Error(`Wrong buffer size: ${data.length}.`);
  }
  return {};
};
const toBytes$1C = () => toBytes$23(id$1A);

var getHalfHourDemandPrevious$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1A,
    examples: examples$1A,
    fromBytes: fromBytes$1C,
    headerSize: headerSize$1A,
    id: id$1A,
    isLoraOnly: isLoraOnly$1A,
    maxSize: maxSize$1A,
    name: name$1A,
    toBytes: toBytes$1C
});

const TARIFF_NUMBER = 4;
const UNDEFINED_ENERGY_VALUE = 0xffffffff;
const energiesMask = {
  'A+': 0x01,
  'A+R+': 0x02,
  'A+R-': 0x04,
  'A-': 0x08,
  'A-R+': 0x10,
  'A-R-': 0x20
};
const getEnergiesFlags = energies => {
  const booleanObject = {};
  Object.keys(energies).forEach(name => {
    booleanObject[name] = !!energies[name];
  });
  return fromObject(energiesMask, booleanObject);
};
const getAPlusTariffBit = tariff => tariff < TARIFF_NUMBER ? 1 << tariff : 0;
const getAMinusTariffBit = tariff => tariff < TARIFF_NUMBER ? 1 << tariff << 4 : 0;
const getTariffEnergiesFlag = (tariff, energies) => {
  let flag = 0;
  if (tariff < TARIFF_NUMBER) {
    if (energies['A+'] || energies['A+R+'] || energies['A+R-']) {
      flag |= getAPlusTariffBit(tariff);
    }
    if (energies['A-'] || energies['A-R+'] || energies['A-R-']) {
      flag |= getAMinusTariffBit(tariff);
    }
  }
  return flag;
};
function CommandBinaryBuffer(dataOrLength) {
  let isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  BinaryBuffer.call(this, dataOrLength, isLittleEndian);
}
CommandBinaryBuffer.prototype = Object.create(BinaryBuffer.prototype);
CommandBinaryBuffer.prototype.constructor = CommandBinaryBuffer;
CommandBinaryBuffer.prototype.getDate = function () {
  const date0 = this.getUint8();
  const date1 = this.getUint8();
  return {
    year: date0 >> 1,
    month: date0 << 3 & 0x0f | date1 >> 5,
    date: date1 & 0x1f
  };
};
CommandBinaryBuffer.prototype.setDate = function (_ref) {
  let {
    year,
    month,
    date
  } = _ref;
  const date0 = year << 1 | month >> 3 & 0x01;
  const date1 = month << 5 & 0xe0 | date & 0x1f;
  this.setUint8(date0);
  this.setUint8(date1);
};
CommandBinaryBuffer.prototype.getEnergiesFlags = function () {
  const byte = this.getUint8();
  return toObject(energiesMask, byte);
};
CommandBinaryBuffer.prototype.setEnergiesFlags = function (energies) {
  this.setUint8(getEnergiesFlags(energies));
};
CommandBinaryBuffer.prototype.getHalfhoursEnergy = function (halfhoursNumber) {
  const halfhours = [];
  for (let index = 0; index < halfhoursNumber; index++) {
    const value = this.getUint16();
    halfhours.push(value === UNDEFINED_ENERGY_VALUE ? undefined : value);
  }
  return halfhours;
};
CommandBinaryBuffer.prototype.setHalfhoursEnergy = function (halfhours) {
  if (halfhours) {
    for (let index = 0; index < halfhours.length; index++) {
      const value = halfhours[index];
      this.setUint16(value === undefined ? UNDEFINED_ENERGY_VALUE : value);
    }
  }
};
CommandBinaryBuffer.prototype.getHalfhoursEnergies = function (energiesFlags, halfhoursNumber) {
  const energies = {};
  if (energiesFlags['A+']) {
    energies['A+'] = this.getHalfhoursEnergy(halfhoursNumber);
  }
  if (energiesFlags['A+R+']) {
    energies['A+R+'] = this.getHalfhoursEnergy(halfhoursNumber);
  }
  if (energiesFlags['A+R-']) {
    energies['A+R-'] = this.getHalfhoursEnergy(halfhoursNumber);
  }
  if (energiesFlags['A-']) {
    energies['A-'] = this.getHalfhoursEnergy(halfhoursNumber);
  }
  if (energiesFlags['A-R+']) {
    energies['A-R+'] = this.getHalfhoursEnergy(halfhoursNumber);
  }
  if (energiesFlags['A-R-']) {
    energies['A-R-'] = this.getHalfhoursEnergy(halfhoursNumber);
  }
  return energies;
};
CommandBinaryBuffer.prototype.setHalfhoursEnergies = function (energies) {
  this.setHalfhoursEnergy(energies['A+']);
  this.setHalfhoursEnergy(energies['A+R+']);
  this.setHalfhoursEnergy(energies['A+R-']);
  this.setHalfhoursEnergy(energies['A-']);
  this.setHalfhoursEnergy(energies['A-R+']);
  this.setHalfhoursEnergy(energies['A-R-']);
};
CommandBinaryBuffer.prototype.getAPlusTariffEnergies = function (energyFlags) {
  const energies = {};
  if (energyFlags & energiesMask['A+']) {
    energies['A+'] = this.getUint32();
  }
  if (energyFlags & energiesMask['A+R+']) {
    energies['A+R+'] = this.getUint32();
  }
  if (energyFlags & energiesMask['A+R-']) {
    energies['A+R-'] = this.getUint32();
  }
  return energies;
};
CommandBinaryBuffer.prototype.setAPlusTariffEnergies = function (energies) {
  if (energies) {
    if (energies['A+']) {
      this.setUint32(energies['A+']);
    }
    if (energies['A+R+']) {
      this.setUint32(energies['A+R+']);
    }
    if (energies['A+R-']) {
      this.setUint32(energies['A+R-']);
    }
  }
};
CommandBinaryBuffer.prototype.getAMinusTariffEnergies = function (energyFlags) {
  const energies = {};
  if (energyFlags & energiesMask['A-']) {
    energies['A-'] = this.getUint32();
  }
  if (energyFlags & energiesMask['A-R+']) {
    energies['A-R+'] = this.getUint32();
  }
  if (energyFlags & energiesMask['A-R-']) {
    energies['A-R-'] = this.getUint32();
  }
  return energies;
};
CommandBinaryBuffer.prototype.setAMinusTariffEnergies = function (energies) {
  if (energies) {
    if (energies['A-']) {
      this.setUint32(energies['A-']);
    }
    if (energies['A-R+']) {
      this.setUint32(energies['A-R+']);
    }
    if (energies['A-R-']) {
      this.setUint32(energies['A-R-']);
    }
  }
};
CommandBinaryBuffer.prototype.getTariffsEnergies = function () {
  const energyFlags = this.getUint8();
  const tariffFlags = this.getUint8();
  const tariffs = new Array(TARIFF_NUMBER).fill(null);
  for (let index = 0; index < TARIFF_NUMBER; index++) {
    if (tariffFlags & getAPlusTariffBit(index)) {
      tariffs[index] = this.getAPlusTariffEnergies(energyFlags);
    }
  }
  for (let index = 0; index < TARIFF_NUMBER; index++) {
    if (tariffFlags & getAMinusTariffBit(index)) {
      tariffs[index] = {
        ...tariffs[index],
        ...this.getAMinusTariffEnergies(energyFlags)
      };
    }
  }
  return tariffs;
};
CommandBinaryBuffer.prototype.setTariffsEnergies = function (tariffs) {
  let energiesFlags = 0;
  let tariffsFlags = 0;
  tariffs.forEach((tariff, index) => {
    if (tariff) {
      energiesFlags |= getEnergiesFlags(tariff);
      tariffsFlags |= getTariffEnergiesFlag(index, tariff);
    }
  });
  this.setUint8(energiesFlags);
  this.setUint8(tariffsFlags);
  tariffs.forEach(tariff => this.setAPlusTariffEnergies(tariff));
  tariffs.forEach(tariff => this.setAMinusTariffEnergies(tariff));
};
CommandBinaryBuffer.prototype.getPowerMax = function () {
  return {
    hours: this.getUint8(),
    minutes: this.getUint8(),
    power: this.getUint32()
  };
};
CommandBinaryBuffer.prototype.setPowerMax = function (value) {
  if (value) {
    const {
      hours,
      minutes,
      power
    } = value;
    this.setUint8(hours);
    this.setUint8(minutes);
    this.setUint32(power);
  }
};
CommandBinaryBuffer.prototype.getAPlusTariffPowerMax = function (energyFlags) {
  const energies = {};
  if (energyFlags & energiesMask['A+']) {
    energies['A+'] = this.getPowerMax();
  }
  if (energyFlags & energiesMask['A+R+']) {
    energies['A+R+'] = this.getPowerMax();
  }
  if (energyFlags & energiesMask['A+R-']) {
    energies['A+R-'] = this.getPowerMax();
  }
  return energies;
};
CommandBinaryBuffer.prototype.setAPlusTariffPowerMax = function (energies) {
  if (energies) {
    this.setPowerMax(energies['A+']);
    this.setPowerMax(energies['A+R+']);
    this.setPowerMax(energies['A+R+']);
  }
};
CommandBinaryBuffer.prototype.getAMinusTariffPowerMax = function (energyFlags) {
  const energies = {};
  if (energyFlags & energiesMask['A-']) {
    energies['A-'] = this.getPowerMax();
  }
  if (energyFlags & energiesMask['A-R+']) {
    energies['A-R+'] = this.getPowerMax();
  }
  if (energyFlags & energiesMask['A-R-']) {
    energies['A-R-'] = this.getPowerMax();
  }
  return energies;
};
CommandBinaryBuffer.prototype.setAMinusTariffPowerMax = function (energies) {
  if (energies) {
    this.setPowerMax(energies['A-']);
    this.setPowerMax(energies['A-R+']);
    this.setPowerMax(energies['A-R-']);
  }
};
CommandBinaryBuffer.prototype.getTariffsPowerMax = function () {
  const energyFlags = this.getUint8();
  const tariffFlags = this.getUint8();
  const tariffs = new Array(TARIFF_NUMBER).fill(null);
  for (let index = 0; index < TARIFF_NUMBER; index++) {
    if (tariffFlags & getAPlusTariffBit(index)) {
      tariffs[index] = this.getAPlusTariffPowerMax(energyFlags);
    }
  }
  for (let index = 0; index < TARIFF_NUMBER; index++) {
    if (tariffFlags & getAMinusTariffBit(index)) {
      tariffs[index] = {
        ...tariffs[index],
        ...this.getAMinusTariffPowerMax(energyFlags)
      };
    }
  }
  return tariffs;
};
CommandBinaryBuffer.prototype.setTariffsPowerMax = function (tariffs) {
  let energiesFlags = 0;
  let tariffsFlags = 0;
  tariffs.forEach((tariff, index) => {
    if (tariff) {
      energiesFlags |= getEnergiesFlags(tariff);
      tariffsFlags |= getTariffEnergiesFlag(index, tariff);
    }
  });
  this.setUint8(energiesFlags);
  this.setUint8(tariffsFlags);
  tariffs.forEach(tariff => this.setAPlusTariffPowerMax(tariff));
  tariffs.forEach(tariff => this.setAMinusTariffPowerMax(tariff));
};

const id$1z = getHalfhoursEnergies$2;
const name$1z = downlinkNames[getHalfhoursEnergies$2];
const headerSize$1z = 2;
const maxSize$1z = 5;
const accessLevel$1z = UNENCRYPTED;
const isLoraOnly$1z = true;
const examples$1z = {
  'request for halfhours energies': {
    id: id$1z,
    name: name$1z,
    headerSize: headerSize$1z,
    maxSize: maxSize$1z,
    parameters: {
      date: {
        year: 21,
        month: 2,
        date: 3
      },
      energies: {
        'A+': true,
        'A+R+': true,
        'A+R-': false,
        'A-': false,
        'A-R+': false,
        'A-R-': false
      },
      firstHalfhour: 5,
      halfhoursNumber: 3
    },
    bytes: [0x6f, 0x05, 0x2a, 0x43, 0x03, 0x05, 0x03]
  }
};
const fromBytes$1B = bytes => {
  const buffer = new CommandBinaryBuffer(bytes);
  return {
    date: buffer.getDate(),
    energies: buffer.getEnergiesFlags(),
    firstHalfhour: buffer.getUint8(),
    halfhoursNumber: buffer.getUint8()
  };
};
const toBytes$1B = parameters => {
  const buffer = new CommandBinaryBuffer(maxSize$1z);
  buffer.setDate(parameters.date);
  buffer.setEnergiesFlags(parameters.energies);
  buffer.setUint8(parameters.firstHalfhour);
  buffer.setUint8(parameters.halfhoursNumber);
  return toBytes$23(id$1z, buffer.data);
};

var getHalfhoursEnergies$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1z,
    examples: examples$1z,
    fromBytes: fromBytes$1B,
    headerSize: headerSize$1z,
    id: id$1z,
    isLoraOnly: isLoraOnly$1z,
    maxSize: maxSize$1z,
    name: name$1z,
    toBytes: toBytes$1B
});

const id$1y = getMagneticFieldThreshold$2;
const name$1y = downlinkNames[getMagneticFieldThreshold$2];
const headerSize$1y = 2;
const maxSize$1y = 0;
const accessLevel$1y = READ_ONLY;
const isLoraOnly$1y = false;
const examples$1y = {
  'simple request': {
    id: id$1y,
    name: name$1y,
    headerSize: headerSize$1y,
    maxSize: maxSize$1y,
    accessLevel: accessLevel$1y,
    parameters: {},
    bytes: [0x6d, 0x00]
  }
};
const fromBytes$1A = bytes => {
  if (bytes.length !== maxSize$1y) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1A = () => toBytes$23(id$1y);

var getMagneticFieldThreshold$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1y,
    examples: examples$1y,
    fromBytes: fromBytes$1A,
    headerSize: headerSize$1y,
    id: id$1y,
    isLoraOnly: isLoraOnly$1y,
    maxSize: maxSize$1y,
    name: name$1y,
    toBytes: toBytes$1A
});

const id$1x = getMeterInfo$2;
const name$1x = downlinkNames[getMeterInfo$2];
const headerSize$1x = 2;
const maxSize$1x = 0;
const accessLevel$1x = READ_ONLY;
const isLoraOnly$1x = false;
const examples$1x = {
  'simple request': {
    id: id$1x,
    name: name$1x,
    headerSize: headerSize$1x,
    maxSize: maxSize$1x,
    accessLevel: accessLevel$1x,
    parameters: {},
    bytes: [0x7a, 0x00]
  }
};
const fromBytes$1z = bytes => {
  if (bytes.length !== maxSize$1x) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1z = () => toBytes$23(id$1x);

var getMeterInfo$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1x,
    examples: examples$1x,
    fromBytes: fromBytes$1z,
    headerSize: headerSize$1x,
    id: id$1x,
    isLoraOnly: isLoraOnly$1x,
    maxSize: maxSize$1x,
    name: name$1x,
    toBytes: toBytes$1z
});

const id$1w = getMonthDemand$2;
const name$1w = downlinkNames[getMonthDemand$2];
const headerSize$1w = 2;
const maxSize$1w = 2;
const accessLevel$1w = READ_ONLY;
const isLoraOnly$1w = false;
const examples$1w = {
  'request energy for 2024.03': {
    id: id$1w,
    name: name$1w,
    headerSize: headerSize$1w,
    maxSize: maxSize$1w,
    accessLevel: accessLevel$1w,
    parameters: {
      year: 24,
      month: 3
    },
    bytes: [0x17, 0x02, 0x18, 0x03]
  }
};
const fromBytes$1y = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    year: buffer.getUint8(),
    month: buffer.getUint8()
  };
};
const toBytes$1y = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1w);
  buffer.setUint8(parameters.year);
  buffer.setUint8(parameters.month);
  return toBytes$23(id$1w, buffer.data);
};

var getMonthDemand$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1w,
    examples: examples$1w,
    fromBytes: fromBytes$1y,
    headerSize: headerSize$1w,
    id: id$1w,
    isLoraOnly: isLoraOnly$1w,
    maxSize: maxSize$1w,
    name: name$1w,
    toBytes: toBytes$1y
});

const id$1v = getMonthDemandExport$2;
const name$1v = downlinkNames[getMonthDemandExport$2];
const headerSize$1v = 2;
const maxSize$1v = 2;
const accessLevel$1v = READ_ONLY;
const isLoraOnly$1v = false;
const examples$1v = {
  'request energy for 2024.03': {
    id: id$1v,
    name: name$1v,
    headerSize: headerSize$1v,
    maxSize: maxSize$1v,
    accessLevel: accessLevel$1v,
    parameters: {
      year: 24,
      month: 3
    },
    bytes: [0x52, 0x02, 0x18, 0x03]
  }
};
const fromBytes$1x = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    year: buffer.getUint8(),
    month: buffer.getUint8()
  };
};
const toBytes$1x = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1v);
  buffer.setUint8(parameters.year);
  buffer.setUint8(parameters.month);
  return toBytes$23(id$1v, buffer.data);
};

var getMonthDemandExport$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1v,
    examples: examples$1v,
    fromBytes: fromBytes$1x,
    headerSize: headerSize$1v,
    id: id$1v,
    isLoraOnly: isLoraOnly$1v,
    maxSize: maxSize$1v,
    name: name$1v,
    toBytes: toBytes$1x
});

const id$1u = getMonthMaxDemand$2;
const name$1u = downlinkNames[getMonthMaxDemand$2];
const headerSize$1u = 2;
const maxSize$1u = 2;
const accessLevel$1u = READ_ONLY;
const isLoraOnly$1u = false;
const examples$1u = {
  'request max power for 2024.03': {
    id: id$1u,
    name: name$1u,
    headerSize: headerSize$1u,
    maxSize: maxSize$1u,
    accessLevel: accessLevel$1u,
    parameters: {
      year: 24,
      month: 3
    },
    bytes: [0x32, 0x02, 0x18, 0x03]
  }
};
const fromBytes$1w = bytes => {
  const [year, month] = bytes;
  return {
    year,
    month
  };
};
const toBytes$1w = _ref => {
  let {
    year,
    month
  } = _ref;
  return toBytes$23(id$1u, [year, month]);
};

var getMonthMaxDemand$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1u,
    examples: examples$1u,
    fromBytes: fromBytes$1w,
    headerSize: headerSize$1u,
    id: id$1u,
    isLoraOnly: isLoraOnly$1u,
    maxSize: maxSize$1u,
    name: name$1u,
    toBytes: toBytes$1w
});

const id$1t = getMonthMaxDemandExport$2;
const name$1t = downlinkNames[getMonthMaxDemandExport$2];
const headerSize$1t = 2;
const maxSize$1t = 2;
const accessLevel$1t = READ_ONLY;
const isLoraOnly$1t = false;
const examples$1t = {
  'request max power for 2024.03': {
    id: id$1t,
    name: name$1t,
    headerSize: headerSize$1t,
    maxSize: maxSize$1t,
    accessLevel: accessLevel$1t,
    parameters: {
      year: 24,
      month: 3
    },
    bytes: [0x59, 0x02, 0x18, 0x03]
  }
};
const fromBytes$1v = bytes => {
  const [year, month] = bytes;
  return {
    year,
    month
  };
};
const toBytes$1v = _ref => {
  let {
    year,
    month
  } = _ref;
  return toBytes$23(id$1t, [year, month]);
};

var getMonthMaxDemandExport$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1t,
    examples: examples$1t,
    fromBytes: fromBytes$1v,
    headerSize: headerSize$1t,
    id: id$1t,
    isLoraOnly: isLoraOnly$1t,
    maxSize: maxSize$1t,
    name: name$1t,
    toBytes: toBytes$1v
});

const id$1s = getOperatorParametersExtended3$2;
const name$1s = downlinkNames[getOperatorParametersExtended3$2];
const headerSize$1s = 2;
const maxSize$1s = 0;
const accessLevel$1s = READ_ONLY;
const isLoraOnly$1s = false;
const examples$1s = {
  'simple request': {
    id: id$1s,
    name: name$1s,
    headerSize: headerSize$1s,
    maxSize: maxSize$1s,
    accessLevel: accessLevel$1s,
    parameters: {},
    bytes: [0x71, 0x00]
  }
};
const fromBytes$1u = bytes => {
  if (bytes.length !== maxSize$1s) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1u = () => toBytes$23(id$1s);

var getOperatorParametersExtended3$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1s,
    examples: examples$1s,
    fromBytes: fromBytes$1u,
    headerSize: headerSize$1s,
    id: id$1s,
    isLoraOnly: isLoraOnly$1s,
    maxSize: maxSize$1s,
    name: name$1s,
    toBytes: toBytes$1u
});

const id$1r = getOperatorParameters$2;
const name$1r = downlinkNames[getOperatorParameters$2];
const headerSize$1r = 2;
const maxSize$1r = 0;
const accessLevel$1r = READ_ONLY;
const isLoraOnly$1r = false;
const examples$1r = {
  'simple request': {
    id: id$1r,
    name: name$1r,
    headerSize: headerSize$1r,
    maxSize: maxSize$1r,
    accessLevel: accessLevel$1r,
    parameters: {},
    bytes: [0x1e, 0x00]
  }
};
const fromBytes$1t = bytes => {
  if (bytes.length !== maxSize$1r) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1t = () => toBytes$23(id$1r);

var getOperatorParameters$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1r,
    examples: examples$1r,
    fromBytes: fromBytes$1t,
    headerSize: headerSize$1r,
    id: id$1r,
    isLoraOnly: isLoraOnly$1r,
    maxSize: maxSize$1r,
    name: name$1r,
    toBytes: toBytes$1t
});

const id$1q = getRatePlanInfo$2;
const name$1q = downlinkNames[getRatePlanInfo$2];
const headerSize$1q = 2;
const maxSize$1q = 1;
const accessLevel$1q = READ_ONLY;
const isLoraOnly$1q = false;
const examples$1q = {
  'request for table A-': {
    id: id$1q,
    name: name$1q,
    headerSize: headerSize$1q,
    maxSize: maxSize$1q,
    accessLevel: accessLevel$1q,
    parameters: {
      tariffTable: 1
    },
    bytes: [0x2c, 0x01, 0x01]
  }
};
const fromBytes$1s = bytes => ({
  tariffTable: bytes[0]
});
const toBytes$1s = parameters => toBytes$23(id$1q, [parameters.tariffTable]);

var getRatePlanInfo$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1q,
    examples: examples$1q,
    fromBytes: fromBytes$1s,
    headerSize: headerSize$1q,
    id: id$1q,
    isLoraOnly: isLoraOnly$1q,
    maxSize: maxSize$1q,
    name: name$1q,
    toBytes: toBytes$1s
});

const id$1p = getSaldo$2;
const name$1p = downlinkNames[getSaldo$2];
const headerSize$1p = 2;
const maxSize$1p = 0;
const accessLevel$1p = READ_ONLY;
const isLoraOnly$1p = false;
const examples$1p = {
  'simple request': {
    id: id$1p,
    name: name$1p,
    headerSize: headerSize$1p,
    maxSize: maxSize$1p,
    accessLevel: accessLevel$1p,
    parameters: {},
    bytes: [0x29, 0x00]
  }
};
const fromBytes$1r = bytes => {
  if (bytes.length !== maxSize$1p) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1r = () => toBytes$23(id$1p);

var getSaldo$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1p,
    examples: examples$1p,
    fromBytes: fromBytes$1r,
    headerSize: headerSize$1p,
    id: id$1p,
    isLoraOnly: isLoraOnly$1p,
    maxSize: maxSize$1p,
    name: name$1p,
    toBytes: toBytes$1r
});

const id$1o = getSaldoParameters$2;
const name$1o = downlinkNames[getSaldoParameters$2];
const headerSize$1o = 2;
const maxSize$1o = 0;
const accessLevel$1o = READ_ONLY;
const isLoraOnly$1o = false;
const examples$1o = {
  'simple request': {
    id: id$1o,
    name: name$1o,
    headerSize: headerSize$1o,
    maxSize: maxSize$1o,
    accessLevel: accessLevel$1o,
    parameters: {},
    bytes: [0x2e, 0x00]
  }
};
const fromBytes$1q = bytes => {
  if (bytes.length !== maxSize$1o) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1q = () => toBytes$23(id$1o);

var getSaldoParameters$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1o,
    examples: examples$1o,
    fromBytes: fromBytes$1q,
    headerSize: headerSize$1o,
    id: id$1o,
    isLoraOnly: isLoraOnly$1o,
    maxSize: maxSize$1o,
    name: name$1o,
    toBytes: toBytes$1q
});

const id$1n = getSeasonProfile$2;
const name$1n = downlinkNames[getSeasonProfile$2];
const headerSize$1n = 2;
const maxSize$1n = 3;
const accessLevel$1n = READ_ONLY;
const isLoraOnly$1n = false;
const examples$1n = {
  'request for passive tariff table A+': {
    id: id$1n,
    name: name$1n,
    headerSize: headerSize$1n,
    maxSize: maxSize$1n,
    accessLevel: accessLevel$1n,
    parameters: {
      tariffTable: 0,
      index: 5,
      isActive: false
    },
    bytes: [0x3c, 0x03, 0x00, 0x05, 0x01]
  }
};
const fromBytes$1p = _ref => {
  let [tariffTable, index, isActive] = _ref;
  return {
    tariffTable,
    index,
    isActive: isActive === 0
  };
};
const toBytes$1p = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1n);
  buffer.setUint8(parameters.tariffTable);
  buffer.setUint8(parameters.index);
  buffer.setUint8(parameters.isActive ? 0 : 1);
  return toBytes$23(id$1n, buffer.data);
};

var getSeasonProfile$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1n,
    examples: examples$1n,
    fromBytes: fromBytes$1p,
    headerSize: headerSize$1n,
    id: id$1n,
    isLoraOnly: isLoraOnly$1n,
    maxSize: maxSize$1n,
    name: name$1n,
    toBytes: toBytes$1p
});

const id$1m = getSpecialDay$2;
const name$1m = downlinkNames[getSpecialDay$2];
const headerSize$1m = 2;
const maxSize$1m = 3;
const accessLevel$1m = READ_ONLY;
const isLoraOnly$1m = false;
const examples$1m = {
  'request for passive tariff table A+': {
    id: id$1m,
    name: name$1m,
    headerSize: headerSize$1m,
    maxSize: maxSize$1m,
    accessLevel: accessLevel$1m,
    parameters: {
      tariffTable: 0,
      index: 5,
      isActive: false
    },
    bytes: [0x3d, 0x03, 0x00, 0x05, 0x01]
  }
};
const fromBytes$1o = _ref => {
  let [tariffTable, index, isActive] = _ref;
  return {
    tariffTable,
    index,
    isActive: isActive === 0
  };
};
const toBytes$1o = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1m);
  buffer.setUint8(parameters.tariffTable);
  buffer.setUint8(parameters.index);
  buffer.setUint8(parameters.isActive ? 0 : 1);
  return toBytes$23(id$1m, buffer.data);
};

var getSpecialDay$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1m,
    examples: examples$1m,
    fromBytes: fromBytes$1o,
    headerSize: headerSize$1m,
    id: id$1m,
    isLoraOnly: isLoraOnly$1m,
    maxSize: maxSize$1m,
    name: name$1m,
    toBytes: toBytes$1o
});

const id$1l = getVersion$2;
const name$1l = downlinkNames[getVersion$2];
const headerSize$1l = 2;
const maxSize$1l = 0;
const accessLevel$1l = READ_ONLY;
const isLoraOnly$1l = false;
const examples$1l = {
  'simple request': {
    id: id$1l,
    name: name$1l,
    headerSize: headerSize$1l,
    maxSize: maxSize$1l,
    accessLevel: accessLevel$1l,
    parameters: {},
    bytes: [0x28, 0x00]
  }
};
const fromBytes$1n = bytes => {
  if (bytes.length !== maxSize$1l) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1n = () => toBytes$23(id$1l);

var getVersion$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1l,
    examples: examples$1l,
    fromBytes: fromBytes$1n,
    headerSize: headerSize$1l,
    id: id$1l,
    isLoraOnly: isLoraOnly$1l,
    maxSize: maxSize$1l,
    name: name$1l,
    toBytes: toBytes$1n
});

const id$1k = prepareRatePlan$2;
const name$1k = downlinkNames[prepareRatePlan$2];
const headerSize$1k = 2;
const maxSize$1k = 5;
const accessLevel$1k = READ_WRITE;
const isLoraOnly$1k = false;
const examples$1k = {
  'prepare rate plan request': {
    id: id$1k,
    name: name$1k,
    headerSize: headerSize$1k,
    maxSize: maxSize$1k,
    accessLevel: accessLevel$1k,
    parameters: {
      tariffTable: 0,
      id: 987654321
    },
    bytes: [0x14, 0x05, 0x00, 0x3a, 0xde, 0x68, 0xb1]
  }
};
const fromBytes$1m = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    tariffTable: buffer.getUint8(),
    id: buffer.getUint32()
  };
};
const toBytes$1m = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1k);
  buffer.setUint8(parameters.tariffTable);
  buffer.setUint32(parameters.id);
  return toBytes$23(id$1k, buffer.data);
};

var prepareRatePlan$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1k,
    examples: examples$1k,
    fromBytes: fromBytes$1m,
    headerSize: headerSize$1k,
    id: id$1k,
    isLoraOnly: isLoraOnly$1k,
    maxSize: maxSize$1k,
    name: name$1k,
    toBytes: toBytes$1m
});

const id$1j = resetPowerMaxDay$2;
const name$1j = downlinkNames[resetPowerMaxDay$2];
const headerSize$1j = 2;
const maxSize$1j = 0;
const accessLevel$1j = READ_WRITE;
const isLoraOnly$1j = false;
const examples$1j = {
  'simple request': {
    id: id$1j,
    name: name$1j,
    headerSize: headerSize$1j,
    maxSize: maxSize$1j,
    accessLevel: accessLevel$1j,
    parameters: {},
    bytes: [0x35, 0x00]
  }
};
const fromBytes$1l = bytes => {
  if (bytes.length !== maxSize$1j) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1l = () => toBytes$23(id$1j);

var resetPowerMaxDay$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1j,
    examples: examples$1j,
    fromBytes: fromBytes$1l,
    headerSize: headerSize$1j,
    id: id$1j,
    isLoraOnly: isLoraOnly$1j,
    maxSize: maxSize$1j,
    name: name$1j,
    toBytes: toBytes$1l
});

const id$1i = resetPowerMaxMonth$2;
const name$1i = downlinkNames[resetPowerMaxMonth$2];
const headerSize$1i = 2;
const maxSize$1i = 0;
const accessLevel$1i = READ_WRITE;
const isLoraOnly$1i = false;
const examples$1i = {
  'simple request': {
    id: id$1i,
    name: name$1i,
    headerSize: headerSize$1i,
    maxSize: maxSize$1i,
    accessLevel: accessLevel$1i,
    parameters: {},
    bytes: [0x36, 0x00]
  }
};
const fromBytes$1k = bytes => {
  if (bytes.length !== maxSize$1i) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$1k = () => toBytes$23(id$1i);

var resetPowerMaxMonth$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1i,
    examples: examples$1i,
    fromBytes: fromBytes$1k,
    headerSize: headerSize$1i,
    id: id$1i,
    isLoraOnly: isLoraOnly$1i,
    maxSize: maxSize$1i,
    name: name$1i,
    toBytes: toBytes$1k
});

const id$1h = runTariffPlan$2;
const name$1h = downlinkNames[runTariffPlan$2];
const headerSize$1h = 2;
const maxSize$1h = 1;
const accessLevel$1h = READ_WRITE;
const isLoraOnly$1h = false;
const examples$1h = {
  'simple request': {
    id: id$1h,
    name: name$1h,
    headerSize: headerSize$1h,
    maxSize: maxSize$1h,
    accessLevel: accessLevel$1h,
    parameters: {
      tariffTable: 5
    },
    bytes: [0x46, 0x01, 0x05]
  }
};
const fromBytes$1j = bytes => ({
  tariffTable: bytes[0]
});
const toBytes$1j = parameters => toBytes$23(id$1h, [parameters.tariffTable]);

var runTariffPlan$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1h,
    examples: examples$1h,
    fromBytes: fromBytes$1j,
    headerSize: headerSize$1h,
    id: id$1h,
    isLoraOnly: isLoraOnly$1h,
    maxSize: maxSize$1h,
    name: name$1h,
    toBytes: toBytes$1j
});

const KEY_SIZE = 16;
const id$1g = setAccessKey$2;
const name$1g = downlinkNames[setAccessKey$2];
const headerSize$1g = 2;
const maxSize$1g = 1 + KEY_SIZE;
const accessLevel$1g = READ_ONLY;
const isLoraOnly$1g = false;
const examples$1g = {
  'set key for READ_ONLY access level': {
    id: id$1g,
    name: name$1g,
    headerSize: headerSize$1g,
    maxSize: maxSize$1g,
    accessLevel: accessLevel$1g,
    parameters: {
      accessLevel: READ_ONLY,
      key: [0, 1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1, 0]
    },
    bytes: [0x09, 0x11, 0x03, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00]
  }
};
const fromBytes$1i = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    accessLevel: buffer.getUint8(),
    key: buffer.getBytes(KEY_SIZE)
  };
};
const toBytes$1i = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1g);
  buffer.setUint8(parameters.accessLevel);
  buffer.setBytes(parameters.key);
  return toBytes$23(id$1g, buffer.data);
};

var setAccessKey$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1g,
    examples: examples$1g,
    fromBytes: fromBytes$1i,
    headerSize: headerSize$1g,
    id: id$1g,
    isLoraOnly: isLoraOnly$1g,
    maxSize: maxSize$1g,
    name: name$1g,
    toBytes: toBytes$1i
});

const id$1f = setCorrectDateTime$2;
const name$1f = downlinkNames[setCorrectDateTime$2];
const headerSize$1f = 2;
const maxSize$1f = 2;
const accessLevel$1f = READ_ONLY;
const isLoraOnly$1f = false;
const examples$1f = {
  'shift device time 5 seconds forward': {
    id: id$1f,
    name: name$1f,
    headerSize: headerSize$1f,
    maxSize: maxSize$1f,
    accessLevel: accessLevel$1f,
    parameters: {
      seconds: 5
    },
    bytes: [0x5c, 0x02, 0x00, 0x05]
  },
  'shift device time 5 seconds backward': {
    id: id$1f,
    name: name$1f,
    headerSize: headerSize$1f,
    maxSize: maxSize$1f,
    parameters: {
      seconds: -5
    },
    bytes: [0x5c, 0x02, 0xff, 0xfb]
  }
};
const fromBytes$1h = bytes => {
  if (bytes.length !== maxSize$1f) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    seconds: buffer.getInt16()
  };
};
const toBytes$1h = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1f);
  buffer.setInt16(parameters.seconds);
  return toBytes$23(id$1f, buffer.data);
};

var setCorrectDateTime$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1f,
    examples: examples$1f,
    fromBytes: fromBytes$1h,
    headerSize: headerSize$1f,
    id: id$1f,
    isLoraOnly: isLoraOnly$1f,
    maxSize: maxSize$1f,
    name: name$1f,
    toBytes: toBytes$1h
});

const id$1e = setCorrectTime$2;
const name$1e = downlinkNames[setCorrectTime$2];
const headerSize$1e = 2;
const maxSize$1e = 9;
const accessLevel$1e = READ_WRITE;
const isLoraOnly$1e = false;
const examples$1e = {
  'default parameters': {
    id: id$1e,
    name: name$1e,
    headerSize: headerSize$1e,
    maxSize: maxSize$1e,
    accessLevel: accessLevel$1e,
    parameters: {
      monthTransitionSummer: 3,
      dateTransitionSummer: 0,
      hoursTransitionSummer: 3,
      hoursCorrectSummer: 1,
      monthTransitionWinter: 10,
      dateTransitionWinter: 0,
      hoursTransitionWinter: 4,
      hoursCorrectWinter: 1,
      isCorrectionNeeded: true
    },
    bytes: [0x1c, 0x09, 0x03, 0x00, 0x03, 0x01, 0x0a, 0x00, 0x04, 0x01, 0x01]
  }
};
const fromBytes$1g = bytes => {
  if (bytes.length !== maxSize$1e) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getTimeCorrectionParameters();
};
const toBytes$1g = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1e);
  buffer.setTimeCorrectionParameters(parameters);
  return toBytes$23(id$1e, buffer.data);
};

var setCorrectTime$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1e,
    examples: examples$1e,
    fromBytes: fromBytes$1g,
    headerSize: headerSize$1e,
    id: id$1e,
    isLoraOnly: isLoraOnly$1e,
    maxSize: maxSize$1e,
    name: name$1e,
    toBytes: toBytes$1g
});

const id$1d = setDateTime$2;
const name$1d = downlinkNames[setDateTime$2];
const headerSize$1d = 2;
const maxSize$1d = 8;
const accessLevel$1d = READ_ONLY;
const isLoraOnly$1d = false;
const examples$1d = {
  'time: 2024.02.19 18:31:55': {
    id: id$1d,
    name: name$1d,
    headerSize: headerSize$1d,
    maxSize: maxSize$1d,
    accessLevel: accessLevel$1d,
    parameters: {
      isSummerTime: false,
      seconds: 55,
      minutes: 31,
      hours: 18,
      day: 2,
      date: 19,
      month: 2,
      year: 24
    },
    bytes: [0x08, 0x08, 0x00, 0x37, 0x1f, 0x12, 0x02, 0x13, 0x02, 0x18]
  }
};
const fromBytes$1f = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getDateTime();
};
const toBytes$1f = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1d);
  buffer.setDateTime(parameters);
  return toBytes$23(id$1d, buffer.data);
};

var setDateTime$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1d,
    examples: examples$1d,
    fromBytes: fromBytes$1f,
    headerSize: headerSize$1d,
    id: id$1d,
    isLoraOnly: isLoraOnly$1d,
    maxSize: maxSize$1d,
    name: name$1d,
    toBytes: toBytes$1f
});

const MAX_PERIODS_NUMBER$1 = 8;
const PERIODS_FINAL_BYTE$1 = 0xff;
const id$1c = setDayProfile$2;
const name$1c = downlinkNames[setDayProfile$2];
const headerSize$1c = 2;
const maxSize$1c = 2 + MAX_PERIODS_NUMBER$1;
const accessLevel$1c = READ_WRITE;
const isLoraOnly$1c = false;
const examples$1c = {
  'set day profile with 1 period': {
    id: id$1c,
    name: name$1c,
    headerSize: headerSize$1c,
    maxSize: maxSize$1c,
    accessLevel: accessLevel$1c,
    parameters: {
      tariffTable: 0,
      index: 3,
      periods: [{
        tariff: 0,
        isFirstHalfHour: true,
        hour: 2
      }]
    },
    bytes: [0x10, 0x04, 0x00, 0x03, 0x10, 0xff]
  },
  'set day profile with 4 periods': {
    id: id$1c,
    name: name$1c,
    headerSize: headerSize$1c,
    maxSize: maxSize$1c,
    accessLevel: accessLevel$1c,
    parameters: {
      tariffTable: 0,
      index: 5,
      periods: [{
        tariff: 0,
        isFirstHalfHour: true,
        hour: 2
      }, {
        tariff: 1,
        isFirstHalfHour: false,
        hour: 3
      }, {
        tariff: 2,
        isFirstHalfHour: true,
        hour: 4
      }, {
        tariff: 3,
        isFirstHalfHour: false,
        hour: 5
      }]
    },
    bytes: [0x10, 0x07, 0x00, 0x05, 0x10, 0x1d, 0x22, 0x2f, 0xff]
  },
  'set day profile with max periods': {
    id: id$1c,
    name: name$1c,
    headerSize: headerSize$1c,
    maxSize: maxSize$1c,
    accessLevel: accessLevel$1c,
    parameters: {
      tariffTable: 0,
      index: 3,
      periods: [{
        tariff: 0,
        isFirstHalfHour: true,
        hour: 2
      }, {
        tariff: 1,
        isFirstHalfHour: false,
        hour: 3
      }, {
        tariff: 2,
        isFirstHalfHour: true,
        hour: 4
      }, {
        tariff: 3,
        isFirstHalfHour: false,
        hour: 5
      }, {
        tariff: 0,
        isFirstHalfHour: true,
        hour: 6
      }, {
        tariff: 1,
        isFirstHalfHour: false,
        hour: 7
      }, {
        tariff: 2,
        isFirstHalfHour: false,
        hour: 8
      }, {
        tariff: 3,
        isFirstHalfHour: true,
        hour: 9
      }]
    },
    bytes: [0x10, 0x0a, 0x00, 0x03, 0x10, 0x1d, 0x22, 0x2f, 0x30, 0x3d, 0x46, 0x4b]
  }
};
const fromBytes$1e = bytes => {
  const finalByteIndex = bytes.indexOf(PERIODS_FINAL_BYTE$1);
  const cleanBytes = finalByteIndex === -1 ? bytes : bytes.slice(0, finalByteIndex);
  const buffer = new CommandBinaryBuffer$1(cleanBytes);
  return {
    tariffTable: buffer.getUint8(),
    index: buffer.getUint8(),
    periods: [...cleanBytes.slice(buffer.offset)].map(CommandBinaryBuffer$1.getDayProfileFromByte)
  };
};
const toBytes$1e = parameters => {
  const hasPeriodsFinalByte = parameters.periods.length < MAX_PERIODS_NUMBER$1;
  const size = 2 + parameters.periods.length + +hasPeriodsFinalByte;
  const buffer = new CommandBinaryBuffer$1(size);
  buffer.setUint8(parameters.tariffTable);
  buffer.setUint8(parameters.index);
  parameters.periods.forEach(period => {
    buffer.setDayProfile(period);
  });
  if (hasPeriodsFinalByte) {
    buffer.setUint8(PERIODS_FINAL_BYTE$1);
  }
  return toBytes$23(id$1c, buffer.data);
};

var setDayProfile$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1c,
    examples: examples$1c,
    fromBytes: fromBytes$1e,
    headerSize: headerSize$1c,
    id: id$1c,
    isLoraOnly: isLoraOnly$1c,
    maxSize: maxSize$1c,
    name: name$1c,
    toBytes: toBytes$1e
});

const id$1b = setDisplayParam$2;
const name$1b = downlinkNames[setDisplayParam$2];
const headerSize$1b = 2;
const maxSize$1b = 33;
const accessLevel$1b = READ_WRITE;
const isLoraOnly$1b = false;
const examples$1b = {
  'set params with order': {
    id: id$1b,
    name: name$1b,
    headerSize: headerSize$1b,
    maxSize: maxSize$1b,
    accessLevel: accessLevel$1b,
    parameters: {
      displayMode: 0,
      order: [4, 5, 6, 7]
    },
    bytes: [0x5d, 0x05, 0x00, 0x04, 0x05, 0x06, 0x07]
  },
  'set params without order': {
    id: id$1b,
    name: name$1b,
    headerSize: headerSize$1b,
    maxSize: maxSize$1b,
    accessLevel: accessLevel$1b,
    parameters: {
      displayMode: 1,
      order: []
    },
    bytes: [0x5d, 0x01, 0x01]
  }
};
const fromBytes$1d = bytes => {
  if (bytes.length < 1 || bytes.length > maxSize$1b) {
    throw new Error('Invalid SetDisplayParam data size.');
  }
  const [displayMode, ...order] = bytes;
  return {
    displayMode,
    order
  };
};
const toBytes$1d = parameters => toBytes$23(id$1b, [parameters.displayMode, ...parameters.order]);

var setDisplayParam$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1b,
    examples: examples$1b,
    fromBytes: fromBytes$1d,
    headerSize: headerSize$1b,
    id: id$1b,
    isLoraOnly: isLoraOnly$1b,
    maxSize: maxSize$1b,
    name: name$1b,
    toBytes: toBytes$1d
});

const id$1a = setOperatorParametersExtended3$2;
const name$1a = downlinkNames[setOperatorParametersExtended3$2];
const headerSize$1a = 2;
const maxSize$1a = 17;
const accessLevel$1a = READ_WRITE;
const isLoraOnly$1a = false;
const examples$1a = {
  'simple request': {
    id: id$1a,
    name: name$1a,
    headerSize: headerSize$1a,
    maxSize: maxSize$1a,
    accessLevel: accessLevel$1a,
    parameters: {
      pmaxMinusThreshold0: 100,
      pmaxMinusThreshold1: 200,
      pmaxMinusThreshold2: 300,
      pmaxMinusThreshold3: 400,
      relaySet: {
        RELAY_OFF_LIMIT_P_MINUS_T1: true,
        RELAY_OFF_LIMIT_P_MINUS_T2: false,
        RELAY_OFF_LIMIT_P_MINUS_T3: true,
        RELAY_OFF_LIMIT_P_MINUS_T4: false
      }
    },
    bytes: [0x72, 0x11, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x00, 0x01, 0x90, 0x14]
  }
};
const fromBytes$1c = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getOperatorParametersExtended3();
};
const toBytes$1c = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1a);
  buffer.setOperatorParametersExtended3(parameters);
  return toBytes$23(id$1a, buffer.data);
};

var setOperatorParametersExtended3$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1a,
    examples: examples$1a,
    fromBytes: fromBytes$1c,
    headerSize: headerSize$1a,
    id: id$1a,
    isLoraOnly: isLoraOnly$1a,
    maxSize: maxSize$1a,
    name: name$1a,
    toBytes: toBytes$1c
});

const id$19 = setOperatorParameters$2;
const name$19 = downlinkNames[setOperatorParameters$2];
const headerSize$19 = 2;
const maxSize$19 = OPERATOR_PARAMETERS_SIZE;
const accessLevel$19 = READ_WRITE;
const isLoraOnly$19 = false;
const examples$19 = {
  'set default operator parameters request': {
    id: id$19,
    name: name$19,
    headerSize: headerSize$19,
    maxSize: maxSize$19,
    accessLevel: accessLevel$19,
    parameters: {
      vpThreshold: 265000,
      vThreshold: 156000,
      ipThreshold: 120000,
      pmaxThreshold0: 31800,
      pmaxThreshold1: 31800,
      pmaxThreshold2: 31800,
      pmaxThreshold3: 31800,
      speedOptoPort: 0,
      tint: 30,
      calcPeriodDate: 1,
      timeoutDisplay: 127,
      timeoutScreen: 7,
      displaySet: {
        SET_ALL_SEGMENT_DISPLAY: false,
        SOFTWARE_VERSION: false,
        TOTAL_ACTIVE_ENERGY: true,
        ACTIVE_ENERGY_T1: false,
        ACTIVE_ENERGY_T2: false,
        ACTIVE_ENERGY_T3: false,
        ACTIVE_ENERGY_T4: false,
        ACTIVE_POWER_PER_PHASE: true,
        ACTIVE_POWER_IN_NEUTRAL: true,
        CURRENT_IN_PHASE: false,
        CURRENT_IN_NEUTRAL: false,
        VOLTAGE: false,
        HOUR_MINUTE_SECOND: true,
        DATE_MONTH_YEAR: true,
        TOTAL_EXPORTED_ACTIVE_ENERGY: false,
        EXPORTED_ACTIVE_ENERGY_T1: false,
        EXPORTED_ACTIVE_ENERGY_T2: false,
        EXPORTED_ACTIVE_ENERGY_T3: false,
        EXPORTED_ACTIVE_ENERGY_T4: false,
        POWER_COEFFICIENT_PHASE_A: false,
        POWER_COEFFICIENT_PHASE_B: false,
        BATTERY_VOLTAGE: false,
        POWER_THRESHOLD_T1: false,
        POWER_THRESHOLD_T2: false,
        POWER_THRESHOLD_T3: false,
        POWER_THRESHOLD_T4: false,
        CURRENT_BALANCE: false,
        AUTO_SCREEN_SCROLLING: true
      },
      relaySet4: {
        RELAY_ON_TIMEOUT: false,
        RELAY_ON_SALDO: false,
        RELAY_OFF_SALDO: false,
        RELAY_OFF_SALDO_SOFT: false,
        RELAY_OFF_MAGNET: false,
        RELAY_ON_MAGNET_TIMEOUT: false,
        RELAY_ON_MAGNET_AUTO: false
      },
      relaySet3: {
        RELAY_OFF_LIM_TARIFF_0: false,
        RELAY_OFF_LIM_TARIFF_1: false,
        RELAY_OFF_LIM_TARIFF_2: false,
        RELAY_OFF_LIM_TARIFF_3: false,
        RELAY_OFF_PF_MIN: false
      },
      relaySet2: {
        RELAY_OFF_Y: true,
        RELAY_OFF_CENTER: true,
        RELAY_OFF_TARIFF_0: false,
        RELAY_OFF_TARIFF_1: false,
        RELAY_OFF_TARIFF_2: false,
        RELAY_OFF_TARIFF_3: false,
        RELAY_OFF_I_LIMIT: false,
        RELAY_OFF_V_BAD: false
      },
      relaySet1: {
        RELAY_ON_Y: true,
        RELAY_ON_CENTER: true,
        RELAY_ON_PB: false,
        RELAY_ON_TARIFF_0: false,
        RELAY_ON_TARIFF_1: false,
        RELAY_ON_TARIFF_2: false,
        RELAY_ON_TARIFF_3: false,
        RELAY_ON_V_GOOD: false
      },
      displayType: 0,
      ten: 0,
      timeoutRefresh: 240,
      deltaCorMin: 15,
      timeoutMagnetOff: 5,
      timeoutMagnetOn: 5,
      define1: {
        BLOCK_KEY_OPTOPORT: false,
        MAGNET_SCREEN_CONST: false
      },
      timeoutRelayOn: 1,
      timeoutRelayKey: 0,
      timeoutRelayAuto: 5,
      timeoutBadVAVB: 5,
      freqMax: 55,
      freqMin: 45,
      phMin: 0,
      year: 0,
      month: 0,
      date: 0,
      energyDecimalPoint: 2,
      typeMeter: 0,
      timeoutIMax: 5,
      timeoutPMax: 5,
      timeoutCos: 5,
      pMaxDef: 1,
      displaySetExt: {
        SET_ALL_SEGMENT_DISPLAY: true,
        SOFTWARE_VERSION: true,
        TOTAL_ACTIVE_ENERGY: true,
        ACTIVE_ENERGY_T1: true,
        ACTIVE_ENERGY_T2: true,
        ACTIVE_ENERGY_T3: true,
        ACTIVE_ENERGY_T4: true,
        ACTIVE_POWER_PER_PHASE: true,
        ACTIVE_POWER_IN_NEUTRAL: true,
        CURRENT_IN_PHASE: true,
        CURRENT_IN_NEUTRAL: true,
        VOLTAGE: true,
        HOUR_MINUTE_SECOND: true,
        DATE_MONTH_YEAR: true,
        TOTAL_EXPORTED_ACTIVE_ENERGY: false,
        EXPORTED_ACTIVE_ENERGY_T1: false,
        EXPORTED_ACTIVE_ENERGY_T2: false,
        EXPORTED_ACTIVE_ENERGY_T3: false,
        EXPORTED_ACTIVE_ENERGY_T4: false,
        POWER_COEFFICIENT_PHASE_A: true,
        POWER_COEFFICIENT_PHASE_B: true,
        BATTERY_VOLTAGE: true,
        POWER_THRESHOLD_T1: false,
        POWER_THRESHOLD_T2: false,
        POWER_THRESHOLD_T3: false,
        POWER_THRESHOLD_T4: false,
        CURRENT_BALANCE: false,
        MAGNET_INDUCTION: true,
        OPTOPORT_SPEED: false,
        SORT_DISPLAY_SCREENS: false
      },
      timeoutUneqCurrent: 5,
      timeoutBipolarPower: 5,
      relaySet5: {
        RELAY_OFF_UNEQUAL_CURRENT: false,
        RELAY_ON_UNEQUAL_CURRENT: false,
        RELAY_OFF_BIPOLAR_POWER: false,
        RELAY_ON_BIPOLAR_POWER: false
      },
      timeCorrectPeriod: 24,
      timeCorrectPassHalfhour: false
    },
    bytes: [0x1f, 0x4a, 0x00, 0x04, 0x0b, 0x28, 0x00, 0x02, 0x61, 0x60, 0x00, 0x01, 0xd4, 0xc0, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x1e, 0x01, 0x7f, 0x07, 0x80, 0x00, 0x31, 0x84, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x05, 0x05, 0x00, 0x01, 0x00, 0x05, 0x05, 0x37, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x05, 0x05, 0x01, 0x08, 0x38, 0x3f, 0xff, 0x05, 0x05, 0x00, 0x18]
  }
};
const fromBytes$1b = bytes => {
  if (bytes.length !== maxSize$19) {
    throw new Error('Invalid SetOpParams data size.');
  }
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getOperatorParameters();
};
const toBytes$1b = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$19);
  buffer.setOperatorParameters(parameters);
  return toBytes$23(id$19, buffer.data);
};

var setOperatorParameters$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$19,
    examples: examples$19,
    fromBytes: fromBytes$1b,
    headerSize: headerSize$19,
    id: id$19,
    isLoraOnly: isLoraOnly$19,
    maxSize: maxSize$19,
    name: name$19,
    toBytes: toBytes$1b
});

const id$18 = setSaldo$2;
const name$18 = downlinkNames[setSaldo$2];
const headerSize$18 = 2;
const maxSize$18 = 12;
const accessLevel$18 = READ_WRITE;
const isLoraOnly$18 = false;
const examples$18 = {
  'test request': {
    id: id$18,
    name: name$18,
    headerSize: headerSize$18,
    maxSize: maxSize$18,
    accessLevel: accessLevel$18,
    parameters: {
      date: {
        month: 9,
        date: 23,
        hours: 6,
        minutes: 35
      },
      saldoNew: 2,
      saldoOld: 5
    },
    bytes: [0x2a, 0x0c, 0x09, 0x17, 0x06, 0x23, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05]
  }
};
const fromBytes$1a = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    date: {
      month: buffer.getUint8(),
      date: buffer.getUint8(),
      hours: buffer.getUint8(),
      minutes: buffer.getUint8()
    },
    saldoNew: buffer.getInt32(),
    saldoOld: buffer.getInt32()
  };
};
const toBytes$1a = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$18);
  buffer.setUint8(parameters.date.month);
  buffer.setUint8(parameters.date.date);
  buffer.setUint8(parameters.date.hours);
  buffer.setUint8(parameters.date.minutes);
  buffer.setInt32(parameters.saldoNew);
  buffer.setInt32(parameters.saldoOld);
  return toBytes$23(id$18, buffer.data);
};

var setSaldo$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$18,
    examples: examples$18,
    fromBytes: fromBytes$1a,
    headerSize: headerSize$18,
    id: id$18,
    isLoraOnly: isLoraOnly$18,
    maxSize: maxSize$18,
    name: name$18,
    toBytes: toBytes$1a
});

const id$17 = setSaldoParameters$2;
const name$17 = downlinkNames[setSaldoParameters$2];
const headerSize$17 = 2;
const maxSize$17 = 37;
const accessLevel$17 = READ_WRITE;
const isLoraOnly$17 = false;
const examples$17 = {
  'test parameters': {
    id: id$17,
    name: name$17,
    headerSize: headerSize$17,
    maxSize: maxSize$17,
    accessLevel: accessLevel$17,
    parameters: {
      coefficients: [2, 3, 4, 5],
      decimalPointTariff: 6,
      indicationThreshold: 7,
      relayThreshold: 8,
      mode: 9,
      saldoOffTimeBegin: 10,
      saldoOffTimeEnd: 11,
      decimalPointIndication: 12,
      powerThreshold: 13,
      creditThreshold: 14
    },
    bytes: [0x2f, 0x25, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e]
  }
};
const fromBytes$19 = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getSaldoParameters();
};
const toBytes$19 = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$17);
  buffer.setSaldoParameters(parameters);
  return toBytes$23(id$17, buffer.data);
};

var setSaldoParameters$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$17,
    examples: examples$17,
    fromBytes: fromBytes$19,
    headerSize: headerSize$17,
    id: id$17,
    isLoraOnly: isLoraOnly$17,
    maxSize: maxSize$17,
    name: name$17,
    toBytes: toBytes$19
});

const id$16 = setSeasonProfile$2;
const name$16 = downlinkNames[setSeasonProfile$2];
const headerSize$16 = 2;
const maxSize$16 = SEASON_PROFILE_SIZE;
const accessLevel$16 = READ_WRITE;
const isLoraOnly$16 = false;
const examples$16 = {
  'set default season profile': {
    id: id$16,
    name: name$16,
    headerSize: headerSize$16,
    maxSize: maxSize$16,
    accessLevel: accessLevel$16,
    parameters: {
      tariffTable: 1,
      index: 8,
      month: 1,
      date: 1,
      dayIndexes: [0, 0, 0, 0, 0, 0, 0]
    },
    bytes: [0x11, 0x0b, 0x01, 0x08, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
  },
  'set some season profile': {
    id: id$16,
    name: name$16,
    headerSize: headerSize$16,
    maxSize: maxSize$16,
    accessLevel: accessLevel$16,
    parameters: {
      tariffTable: 0,
      index: 2,
      month: 5,
      date: 9,
      dayIndexes: [0, 1, 2, 3, 4, 5, 6]
    },
    bytes: [0x11, 0x0b, 0x00, 0x02, 0x05, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06]
  }
};
const fromBytes$18 = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    tariffTable: buffer.getUint8(),
    index: buffer.getUint8(),
    ...buffer.getSeasonProfile()
  };
};
const toBytes$18 = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$16);
  buffer.setUint8(parameters.tariffTable);
  buffer.setUint8(parameters.index);
  buffer.setSeasonProfile(parameters);
  return toBytes$23(id$16, buffer.data);
};

var setSeasonProfile$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$16,
    examples: examples$16,
    fromBytes: fromBytes$18,
    headerSize: headerSize$16,
    id: id$16,
    isLoraOnly: isLoraOnly$16,
    maxSize: maxSize$16,
    name: name$16,
    toBytes: toBytes$18
});

const id$15 = setSpecialDay$2;
const name$15 = downlinkNames[setSpecialDay$2];
const headerSize$15 = 2;
const maxSize$15 = 6;
const accessLevel$15 = READ_WRITE;
const isLoraOnly$15 = false;
const examples$15 = {
  'set special day': {
    id: id$15,
    name: name$15,
    headerSize: headerSize$15,
    maxSize: maxSize$15,
    accessLevel: accessLevel$15,
    parameters: {
      tariffTable: 1,
      index: 5,
      month: 1,
      date: 9,
      dayIndex: 3,
      isPeriodic: true
    },
    bytes: [0x12, 0x06, 0x01, 0x05, 0x01, 0x09, 0x03, 0x00]
  }
};
const fromBytes$17 = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    tariffTable: buffer.getUint8(),
    index: buffer.getUint8(),
    ...buffer.getSpecialDay()
  };
};
const toBytes$17 = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$15);
  buffer.setUint8(parameters.tariffTable);
  buffer.setUint8(parameters.index);
  buffer.setSpecialDay(parameters);
  return toBytes$23(id$15, buffer.data);
};

var setSpecialDay$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$15,
    examples: examples$15,
    fromBytes: fromBytes$17,
    headerSize: headerSize$15,
    id: id$15,
    isLoraOnly: isLoraOnly$15,
    maxSize: maxSize$15,
    name: name$15,
    toBytes: toBytes$17
});

const RESET_INFLUENCE_SCREENS = 0x55;

const id$14 = setSpecialOperation$2;
const name$14 = downlinkNames[setSpecialOperation$2];
const headerSize$14 = 2;
const maxSize$14 = 2;
const accessLevel$14 = READ_WRITE;
const isLoraOnly$14 = false;
const examples$14 = {
  'read screens info': {
    id: id$14,
    name: name$14,
    headerSize: headerSize$14,
    maxSize: maxSize$14,
    accessLevel: accessLevel$14,
    parameters: {
      type: RESET_INFLUENCE_SCREENS,
      readScreensInfo: true,
      resetElectroMagneticIndication: false,
      resetMagneticIndication: false
    },
    bytes: [0x64, 0x02, 0x55, 0x80]
  },
  'reset both screens': {
    id: id$14,
    name: name$14,
    headerSize: headerSize$14,
    maxSize: maxSize$14,
    accessLevel: accessLevel$14,
    parameters: {
      type: RESET_INFLUENCE_SCREENS,
      readScreensInfo: false,
      resetElectroMagneticIndication: true,
      resetMagneticIndication: true
    },
    bytes: [0x64, 0x02, 0x55, 0x03]
  },
  'reset magnetic screen': {
    id: id$14,
    name: name$14,
    headerSize: headerSize$14,
    maxSize: maxSize$14,
    accessLevel: accessLevel$14,
    parameters: {
      type: RESET_INFLUENCE_SCREENS,
      readScreensInfo: false,
      resetElectroMagneticIndication: false,
      resetMagneticIndication: true
    },
    bytes: [0x64, 0x02, 0x55, 0x02]
  }
};
const fromBytes$16 = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  const type = buffer.getUint8();
  const flags = buffer.getUint8();
  const readScreensInfo = !!(flags & 0x80);
  const resetElectroMagneticIndication = !!(flags & 1);
  const resetMagneticIndication = !!(flags & 2);
  return {
    type,
    readScreensInfo,
    resetElectroMagneticIndication,
    resetMagneticIndication
  };
};
const toBytes$16 = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$14);
  let flags = 0;
  if (parameters.readScreensInfo) {
    flags |= 0x80;
  }
  if (parameters.resetElectroMagneticIndication) {
    flags |= 1;
  }
  if (parameters.resetMagneticIndication) {
    flags |= 2;
  }
  buffer.setUint8(parameters.type);
  buffer.setUint8(flags);
  return toBytes$23(id$14, buffer.data);
};

var setSpecialOperation$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$14,
    examples: examples$14,
    fromBytes: fromBytes$16,
    headerSize: headerSize$14,
    id: id$14,
    isLoraOnly: isLoraOnly$14,
    maxSize: maxSize$14,
    name: name$14,
    toBytes: toBytes$16
});

const id$13 = turnRelayOff$2;
const name$13 = downlinkNames[turnRelayOff$2];
const headerSize$13 = 2;
const maxSize$13 = 0;
const accessLevel$13 = READ_WRITE;
const isLoraOnly$13 = false;
const examples$13 = {
  'simple request': {
    id: id$13,
    name: name$13,
    headerSize: headerSize$13,
    maxSize: maxSize$13,
    accessLevel: accessLevel$13,
    parameters: {},
    bytes: [0x19, 0x00]
  }
};
const fromBytes$15 = bytes => {
  if (bytes.length !== maxSize$13) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$15 = () => toBytes$23(id$13);

var turnRelayOff$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$13,
    examples: examples$13,
    fromBytes: fromBytes$15,
    headerSize: headerSize$13,
    id: id$13,
    isLoraOnly: isLoraOnly$13,
    maxSize: maxSize$13,
    name: name$13,
    toBytes: toBytes$15
});

const id$12 = turnRelayOn$2;
const name$12 = downlinkNames[turnRelayOn$2];
const headerSize$12 = 2;
const maxSize$12 = 0;
const accessLevel$12 = READ_WRITE;
const isLoraOnly$12 = false;
const examples$12 = {
  'simple request': {
    id: id$12,
    name: name$12,
    headerSize: headerSize$12,
    maxSize: maxSize$12,
    accessLevel: accessLevel$12,
    parameters: {},
    bytes: [0x18, 0x00]
  }
};
const fromBytes$14 = bytes => {
  if (bytes.length !== maxSize$12) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$14 = () => toBytes$23(id$12);

var turnRelayOn$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$12,
    examples: examples$12,
    fromBytes: fromBytes$14,
    headerSize: headerSize$12,
    id: id$12,
    isLoraOnly: isLoraOnly$12,
    maxSize: maxSize$12,
    name: name$12,
    toBytes: toBytes$14
});

var downlink$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan$1,
    getBuildVersion: getBuildVersion$1,
    getCorrectTime: getCorrectTime$1,
    getCriticalEvent: getCriticalEvent$1,
    getCurrentStatusMeter: getCurrentStatusMeter$1,
    getCurrentValues: getCurrentValues$1,
    getDateTime: getDateTime$1,
    getDayDemand: getDayDemand$1,
    getDayDemandExport: getDayDemandExport$1,
    getDayMaxDemand: getDayMaxDemand$1,
    getDayMaxDemandExport: getDayMaxDemandExport$1,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious$1,
    getDayProfile: getDayProfile$1,
    getDemand: getDemand$1,
    getDeviceId: getDeviceId$1,
    getDeviceType: getDeviceType$1,
    getDisplayParam: getDisplayParam$1,
    getEnergy: getEnergy$1,
    getEnergyDayPrevious: getEnergyDayPrevious$1,
    getEnergyExport: getEnergyExport$1,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious$1,
    getEventStatus: getEventStatus$1,
    getEvents: getEvents$1,
    getEventsCounters: getEventsCounters$1,
    getExtendedCurrentValues: getExtendedCurrentValues$1,
    getExtendedCurrentValues2: getExtendedCurrentValues2$1,
    getHalfHourDemand: getHalfHourDemand$1,
    getHalfHourDemandExport: getHalfHourDemandExport$1,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious$1,
    getHalfhoursEnergies: getHalfhoursEnergies$1,
    getMagneticFieldThreshold: getMagneticFieldThreshold$1,
    getMeterInfo: getMeterInfo$1,
    getMonthDemand: getMonthDemand$1,
    getMonthDemandExport: getMonthDemandExport$1,
    getMonthMaxDemand: getMonthMaxDemand$1,
    getMonthMaxDemandExport: getMonthMaxDemandExport$1,
    getOperatorParameters: getOperatorParameters$1,
    getOperatorParametersExtended3: getOperatorParametersExtended3$1,
    getRatePlanInfo: getRatePlanInfo$1,
    getSaldo: getSaldo$1,
    getSaldoParameters: getSaldoParameters$1,
    getSeasonProfile: getSeasonProfile$1,
    getSpecialDay: getSpecialDay$1,
    getVersion: getVersion$1,
    prepareRatePlan: prepareRatePlan$1,
    resetPowerMaxDay: resetPowerMaxDay$1,
    resetPowerMaxMonth: resetPowerMaxMonth$1,
    runTariffPlan: runTariffPlan$1,
    setAccessKey: setAccessKey$1,
    setCorrectDateTime: setCorrectDateTime$1,
    setCorrectTime: setCorrectTime$1,
    setDateTime: setDateTime$1,
    setDayProfile: setDayProfile$1,
    setDisplayParam: setDisplayParam$1,
    setOperatorParameters: setOperatorParameters$1,
    setOperatorParametersExtended3: setOperatorParametersExtended3$1,
    setSaldo: setSaldo$1,
    setSaldoParameters: setSaldoParameters$1,
    setSeasonProfile: setSeasonProfile$1,
    setSpecialDay: setSpecialDay$1,
    setSpecialOperation: setSpecialOperation$1,
    turnRelayOff: turnRelayOff$1,
    turnRelayOn: turnRelayOn$1
});

const getDayEnergies$1 = 0x78;
const getDayMaxPower$1 = 0x79;
const errorResponse$1 = 0xfe;

var uplinkIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan$2,
    errorResponse: errorResponse$1,
    getBuildVersion: getBuildVersion$2,
    getCorrectTime: getCorrectTime$2,
    getCriticalEvent: getCriticalEvent$2,
    getCurrentStatusMeter: getCurrentStatusMeter$2,
    getCurrentValues: getCurrentValues$2,
    getDateTime: getDateTime$2,
    getDayDemand: getDayDemand$2,
    getDayDemandExport: getDayDemandExport$2,
    getDayEnergies: getDayEnergies$1,
    getDayMaxDemand: getDayMaxDemand$2,
    getDayMaxDemandExport: getDayMaxDemandExport$2,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious$2,
    getDayMaxPower: getDayMaxPower$1,
    getDayProfile: getDayProfile$2,
    getDemand: getDemand$2,
    getDeviceId: getDeviceId$2,
    getDeviceType: getDeviceType$2,
    getDisplayParam: getDisplayParam$2,
    getEnergy: getEnergy$2,
    getEnergyDayPrevious: getEnergyDayPrevious$2,
    getEnergyExport: getEnergyExport$2,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious$2,
    getEventStatus: getEventStatus$2,
    getEvents: getEvents$2,
    getEventsCounters: getEventsCounters$2,
    getExtendedCurrentValues: getExtendedCurrentValues$2,
    getExtendedCurrentValues2: getExtendedCurrentValues2$2,
    getHalfHourDemand: getHalfHourDemand$2,
    getHalfHourDemandExport: getHalfHourDemandExport$2,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious$2,
    getHalfhoursEnergies: getHalfhoursEnergies$2,
    getMagneticFieldThreshold: getMagneticFieldThreshold$2,
    getMeterInfo: getMeterInfo$2,
    getMonthDemand: getMonthDemand$2,
    getMonthDemandExport: getMonthDemandExport$2,
    getMonthMaxDemand: getMonthMaxDemand$2,
    getMonthMaxDemandExport: getMonthMaxDemandExport$2,
    getOperatorParameters: getOperatorParameters$2,
    getOperatorParametersExtended3: getOperatorParametersExtended3$2,
    getRatePlanInfo: getRatePlanInfo$2,
    getSaldo: getSaldo$2,
    getSaldoParameters: getSaldoParameters$2,
    getSeasonProfile: getSeasonProfile$2,
    getSpecialDay: getSpecialDay$2,
    getVersion: getVersion$2,
    prepareRatePlan: prepareRatePlan$2,
    resetPowerMaxDay: resetPowerMaxDay$2,
    resetPowerMaxMonth: resetPowerMaxMonth$2,
    runTariffPlan: runTariffPlan$2,
    setAccessKey: setAccessKey$2,
    setCorrectDateTime: setCorrectDateTime$2,
    setCorrectTime: setCorrectTime$2,
    setDateTime: setDateTime$2,
    setDayProfile: setDayProfile$2,
    setDisplayParam: setDisplayParam$2,
    setOperatorParameters: setOperatorParameters$2,
    setOperatorParametersExtended3: setOperatorParametersExtended3$2,
    setSaldo: setSaldo$2,
    setSaldoParameters: setSaldoParameters$2,
    setSeasonProfile: setSeasonProfile$2,
    setSpecialDay: setSpecialDay$2,
    setSpecialOperation: setSpecialOperation$2,
    turnRelayOff: turnRelayOff$2,
    turnRelayOn: turnRelayOn$2
});

var uplinkNames = invertObject(uplinkIds);

const id$11 = activateRatePlan$2;
const name$11 = uplinkNames[activateRatePlan$2];
const headerSize$11 = 2;
const maxSize$11 = 0;
const accessLevel$11 = READ_WRITE;
const isLoraOnly$11 = false;
const examples$11 = {
  'simple response': {
    id: id$11,
    name: name$11,
    headerSize: headerSize$11,
    maxSize: maxSize$11,
    accessLevel: accessLevel$11,
    parameters: {},
    bytes: [0x13, 0x00]
  }
};
const fromBytes$13 = bytes => {
  if (bytes.length !== maxSize$11) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$13 = () => toBytes$23(id$11);

var activateRatePlan = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$11,
    examples: examples$11,
    fromBytes: fromBytes$13,
    headerSize: headerSize$11,
    id: id$11,
    isLoraOnly: isLoraOnly$11,
    maxSize: maxSize$11,
    name: name$11,
    toBytes: toBytes$13
});

const OK = 0;
const UNKNOWN_COMMAND = 0x80;
const NOT_ALIGNED_DATA = 0x81;
const DECRYPTION_FAILURE = 0x82;
const UNKNOWN_PROTOCOL = 0x83;
const BAD_MESSAGE = 0x84;
const BAD_DATA_LENGTH = 0x85;
const BAD_ARRAY_INDEX = 0x86;
const NOT_PREPARED_RATE_PLAN = 0x87;
const BAD_RATE_PLAN_ID = 0x88;
const BAD_RATE_PLAN_SIZE = 0x89;
const BAD_RESPONSE_LENGTH = 0x90;
const NO_DATA_FOR_DATE = 0x91;
const CALIBRATION_DISABLED = 0x92;
const ACCESS_DENIED = 0x93;
const BAD_SALDO_WRITE = 0x95;
const BLOCKED_METER = 0x97;
const UNENCRYPTED_COMMAND_DISABLED = 0x98;
const TIME_CORRECTION_FAILURE = 0x99;
const INVALID_CORRECTION_INTERVAL = 0x9a;
const TIME_CORRECTION_OUT_HALF_HOUR_DISABLED = 0x9b;
const BAD_BLOCK_NUMBER = 0x9c;
const OUT_OFF_RANGE = 0x9f;
const SET_METER_TYPE_FAILURE = 0xa0;
const INTERNAL = 0xf0;

var resultCodes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_DENIED: ACCESS_DENIED,
    BAD_ARRAY_INDEX: BAD_ARRAY_INDEX,
    BAD_BLOCK_NUMBER: BAD_BLOCK_NUMBER,
    BAD_DATA_LENGTH: BAD_DATA_LENGTH,
    BAD_MESSAGE: BAD_MESSAGE,
    BAD_RATE_PLAN_ID: BAD_RATE_PLAN_ID,
    BAD_RATE_PLAN_SIZE: BAD_RATE_PLAN_SIZE,
    BAD_RESPONSE_LENGTH: BAD_RESPONSE_LENGTH,
    BAD_SALDO_WRITE: BAD_SALDO_WRITE,
    BLOCKED_METER: BLOCKED_METER,
    CALIBRATION_DISABLED: CALIBRATION_DISABLED,
    DECRYPTION_FAILURE: DECRYPTION_FAILURE,
    INTERNAL: INTERNAL,
    INVALID_CORRECTION_INTERVAL: INVALID_CORRECTION_INTERVAL,
    NOT_ALIGNED_DATA: NOT_ALIGNED_DATA,
    NOT_PREPARED_RATE_PLAN: NOT_PREPARED_RATE_PLAN,
    NO_DATA_FOR_DATE: NO_DATA_FOR_DATE,
    OK: OK,
    OUT_OFF_RANGE: OUT_OFF_RANGE,
    SET_METER_TYPE_FAILURE: SET_METER_TYPE_FAILURE,
    TIME_CORRECTION_FAILURE: TIME_CORRECTION_FAILURE,
    TIME_CORRECTION_OUT_HALF_HOUR_DISABLED: TIME_CORRECTION_OUT_HALF_HOUR_DISABLED,
    UNENCRYPTED_COMMAND_DISABLED: UNENCRYPTED_COMMAND_DISABLED,
    UNKNOWN_COMMAND: UNKNOWN_COMMAND,
    UNKNOWN_PROTOCOL: UNKNOWN_PROTOCOL
});

var resultNames = invertObject(resultCodes);

const id$10 = errorResponse$1;
const name$10 = uplinkNames[errorResponse$1];
const headerSize$10 = 2;
const accessLevel$10 = READ_ONLY;
const maxSize$10 = 2;
const isLoraOnly$10 = false;
const examples$10 = {
  'ACCESS_DENIED on TurnRelayOn command': {
    id: id$10,
    name: name$10,
    headerSize: headerSize$10,
    maxSize: maxSize$10,
    accessLevel: accessLevel$10,
    parameters: {
      commandId: 0x18,
      commandName: 'turnRelayOn',
      errorCode: ACCESS_DENIED,
      errorName: 'ACCESS_DENIED'
    },
    bytes: [0xfe, 0x02, 0x18, 0x93]
  }
};
const getFromBytes$2 = commandNamesParameter => bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  const errorCommandId = buffer.getUint8();
  const errorCode = buffer.getUint8();
  return {
    commandId: errorCommandId,
    commandName: commandNamesParameter[errorCommandId],
    errorCode,
    errorName: resultNames[errorCode]
  };
};
const fromBytes$12 = getFromBytes$2(uplinkNames);
const toBytes$12 = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$10);
  buffer.setUint8(parameters.commandId);
  buffer.setUint8(parameters.errorCode);
  return toBytes$23(id$10, buffer.data);
};

var errorResponse = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$10,
    examples: examples$10,
    fromBytes: fromBytes$12,
    getFromBytes: getFromBytes$2,
    headerSize: headerSize$10,
    id: id$10,
    isLoraOnly: isLoraOnly$10,
    maxSize: maxSize$10,
    name: name$10,
    toBytes: toBytes$12
});

const id$ = getBuildVersion$2;
const name$ = uplinkNames[getBuildVersion$2];
const headerSize$ = 2;
const maxSize$ = 6;
const accessLevel$ = READ_ONLY;
const isLoraOnly$ = false;
const examples$ = {
  '2021.09.16/0.0.9': {
    id: id$,
    name: name$,
    headerSize: headerSize$,
    maxSize: maxSize$,
    accessLevel: accessLevel$,
    parameters: {
      date: {
        date: 16,
        month: 9,
        year: 21
      },
      version: '0.0.9'
    },
    bytes: [0x70, 0x06, 0x10, 0x09, 0x15, 0x00, 0x00, 0x09]
  }
};
const fromBytes$11 = bytes => {
  if (bytes.length !== maxSize$) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  const [date, month, year, n3, n2, n1] = bytes;
  return {
    date: {
      date,
      month,
      year
    },
    version: `${n3}.${n2}.${n1}`
  };
};
const toBytes$11 = parameters => {
  const {
    date,
    version
  } = parameters;
  const versionParts = version.split('.').map(part => parseInt(part, 10));
  return toBytes$23(id$, [date.date, date.month, date.year, ...versionParts]);
};

var getBuildVersion = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$,
    examples: examples$,
    fromBytes: fromBytes$11,
    headerSize: headerSize$,
    id: id$,
    isLoraOnly: isLoraOnly$,
    maxSize: maxSize$,
    name: name$,
    toBytes: toBytes$11
});

const id$_ = getCorrectTime$2;
const name$_ = uplinkNames[getCorrectTime$2];
const headerSize$_ = 2;
const accessLevel$_ = READ_ONLY;
const maxSize$_ = 9;
const isLoraOnly$_ = false;
const examples$_ = {
  'default parameters': {
    id: id$_,
    name: name$_,
    headerSize: headerSize$_,
    maxSize: maxSize$_,
    accessLevel: accessLevel$_,
    parameters: {
      monthTransitionSummer: 3,
      dateTransitionSummer: 0,
      hoursTransitionSummer: 3,
      hoursCorrectSummer: 1,
      monthTransitionWinter: 10,
      dateTransitionWinter: 0,
      hoursTransitionWinter: 4,
      hoursCorrectWinter: 1,
      isCorrectionNeeded: true
    },
    bytes: [0x3e, 0x09, 0x03, 0x00, 0x03, 0x01, 0x0a, 0x00, 0x04, 0x01, 0x01]
  }
};
const fromBytes$10 = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getTimeCorrectionParameters();
};
const toBytes$10 = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$_);
  buffer.setTimeCorrectionParameters(parameters);
  return toBytes$23(id$_, buffer.data);
};

var getCorrectTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$_,
    examples: examples$_,
    fromBytes: fromBytes$10,
    headerSize: headerSize$_,
    id: id$_,
    isLoraOnly: isLoraOnly$_,
    maxSize: maxSize$_,
    name: name$_,
    toBytes: toBytes$10
});

const id$Z = getCriticalEvent$2;
const name$Z = uplinkNames[getCriticalEvent$2];
const headerSize$Z = 2;
const accessLevel$Z = READ_ONLY;
const maxSize$Z = 9;
const isLoraOnly$Z = false;
const examples$Z = {
  'simple response': {
    id: id$Z,
    name: name$Z,
    headerSize: headerSize$Z,
    accessLevel: accessLevel$Z,
    maxSize: maxSize$Z,
    parameters: {
      event: 1,
      name: 'MAGNETIC_ON',
      index: 1,
      date: {
        year: 23,
        month: 3,
        date: 12,
        hours: 10,
        minutes: 22,
        seconds: 33
      },
      count: 7
    },
    bytes: [0x41, 0x09, 0x01, 0x01, 0x17, 0x03, 0x0c, 0x0a, 0x16, 0x21, 0x07]
  }
};
const fromBytes$ = bytes => {
  if (bytes.length !== maxSize$Z) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  const [event, index, year, month, date, hours, minutes, seconds, count] = bytes;
  return {
    event,
    name: criticalEventNames[event],
    index,
    date: {
      year,
      month,
      date,
      hours,
      minutes,
      seconds
    },
    count
  };
};
const toBytes$ = parameters => {
  const {
    event,
    index,
    date,
    count
  } = parameters;
  return toBytes$23(id$Z, [event, index, date.year, date.month, date.date, date.hours, date.minutes, date.seconds, count]);
};

var getCriticalEvent = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$Z,
    examples: examples$Z,
    fromBytes: fromBytes$,
    headerSize: headerSize$Z,
    id: id$Z,
    isLoraOnly: isLoraOnly$Z,
    maxSize: maxSize$Z,
    name: name$Z,
    toBytes: toBytes$
});

const id$Y = getCurrentStatusMeter$2;
const name$Y = uplinkNames[getCurrentStatusMeter$2];
const headerSize$Y = 2;
const maxSize$Y = 31;
const accessLevel$Y = READ_ONLY;
const isLoraOnly$Y = false;
const calibrationFlagsMask = {
  calibrationEnable: 0x01,
  hardkey: 0x02,
  keyPressTest: 0x04,
  keyOpenkeyTest: 0x08,
  keyGerkonTest: 0x10,
  keyOpenKlemaTest: 0x20,
  keyOpenModuleTest: 0x40,
  keyPress2Test: 0x80
};
const examples$Y = {
  'simple response': {
    id: id$Y,
    name: name$Y,
    headerSize: headerSize$Y,
    maxSize: maxSize$Y,
    accessLevel: accessLevel$Y,
    parameters: {
      operatingSeconds: 74320,
      tbadVAVB: 34567,
      tbadImaxAll: 956726,
      tbadPmaxAll: 340,
      tbadFREQ: 436,
      relayStatus: {
        RELAY_STATE: true,
        RELAY_UBAD: false,
        RELAY_UNEQ_CURRENT: false,
        RELAY_OFF_CENTER: true,
        RELAY_IMAX: true,
        RELAY_PMAX: false
      },
      statusEvent: {
        CASE_OPEN: true,
        MAGNETIC_ON: false,
        PARAMETERS_UPDATE_REMOTE: true,
        PARAMETERS_UPDATE_LOCAL: false,
        RESTART: false,
        ERROR_ACCESS: false,
        TIME_SET: false,
        TIME_CORRECT: true,
        DEVICE_FAILURE: false,
        CASE_TERMINAL_OPEN: false,
        CASE_MODULE_OPEN: false,
        TARIFF_TABLE_SET: false,
        TARIFF_TABLE_GET: true,
        PROTECTION_RESET_EM: false,
        PROTECTION_RESET_MAGNETIC: false
      },
      calibrationFlags: {
        calibrationEnable: true,
        hardkey: false,
        keyPressTest: false,
        keyOpenkeyTest: false,
        keyGerkonTest: false,
        keyOpenKlemaTest: false,
        keyOpenModuleTest: false,
        keyPress2Test: false
      },
      currentTariffs: {
        'A+': 1,
        'A-': 3
      },
      isSummerTime: true
    },
    bytes: [0x39, 0x1f, 0x00, 0x01, 0x22, 0x50, 0x00, 0x00, 0x87, 0x07, 0x00, 0x0e, 0x99, 0x36, 0x00, 0x00, 0x01, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb4, 0x61, 0x85, 0x10, 0x01, 0x01, 0x03, 0x01]
  }
};
const fromBytes$_ = data => {
  const buffer = new CommandBinaryBuffer$1(data);
  const operatingSeconds = buffer.getUint32();
  const tbadVAVB = buffer.getUint32();
  const tbadImaxAll = buffer.getUint32();
  const tbadPmaxAll = buffer.getUint32();
  buffer.getUint32();
  const tbadFREQ = buffer.getUint32();
  const relayStatus = toObject(extendedCurrentValues2RelayStatusMask, buffer.getUint8());
  const statusEvent1 = buffer.getUint8();
  const statusEvent2 = buffer.getUint8();
  const calibrationFlags = toObject(calibrationFlagsMask, buffer.getUint8());
  const currentTariffs = {
    'A+': buffer.getUint8(),
    'A-': buffer.getUint8()
  };
  const isSummerTime = !!(buffer.getUint8() & 1);
  const statusEventValue = statusEvent1 | statusEvent2 << 8;
  return {
    operatingSeconds,
    tbadVAVB,
    tbadImaxAll,
    tbadPmaxAll,
    tbadFREQ,
    relayStatus,
    statusEvent: toObject(eventStatusMask, statusEventValue),
    calibrationFlags,
    currentTariffs,
    isSummerTime
  };
};
const toBytes$_ = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$Y);
  const statusEventValue = fromObject(eventStatusMask, parameters.statusEvent);
  buffer.setUint32(parameters.operatingSeconds);
  buffer.setUint32(parameters.tbadVAVB);
  buffer.setUint32(parameters.tbadImaxAll);
  buffer.setUint32(parameters.tbadPmaxAll);
  buffer.setUint32(0);
  buffer.setUint32(parameters.tbadFREQ);
  buffer.setUint8(fromObject(extendedCurrentValues2RelayStatusMask, parameters.relayStatus));
  buffer.setUint8(statusEventValue & 0xff);
  buffer.setUint8(statusEventValue >> 8 & 0xff);
  buffer.setUint8(fromObject(calibrationFlagsMask, parameters.calibrationFlags));
  buffer.setUint8(parameters.currentTariffs['A+']);
  buffer.setUint8(parameters.currentTariffs['A-']);
  buffer.setUint8(parameters.isSummerTime ? 1 : 0);
  return toBytes$23(id$Y, buffer.data);
};

var getCurrentStatusMeter = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$Y,
    examples: examples$Y,
    fromBytes: fromBytes$_,
    headerSize: headerSize$Y,
    id: id$Y,
    isLoraOnly: isLoraOnly$Y,
    maxSize: maxSize$Y,
    name: name$Y,
    toBytes: toBytes$_
});

const id$X = getCurrentValues$2;
const name$X = uplinkNames[getCurrentValues$2];
const headerSize$X = 2;
const accessLevel$X = READ_ONLY;
const maxSize$X = 32;
const isLoraOnly$X = false;
const examples$X = {
  'simple response': {
    id: id$X,
    name: name$X,
    maxSize: maxSize$X,
    headerSize: headerSize$X,
    accessLevel: accessLevel$X,
    parameters: {
      powerA: 2349234,
      iaRms: 4061779,
      vavbRms: 302729,
      varA: 106789,
      pfA: 0.5,
      ibRms: 304779,
      powerB: 106280,
      varB: 107292,
      pfB: -0.5
    },
    bytes: [0x0d, 0x20, 0x00, 0x23, 0xd8, 0xb2, 0x00, 0x3d, 0xfa, 0x53, 0x00, 0x04, 0x9e, 0x89, 0x00, 0x01, 0xa1, 0x25, 0x01, 0xf4, 0x00, 0x04, 0xa6, 0x8b, 0x00, 0x01, 0x9f, 0x28, 0x00, 0x01, 0xa3, 0x1c, 0xfe, 0x0c]
  }
};
const fromBytes$Z = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    powerA: buffer.getInt32(),
    iaRms: buffer.getInt32(),
    vavbRms: buffer.getInt32(),
    varA: buffer.getInt32(),
    pfA: buffer.getInt16() / 1000,
    ibRms: buffer.getInt32(),
    powerB: buffer.getInt32(),
    varB: buffer.getInt32(),
    pfB: buffer.getInt16() / 1000
  };
};
const toBytes$Z = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$X);
  buffer.setInt32(parameters.powerA);
  buffer.setInt32(parameters.iaRms);
  buffer.setInt32(parameters.vavbRms);
  buffer.setInt32(parameters.varA);
  buffer.setInt16(parameters.pfA * 1000);
  buffer.setInt32(parameters.ibRms);
  buffer.setInt32(parameters.powerB);
  buffer.setInt32(parameters.varB);
  buffer.setInt16(parameters.pfB * 1000);
  return toBytes$23(id$X, buffer.data);
};
const toJson$a = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  if (!dlms) {
    return JSON.stringify(parameters);
  }
  const result = {
    '21.7.0': parameters.powerA,
    '31.7.0': parameters.iaRms,
    '32.7.0': parameters.vavbRms,
    '33.7.0': parameters.pfA,
    '51.7.0': parameters.ibRms,
    '41.7.0': parameters.powerB,
    '53.7.0': parameters.pfB
  };
  const varAKey = parameters.varA >= 0 ? '23.7.0' : '24.7.0';
  const varBKey = parameters.varB >= 0 ? '43.7.0' : '44.7.0';
  result[varAKey] = parameters.varA;
  result[varBKey] = parameters.varB;
  return JSON.stringify(result);
};

var getCurrentValues = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$X,
    examples: examples$X,
    fromBytes: fromBytes$Z,
    headerSize: headerSize$X,
    id: id$X,
    isLoraOnly: isLoraOnly$X,
    maxSize: maxSize$X,
    name: name$X,
    toBytes: toBytes$Z,
    toJson: toJson$a
});

const id$W = getDateTime$2;
const name$W = uplinkNames[getDateTime$2];
const headerSize$W = 2;
const maxSize$W = 8;
const accessLevel$W = READ_ONLY;
const isLoraOnly$W = false;
const examples$W = {
  'time: 2024.02.19 18:31:55': {
    id: id$W,
    name: name$W,
    headerSize: headerSize$W,
    maxSize: maxSize$W,
    accessLevel: accessLevel$W,
    parameters: {
      isSummerTime: false,
      seconds: 55,
      minutes: 31,
      hours: 18,
      day: 2,
      date: 19,
      month: 2,
      year: 24
    },
    bytes: [0x07, 0x08, 0x00, 0x37, 0x1f, 0x12, 0x02, 0x13, 0x02, 0x18]
  }
};
const fromBytes$Y = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getDateTime();
};
const toBytes$Y = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$W);
  buffer.setDateTime(parameters);
  return toBytes$23(id$W, buffer.data);
};

var getDateTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$W,
    examples: examples$W,
    fromBytes: fromBytes$Y,
    headerSize: headerSize$W,
    id: id$W,
    isLoraOnly: isLoraOnly$W,
    maxSize: maxSize$W,
    name: name$W,
    toBytes: toBytes$Y
});

var getObisByEnergy = (function (energy) {
  let tariff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  const obis = energy === A_MINUS$1 ? '2.8.x' : '1.8.x';
  return obis.replace('x', tariff.toString(10));
});

const COMMAND_SIZE$5 = 19;
const MAX_COMMAND_SIZE$5 = COMMAND_SIZE$5 + PACKED_ENERGY_TYPE_SIZE;
const id$V = getDayDemand$2;
const name$V = uplinkNames[getDayDemand$2];
const headerSize$V = 2;
const maxSize$V = MAX_COMMAND_SIZE$5;
const accessLevel$V = READ_ONLY;
const isLoraOnly$V = false;
const examples$V = {
  'default A+ energy': {
    id: id$V,
    name: name$V,
    headerSize: headerSize$V,
    maxSize: maxSize$V,
    accessLevel: accessLevel$V,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      energies: [40301230, 3334244, 2333, 2145623]
    },
    bytes: [0x16, 0x13, 0x18, 0x03, 0x16, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x32, 0xe0, 0x64, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  },
  'received A- energies': {
    id: id$V,
    name: name$V,
    headerSize: headerSize$V,
    maxSize: maxSize$V,
    accessLevel: accessLevel$V,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      energyType: 2,
      energies: [40301230, null, 2333, 2145623]
    },
    bytes: [0x16, 0x10, 0x18, 0x03, 0x16, 0xd2, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  }
};
const fromBytes$X = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  let parameters;
  if (bytes.length === COMMAND_SIZE$5) {
    parameters = {
      date: buffer.getDate(),
      energies: buffer.getEnergies()
    };
  } else {
    parameters = {
      date: buffer.getDate(),
      ...buffer.getPackedEnergyWithType()
    };
  }
  return parameters;
};
const toBytes$X = parameters => {
  let size = COMMAND_SIZE$5;
  if (parameters?.energyType) {
    const energiesNumber = parameters.energies.filter(energy => energy !== null).length;
    size = DATE_SIZE$3 + PACKED_ENERGY_TYPE_SIZE + energiesNumber * ENERGY_SIZE;
  }
  const buffer = new CommandBinaryBuffer$1(size);
  buffer.setDate(parameters.date);
  buffer.setPackedEnergyWithType(parameters);
  return toBytes$23(id$V, buffer.data);
};
const toJson$9 = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  if (!dlms) {
    return JSON.stringify(parameters);
  }
  const {
    date,
    energyType,
    energies
  } = parameters;
  const result = {};
  for (let i = 0; i < TARIFF_NUMBER$1; i += 1) {
    if (energies[i] || energies[i] === 0) {
      result[getObisByEnergy(energyType, i + 1)] = energies[i];
    }
  }
  return JSON.stringify({
    date,
    ...result
  });
};

var getDayDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$V,
    examples: examples$V,
    fromBytes: fromBytes$X,
    headerSize: headerSize$V,
    id: id$V,
    isLoraOnly: isLoraOnly$V,
    maxSize: maxSize$V,
    name: name$V,
    toBytes: toBytes$X,
    toJson: toJson$9
});

const COMMAND_SIZE$4 = 19;
const MAX_COMMAND_SIZE$4 = COMMAND_SIZE$4 + PACKED_ENERGY_TYPE_SIZE;
const id$U = getDayDemandExport$2;
const name$U = uplinkNames[getDayDemandExport$2];
const headerSize$U = 2;
const maxSize$U = MAX_COMMAND_SIZE$4;
const accessLevel$U = READ_ONLY;
const isLoraOnly$U = false;
const examples$U = {
  'default A- energy': {
    id: id$U,
    name: name$U,
    headerSize: headerSize$U,
    maxSize: maxSize$U,
    accessLevel: accessLevel$U,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      energies: [40301230, 3334244, 2333, 2145623]
    },
    bytes: [0x4f, 0x13, 0x18, 0x03, 0x16, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x32, 0xe0, 0x64, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  },
  'received A+ energies': {
    id: id$U,
    name: name$U,
    headerSize: headerSize$U,
    maxSize: maxSize$U,
    accessLevel: accessLevel$U,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      energyType: 1,
      energies: [40301230, null, 2333, 2145623]
    },
    bytes: [0x4f, 0x10, 0x18, 0x03, 0x16, 0xd1, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  }
};
const fromBytes$W = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  let parameters;
  if (bytes.length === COMMAND_SIZE$4) {
    parameters = {
      date: buffer.getDate(),
      energies: buffer.getEnergies()
    };
  } else {
    parameters = {
      date: buffer.getDate(),
      ...buffer.getPackedEnergyWithType()
    };
  }
  return parameters;
};
const toBytes$W = parameters => {
  let size = COMMAND_SIZE$4;
  if (parameters?.energyType) {
    const energiesNumber = parameters.energies.filter(energy => energy !== null).length;
    size = DATE_SIZE$3 + PACKED_ENERGY_TYPE_SIZE + energiesNumber * ENERGY_SIZE;
  }
  const buffer = new CommandBinaryBuffer$1(size);
  buffer.setDate(parameters.date);
  buffer.setPackedEnergyWithType(parameters);
  return toBytes$23(id$U, buffer.data);
};
const toJson$8 = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  if (!dlms) {
    return JSON.stringify(parameters);
  }
  const {
    date,
    energyType,
    energies
  } = parameters;
  const result = {};
  for (let i = 0; i < TARIFF_NUMBER$1; i += 1) {
    if (energies[i] || energies[i] === 0) {
      result[getObisByEnergy(energyType, i + 1)] = energies[i];
    }
  }
  return JSON.stringify({
    date,
    ...result
  });
};

var getDayDemandExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$U,
    examples: examples$U,
    fromBytes: fromBytes$W,
    headerSize: headerSize$U,
    id: id$U,
    isLoraOnly: isLoraOnly$U,
    maxSize: maxSize$U,
    name: name$U,
    toBytes: toBytes$W,
    toJson: toJson$8
});

const DATE_SIZE$2 = 2;
const ENERGY_FLAGS_SIZE$2 = 1;
const TARIFF_FLAGS_SIZE$1 = 1;
const MAX_TARIFFS_ENERGIES_SIZE$1 = 6 * 4 * 4;
const energiesToObis$2 = {
  'A+': '1.8.x',
  'A+R+': '3.8.x',
  'A+R-': '4.8.x',
  'A-': '2.8.x',
  'A-R+': '7.8.x',
  'A-R-': '8.8.x'
};
const convertEnergyToObis$2 = function (energy) {
  let tariff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  const obis = energiesToObis$2[energy];
  return obis ? obis.replace('x', tariff.toString(10)) : '';
};
const convertTariffsEnergiesToDlms = energies => {
  const dlms = {};
  for (let tariff = 0; tariff < TARIFF_NUMBER; tariff++) {
    const tariffEnergies = energies[tariff];
    if (tariffEnergies) {
      Object.keys(tariffEnergies).forEach(energy => {
        const value = tariffEnergies[energy];
        if (value || value === 0) {
          dlms[convertEnergyToObis$2(energy, tariff + 1)] = value;
        }
      });
    }
  }
  return dlms;
};
const id$T = getDayEnergies$1;
const name$T = uplinkNames[getDayEnergies$1];
const headerSize$T = 2;
const maxSize$T = DATE_SIZE$2 + ENERGY_FLAGS_SIZE$2 + TARIFF_FLAGS_SIZE$1 + MAX_TARIFFS_ENERGIES_SIZE$1;
const accessLevel$T = UNENCRYPTED;
const isLoraOnly$T = true;
const examples$T = {
  'get day energies': {
    id: id$T,
    headerSize: headerSize$T,
    name: name$T,
    maxSize: maxSize$T,
    parameters: {
      date: {
        year: 21,
        month: 2,
        date: 3
      },
      energies: [null, {
        'A+': 0x1000,
        'A-R+': 0x2000
      }, null, null]
    },
    bytes: [0x78, 0x0c, 0x2a, 0x43, 0x11, 0x22, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00]
  }
};
const fromBytes$V = bytes => {
  const buffer = new CommandBinaryBuffer(bytes);
  return {
    date: buffer.getDate(),
    energies: buffer.getTariffsEnergies()
  };
};
const toBytes$V = parameters => {
  const buffer = new CommandBinaryBuffer(maxSize$T);
  buffer.setDate(parameters.date);
  buffer.setTariffsEnergies(parameters.energies);
  return toBytes$23(id$T, buffer.getBytesToOffset());
};
const toJson$7 = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  const {
    date,
    energies
  } = parameters;
  const result = dlms ? {
    date,
    ...convertTariffsEnergiesToDlms(energies)
  } : parameters;
  return JSON.stringify(result);
};

var getDayEnergies = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$T,
    examples: examples$T,
    fromBytes: fromBytes$V,
    headerSize: headerSize$T,
    id: id$T,
    isLoraOnly: isLoraOnly$T,
    maxSize: maxSize$T,
    name: name$T,
    toBytes: toBytes$V,
    toJson: toJson$7
});

const id$S = getDayMaxDemand$2;
const name$S = uplinkNames[getDayMaxDemand$2];
const headerSize$S = 2;
const accessLevel$S = READ_ONLY;
const maxSize$S = 27;
const isLoraOnly$S = false;
const examples$S = {
  'response for 2023.03.12': {
    id: id$S,
    name: name$S,
    headerSize: headerSize$S,
    accessLevel: accessLevel$S,
    maxSize: maxSize$S,
    parameters: {
      date: {
        year: 23,
        month: 3,
        date: 12
      },
      power: [{
        hours: 1,
        minutes: 0,
        power: 456
      }, {
        hours: 3,
        minutes: 12,
        power: 9474
      }, {
        hours: 7,
        minutes: 30,
        power: 78573
      }, {
        hours: 12,
        minutes: 59,
        power: 395639
      }]
    },
    bytes: [0x31, 0x1b, 0x17, 0x03, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x01, 0xc8, 0x03, 0x0c, 0x00, 0x00, 0x25, 0x02, 0x07, 0x1e, 0x00, 0x01, 0x32, 0xed, 0x0c, 0x3b, 0x00, 0x06, 0x09, 0x77]
  }
};
const fromBytes$U = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getDayMaxDemandResponse();
};
const toBytes$U = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$S);
  buffer.setDayMaxDemandResponse(parameters);
  return toBytes$23(id$S, buffer.getBytesToOffset());
};

var getDayMaxDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$S,
    examples: examples$S,
    fromBytes: fromBytes$U,
    headerSize: headerSize$S,
    id: id$S,
    isLoraOnly: isLoraOnly$S,
    maxSize: maxSize$S,
    name: name$S,
    toBytes: toBytes$U
});

const id$R = getDayMaxDemandExport$2;
const name$R = uplinkNames[getDayMaxDemandExport$2];
const headerSize$R = 2;
const accessLevel$R = READ_ONLY;
const maxSize$R = 27;
const isLoraOnly$R = false;
const examples$R = {
  'response for 2023.03.12': {
    id: id$R,
    name: name$R,
    headerSize: headerSize$R,
    accessLevel: accessLevel$R,
    maxSize: maxSize$R,
    parameters: {
      date: {
        year: 23,
        month: 3,
        date: 12
      },
      power: [{
        hours: 1,
        minutes: 0,
        power: 456
      }, {
        hours: 3,
        minutes: 12,
        power: 9474
      }, {
        hours: 7,
        minutes: 30,
        power: 78573
      }, {
        hours: 12,
        minutes: 59,
        power: 395639
      }]
    },
    bytes: [0x58, 0x1b, 0x17, 0x03, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x01, 0xc8, 0x03, 0x0c, 0x00, 0x00, 0x25, 0x02, 0x07, 0x1e, 0x00, 0x01, 0x32, 0xed, 0x0c, 0x3b, 0x00, 0x06, 0x09, 0x77]
  }
};
const fromBytes$T = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getDayMaxDemandResponse();
};
const toBytes$T = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$R);
  buffer.setDayMaxDemandResponse(parameters);
  return toBytes$23(id$R, buffer.getBytesToOffset());
};

var getDayMaxDemandExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$R,
    examples: examples$R,
    fromBytes: fromBytes$T,
    headerSize: headerSize$R,
    id: id$R,
    isLoraOnly: isLoraOnly$R,
    maxSize: maxSize$R,
    name: name$R,
    toBytes: toBytes$T
});

const id$Q = getDayMaxDemandPrevious$2;
const name$Q = uplinkNames[getDayMaxDemandPrevious$2];
const headerSize$Q = 2;
const accessLevel$Q = READ_ONLY;
const maxSize$Q = 27;
const isLoraOnly$Q = false;
const examples$Q = {
  'response for 2023.03.12': {
    id: id$Q,
    name: name$Q,
    headerSize: headerSize$Q,
    accessLevel: accessLevel$Q,
    maxSize: maxSize$Q,
    parameters: {
      date: {
        year: 23,
        month: 3,
        date: 12
      },
      power: [{
        hours: 1,
        minutes: 0,
        power: 456
      }, {
        hours: 3,
        minutes: 12,
        power: 9474
      }, {
        hours: 7,
        minutes: 30,
        power: 78573
      }, {
        hours: 12,
        minutes: 59,
        power: 395639
      }]
    },
    bytes: [0x4a, 0x1b, 0x17, 0x03, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x01, 0xc8, 0x03, 0x0c, 0x00, 0x00, 0x25, 0x02, 0x07, 0x1e, 0x00, 0x01, 0x32, 0xed, 0x0c, 0x3b, 0x00, 0x06, 0x09, 0x77]
  }
};
const fromBytes$S = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getDayMaxDemandResponse();
};
const toBytes$S = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$Q);
  buffer.setDayMaxDemandResponse(parameters);
  return toBytes$23(id$Q, buffer.getBytesToOffset());
};

var getDayMaxDemandPrevious = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$Q,
    examples: examples$Q,
    fromBytes: fromBytes$S,
    headerSize: headerSize$Q,
    id: id$Q,
    isLoraOnly: isLoraOnly$Q,
    maxSize: maxSize$Q,
    name: name$Q,
    toBytes: toBytes$S
});

const DATE_SIZE$1 = 2;
const ENERGY_FLAGS_SIZE$1 = 1;
const TARIFF_FLAGS_SIZE = 1;
const MAX_TARIFFS_ENERGIES_SIZE = 6 * 4 * (1 + 1 + 4);
const energiesToObis$1 = {
  'A+': '1.6.x',
  'A+R+': '3.6.x',
  'A+R-': '4.6.x',
  'A-': '2.6.x',
  'A-R+': '7.6.x',
  'A-R-': '8.6.x'
};
const convertEnergyToObis$1 = function (energy) {
  let tariff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  const obis = energiesToObis$1[energy];
  return obis ? obis.replace('x', tariff.toString(10)) : '';
};
const convertTariffsPowerMaxToDlms = energies => {
  const dlms = {};
  for (let tariff = 0; tariff < TARIFF_NUMBER; tariff++) {
    const tariffEnergies = energies[tariff];
    if (tariffEnergies) {
      Object.keys(tariffEnergies).forEach(energy => {
        const value = tariffEnergies[energy];
        if (value || value === 0) {
          dlms[convertEnergyToObis$1(energy, tariff + 1)] = value;
        }
      });
    }
  }
  return dlms;
};
const id$P = getDayMaxPower$1;
const name$P = uplinkNames[getDayMaxPower$1];
const headerSize$P = 2;
const maxSize$P = DATE_SIZE$1 + ENERGY_FLAGS_SIZE$1 + TARIFF_FLAGS_SIZE + MAX_TARIFFS_ENERGIES_SIZE;
const accessLevel$P = UNENCRYPTED;
const isLoraOnly$P = true;
const examples$P = {
  'get day max power': {
    id: id$P,
    headerSize: headerSize$P,
    name: name$P,
    maxSize: maxSize$P,
    parameters: {
      date: {
        year: 21,
        month: 2,
        date: 3
      },
      tariffs: [null, null, {
        'A+': {
          hours: 2,
          minutes: 3,
          power: 0x1000
        },
        'A-R+': {
          hours: 4,
          minutes: 5,
          power: 0x2000
        }
      }, null]
    },
    bytes: [0x79, 0x10, 0x2a, 0x43, 0x11, 0x44, 0x02, 0x03, 0x00, 0x00, 0x10, 0x00, 0x04, 0x05, 0x00, 0x00, 0x20, 0x00]
  }
};
const fromBytes$R = bytes => {
  const buffer = new CommandBinaryBuffer(bytes);
  return {
    date: buffer.getDate(),
    tariffs: buffer.getTariffsPowerMax()
  };
};
const toBytes$R = parameters => {
  const buffer = new CommandBinaryBuffer(maxSize$P);
  buffer.setDate(parameters.date);
  buffer.setTariffsPowerMax(parameters.tariffs);
  return toBytes$23(id$P, buffer.getBytesToOffset());
};
const toJson$6 = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  const {
    date,
    tariffs
  } = parameters;
  const result = dlms ? {
    date,
    ...convertTariffsPowerMaxToDlms(tariffs)
  } : parameters;
  return JSON.stringify(result);
};

var getDayMaxPower = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$P,
    examples: examples$P,
    fromBytes: fromBytes$R,
    headerSize: headerSize$P,
    id: id$P,
    isLoraOnly: isLoraOnly$P,
    maxSize: maxSize$P,
    name: name$P,
    toBytes: toBytes$R,
    toJson: toJson$6
});

const MAX_PERIODS_NUMBER = 8;
const PERIODS_FINAL_BYTE = 0xff;
const id$O = getDayProfile$2;
const name$O = uplinkNames[getDayProfile$2];
const headerSize$O = 2;
const maxSize$O = MAX_PERIODS_NUMBER;
const accessLevel$O = READ_ONLY;
const isLoraOnly$O = false;
const examples$O = {
  'full periods response': {
    id: id$O,
    name: name$O,
    headerSize: headerSize$O,
    maxSize: maxSize$O,
    accessLevel: accessLevel$O,
    parameters: {
      periods: [{
        tariff: 0,
        isFirstHalfHour: true,
        hour: 2
      }, {
        tariff: 1,
        isFirstHalfHour: false,
        hour: 3
      }, {
        tariff: 2,
        isFirstHalfHour: true,
        hour: 4
      }, {
        tariff: 3,
        isFirstHalfHour: false,
        hour: 5
      }, {
        tariff: 0,
        isFirstHalfHour: true,
        hour: 6
      }, {
        tariff: 1,
        isFirstHalfHour: false,
        hour: 7
      }, {
        tariff: 2,
        isFirstHalfHour: false,
        hour: 8
      }, {
        tariff: 3,
        isFirstHalfHour: true,
        hour: 9
      }]
    },
    bytes: [0x3b, 0x08, 0x10, 0x1d, 0x22, 0x2f, 0x30, 0x3d, 0x46, 0x4b]
  },
  'response with 4 periods': {
    id: id$O,
    name: name$O,
    headerSize: headerSize$O,
    maxSize: maxSize$O,
    accessLevel: accessLevel$O,
    parameters: {
      periods: [{
        tariff: 0,
        isFirstHalfHour: true,
        hour: 2
      }, {
        tariff: 1,
        isFirstHalfHour: false,
        hour: 3
      }, {
        tariff: 2,
        isFirstHalfHour: true,
        hour: 4
      }, {
        tariff: 3,
        isFirstHalfHour: false,
        hour: 5
      }]
    },
    bytes: [0x3b, 0x05, 0x10, 0x1d, 0x22, 0x2f, 0xff]
  }
};
const fromBytes$Q = bytes => {
  const finalByteIndex = bytes.indexOf(PERIODS_FINAL_BYTE);
  const cleanData = finalByteIndex === -1 ? bytes : bytes.slice(0, finalByteIndex);
  return {
    periods: [...cleanData].map(CommandBinaryBuffer$1.getDayProfileFromByte)
  };
};
const toBytes$Q = parameters => {
  const hasPeriodsFinalByte = parameters.periods.length < MAX_PERIODS_NUMBER;
  const size = parameters.periods.length + +hasPeriodsFinalByte;
  const buffer = new CommandBinaryBuffer$1(size);
  parameters.periods.forEach(period => {
    buffer.setDayProfile(period);
  });
  if (hasPeriodsFinalByte) {
    buffer.setUint8(PERIODS_FINAL_BYTE);
  }
  return toBytes$23(id$O, buffer.data);
};

var getDayProfile = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$O,
    examples: examples$O,
    fromBytes: fromBytes$Q,
    headerSize: headerSize$O,
    id: id$O,
    isLoraOnly: isLoraOnly$O,
    maxSize: maxSize$O,
    name: name$O,
    toBytes: toBytes$Q
});

const ADDITIONAL_HOUR = 25;
const getRecordIndex = (hours, minutes, periodMin) => Math.trunc((hours * 60 + minutes) / periodMin);
const getLastSummerHourIndex = periodMin => getRecordIndex(ADDITIONAL_HOUR, 0, periodMin);
const energyFromWord = (word, index, periodMin) => {
  if (word === 0xffff) {
    return null;
  }
  const indexLastSummerRecord = getLastSummerHourIndex(periodMin);
  if (index === indexLastSummerRecord) {
    return {
      lastSummerHour: word >> 8 & 0xff
    };
  }
  return periodMin === 60 ? {
    energy: word
  } : {
    tariff: word >> 14 & 0x03,
    energy: word & 0x3fff
  };
};
const energyToWord = data => {
  if (data === null) {
    return 0xffff;
  }
  const {
    energy,
    tariff,
    lastSummerHour
  } = data;
  if (lastSummerHour) {
    return lastSummerHour << 8 | 0xff;
  }
  return tariff ? tariff << 14 | energy & 0x3fff : energy;
};
const energyFromBinary = function (bytes, offset) {
  let periodMin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
  return bytes.reduce((collector, value, index) => {
    collector.push(energyFromWord(value, (offset ?? 0) + index, periodMin));
    return collector;
  }, []);
};
const energyToBinary = energies => energies.reduce((collector, value) => {
  collector.push(energyToWord(value));
  return collector;
}, []);
const voltageFromWord = (word, index, periodMin) => {
  if (word === 0xffff) {
    return 0xffff;
  }
  const indexLastSummerRecord = getLastSummerHourIndex(periodMin);
  return index === indexLastSummerRecord ? {
    lastSummerHour: word >> 8 & 0xff
  } : {
    voltage: word
  };
};
const voltageToWord = _ref => {
  let {
    voltage,
    lastSummerHour
  } = _ref;
  if (lastSummerHour) {
    return lastSummerHour << 8 | 0xff;
  }
  return voltage;
};
const voltageFromBinary = function (bytes, offset) {
  let periodMin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
  return bytes.reduce((collector, value, index) => {
    collector.push(voltageFromWord(value, (offset ?? 0) + index, periodMin));
    return collector;
  }, []);
};
const voltageToBinary = energies => energies.reduce((collector, value) => {
  collector.push(voltageToWord(value));
  return collector;
}, []);

const id$N = getDemand$2;
const name$N = uplinkNames[getDemand$2];
const headerSize$N = 2;
const maxSize$N = maxSize$1P + 48;
const accessLevel$N = READ_ONLY;
const isLoraOnly$N = false;
const examples$N = {
  'response for A+': {
    id: id$N,
    name: name$N,
    headerSize: headerSize$N,
    maxSize: maxSize$N,
    parameters: {
      date: {
        year: 24,
        month: 10,
        date: 2
      },
      energyType: A_PLUS,
      firstIndex: 0,
      count: 48,
      period: 5,
      demands: [{
        tariff: 0,
        energy: 177
      }, {
        tariff: 0,
        energy: 177
      }, {
        tariff: 0,
        energy: 176
      }, null, null, null, null, null, null, null, null, null, {
        tariff: 0,
        energy: 178
      }, {
        tariff: 0,
        energy: 175
      }, {
        tariff: 0,
        energy: 177
      }, null, null, null, null, null, null, null, null, null, {
        tariff: 0,
        energy: 178
      }, {
        tariff: 0,
        energy: 178
      }, {
        tariff: 0,
        energy: 178
      }, null, null, null, null, null, null, null, null, null, {
        tariff: 0,
        energy: 177
      }, null, {
        tariff: 0,
        energy: 99
      }, null, null, null, null, null, null, null, null, null]
    },
    bytes: [0x76, 0x67, 0x31, 0x42, 0x01, 0x00, 0x00, 0x30, 0x05, 0x00, 0xb1, 0x00, 0xb1, 0x00, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xb2, 0x00, 0xaf, 0x00, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xb1, 0xff, 0xff, 0x00, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
  },
  'response for A+ (period: 60, no tariff)': {
    id: id$N,
    name: name$N,
    headerSize: headerSize$N,
    maxSize: maxSize$N,
    parameters: {
      date: {
        year: 24,
        month: 10,
        date: 2
      },
      energyType: A_PLUS,
      firstIndex: 0,
      count: 24,
      period: 60,
      demands: [{
        energy: 177
      }, {
        energy: 177
      }, {
        energy: 176
      }, null, null, null, null, null, null, null, null, null, {
        energy: 178
      }, {
        energy: 175
      }, {
        energy: 177
      }, null, null, null, null, null, null, null, null, null]
    },
    bytes: [0x76, 0x37, 0x31, 0x42, 0x01, 0x00, 0x00, 0x18, 0x3c, 0x00, 0xb1, 0x00, 0xb1, 0x00, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xb2, 0x00, 0xaf, 0x00, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
  },
  'response for A+ (lastSummerHour)': {
    id: id$N,
    name: name$N,
    headerSize: headerSize$N,
    maxSize: maxSize$N,
    parameters: {
      date: {
        year: 24,
        month: 10,
        date: 2
      },
      energyType: A_PLUS,
      firstIndex: 25,
      count: 1,
      period: 60,
      demands: [{
        lastSummerHour: 4
      }]
    },
    bytes: [0x76, 0x09, 0x31, 0x42, 0x01, 0x00, 0x19, 0x01, 0x3c, 0x04, 0xff]
  },
  'response for voltage (period: 60, no tariff)': {
    id: id$N,
    name: name$N,
    headerSize: headerSize$N,
    maxSize: maxSize$N,
    parameters: {
      date: {
        year: 24,
        month: 10,
        date: 2
      },
      energyType: VOLTAGE$1,
      firstIndex: 0,
      count: 1,
      period: 60,
      demands: [{
        voltage: 1026
      }]
    },
    bytes: [0x76, 0x09, 0x31, 0x42, 0xa0, 0x00, 0x00, 0x01, 0x3c, 0x04, 0x02]
  },
  'response for voltage (lastSummerHour)': {
    id: id$N,
    name: name$N,
    headerSize: headerSize$N,
    maxSize: maxSize$N,
    parameters: {
      date: {
        year: 24,
        month: 10,
        date: 2
      },
      energyType: VOLTAGE$1,
      firstIndex: 25,
      count: 1,
      period: 60,
      demands: [{
        lastSummerHour: 4
      }]
    },
    bytes: [0x76, 0x09, 0x31, 0x42, 0xa0, 0x00, 0x19, 0x01, 0x3c, 0x04, 0xff]
  },
  'response for voltage 10 min (lastSummerHour)': {
    id: id$N,
    name: name$N,
    headerSize: headerSize$N,
    maxSize: maxSize$N,
    parameters: {
      date: {
        year: 24,
        month: 10,
        date: 27
      },
      energyType: VOLTAGE_10,
      firstIndex: 144,
      count: 7,
      period: 10,
      demands: [{
        voltage: 2375
      }, {
        voltage: 2381
      }, {
        voltage: 2372
      }, {
        voltage: 2373
      }, {
        voltage: 2374
      }, {
        voltage: 2365
      }, {
        lastSummerHour: 3
      }]
    },
    bytes: [0x76, 0x15, 0x31, 0x5b, 0x40, 0x00, 0x90, 0x07, 0x0a, 0x09, 0x47, 0x09, 0x4d, 0x09, 0x44, 0x09, 0x45, 0x09, 0x46, 0x09, 0x3d, 0x03, 0xff]
  }
};
const fromBytes$P = bytes => {
  if (!bytes || bytes.length < maxSize$1P) {
    throw new Error('Invalid uplink GetDemand byte length.');
  }
  const buffer = new CommandBinaryBuffer$1(bytes);
  const parameters = buffer.getDemand();
  if (bytes.length !== maxSize$1P + 2 * parameters.count) {
    throw new Error('Invalid uplink GetDemand demands byte length.');
  }
  const demandsBytes = new Array(parameters.count).fill(0).map(() => buffer.getUint16());
  const isEnergiesDemand = parameters.energyType === A_PLUS || parameters.energyType === A_MINUS;
  parameters.demands = isEnergiesDemand ? energyFromBinary(demandsBytes, parameters.firstIndex, parameters.period) : voltageFromBinary(demandsBytes, parameters.firstIndex, parameters.period);
  return parameters;
};
const toBytes$P = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$1P + parameters.count * 2);
  buffer.setDemand(parameters);
  if (parameters.energyType === A_PLUS || parameters.energyType === A_MINUS) {
    energyToBinary(parameters.demands).forEach(value => buffer.setUint16(value));
  } else {
    voltageToBinary(parameters.demands).forEach(value => buffer.setUint16(value));
  }
  return toBytes$23(id$N, buffer.data);
};

var getDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$N,
    examples: examples$N,
    fromBytes: fromBytes$P,
    headerSize: headerSize$N,
    id: id$N,
    isLoraOnly: isLoraOnly$N,
    maxSize: maxSize$N,
    name: name$N,
    toBytes: toBytes$P
});

const id$M = getDeviceId$2;
const name$M = uplinkNames[getDeviceId$2];
const headerSize$M = 2;
const accessLevel$M = READ_ONLY;
const maxSize$M = 8;
const isLoraOnly$M = false;
const examples$M = {
  'simple response': {
    id: id$M,
    name: name$M,
    headerSize: headerSize$M,
    accessLevel: accessLevel$M,
    maxSize: maxSize$M,
    parameters: {
      manufacturer: '001a79',
      type: 23,
      year: 20,
      serial: '1b1d6a'
    },
    bytes: [0x05, 0x08, 0x00, 0x1a, 0x79, 0x17, 0x14, 0x1b, 0x1d, 0x6a]
  }
};
const fromBytes$O = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getDeviceId();
};
const toBytes$O = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$M);
  buffer.setDeviceId(parameters);
  return toBytes$23(id$M, buffer.data);
};

var getDeviceId = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$M,
    examples: examples$M,
    fromBytes: fromBytes$O,
    headerSize: headerSize$M,
    id: id$M,
    isLoraOnly: isLoraOnly$M,
    maxSize: maxSize$M,
    name: name$M,
    toBytes: toBytes$O
});

const A = 0b00000000;
const G_FULL = 0b00010001;

const id$L = getDeviceType$2;
const name$L = uplinkNames[getDeviceType$2];
const headerSize$L = 2;
const accessLevel$L = READ_ONLY;
const maxSize$L = 9;
const isLoraOnly$L = false;
const examples$L = {
  'type 1': {
    id: id$L,
    name: name$L,
    headerSize: headerSize$L,
    maxSize: maxSize$L,
    accessLevel: accessLevel$L,
    parameters: {
      type: 'MTX 1A10.DG.2L5-LD4',
      revision: 0x0b,
      meterType: A
    },
    bytes: [0x04, 0x09, 0x00, 0x11, 0x21, 0x49, 0x21, 0xB6, 0x81, 0xC0, 0x00]
  },
  'type 2': {
    id: id$L,
    name: name$L,
    headerSize: headerSize$L,
    maxSize: maxSize$L,
    accessLevel: accessLevel$L,
    parameters: {
      type: 'MTX 1G05.DH.2L2-DOB4',
      revision: 0x0b,
      meterType: G_FULL
    },
    bytes: [0x04, 0x09, 0x00, 0x12, 0x16, 0x47, 0x21, 0xb3, 0x17, 0x2c, 0x11]
  }
};
const fromBytes$N = data => {
  const buffer = new CommandBinaryBuffer$1(data);
  return buffer.getDeviceType();
};
const toBytes$N = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$L);
  buffer.setDeviceType(parameters);
  return toBytes$23(id$L, buffer.data);
};

var getDeviceType = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$L,
    examples: examples$L,
    fromBytes: fromBytes$N,
    headerSize: headerSize$L,
    id: id$L,
    isLoraOnly: isLoraOnly$L,
    maxSize: maxSize$L,
    name: name$L,
    toBytes: toBytes$N
});

const id$K = getDisplayParam$2;
const name$K = uplinkNames[getDisplayParam$2];
const headerSize$K = 2;
const maxSize$K = 33;
const accessLevel$K = READ_ONLY;
const isLoraOnly$K = false;
const examples$K = {
  'mode with order': {
    id: id$K,
    name: name$K,
    headerSize: headerSize$K,
    maxSize: maxSize$K,
    accessLevel: accessLevel$K,
    parameters: {
      displayMode: 0,
      order: [4, 5, 6, 7]
    },
    bytes: [0x5e, 0x05, 0x00, 0x04, 0x05, 0x06, 0x07]
  },
  'mode without order': {
    id: id$K,
    name: name$K,
    maxSize: maxSize$K,
    accessLevel: accessLevel$K,
    parameters: {
      displayMode: 1,
      order: []
    },
    bytes: [0x5e, 0x01, 0x01]
  }
};
const fromBytes$M = bytes => {
  const [displayMode, ...order] = bytes;
  return {
    displayMode,
    order
  };
};
const toBytes$M = parameters => toBytes$23(id$K, [parameters.displayMode, ...parameters.order]);

var getDisplayParam = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$K,
    examples: examples$K,
    fromBytes: fromBytes$M,
    headerSize: headerSize$K,
    id: id$K,
    isLoraOnly: isLoraOnly$K,
    maxSize: maxSize$K,
    name: name$K,
    toBytes: toBytes$M
});

const COMMAND_SIZE$3 = 16;
const MAX_COMMAND_SIZE$3 = COMMAND_SIZE$3 + PACKED_ENERGY_TYPE_SIZE;
const id$J = getEnergy$2;
const name$J = uplinkNames[getEnergy$2];
const headerSize$J = 2;
const accessLevel$J = READ_ONLY;
const maxSize$J = MAX_COMMAND_SIZE$3;
const isLoraOnly$J = false;
const examples$J = {
  'default A+ energy': {
    id: id$J,
    name: name$J,
    headerSize: headerSize$J,
    maxSize: maxSize$J,
    accessLevel: accessLevel$J,
    parameters: {
      energies: [40301230, 3334244, 2333, 2145623]
    },
    bytes: [0x0f, 0x10, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x32, 0xe0, 0x64, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  },
  'received A- energies': {
    id: id$J,
    name: name$J,
    headerSize: headerSize$J,
    maxSize: maxSize$J,
    accessLevel: accessLevel$J,
    parameters: {
      energyType: 2,
      energies: [40301230, null, 2333, 2145623]
    },
    bytes: [0x0f, 0x0d, 0xd2, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  }
};
const fromBytes$L = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  let parameters;
  if (bytes.length === COMMAND_SIZE$3) {
    parameters = {
      energies: buffer.getEnergies()
    };
  } else {
    parameters = buffer.getPackedEnergyWithType();
  }
  return parameters;
};
const toBytes$L = parameters => {
  let size = COMMAND_SIZE$3;
  if (parameters?.energyType) {
    const energiesNumber = parameters.energies.filter(energy => energy !== null).length;
    size = PACKED_ENERGY_TYPE_SIZE + energiesNumber * ENERGY_SIZE;
  }
  const buffer = new CommandBinaryBuffer$1(size);
  buffer.setPackedEnergyWithType(parameters);
  return toBytes$23(id$J, buffer.data);
};
const toJson$5 = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  if (!dlms) {
    return JSON.stringify(parameters);
  }
  const {
    energyType,
    energies
  } = parameters;
  const result = {};
  for (let i = 0; i < TARIFF_NUMBER$1; i += 1) {
    if (energies[i] || energies[i] === 0) {
      result[getObisByEnergy(energyType, i + 1)] = energies[i];
    }
  }
  return JSON.stringify(result);
};

var getEnergy = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$J,
    examples: examples$J,
    fromBytes: fromBytes$L,
    headerSize: headerSize$J,
    id: id$J,
    isLoraOnly: isLoraOnly$J,
    maxSize: maxSize$J,
    name: name$J,
    toBytes: toBytes$L,
    toJson: toJson$5
});

const convertAPlusEnergyToObis$1 = function () {
  let tariff = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  return '1.8.x'.replace('x', tariff.toString(10));
};
const convertEnergiesToDlms$1 = energy => {
  const dlms = {};
  for (let tariff = 0; tariff < TARIFF_NUMBER$1; tariff++) {
    const value = energy[tariff];
    if (value || value === 0) {
      dlms[convertAPlusEnergyToObis$1(tariff + 1)] = value;
    }
  }
  return dlms;
};
const COMMAND_SIZE$2 = 19;
const MAX_COMMAND_SIZE$2 = COMMAND_SIZE$2 + PACKED_ENERGY_TYPE_SIZE;
const id$I = getEnergyDayPrevious$2;
const name$I = uplinkNames[getEnergyDayPrevious$2];
const headerSize$I = 2;
const maxSize$I = MAX_COMMAND_SIZE$2;
const accessLevel$I = READ_ONLY;
const isLoraOnly$I = false;
const examples$I = {
  'simple response': {
    id: id$I,
    name: name$I,
    headerSize: headerSize$I,
    maxSize: maxSize$I,
    accessLevel: accessLevel$I,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      energies: [40301230, 3334244, 2333, 2145623]
    },
    bytes: [0x03, 0x13, 0x18, 0x03, 0x16, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x32, 0xe0, 0x64, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  },
  'response with A- energy by T1, T4 only': {
    id: id$I,
    name: name$I,
    headerSize: headerSize$I,
    maxSize: maxSize$I,
    accessLevel: accessLevel$I,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      energyType: 2,
      energies: [40301230, null, null, 2145623]
    },
    bytes: [0x03, 0x0c, 0x18, 0x03, 0x16, 0x92, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x20, 0xbd, 0x57]
  }
};
const fromBytes$K = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  let parameters;
  if (bytes.length === COMMAND_SIZE$2) {
    parameters = {
      date: buffer.getDate(),
      energies: buffer.getEnergies()
    };
  } else {
    parameters = {
      date: buffer.getDate(),
      ...buffer.getPackedEnergyWithType()
    };
  }
  return parameters;
};
const toBytes$K = parameters => {
  const buffer = new CommandBinaryBuffer$1(getPackedEnergiesWithDateSize(parameters));
  buffer.setDate(parameters.date);
  buffer.setPackedEnergyWithType(parameters);
  return toBytes$23(id$I, buffer.data);
};
const toJson$4 = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  const {
    date,
    energies
  } = parameters;
  const result = dlms ? {
    date,
    ...convertEnergiesToDlms$1(energies)
  } : parameters;
  return JSON.stringify(result);
};

var getEnergyDayPrevious = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$I,
    examples: examples$I,
    fromBytes: fromBytes$K,
    headerSize: headerSize$I,
    id: id$I,
    isLoraOnly: isLoraOnly$I,
    maxSize: maxSize$I,
    name: name$I,
    toBytes: toBytes$K,
    toJson: toJson$4
});

const COMMAND_SIZE$1 = 16;
const MAX_COMMAND_SIZE$1 = COMMAND_SIZE$1 + PACKED_ENERGY_TYPE_SIZE;
const id$H = getEnergyExport$2;
const name$H = uplinkNames[getEnergyExport$2];
const headerSize$H = 2;
const accessLevel$H = READ_ONLY;
const maxSize$H = MAX_COMMAND_SIZE$1;
const isLoraOnly$H = false;
const examples$H = {
  'default response': {
    id: id$H,
    name: name$H,
    headerSize: headerSize$H,
    maxSize: maxSize$H,
    accessLevel: accessLevel$H,
    parameters: {
      energies: [40301230, 3334244, 2333, 2145623]
    },
    bytes: [0x5b, 0x10, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x32, 0xe0, 0x64, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  },
  'received A- energies by tariffs': {
    id: id$H,
    name: name$H,
    headerSize: headerSize$H,
    maxSize: maxSize$H,
    accessLevel: accessLevel$H,
    parameters: {
      energyType: 2,
      energies: [40301230, null, 2333, 2145623]
    },
    bytes: [0x5b, 0x0d, 0xd2, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  }
};
const fromBytes$J = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  let parameters;
  if (bytes.length === COMMAND_SIZE$1) {
    parameters = {
      energies: buffer.getEnergies()
    };
  } else {
    parameters = buffer.getPackedEnergyWithType();
  }
  return parameters;
};
const toBytes$J = parameters => {
  let size = COMMAND_SIZE$1;
  if (parameters?.energyType) {
    const energiesNumber = parameters.energies.filter(energy => energy !== null).length;
    size = PACKED_ENERGY_TYPE_SIZE + energiesNumber * ENERGY_SIZE;
  }
  const buffer = new CommandBinaryBuffer$1(size);
  buffer.setPackedEnergyWithType(parameters);
  return toBytes$23(id$H, buffer.data);
};
const toJson$3 = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  if (!dlms) {
    return JSON.stringify(parameters);
  }
  const {
    energyType,
    energies
  } = parameters;
  const result = {};
  for (let i = 0; i < TARIFF_NUMBER$1; i += 1) {
    if (energies[i] || energies[i] === 0) {
      result[getObisByEnergy(energyType, i + 1)] = energies[i];
    }
  }
  return JSON.stringify(result);
};

var getEnergyExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$H,
    examples: examples$H,
    fromBytes: fromBytes$J,
    headerSize: headerSize$H,
    id: id$H,
    isLoraOnly: isLoraOnly$H,
    maxSize: maxSize$H,
    name: name$H,
    toBytes: toBytes$J,
    toJson: toJson$3
});

const convertAPlusEnergyToObis = function () {
  let tariff = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  return '1.8.x'.replace('x', tariff.toString(10));
};
const convertEnergiesToDlms = energy => {
  const dlms = {};
  for (let tariff = 0; tariff < TARIFF_NUMBER$1; tariff++) {
    const value = energy[tariff];
    if (value || value === 0) {
      dlms[convertAPlusEnergyToObis(tariff + 1)] = value;
    }
  }
  return dlms;
};
const COMMAND_SIZE = 19;
const MAX_COMMAND_SIZE = COMMAND_SIZE + PACKED_ENERGY_TYPE_SIZE;
const id$G = getEnergyExportDayPrevious$2;
const name$G = uplinkNames[getEnergyExportDayPrevious$2];
const headerSize$G = 2;
const maxSize$G = MAX_COMMAND_SIZE;
const accessLevel$G = READ_ONLY;
const isLoraOnly$G = false;
const examples$G = {
  'simple response': {
    id: id$G,
    name: name$G,
    headerSize: headerSize$G,
    maxSize: maxSize$G,
    accessLevel: accessLevel$G,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      energies: [40301230, 3334244, 2333, 2145623]
    },
    bytes: [0x50, 0x13, 0x18, 0x03, 0x16, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x32, 0xe0, 0x64, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  },
  'response with A- energy by T1, T4': {
    id: id$G,
    name: name$G,
    headerSize: headerSize$G,
    maxSize: maxSize$G,
    accessLevel: accessLevel$G,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      energyType: 2,
      energies: [40301230, null, null, 2145623]
    },
    bytes: [0x50, 0x0c, 0x18, 0x03, 0x16, 0x92, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x20, 0xbd, 0x57]
  }
};
const fromBytes$I = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  let parameters;
  if (bytes.length === COMMAND_SIZE) {
    parameters = {
      date: buffer.getDate(),
      energies: buffer.getEnergies()
    };
  } else {
    parameters = {
      date: buffer.getDate(),
      ...buffer.getPackedEnergyWithType()
    };
  }
  return parameters;
};
const toBytes$I = parameters => {
  const buffer = new CommandBinaryBuffer$1(getPackedEnergiesWithDateSize(parameters));
  buffer.setDate(parameters.date);
  buffer.setPackedEnergyWithType(parameters);
  return toBytes$23(id$G, buffer.data);
};
const toJson$2 = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  const {
    date,
    energies
  } = parameters;
  const result = dlms ? {
    date,
    ...convertEnergiesToDlms(energies)
  } : parameters;
  return JSON.stringify(result);
};

var getEnergyExportDayPrevious = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$G,
    examples: examples$G,
    fromBytes: fromBytes$I,
    headerSize: headerSize$G,
    id: id$G,
    isLoraOnly: isLoraOnly$G,
    maxSize: maxSize$G,
    name: name$G,
    toBytes: toBytes$I,
    toJson: toJson$2
});

const BODY_WITHOUT_EVENTS_SIZE = 3 + 1;
const EVENT_SIZE = 4;
const id$F = getEvents$2;
const name$F = uplinkNames[getEvents$2];
const headerSize$F = 2;
const accessLevel$F = READ_ONLY;
const maxSize$F = BODY_WITHOUT_EVENTS_SIZE + 255 * EVENT_SIZE;
const isLoraOnly$F = false;
const examples$F = {
  'simple response': {
    id: id$F,
    name: name$F,
    headerSize: headerSize$F,
    accessLevel: accessLevel$F,
    maxSize: maxSize$F,
    parameters: {
      date: {
        year: 23,
        month: 3,
        date: 12
      },
      eventsNumber: 2,
      events: [{
        hours: 1,
        minutes: 12,
        seconds: 33,
        event: 157,
        eventName: 'POWER_OVER_RELAY_OFF',
        power: [22, 25, 12, 143]
      }, {
        hours: 1,
        minutes: 12,
        seconds: 33,
        event: 121,
        eventName: 'TIME_CORRECT',
        newDate: {
          isSummerTime: false,
          seconds: 10,
          minutes: 22,
          hours: 3,
          day: 4,
          date: 12,
          month: 7,
          year: 24
        }
      }]
    },
    bytes: [0x33, 0x18, 0x17, 0x03, 0x0c, 0x02, 0x01, 0x0c, 0x21, 0x9d, 0x16, 0x19, 0x0c, 0x8f, 0x01, 0x0c, 0x21, 0x79, 0x00, 0x0a, 0x16, 0x03, 0x04, 0x0c, 0x07, 0x18]
  }
};
const getFromBytes$1 = BinaryBufferConstructor => bytes => {
  if (bytes.length > maxSize$F) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  const buffer = new BinaryBufferConstructor(bytes);
  const date = buffer.getDate();
  const eventsNumber = buffer.getUint8();
  const events = [];
  while (!buffer.isEmpty) {
    events.push(buffer.getEvent());
  }
  return {
    date,
    eventsNumber,
    events
  };
};
const getToBytes$1 = BinaryBufferConstructor => parameters => {
  const buffer = new BinaryBufferConstructor(maxSize$F);
  buffer.setDate(parameters.date);
  buffer.setUint8(parameters.eventsNumber);
  for (const event of parameters.events) {
    buffer.setEvent(event);
  }
  return toBytes$23(id$F, buffer.getBytesToOffset());
};
const fromBytes$H = getFromBytes$1(CommandBinaryBuffer$1);
const toBytes$H = getToBytes$1(CommandBinaryBuffer$1);

var getEvents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$F,
    examples: examples$F,
    fromBytes: fromBytes$H,
    getFromBytes: getFromBytes$1,
    getToBytes: getToBytes$1,
    headerSize: headerSize$F,
    id: id$F,
    isLoraOnly: isLoraOnly$F,
    maxSize: maxSize$F,
    name: name$F,
    toBytes: toBytes$H
});

const COMMAND_BODY_SIZE = 14;
const OLD_COMMAND_BODY_SIZE = 20;
const id$E = getEventsCounters$2;
const name$E = uplinkNames[getEventsCounters$2];
const headerSize$E = 2;
const accessLevel$E = READ_ONLY;
const maxSize$E = OLD_COMMAND_BODY_SIZE;
const isLoraOnly$E = false;
const examples$E = {
  'simple response': {
    id: id$E,
    name: name$E,
    headerSize: headerSize$E,
    accessLevel: accessLevel$E,
    maxSize: maxSize$E,
    parameters: {
      accessClosed: 22,
      accessError: 34,
      localParametersChange: 342,
      remoteParametersChange: 77,
      powerOff: 66,
      restart: 72,
      setClock: 298
    },
    bytes: [0x34, 0x0e, 0x00, 0x48, 0x00, 0x42, 0x01, 0x56, 0x00, 0x4d, 0x00, 0x22, 0x00, 0x16, 0x01, 0x2a]
  }
};
const fromBytes$G = bytes => {
  if (bytes.length !== COMMAND_BODY_SIZE && bytes.length !== OLD_COMMAND_BODY_SIZE) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  const buffer = new CommandBinaryBuffer$1(bytes);
  const restart = buffer.getUint16();
  const powerOff = buffer.getUint16();
  const localParametersChange = buffer.getUint16();
  const remoteParametersChange = buffer.getUint16();
  const accessError = buffer.getUint16();
  const accessClosed = buffer.getUint16();
  const setClock = buffer.getUint16();
  return {
    accessClosed,
    accessError,
    localParametersChange,
    remoteParametersChange,
    powerOff,
    restart,
    setClock
  };
};
const toBytes$G = parameters => {
  const buffer = new CommandBinaryBuffer$1(COMMAND_BODY_SIZE);
  buffer.setUint16(parameters.restart);
  buffer.setUint16(parameters.powerOff);
  buffer.setUint16(parameters.localParametersChange);
  buffer.setUint16(parameters.remoteParametersChange);
  buffer.setUint16(parameters.accessError);
  buffer.setUint16(parameters.accessClosed);
  buffer.setUint16(parameters.setClock);
  return toBytes$23(id$E, buffer.data);
};

var getEventsCounters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$E,
    examples: examples$E,
    fromBytes: fromBytes$G,
    headerSize: headerSize$E,
    id: id$E,
    isLoraOnly: isLoraOnly$E,
    maxSize: maxSize$E,
    name: name$E,
    toBytes: toBytes$G
});

const id$D = getEventStatus$2;
const name$D = uplinkNames[getEventStatus$2];
const headerSize$D = 2;
const accessLevel$D = READ_ONLY;
const maxSize$D = 2;
const isLoraOnly$D = false;
const examples$D = {
  'simple response': {
    id: id$D,
    name: name$D,
    headerSize: headerSize$D,
    accessLevel: accessLevel$D,
    maxSize: maxSize$D,
    parameters: {
      CASE_OPEN: true,
      MAGNETIC_ON: false,
      PARAMETERS_UPDATE_REMOTE: true,
      PARAMETERS_UPDATE_LOCAL: false,
      RESTART: false,
      ERROR_ACCESS: false,
      TIME_SET: false,
      TIME_CORRECT: true,
      DEVICE_FAILURE: false,
      CASE_TERMINAL_OPEN: false,
      CASE_MODULE_OPEN: false,
      TARIFF_TABLE_SET: false,
      TARIFF_TABLE_GET: true,
      PROTECTION_RESET_EM: false,
      PROTECTION_RESET_MAGNETIC: false
    },
    bytes: [0x01, 0x02, 0x85, 0x10]
  }
};
const fromBytes$F = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes, true);
  return buffer.getEventStatus();
};
const toBytes$F = eventStatus => {
  const buffer = new CommandBinaryBuffer$1(maxSize$D, true);
  buffer.setEventStatus(eventStatus);
  return toBytes$23(id$D, buffer.data);
};

var getEventStatus = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$D,
    examples: examples$D,
    fromBytes: fromBytes$F,
    headerSize: headerSize$D,
    id: id$D,
    isLoraOnly: isLoraOnly$D,
    maxSize: maxSize$D,
    name: name$D,
    toBytes: toBytes$F
});

const id$C = getExtendedCurrentValues$2;
const name$C = uplinkNames[getExtendedCurrentValues$2];
const headerSize$C = 2;
const maxSize$C = 4;
const accessLevel$C = READ_ONLY;
const isLoraOnly$C = false;
const examples$C = {
  'simple response': {
    id: id$C,
    name: name$C,
    headerSize: headerSize$C,
    maxSize: maxSize$C,
    accessLevel: accessLevel$C,
    parameters: {
      temperature: 67,
      frequency: 60
    },
    bytes: [0x3a, 0x04, 0x00, 0x43, 0x00, 0x3c]
  }
};
const fromBytes$E = data => {
  const buffer = new CommandBinaryBuffer$1(data);
  return {
    temperature: buffer.getInt16(),
    frequency: buffer.getInt16()
  };
};
const toBytes$E = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$C);
  buffer.setInt16(parameters.temperature);
  buffer.setInt16(parameters.frequency);
  return toBytes$23(id$C, buffer.data);
};
const toJson$1 = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  const {
    temperature,
    frequency
  } = parameters;
  const result = dlms ? {
    '0.11.0': temperature,
    '14.7.0': frequency
  } : parameters;
  return JSON.stringify(result);
};

var getExtendedCurrentValues = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$C,
    examples: examples$C,
    fromBytes: fromBytes$E,
    headerSize: headerSize$C,
    id: id$C,
    isLoraOnly: isLoraOnly$C,
    maxSize: maxSize$C,
    name: name$C,
    toBytes: toBytes$E,
    toJson: toJson$1
});

const id$B = getExtendedCurrentValues2$2;
const name$B = uplinkNames[getExtendedCurrentValues2$2];
const headerSize$B = 2;
const maxSize$B = 7;
const accessLevel$B = READ_ONLY;
const isLoraOnly$B = false;
const examples$B = {
  'simple response': {
    id: id$B,
    name: name$B,
    headerSize: headerSize$B,
    maxSize: maxSize$B,
    accessLevel: accessLevel$B,
    parameters: {
      uBattery: 358,
      relayStatus: {
        RELAY_STATE: true,
        RELAY_UBAD: false,
        RELAY_UNEQ_CURRENT: false,
        RELAY_OFF_CENTER: true,
        RELAY_IMAX: true,
        RELAY_PMAX: false
      },
      relayStatus2: {
        RELAY_COSFI: true,
        RELAY_SALDO_OFF_FLAG: false,
        RELAY_UNEQUIL_CURRENT_OFF: false,
        RELAY_BIPOLAR_POWER_OFF: false,
        RELAY_SALDO_OFF_ON_MAX_POWER: false,
        RELAY_HARD_ST1: true
      },
      status1: {
        MAXVA: true,
        MINVA: false,
        MAXT: false,
        MINT: true,
        MAXF: true,
        MINF: false,
        MAXIA: true,
        MAXP: false
      },
      status2: {
        MAX_POWER_SALDO: false,
        BATTERY_VBAT_BAD: true,
        CLOCK_UNSET: true,
        MIN_COS_FI: false
      },
      status3: {
        UNEQUIL_CURRENT: true,
        BIPOLAR_POWER: false,
        POWER_A_NEGATIVE: false,
        POWER_B_NEGATIVE: true
      }
    },
    bytes: [0x2d, 0x07, 0x01, 0x66, 0x61, 0x21, 0x59, 0x0a, 0x81]
  }
};
const fromBytes$D = data => {
  const buffer = new CommandBinaryBuffer$1(data);
  return buffer.getExtendedCurrentValues2();
};
const toBytes$D = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$B);
  buffer.setExtendedCurrentValues2(parameters);
  return toBytes$23(id$B, buffer.data);
};

var getExtendedCurrentValues2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$B,
    examples: examples$B,
    fromBytes: fromBytes$D,
    headerSize: headerSize$B,
    id: id$B,
    isLoraOnly: isLoraOnly$B,
    maxSize: maxSize$B,
    name: name$B,
    toBytes: toBytes$D
});

const id$A = getHalfHourDemand$2;
const name$A = uplinkNames[getHalfHourDemand$2];
const headerSize$A = 2;
const maxSize$A = MAX_HALF_HOUR_COMMAND_SIZE;
const accessLevel$A = READ_ONLY;
const isLoraOnly$A = false;
const examples$A = {
  'simple response': {
    id: id$A,
    name: name$A,
    headerSize: headerSize$A,
    maxSize: maxSize$A,
    accessLevel: accessLevel$A,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      periods: [{
        tariff: 1,
        energy: 1111
      }, {
        tariff: 1,
        energy: 1222
      }, {
        tariff: 1,
        energy: 1333
      }, {
        tariff: 1,
        energy: 1444
      }, {
        tariff: 1,
        energy: 1555
      }, {
        tariff: 1,
        energy: 1666
      }, {
        tariff: 1,
        energy: 1777
      }, {
        tariff: 1,
        energy: 1888
      }, {
        tariff: 1,
        energy: 1999
      }, {
        tariff: 1,
        energy: 2000
      }, {
        tariff: 1,
        energy: 2111
      }, {
        tariff: 1,
        energy: 2222
      }, {
        tariff: 1,
        energy: 2333
      }, {
        tariff: 1,
        energy: 2444
      }, {
        tariff: 1,
        energy: 2555
      }, {
        tariff: 1,
        energy: 2666
      }, {
        tariff: 1,
        energy: 2777
      }, {
        tariff: 1,
        energy: 2888
      }, {
        tariff: 1,
        energy: 2999
      }, {
        tariff: 1,
        energy: 3000
      }, {
        tariff: 1,
        energy: 3111
      }, {
        tariff: 1,
        energy: 3222
      }, {
        tariff: 1,
        energy: 3333
      }, {
        tariff: 1,
        energy: 3444
      }, {
        tariff: 1,
        energy: 3555
      }, {
        tariff: 1,
        energy: 3666
      }, {
        tariff: 1,
        energy: 3777
      }, {
        tariff: 1,
        energy: 3888
      }, {
        tariff: 1,
        energy: 3999
      }, {
        tariff: 1,
        energy: 4000
      }, {
        tariff: 1,
        energy: 4111
      }, {
        tariff: 1,
        energy: 4222
      }, {
        tariff: 1,
        energy: 4333
      }, {
        tariff: 1,
        energy: 4444
      }, {
        tariff: 1,
        energy: 4555
      }, {
        tariff: 1,
        energy: 4666
      }, {
        tariff: 1,
        energy: 4777
      }, {
        tariff: 1,
        energy: 4888
      }, {
        tariff: 1,
        energy: 4999
      }, {
        tariff: 1,
        energy: 5000
      }, {
        tariff: 1,
        energy: 5222
      }, {
        tariff: 1,
        energy: 5333
      }, {
        tariff: 1,
        energy: 5444
      }, {
        tariff: 1,
        energy: 5555
      }, {
        tariff: 1,
        energy: 5666
      }, {
        tariff: 1,
        energy: 5777
      }, {
        tariff: 1,
        energy: 5888
      }, {
        tariff: 1,
        energy: 5999
      }]
    },
    bytes: [0x15, 0x63, 0x18, 0x03, 0x16, 0x44, 0x57, 0x44, 0xc6, 0x45, 0x35, 0x45, 0xa4, 0x46, 0x13, 0x46, 0x82, 0x46, 0xf1, 0x47, 0x60, 0x47, 0xcf, 0x47, 0xd0, 0x48, 0x3f, 0x48, 0xae, 0x49, 0x1d, 0x49, 0x8c, 0x49, 0xfb, 0x4a, 0x6a, 0x4a, 0xd9, 0x4b, 0x48, 0x4b, 0xb7, 0x4b, 0xb8, 0x4c, 0x27, 0x4c, 0x96, 0x4d, 0x05, 0x4d, 0x74, 0x4d, 0xe3, 0x4e, 0x52, 0x4e, 0xc1, 0x4f, 0x30, 0x4f, 0x9f, 0x4f, 0xa0, 0x50, 0x0f, 0x50, 0x7e, 0x50, 0xed, 0x51, 0x5c, 0x51, 0xcb, 0x52, 0x3a, 0x52, 0xa9, 0x53, 0x18, 0x53, 0x87, 0x53, 0x88, 0x54, 0x66, 0x54, 0xd5, 0x55, 0x44, 0x55, 0xb3, 0x56, 0x22, 0x56, 0x91, 0x57, 0x00, 0x57, 0x6f]
  },
  'response with no periods': {
    id: id$A,
    name: name$A,
    headerSize: headerSize$A,
    maxSize: maxSize$A,
    accessLevel: accessLevel$A,
    parameters: {
      date: {
        year: 22,
        month: 6,
        date: 18
      },
      periods: [{
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }]
    },
    bytes: [0x15, 0x63, 0x16, 0x06, 0x12, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
  },
  'response for day when DST start/end': {
    id: id$A,
    name: name$A,
    headerSize: headerSize$A,
    maxSize: maxSize$A,
    accessLevel: accessLevel$A,
    parameters: {
      date: {
        year: 24,
        month: 2,
        date: 31
      },
      periods: [{
        tariff: 1,
        energy: 1111
      }, {
        tariff: 1,
        energy: 1222
      }, {
        tariff: 1,
        energy: 1333
      }, {
        tariff: 1,
        energy: 1444
      }, {
        tariff: 1,
        energy: 1555
      }, {
        tariff: 1,
        energy: 1666
      }, {
        tariff: 1,
        energy: 1777
      }, {
        tariff: 1,
        energy: 1888
      }, {
        tariff: 1,
        energy: 1999
      }, {
        tariff: 1,
        energy: 2000
      }, {
        tariff: 1,
        energy: 2111
      }, {
        tariff: 1,
        energy: 2222
      }, {
        tariff: 1,
        energy: 2333
      }, {
        tariff: 1,
        energy: 2444
      }, {
        tariff: 1,
        energy: 2555
      }, {
        tariff: 1,
        energy: 2666
      }, {
        tariff: 1,
        energy: 2777
      }, {
        tariff: 1,
        energy: 2888
      }, {
        tariff: 1,
        energy: 2999
      }, {
        tariff: 1,
        energy: 3000
      }, {
        tariff: 1,
        energy: 3111
      }, {
        tariff: 1,
        energy: 3222
      }, {
        tariff: 1,
        energy: 3333
      }, {
        tariff: 1,
        energy: 3444
      }, {
        tariff: 1,
        energy: 3555
      }, {
        tariff: 1,
        energy: 3666
      }, {
        tariff: 1,
        energy: 3777
      }, {
        tariff: 1,
        energy: 3888
      }, {
        tariff: 1,
        energy: 3999
      }, {
        tariff: 1,
        energy: 4000
      }, {
        tariff: 1,
        energy: 4111
      }, {
        tariff: 1,
        energy: 4222
      }, {
        tariff: 1,
        energy: 4333
      }, {
        tariff: 1,
        energy: 4444
      }, {
        tariff: 1,
        energy: 4555
      }, {
        tariff: 1,
        energy: 4666
      }, {
        tariff: 1,
        energy: 4777
      }, {
        tariff: 1,
        energy: 4888
      }, {
        tariff: 1,
        energy: 4999
      }, {
        tariff: 1,
        energy: 5000
      }, {
        tariff: 1,
        energy: 5222
      }, {
        tariff: 1,
        energy: 5333
      }, {
        tariff: 1,
        energy: 5444
      }, {
        tariff: 1,
        energy: 5555
      }, {
        tariff: 1,
        energy: 5666
      }, {
        tariff: 1,
        energy: 5777
      }, {
        tariff: 1,
        energy: 5888
      }, {
        tariff: 1,
        energy: 5999
      }, {
        tariff: 1,
        energy: 6000
      }, {
        tariff: 1,
        energy: 6111
      }],
      dstHour: 3
    },
    bytes: [0x15, 0x68, 0x18, 0x02, 0x1f, 0x44, 0x57, 0x44, 0xc6, 0x45, 0x35, 0x45, 0xa4, 0x46, 0x13, 0x46, 0x82, 0x46, 0xf1, 0x47, 0x60, 0x47, 0xcf, 0x47, 0xd0, 0x48, 0x3f, 0x48, 0xae, 0x49, 0x1d, 0x49, 0x8c, 0x49, 0xfb, 0x4a, 0x6a, 0x4a, 0xd9, 0x4b, 0x48, 0x4b, 0xb7, 0x4b, 0xb8, 0x4c, 0x27, 0x4c, 0x96, 0x4d, 0x05, 0x4d, 0x74, 0x4d, 0xe3, 0x4e, 0x52, 0x4e, 0xc1, 0x4f, 0x30, 0x4f, 0x9f, 0x4f, 0xa0, 0x50, 0x0f, 0x50, 0x7e, 0x50, 0xed, 0x51, 0x5c, 0x51, 0xcb, 0x52, 0x3a, 0x52, 0xa9, 0x53, 0x18, 0x53, 0x87, 0x53, 0x88, 0x54, 0x66, 0x54, 0xd5, 0x55, 0x44, 0x55, 0xb3, 0x56, 0x22, 0x56, 0x91, 0x57, 0x00, 0x57, 0x6f, 0x57, 0x70, 0x57, 0xdf, 0x03]
  }
};
const fromBytes$C = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  const hasDst = bytes.length > MIN_HALF_HOUR_COMMAND_SIZE;
  const date = buffer.getDate();
  const periods = buffer.getEnergyPeriods(hasDst ? MAX_HALF_HOUR_PERIODS : MIN_HALF_HOUR_PERIODS);
  if (hasDst) {
    return {
      date,
      periods,
      dstHour: buffer.getUint8()
    };
  }
  return {
    date,
    periods
  };
};
const toBytes$C = parameters => {
  const buffer = new CommandBinaryBuffer$1(parameters.periods.length > MIN_HALF_HOUR_PERIODS ? MAX_HALF_HOUR_COMMAND_SIZE : MIN_HALF_HOUR_COMMAND_SIZE);
  buffer.setDate(parameters.date);
  buffer.setEnergyPeriods(parameters.periods);
  if (parameters.dstHour) {
    buffer.setUint8(parameters.dstHour);
  }
  return toBytes$23(id$A, buffer.data);
};

var getHalfHourDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$A,
    examples: examples$A,
    fromBytes: fromBytes$C,
    headerSize: headerSize$A,
    id: id$A,
    isLoraOnly: isLoraOnly$A,
    maxSize: maxSize$A,
    name: name$A,
    toBytes: toBytes$C
});

const id$z = getHalfHourDemandExport$2;
const name$z = uplinkNames[getHalfHourDemandExport$2];
const headerSize$z = 2;
const maxSize$z = MAX_HALF_HOUR_COMMAND_SIZE;
const accessLevel$z = READ_ONLY;
const isLoraOnly$z = false;
const examples$z = {
  'simple response': {
    id: id$z,
    name: name$z,
    headerSize: headerSize$z,
    maxSize: maxSize$z,
    accessLevel: accessLevel$z,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      periods: [{
        tariff: 1,
        energy: 1111
      }, {
        tariff: 1,
        energy: 1222
      }, {
        tariff: 1,
        energy: 1333
      }, {
        tariff: 1,
        energy: 1444
      }, {
        tariff: 1,
        energy: 1555
      }, {
        tariff: 1,
        energy: 1666
      }, {
        tariff: 1,
        energy: 1777
      }, {
        tariff: 1,
        energy: 1888
      }, {
        tariff: 1,
        energy: 1999
      }, {
        tariff: 1,
        energy: 2000
      }, {
        tariff: 1,
        energy: 2111
      }, {
        tariff: 1,
        energy: 2222
      }, {
        tariff: 1,
        energy: 2333
      }, {
        tariff: 1,
        energy: 2444
      }, {
        tariff: 1,
        energy: 2555
      }, {
        tariff: 1,
        energy: 2666
      }, {
        tariff: 1,
        energy: 2777
      }, {
        tariff: 1,
        energy: 2888
      }, {
        tariff: 1,
        energy: 2999
      }, {
        tariff: 1,
        energy: 3000
      }, {
        tariff: 1,
        energy: 3111
      }, {
        tariff: 1,
        energy: 3222
      }, {
        tariff: 1,
        energy: 3333
      }, {
        tariff: 1,
        energy: 3444
      }, {
        tariff: 1,
        energy: 3555
      }, {
        tariff: 1,
        energy: 3666
      }, {
        tariff: 1,
        energy: 3777
      }, {
        tariff: 1,
        energy: 3888
      }, {
        tariff: 1,
        energy: 3999
      }, {
        tariff: 1,
        energy: 4000
      }, {
        tariff: 1,
        energy: 4111
      }, {
        tariff: 1,
        energy: 4222
      }, {
        tariff: 1,
        energy: 4333
      }, {
        tariff: 1,
        energy: 4444
      }, {
        tariff: 1,
        energy: 4555
      }, {
        tariff: 1,
        energy: 4666
      }, {
        tariff: 1,
        energy: 4777
      }, {
        tariff: 1,
        energy: 4888
      }, {
        tariff: 1,
        energy: 4999
      }, {
        tariff: 1,
        energy: 5000
      }, {
        tariff: 1,
        energy: 5222
      }, {
        tariff: 1,
        energy: 5333
      }, {
        tariff: 1,
        energy: 5444
      }, {
        tariff: 1,
        energy: 5555
      }, {
        tariff: 1,
        energy: 5666
      }, {
        tariff: 1,
        energy: 5777
      }, {
        tariff: 1,
        energy: 5888
      }, {
        tariff: 1,
        energy: 5999
      }]
    },
    bytes: [0x53, 0x63, 0x18, 0x03, 0x16, 0x44, 0x57, 0x44, 0xc6, 0x45, 0x35, 0x45, 0xa4, 0x46, 0x13, 0x46, 0x82, 0x46, 0xf1, 0x47, 0x60, 0x47, 0xcf, 0x47, 0xd0, 0x48, 0x3f, 0x48, 0xae, 0x49, 0x1d, 0x49, 0x8c, 0x49, 0xfb, 0x4a, 0x6a, 0x4a, 0xd9, 0x4b, 0x48, 0x4b, 0xb7, 0x4b, 0xb8, 0x4c, 0x27, 0x4c, 0x96, 0x4d, 0x05, 0x4d, 0x74, 0x4d, 0xe3, 0x4e, 0x52, 0x4e, 0xc1, 0x4f, 0x30, 0x4f, 0x9f, 0x4f, 0xa0, 0x50, 0x0f, 0x50, 0x7e, 0x50, 0xed, 0x51, 0x5c, 0x51, 0xcb, 0x52, 0x3a, 0x52, 0xa9, 0x53, 0x18, 0x53, 0x87, 0x53, 0x88, 0x54, 0x66, 0x54, 0xd5, 0x55, 0x44, 0x55, 0xb3, 0x56, 0x22, 0x56, 0x91, 0x57, 0x00, 0x57, 0x6f]
  },
  'response with no periods': {
    id: id$z,
    name: name$z,
    headerSize: headerSize$z,
    maxSize: maxSize$z,
    accessLevel: accessLevel$z,
    parameters: {
      date: {
        year: 22,
        month: 6,
        date: 18
      },
      periods: [{
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }]
    },
    bytes: [0x53, 0x63, 0x16, 0x06, 0x12, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
  },
  'response for day when DST start/end': {
    id: id$z,
    name: name$z,
    headerSize: headerSize$z,
    maxSize: maxSize$z,
    accessLevel: accessLevel$z,
    parameters: {
      date: {
        year: 24,
        month: 2,
        date: 31
      },
      periods: [{
        tariff: 1,
        energy: 1111
      }, {
        tariff: 1,
        energy: 1222
      }, {
        tariff: 1,
        energy: 1333
      }, {
        tariff: 1,
        energy: 1444
      }, {
        tariff: 1,
        energy: 1555
      }, {
        tariff: 1,
        energy: 1666
      }, {
        tariff: 1,
        energy: 1777
      }, {
        tariff: 1,
        energy: 1888
      }, {
        tariff: 1,
        energy: 1999
      }, {
        tariff: 1,
        energy: 2000
      }, {
        tariff: 1,
        energy: 2111
      }, {
        tariff: 1,
        energy: 2222
      }, {
        tariff: 1,
        energy: 2333
      }, {
        tariff: 1,
        energy: 2444
      }, {
        tariff: 1,
        energy: 2555
      }, {
        tariff: 1,
        energy: 2666
      }, {
        tariff: 1,
        energy: 2777
      }, {
        tariff: 1,
        energy: 2888
      }, {
        tariff: 1,
        energy: 2999
      }, {
        tariff: 1,
        energy: 3000
      }, {
        tariff: 1,
        energy: 3111
      }, {
        tariff: 1,
        energy: 3222
      }, {
        tariff: 1,
        energy: 3333
      }, {
        tariff: 1,
        energy: 3444
      }, {
        tariff: 1,
        energy: 3555
      }, {
        tariff: 1,
        energy: 3666
      }, {
        tariff: 1,
        energy: 3777
      }, {
        tariff: 1,
        energy: 3888
      }, {
        tariff: 1,
        energy: 3999
      }, {
        tariff: 1,
        energy: 4000
      }, {
        tariff: 1,
        energy: 4111
      }, {
        tariff: 1,
        energy: 4222
      }, {
        tariff: 1,
        energy: 4333
      }, {
        tariff: 1,
        energy: 4444
      }, {
        tariff: 1,
        energy: 4555
      }, {
        tariff: 1,
        energy: 4666
      }, {
        tariff: 1,
        energy: 4777
      }, {
        tariff: 1,
        energy: 4888
      }, {
        tariff: 1,
        energy: 4999
      }, {
        tariff: 1,
        energy: 5000
      }, {
        tariff: 1,
        energy: 5222
      }, {
        tariff: 1,
        energy: 5333
      }, {
        tariff: 1,
        energy: 5444
      }, {
        tariff: 1,
        energy: 5555
      }, {
        tariff: 1,
        energy: 5666
      }, {
        tariff: 1,
        energy: 5777
      }, {
        tariff: 1,
        energy: 5888
      }, {
        tariff: 1,
        energy: 5999
      }, {
        tariff: 1,
        energy: 6000
      }, {
        tariff: 1,
        energy: 6111
      }],
      dstHour: 3
    },
    bytes: [0x53, 0x68, 0x18, 0x02, 0x1f, 0x44, 0x57, 0x44, 0xc6, 0x45, 0x35, 0x45, 0xa4, 0x46, 0x13, 0x46, 0x82, 0x46, 0xf1, 0x47, 0x60, 0x47, 0xcf, 0x47, 0xd0, 0x48, 0x3f, 0x48, 0xae, 0x49, 0x1d, 0x49, 0x8c, 0x49, 0xfb, 0x4a, 0x6a, 0x4a, 0xd9, 0x4b, 0x48, 0x4b, 0xb7, 0x4b, 0xb8, 0x4c, 0x27, 0x4c, 0x96, 0x4d, 0x05, 0x4d, 0x74, 0x4d, 0xe3, 0x4e, 0x52, 0x4e, 0xc1, 0x4f, 0x30, 0x4f, 0x9f, 0x4f, 0xa0, 0x50, 0x0f, 0x50, 0x7e, 0x50, 0xed, 0x51, 0x5c, 0x51, 0xcb, 0x52, 0x3a, 0x52, 0xa9, 0x53, 0x18, 0x53, 0x87, 0x53, 0x88, 0x54, 0x66, 0x54, 0xd5, 0x55, 0x44, 0x55, 0xb3, 0x56, 0x22, 0x56, 0x91, 0x57, 0x00, 0x57, 0x6f, 0x57, 0x70, 0x57, 0xdf, 0x03]
  }
};
const fromBytes$B = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  const hasDst = bytes.length > MIN_HALF_HOUR_COMMAND_SIZE;
  const date = buffer.getDate();
  const periods = buffer.getEnergyPeriods(hasDst ? MAX_HALF_HOUR_PERIODS : MIN_HALF_HOUR_PERIODS);
  if (hasDst) {
    return {
      date,
      periods,
      dstHour: buffer.getUint8()
    };
  }
  return {
    date,
    periods
  };
};
const toBytes$B = parameters => {
  const buffer = new CommandBinaryBuffer$1(parameters.periods.length > MIN_HALF_HOUR_PERIODS ? MAX_HALF_HOUR_COMMAND_SIZE : MIN_HALF_HOUR_COMMAND_SIZE);
  buffer.setDate(parameters.date);
  buffer.setEnergyPeriods(parameters.periods);
  if (parameters.dstHour) {
    buffer.setUint8(parameters.dstHour);
  }
  return toBytes$23(id$z, buffer.data);
};

var getHalfHourDemandExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$z,
    examples: examples$z,
    fromBytes: fromBytes$B,
    headerSize: headerSize$z,
    id: id$z,
    isLoraOnly: isLoraOnly$z,
    maxSize: maxSize$z,
    name: name$z,
    toBytes: toBytes$B
});

const id$y = getHalfHourDemandPrevious$2;
const name$y = uplinkNames[getHalfHourDemandPrevious$2];
const headerSize$y = 2;
const maxSize$y = MAX_HALF_HOUR_COMMAND_SIZE;
const accessLevel$y = READ_ONLY;
const isLoraOnly$y = false;
const examples$y = {
  'simple response': {
    id: id$y,
    name: name$y,
    headerSize: headerSize$y,
    maxSize: maxSize$y,
    accessLevel: accessLevel$y,
    parameters: {
      date: {
        year: 24,
        month: 3,
        date: 22
      },
      periods: [{
        tariff: 1,
        energy: 1111
      }, {
        tariff: 1,
        energy: 1222
      }, {
        tariff: 1,
        energy: 1333
      }, {
        tariff: 1,
        energy: 1444
      }, {
        tariff: 1,
        energy: 1555
      }, {
        tariff: 1,
        energy: 1666
      }, {
        tariff: 1,
        energy: 1777
      }, {
        tariff: 1,
        energy: 1888
      }, {
        tariff: 1,
        energy: 1999
      }, {
        tariff: 1,
        energy: 2000
      }, {
        tariff: 1,
        energy: 2111
      }, {
        tariff: 1,
        energy: 2222
      }, {
        tariff: 1,
        energy: 2333
      }, {
        tariff: 1,
        energy: 2444
      }, {
        tariff: 1,
        energy: 2555
      }, {
        tariff: 1,
        energy: 2666
      }, {
        tariff: 1,
        energy: 2777
      }, {
        tariff: 1,
        energy: 2888
      }, {
        tariff: 1,
        energy: 2999
      }, {
        tariff: 1,
        energy: 3000
      }, {
        tariff: 1,
        energy: 3111
      }, {
        tariff: 1,
        energy: 3222
      }, {
        tariff: 1,
        energy: 3333
      }, {
        tariff: 1,
        energy: 3444
      }, {
        tariff: 1,
        energy: 3555
      }, {
        tariff: 1,
        energy: 3666
      }, {
        tariff: 1,
        energy: 3777
      }, {
        tariff: 1,
        energy: 3888
      }, {
        tariff: 1,
        energy: 3999
      }, {
        tariff: 1,
        energy: 4000
      }, {
        tariff: 1,
        energy: 4111
      }, {
        tariff: 1,
        energy: 4222
      }, {
        tariff: 1,
        energy: 4333
      }, {
        tariff: 1,
        energy: 4444
      }, {
        tariff: 1,
        energy: 4555
      }, {
        tariff: 1,
        energy: 4666
      }, {
        tariff: 1,
        energy: 4777
      }, {
        tariff: 1,
        energy: 4888
      }, {
        tariff: 1,
        energy: 4999
      }, {
        tariff: 1,
        energy: 5000
      }, {
        tariff: 1,
        energy: 5222
      }, {
        tariff: 1,
        energy: 5333
      }, {
        tariff: 1,
        energy: 5444
      }, {
        tariff: 1,
        energy: 5555
      }, {
        tariff: 1,
        energy: 5666
      }, {
        tariff: 1,
        energy: 5777
      }, {
        tariff: 1,
        energy: 5888
      }, {
        tariff: 1,
        energy: 5999
      }]
    },
    bytes: [0x4b, 0x63, 0x18, 0x03, 0x16, 0x44, 0x57, 0x44, 0xc6, 0x45, 0x35, 0x45, 0xa4, 0x46, 0x13, 0x46, 0x82, 0x46, 0xf1, 0x47, 0x60, 0x47, 0xcf, 0x47, 0xd0, 0x48, 0x3f, 0x48, 0xae, 0x49, 0x1d, 0x49, 0x8c, 0x49, 0xfb, 0x4a, 0x6a, 0x4a, 0xd9, 0x4b, 0x48, 0x4b, 0xb7, 0x4b, 0xb8, 0x4c, 0x27, 0x4c, 0x96, 0x4d, 0x05, 0x4d, 0x74, 0x4d, 0xe3, 0x4e, 0x52, 0x4e, 0xc1, 0x4f, 0x30, 0x4f, 0x9f, 0x4f, 0xa0, 0x50, 0x0f, 0x50, 0x7e, 0x50, 0xed, 0x51, 0x5c, 0x51, 0xcb, 0x52, 0x3a, 0x52, 0xa9, 0x53, 0x18, 0x53, 0x87, 0x53, 0x88, 0x54, 0x66, 0x54, 0xd5, 0x55, 0x44, 0x55, 0xb3, 0x56, 0x22, 0x56, 0x91, 0x57, 0x00, 0x57, 0x6f]
  },
  'response with no periods': {
    id: id$y,
    name: name$y,
    headerSize: headerSize$y,
    maxSize: maxSize$y,
    accessLevel: accessLevel$y,
    parameters: {
      date: {
        year: 22,
        month: 6,
        date: 18
      },
      periods: [{
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }, {
        tariff: undefined,
        energy: undefined
      }]
    },
    bytes: [0x4b, 0x63, 0x16, 0x06, 0x12, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]
  },
  'response for day when DST start/end': {
    id: id$y,
    name: name$y,
    headerSize: headerSize$y,
    maxSize: maxSize$y,
    accessLevel: accessLevel$y,
    parameters: {
      date: {
        year: 24,
        month: 2,
        date: 31
      },
      periods: [{
        tariff: 1,
        energy: 1111
      }, {
        tariff: 1,
        energy: 1222
      }, {
        tariff: 1,
        energy: 1333
      }, {
        tariff: 1,
        energy: 1444
      }, {
        tariff: 1,
        energy: 1555
      }, {
        tariff: 1,
        energy: 1666
      }, {
        tariff: 1,
        energy: 1777
      }, {
        tariff: 1,
        energy: 1888
      }, {
        tariff: 1,
        energy: 1999
      }, {
        tariff: 1,
        energy: 2000
      }, {
        tariff: 1,
        energy: 2111
      }, {
        tariff: 1,
        energy: 2222
      }, {
        tariff: 1,
        energy: 2333
      }, {
        tariff: 1,
        energy: 2444
      }, {
        tariff: 1,
        energy: 2555
      }, {
        tariff: 1,
        energy: 2666
      }, {
        tariff: 1,
        energy: 2777
      }, {
        tariff: 1,
        energy: 2888
      }, {
        tariff: 1,
        energy: 2999
      }, {
        tariff: 1,
        energy: 3000
      }, {
        tariff: 1,
        energy: 3111
      }, {
        tariff: 1,
        energy: 3222
      }, {
        tariff: 1,
        energy: 3333
      }, {
        tariff: 1,
        energy: 3444
      }, {
        tariff: 1,
        energy: 3555
      }, {
        tariff: 1,
        energy: 3666
      }, {
        tariff: 1,
        energy: 3777
      }, {
        tariff: 1,
        energy: 3888
      }, {
        tariff: 1,
        energy: 3999
      }, {
        tariff: 1,
        energy: 4000
      }, {
        tariff: 1,
        energy: 4111
      }, {
        tariff: 1,
        energy: 4222
      }, {
        tariff: 1,
        energy: 4333
      }, {
        tariff: 1,
        energy: 4444
      }, {
        tariff: 1,
        energy: 4555
      }, {
        tariff: 1,
        energy: 4666
      }, {
        tariff: 1,
        energy: 4777
      }, {
        tariff: 1,
        energy: 4888
      }, {
        tariff: 1,
        energy: 4999
      }, {
        tariff: 1,
        energy: 5000
      }, {
        tariff: 1,
        energy: 5222
      }, {
        tariff: 1,
        energy: 5333
      }, {
        tariff: 1,
        energy: 5444
      }, {
        tariff: 1,
        energy: 5555
      }, {
        tariff: 1,
        energy: 5666
      }, {
        tariff: 1,
        energy: 5777
      }, {
        tariff: 1,
        energy: 5888
      }, {
        tariff: 1,
        energy: 5999
      }, {
        tariff: 1,
        energy: 6000
      }, {
        tariff: 1,
        energy: 6111
      }],
      dstHour: 3
    },
    bytes: [0x4b, 0x68, 0x18, 0x02, 0x1f, 0x44, 0x57, 0x44, 0xc6, 0x45, 0x35, 0x45, 0xa4, 0x46, 0x13, 0x46, 0x82, 0x46, 0xf1, 0x47, 0x60, 0x47, 0xcf, 0x47, 0xd0, 0x48, 0x3f, 0x48, 0xae, 0x49, 0x1d, 0x49, 0x8c, 0x49, 0xfb, 0x4a, 0x6a, 0x4a, 0xd9, 0x4b, 0x48, 0x4b, 0xb7, 0x4b, 0xb8, 0x4c, 0x27, 0x4c, 0x96, 0x4d, 0x05, 0x4d, 0x74, 0x4d, 0xe3, 0x4e, 0x52, 0x4e, 0xc1, 0x4f, 0x30, 0x4f, 0x9f, 0x4f, 0xa0, 0x50, 0x0f, 0x50, 0x7e, 0x50, 0xed, 0x51, 0x5c, 0x51, 0xcb, 0x52, 0x3a, 0x52, 0xa9, 0x53, 0x18, 0x53, 0x87, 0x53, 0x88, 0x54, 0x66, 0x54, 0xd5, 0x55, 0x44, 0x55, 0xb3, 0x56, 0x22, 0x56, 0x91, 0x57, 0x00, 0x57, 0x6f, 0x57, 0x70, 0x57, 0xdf, 0x03]
  }
};
const fromBytes$A = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  const hasDst = bytes.length > MIN_HALF_HOUR_COMMAND_SIZE;
  const date = buffer.getDate();
  const periods = buffer.getEnergyPeriods(hasDst ? MAX_HALF_HOUR_PERIODS : MIN_HALF_HOUR_PERIODS);
  if (hasDst) {
    return {
      date,
      periods,
      dstHour: buffer.getUint8()
    };
  }
  return {
    date,
    periods
  };
};
const toBytes$A = parameters => {
  const buffer = new CommandBinaryBuffer$1(parameters.periods.length > MIN_HALF_HOUR_PERIODS ? MAX_HALF_HOUR_COMMAND_SIZE : MIN_HALF_HOUR_COMMAND_SIZE);
  buffer.setDate(parameters.date);
  buffer.setEnergyPeriods(parameters.periods);
  if (parameters.dstHour) {
    buffer.setUint8(parameters.dstHour);
  }
  return toBytes$23(id$y, buffer.data);
};

var getHalfHourDemandPrevious = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$y,
    examples: examples$y,
    fromBytes: fromBytes$A,
    headerSize: headerSize$y,
    id: id$y,
    isLoraOnly: isLoraOnly$y,
    maxSize: maxSize$y,
    name: name$y,
    toBytes: toBytes$A
});

const DATE_SIZE = 2;
const ENERGY_FLAGS_SIZE = 1;
const START_HALFHOUR_SIZE = 1;
const HALFHOURS_NUMBER_SIZE = 1;
const MAX_HALFHOURS_ENERGY_SIZE = 247;
const energiesToObis = {
  'A+': '1.5.x',
  'A+R+': '3.5.x',
  'A+R-': '4.5.x',
  'A-': '2.5.x',
  'A-R+': '6.5.x',
  'A-R-': '7.5.x'
};
const convertEnergyToObis = function (energy) {
  let tariff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  const obis = energiesToObis[energy];
  return obis ? obis.replace('x', tariff.toString(10)) : '';
};
const convertHalfhoursEnergiesToDlms = energies => {
  const dlms = {};
  Object.keys(energies).forEach(energy => {
    const values = energies[energy];
    for (let tariff = 0; tariff < TARIFF_NUMBER; tariff++) {
      const value = values[tariff];
      if (value || value === 0) {
        dlms[convertEnergyToObis(energy, tariff + 1)] = value;
      }
    }
  });
  return dlms;
};
const id$x = getHalfhoursEnergies$2;
const name$x = uplinkNames[getHalfhoursEnergies$2];
const headerSize$x = 2;
const maxSize$x = DATE_SIZE + ENERGY_FLAGS_SIZE + START_HALFHOUR_SIZE + HALFHOURS_NUMBER_SIZE + MAX_HALFHOURS_ENERGY_SIZE;
const accessLevel$x = UNENCRYPTED;
const isLoraOnly$x = true;
const examples$x = {
  'get halfhours energies': {
    id: id$x,
    headerSize: headerSize$x,
    name: name$x,
    maxSize: maxSize$x,
    parameters: {
      date: {
        year: 21,
        month: 2,
        date: 3
      },
      firstHalfhour: 1,
      halfhoursNumber: 2,
      energies: {
        'A+': [0x1000, 0x2000],
        'A-R+': [0x3000, 0x4000]
      }
    },
    bytes: [0x6f, 0x0d, 0x2a, 0x43, 0x11, 0x01, 0x02, 0x10, 0x00, 0x20, 0x00, 0x30, 0x00, 0x40, 0x00]
  }
};
const fromBytes$z = bytes => {
  const buffer = new CommandBinaryBuffer(bytes);
  const date = buffer.getDate();
  const energiesFlags = buffer.getEnergiesFlags();
  const firstHalfhour = buffer.getUint8();
  const halfhoursNumber = buffer.getUint8();
  return {
    date,
    firstHalfhour,
    halfhoursNumber,
    energies: buffer.getHalfhoursEnergies(energiesFlags, halfhoursNumber)
  };
};
const toBytes$z = parameters => {
  const buffer = new CommandBinaryBuffer(maxSize$x);
  const {
    date,
    firstHalfhour,
    halfhoursNumber,
    energies
  } = parameters;
  buffer.setDate(date);
  buffer.setEnergiesFlags(energies);
  buffer.setUint8(firstHalfhour);
  buffer.setUint8(halfhoursNumber);
  buffer.setHalfhoursEnergies(energies);
  return toBytes$23(id$x, buffer.getBytesToOffset());
};
const toJson = function (parameters) {
  let {
    dlms
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDlmsJsonOptions;
  const {
    date,
    firstHalfhour,
    halfhoursNumber,
    energies
  } = parameters;
  const result = dlms ? {
    date,
    firstHalfhour,
    halfhoursNumber,
    ...convertHalfhoursEnergiesToDlms(energies)
  } : parameters;
  return JSON.stringify(result);
};

var getHalfhoursEnergies = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$x,
    examples: examples$x,
    fromBytes: fromBytes$z,
    headerSize: headerSize$x,
    id: id$x,
    isLoraOnly: isLoraOnly$x,
    maxSize: maxSize$x,
    name: name$x,
    toBytes: toBytes$z,
    toJson: toJson
});

const id$w = getMagneticFieldThreshold$2;
const name$w = uplinkNames[getMagneticFieldThreshold$2];
const headerSize$w = 2;
const maxSize$w = 10;
const accessLevel$w = READ_ONLY;
const isLoraOnly$w = false;
const examples$w = {
  'simple response': {
    id: id$w,
    name: name$w,
    headerSize: headerSize$w,
    maxSize: maxSize$w,
    accessLevel: accessLevel$w,
    parameters: {
      induction: 10,
      threshold: 5,
      inductionCoefficient: 1.23,
      reserved: 0xffffffff
    },
    bytes: [0x6d, 0x0a, 0x00, 0x0a, 0x00, 0x05, 0x00, 0x7b, 0xff, 0xff, 0xff, 0xff]
  }
};
const fromBytes$y = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    induction: buffer.getUint16(),
    threshold: buffer.getUint16(),
    inductionCoefficient: buffer.getUint16() / 100,
    reserved: buffer.getUint32()
  };
};
const toBytes$y = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$w);
  buffer.setUint16(parameters.induction);
  buffer.setUint16(parameters.threshold);
  buffer.setUint16(parameters.inductionCoefficient * 100);
  buffer.setUint32(parameters.reserved);
  return toBytes$23(id$w, buffer.data);
};

var getMagneticFieldThreshold = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$w,
    examples: examples$w,
    fromBytes: fromBytes$y,
    headerSize: headerSize$w,
    id: id$w,
    isLoraOnly: isLoraOnly$w,
    maxSize: maxSize$w,
    name: name$w,
    toBytes: toBytes$y
});

const id$v = getMeterInfo$2;
const name$v = uplinkNames[getMeterInfo$2];
const headerSize$v = 2;
const maxSize$v = 1;
const accessLevel$v = READ_ONLY;
const isLoraOnly$v = false;
const examples$v = {
  'simple response': {
    id: id$v,
    name: name$v,
    headerSize: headerSize$v,
    maxSize: maxSize$v,
    accessLevel: accessLevel$v,
    parameters: {
      ten: 0
    },
    bytes: [0x7a, 0x01, 0x00]
  }
};
const fromBytes$x = _ref => {
  let [ten] = _ref;
  return {
    ten
  };
};
const toBytes$x = _ref2 => {
  let {
    ten
  } = _ref2;
  return toBytes$23(id$v, [ten]);
};

var getMeterInfo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$v,
    examples: examples$v,
    fromBytes: fromBytes$x,
    headerSize: headerSize$v,
    id: id$v,
    isLoraOnly: isLoraOnly$v,
    maxSize: maxSize$v,
    name: name$v,
    toBytes: toBytes$x
});

const id$u = getMonthDemand$2;
const name$u = uplinkNames[getMonthDemand$2];
const headerSize$u = 2;
const accessLevel$u = READ_ONLY;
const maxSize$u = 18;
const isLoraOnly$u = false;
const examples$u = {
  'response energy for 2024.03': {
    id: id$u,
    name: name$u,
    headerSize: headerSize$u,
    maxSize: maxSize$u,
    accessLevel: accessLevel$u,
    parameters: {
      year: 24,
      month: 3,
      energies: [40301230, 3334244, 2333, 2145623]
    },
    bytes: [0x17, 0x12, 0x18, 0x03, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x32, 0xe0, 0x64, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  }
};
const fromBytes$w = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    year: buffer.getUint8(),
    month: buffer.getUint8(),
    energies: buffer.getEnergies()
  };
};
const toBytes$w = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$u);
  buffer.setUint8(parameters.year);
  buffer.setUint8(parameters.month);
  buffer.setEnergies(parameters.energies);
  return toBytes$23(id$u, buffer.data);
};

var getMonthDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$u,
    examples: examples$u,
    fromBytes: fromBytes$w,
    headerSize: headerSize$u,
    id: id$u,
    isLoraOnly: isLoraOnly$u,
    maxSize: maxSize$u,
    name: name$u,
    toBytes: toBytes$w
});

const id$t = getMonthDemandExport$2;
const name$t = uplinkNames[getMonthDemandExport$2];
const headerSize$t = 2;
const accessLevel$t = READ_ONLY;
const maxSize$t = 18;
const isLoraOnly$t = false;
const examples$t = {
  'response energy for 2024.03': {
    id: id$t,
    name: name$t,
    headerSize: headerSize$t,
    maxSize: maxSize$t,
    accessLevel: accessLevel$t,
    parameters: {
      year: 24,
      month: 3,
      energies: [40301230, 3334244, 2333, 2145623]
    },
    bytes: [0x52, 0x12, 0x18, 0x03, 0x02, 0x66, 0xf2, 0xae, 0x00, 0x32, 0xe0, 0x64, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x20, 0xbd, 0x57]
  }
};
const fromBytes$v = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    year: buffer.getUint8(),
    month: buffer.getUint8(),
    energies: buffer.getEnergies()
  };
};
const toBytes$v = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$t);
  buffer.setUint8(parameters.year);
  buffer.setUint8(parameters.month);
  buffer.setEnergies(parameters.energies);
  return toBytes$23(id$t, buffer.data);
};

var getMonthDemandExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$t,
    examples: examples$t,
    fromBytes: fromBytes$v,
    headerSize: headerSize$t,
    id: id$t,
    isLoraOnly: isLoraOnly$t,
    maxSize: maxSize$t,
    name: name$t,
    toBytes: toBytes$v
});

const id$s = getMonthMaxDemand$2;
const name$s = uplinkNames[getMonthMaxDemand$2];
const headerSize$s = 2;
const accessLevel$s = READ_ONLY;
const maxSize$s = 2 + TARIFF_NUMBER$1 * 7;
const isLoraOnly$s = false;
const examples$s = {
  'response max power for 2024.03': {
    id: id$s,
    name: name$s,
    headerSize: headerSize$s,
    maxSize: maxSize$s,
    accessLevel: accessLevel$s,
    parameters: {
      year: 24,
      month: 3,
      tariffs: [{
        date: 22,
        hours: 12,
        minutes: 48,
        power: 2424
      }, {
        date: 12,
        hours: 12,
        minutes: 33,
        power: 3644
      }, {
        date: 25,
        hours: 15,
        minutes: 4,
        power: 1244
      }, {
        date: 8,
        hours: 17,
        minutes: 32,
        power: 5244
      }]
    },
    bytes: [0x32, 0x1e, 0x18, 0x03, 0x16, 0x0c, 0x30, 0x00, 0x00, 0x09, 0x78, 0x0c, 0x0c, 0x21, 0x00, 0x00, 0x0e, 0x3c, 0x19, 0x0f, 0x04, 0x00, 0x00, 0x04, 0xdc, 0x08, 0x11, 0x20, 0x00, 0x00, 0x14, 0x7c]
  }
};
const fromBytes$u = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    year: buffer.getUint8(),
    month: buffer.getUint8(),
    tariffs: buffer.getMonthMaxPowerByTariffs()
  };
};
const toBytes$u = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$s);
  buffer.setUint8(parameters.year);
  buffer.setUint8(parameters.month);
  buffer.setMonthMaxPowerByTariffs(parameters.tariffs);
  return toBytes$23(id$s, buffer.data);
};

var getMonthMaxDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$s,
    examples: examples$s,
    fromBytes: fromBytes$u,
    headerSize: headerSize$s,
    id: id$s,
    isLoraOnly: isLoraOnly$s,
    maxSize: maxSize$s,
    name: name$s,
    toBytes: toBytes$u
});

const id$r = getMonthMaxDemandExport$2;
const name$r = uplinkNames[getMonthMaxDemandExport$2];
const headerSize$r = 2;
const accessLevel$r = READ_ONLY;
const maxSize$r = 2 + TARIFF_NUMBER$1 * 7;
const isLoraOnly$r = false;
const examples$r = {
  'response max power for 2024.03': {
    id: id$r,
    name: name$r,
    headerSize: headerSize$r,
    maxSize: maxSize$r,
    accessLevel: accessLevel$r,
    parameters: {
      year: 24,
      month: 3,
      tariffs: [{
        date: 22,
        hours: 12,
        minutes: 48,
        power: 2424
      }, {
        date: 12,
        hours: 12,
        minutes: 33,
        power: 3644
      }, {
        date: 25,
        hours: 15,
        minutes: 4,
        power: 1244
      }, {
        date: 8,
        hours: 17,
        minutes: 32,
        power: 5244
      }]
    },
    bytes: [0x59, 0x1e, 0x18, 0x03, 0x16, 0x0c, 0x30, 0x00, 0x00, 0x09, 0x78, 0x0c, 0x0c, 0x21, 0x00, 0x00, 0x0e, 0x3c, 0x19, 0x0f, 0x04, 0x00, 0x00, 0x04, 0xdc, 0x08, 0x11, 0x20, 0x00, 0x00, 0x14, 0x7c]
  }
};
const fromBytes$t = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    year: buffer.getUint8(),
    month: buffer.getUint8(),
    tariffs: buffer.getMonthMaxPowerByTariffs()
  };
};
const toBytes$t = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$r);
  buffer.setUint8(parameters.year);
  buffer.setUint8(parameters.month);
  buffer.setMonthMaxPowerByTariffs(parameters.tariffs);
  return toBytes$23(id$r, buffer.data);
};

var getMonthMaxDemandExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$r,
    examples: examples$r,
    fromBytes: fromBytes$t,
    headerSize: headerSize$r,
    id: id$r,
    isLoraOnly: isLoraOnly$r,
    maxSize: maxSize$r,
    name: name$r,
    toBytes: toBytes$t
});

const id$q = getOperatorParametersExtended3$2;
const name$q = uplinkNames[getOperatorParametersExtended3$2];
const headerSize$q = 2;
const maxSize$q = 17;
const accessLevel$q = READ_ONLY;
const isLoraOnly$q = false;
const examples$q = {
  'simple response': {
    id: id$q,
    name: name$q,
    headerSize: headerSize$q,
    maxSize: maxSize$q,
    accessLevel: accessLevel$q,
    parameters: {
      pmaxMinusThreshold0: 100,
      pmaxMinusThreshold1: 200,
      pmaxMinusThreshold2: 300,
      pmaxMinusThreshold3: 400,
      relaySet: {
        RELAY_OFF_LIMIT_P_MINUS_T1: true,
        RELAY_OFF_LIMIT_P_MINUS_T2: false,
        RELAY_OFF_LIMIT_P_MINUS_T3: true,
        RELAY_OFF_LIMIT_P_MINUS_T4: false
      }
    },
    bytes: [0x71, 0x11, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x00, 0x01, 0x90, 0x14]
  }
};
const fromBytes$s = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getOperatorParametersExtended3();
};
const toBytes$s = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$q);
  buffer.setOperatorParametersExtended3(parameters);
  return toBytes$23(id$q, buffer.data);
};

var getOperatorParametersExtended3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$q,
    examples: examples$q,
    fromBytes: fromBytes$s,
    headerSize: headerSize$q,
    id: id$q,
    isLoraOnly: isLoraOnly$q,
    maxSize: maxSize$q,
    name: name$q,
    toBytes: toBytes$s
});

const id$p = getOperatorParameters$2;
const name$p = uplinkNames[getOperatorParameters$2];
const headerSize$p = 2;
const maxSize$p = OPERATOR_PARAMETERS_SIZE;
const accessLevel$p = READ_ONLY;
const isLoraOnly$p = false;
const examples$p = {
  'get default operator parameters response': {
    id: id$p,
    name: name$p,
    headerSize: headerSize$p,
    maxSize: maxSize$p,
    accessLevel: accessLevel$p,
    parameters: {
      vpThreshold: 265000,
      vThreshold: 156000,
      ipThreshold: 120000,
      pmaxThreshold0: 31800,
      pmaxThreshold1: 31800,
      pmaxThreshold2: 31800,
      pmaxThreshold3: 31800,
      speedOptoPort: 0,
      tint: 30,
      calcPeriodDate: 1,
      timeoutDisplay: 127,
      timeoutScreen: 7,
      displaySet: {
        SET_ALL_SEGMENT_DISPLAY: false,
        SOFTWARE_VERSION: false,
        TOTAL_ACTIVE_ENERGY: true,
        ACTIVE_ENERGY_T1: false,
        ACTIVE_ENERGY_T2: false,
        ACTIVE_ENERGY_T3: false,
        ACTIVE_ENERGY_T4: false,
        ACTIVE_POWER_PER_PHASE: true,
        ACTIVE_POWER_IN_NEUTRAL: true,
        CURRENT_IN_PHASE: false,
        CURRENT_IN_NEUTRAL: false,
        VOLTAGE: false,
        HOUR_MINUTE_SECOND: true,
        DATE_MONTH_YEAR: true,
        TOTAL_EXPORTED_ACTIVE_ENERGY: false,
        EXPORTED_ACTIVE_ENERGY_T1: false,
        EXPORTED_ACTIVE_ENERGY_T2: false,
        EXPORTED_ACTIVE_ENERGY_T3: false,
        EXPORTED_ACTIVE_ENERGY_T4: false,
        POWER_COEFFICIENT_PHASE_A: false,
        POWER_COEFFICIENT_PHASE_B: false,
        BATTERY_VOLTAGE: false,
        POWER_THRESHOLD_T1: false,
        POWER_THRESHOLD_T2: false,
        POWER_THRESHOLD_T3: false,
        POWER_THRESHOLD_T4: false,
        CURRENT_BALANCE: false,
        AUTO_SCREEN_SCROLLING: true
      },
      relaySet4: {
        RELAY_ON_TIMEOUT: false,
        RELAY_ON_SALDO: false,
        RELAY_OFF_SALDO: false,
        RELAY_OFF_SALDO_SOFT: false,
        RELAY_OFF_MAGNET: false,
        RELAY_ON_MAGNET_TIMEOUT: false,
        RELAY_ON_MAGNET_AUTO: false
      },
      relaySet3: {
        RELAY_OFF_LIM_TARIFF_0: false,
        RELAY_OFF_LIM_TARIFF_1: false,
        RELAY_OFF_LIM_TARIFF_2: false,
        RELAY_OFF_LIM_TARIFF_3: false,
        RELAY_OFF_PF_MIN: false
      },
      relaySet2: {
        RELAY_OFF_Y: true,
        RELAY_OFF_CENTER: true,
        RELAY_OFF_TARIFF_0: false,
        RELAY_OFF_TARIFF_1: false,
        RELAY_OFF_TARIFF_2: false,
        RELAY_OFF_TARIFF_3: false,
        RELAY_OFF_I_LIMIT: false,
        RELAY_OFF_V_BAD: false
      },
      relaySet1: {
        RELAY_ON_Y: true,
        RELAY_ON_CENTER: true,
        RELAY_ON_PB: false,
        RELAY_ON_TARIFF_0: false,
        RELAY_ON_TARIFF_1: false,
        RELAY_ON_TARIFF_2: false,
        RELAY_ON_TARIFF_3: false,
        RELAY_ON_V_GOOD: false
      },
      displayType: 0,
      ten: 0,
      timeoutRefresh: 240,
      deltaCorMin: 15,
      timeoutMagnetOff: 5,
      timeoutMagnetOn: 5,
      define1: {
        BLOCK_KEY_OPTOPORT: false,
        MAGNET_SCREEN_CONST: false
      },
      timeoutRelayOn: 1,
      timeoutRelayKey: 0,
      timeoutRelayAuto: 5,
      timeoutBadVAVB: 5,
      freqMax: 55,
      freqMin: 45,
      phMin: 0,
      year: 0,
      month: 0,
      date: 0,
      energyDecimalPoint: 2,
      typeMeter: 0,
      timeoutIMax: 5,
      timeoutPMax: 5,
      timeoutCos: 5,
      pMaxDef: 1,
      displaySetExt: {
        SET_ALL_SEGMENT_DISPLAY: true,
        SOFTWARE_VERSION: true,
        TOTAL_ACTIVE_ENERGY: true,
        ACTIVE_ENERGY_T1: true,
        ACTIVE_ENERGY_T2: true,
        ACTIVE_ENERGY_T3: true,
        ACTIVE_ENERGY_T4: true,
        ACTIVE_POWER_PER_PHASE: true,
        ACTIVE_POWER_IN_NEUTRAL: true,
        CURRENT_IN_PHASE: true,
        CURRENT_IN_NEUTRAL: true,
        VOLTAGE: true,
        HOUR_MINUTE_SECOND: true,
        DATE_MONTH_YEAR: true,
        TOTAL_EXPORTED_ACTIVE_ENERGY: false,
        EXPORTED_ACTIVE_ENERGY_T1: false,
        EXPORTED_ACTIVE_ENERGY_T2: false,
        EXPORTED_ACTIVE_ENERGY_T3: false,
        EXPORTED_ACTIVE_ENERGY_T4: false,
        POWER_COEFFICIENT_PHASE_A: true,
        POWER_COEFFICIENT_PHASE_B: true,
        BATTERY_VOLTAGE: true,
        POWER_THRESHOLD_T1: false,
        POWER_THRESHOLD_T2: false,
        POWER_THRESHOLD_T3: false,
        POWER_THRESHOLD_T4: false,
        CURRENT_BALANCE: false,
        MAGNET_INDUCTION: true,
        OPTOPORT_SPEED: false,
        SORT_DISPLAY_SCREENS: false
      },
      timeoutUneqCurrent: 5,
      timeoutBipolarPower: 5,
      relaySet5: {
        RELAY_OFF_UNEQUAL_CURRENT: false,
        RELAY_ON_UNEQUAL_CURRENT: false,
        RELAY_OFF_BIPOLAR_POWER: false,
        RELAY_ON_BIPOLAR_POWER: false
      },
      timeCorrectPeriod: 24,
      timeCorrectPassHalfhour: false
    },
    bytes: [0x1e, 0x4a, 0x00, 0x04, 0x0b, 0x28, 0x00, 0x02, 0x61, 0x60, 0x00, 0x01, 0xd4, 0xc0, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x1e, 0x01, 0x7f, 0x07, 0x80, 0x00, 0x31, 0x84, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x05, 0x05, 0x00, 0x01, 0x00, 0x05, 0x05, 0x37, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x05, 0x05, 0x01, 0x08, 0x38, 0x3f, 0xff, 0x05, 0x05, 0x00, 0x18]
  }
};
const fromBytes$r = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getOperatorParameters();
};
const toBytes$r = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$p);
  buffer.setOperatorParameters(parameters);
  return toBytes$23(id$p, buffer.data);
};

var getOperatorParameters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$p,
    examples: examples$p,
    fromBytes: fromBytes$r,
    headerSize: headerSize$p,
    id: id$p,
    isLoraOnly: isLoraOnly$p,
    maxSize: maxSize$p,
    name: name$p,
    toBytes: toBytes$r
});

const id$o = getRatePlanInfo$2;
const name$o = uplinkNames[getRatePlanInfo$2];
const headerSize$o = 2;
const maxSize$o = 1 + TARIFF_PLAN_SIZE * 2;
const accessLevel$o = READ_ONLY;
const isLoraOnly$o = false;
const examples$o = {
  'rate plan info response for A- table': {
    id: id$o,
    name: name$o,
    headerSize: headerSize$o,
    maxSize: maxSize$o,
    accessLevel: accessLevel$o,
    parameters: {
      tariffTable: 1,
      activePlan: {
        id: 1,
        tariffSet: 2,
        activateYear: 3,
        activateMonth: 4,
        activateDay: 5,
        specialProfilesArraySize: 6,
        seasonProfilesArraySize: 7,
        dayProfilesArraySize: 8
      },
      passivePlan: {
        id: 10,
        tariffSet: 20,
        activateYear: 30,
        activateMonth: 40,
        activateDay: 50,
        specialProfilesArraySize: 60,
        seasonProfilesArraySize: 70,
        dayProfilesArraySize: 80
      }
    },
    bytes: [0x2c, 0x17, 0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x0a, 0x14, 0x1e, 0x28, 0x32, 0x3c, 0x46, 0x50]
  }
};
const fromBytes$q = bytes => {
  if (bytes.length !== maxSize$o) {
    throw new Error('Invalid getRatePlanInfo data size.');
  }
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    tariffTable: buffer.getUint8(),
    activePlan: buffer.getTariffPlan(),
    passivePlan: buffer.getTariffPlan()
  };
};
const toBytes$q = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$o);
  buffer.setUint8(parameters.tariffTable);
  buffer.setTariffPlan(parameters.activePlan);
  buffer.setTariffPlan(parameters.passivePlan);
  return toBytes$23(id$o, buffer.data);
};

var getRatePlanInfo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$o,
    examples: examples$o,
    fromBytes: fromBytes$q,
    headerSize: headerSize$o,
    id: id$o,
    isLoraOnly: isLoraOnly$o,
    maxSize: maxSize$o,
    name: name$o,
    toBytes: toBytes$q
});

const id$n = getSaldo$2;
const name$n = uplinkNames[getSaldo$2];
const headerSize$n = 2;
const maxSize$n = 29;
const accessLevel$n = READ_ONLY;
const isLoraOnly$n = false;
const examples$n = {
  'test response': {
    id: id$n,
    name: name$n,
    headerSize: headerSize$n,
    maxSize: maxSize$n,
    accessLevel: accessLevel$n,
    parameters: {
      currentSaldo: 1,
      count: 0,
      energy: [2, 3, 4, 5],
      beginSaldoOfPeriod: 7,
      date: {
        month: 9,
        date: 23,
        hours: 6,
        minutes: 35
      }
    },
    bytes: [0x29, 0x1d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x07, 0x09, 0x17, 0x06, 0x23]
  }
};
const fromBytes$p = bytes => {
  if (bytes.length !== maxSize$n) {
    throw new Error('Invalid getSaldo data size.');
  }
  const buffer = new CommandBinaryBuffer$1(bytes);
  return {
    currentSaldo: buffer.getInt32(),
    count: buffer.getUint8(),
    energy: new Array(4).fill(0).map(() => buffer.getInt32()),
    beginSaldoOfPeriod: buffer.getInt32(),
    date: {
      month: buffer.getUint8(),
      date: buffer.getUint8(),
      hours: buffer.getUint8(),
      minutes: buffer.getUint8()
    }
  };
};
const toBytes$p = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$n);
  buffer.setInt32(parameters.currentSaldo);
  buffer.setUint8(parameters.count);
  parameters.energy.forEach(value => buffer.setInt32(value));
  buffer.setInt32(parameters.beginSaldoOfPeriod);
  buffer.setUint8(parameters.date.month);
  buffer.setUint8(parameters.date.date);
  buffer.setUint8(parameters.date.hours);
  buffer.setUint8(parameters.date.minutes);
  return toBytes$23(id$n, buffer.data);
};

var getSaldo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$n,
    examples: examples$n,
    fromBytes: fromBytes$p,
    headerSize: headerSize$n,
    id: id$n,
    isLoraOnly: isLoraOnly$n,
    maxSize: maxSize$n,
    name: name$n,
    toBytes: toBytes$p
});

const id$m = getSaldoParameters$2;
const name$m = uplinkNames[getSaldoParameters$2];
const headerSize$m = 2;
const maxSize$m = 37;
const accessLevel$m = READ_ONLY;
const isLoraOnly$m = false;
const examples$m = {
  'default response': {
    id: id$m,
    name: name$m,
    headerSize: headerSize$m,
    maxSize: maxSize$m,
    accessLevel: accessLevel$m,
    parameters: {
      coefficients: [0, 0, 0, 0],
      decimalPointTariff: 0,
      indicationThreshold: 0,
      relayThreshold: 0,
      mode: 0,
      saldoOffTimeBegin: 0,
      saldoOffTimeEnd: 0,
      decimalPointIndication: 0,
      powerThreshold: 0,
      creditThreshold: 0
    },
    bytes: [0x2e, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
  },
  'test response': {
    id: id$m,
    name: name$m,
    headerSize: headerSize$m,
    maxSize: maxSize$m,
    accessLevel: accessLevel$m,
    parameters: {
      coefficients: [2, 3, 4, 5],
      decimalPointTariff: 6,
      indicationThreshold: 7,
      relayThreshold: 8,
      mode: 9,
      saldoOffTimeBegin: 10,
      saldoOffTimeEnd: 11,
      decimalPointIndication: 12,
      powerThreshold: 13,
      creditThreshold: 14
    },
    bytes: [0x2e, 0x25, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e]
  }
};
const fromBytes$o = bytes => {
  if (bytes.length !== maxSize$m) {
    throw new Error('Invalid getSaldoParameters data size.');
  }
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getSaldoParameters();
};
const toBytes$o = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$m);
  buffer.setSaldoParameters(parameters);
  return toBytes$23(id$m, buffer.data);
};

var getSaldoParameters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$m,
    examples: examples$m,
    fromBytes: fromBytes$o,
    headerSize: headerSize$m,
    id: id$m,
    isLoraOnly: isLoraOnly$m,
    maxSize: maxSize$m,
    name: name$m,
    toBytes: toBytes$o
});

const id$l = getSeasonProfile$2;
const name$l = uplinkNames[getSeasonProfile$2];
const headerSize$l = 2;
const maxSize$l = 9;
const accessLevel$l = READ_ONLY;
const isLoraOnly$l = false;
const examples$l = {
  'simple response': {
    id: id$l,
    name: name$l,
    headerSize: headerSize$l,
    maxSize: maxSize$l,
    accessLevel: accessLevel$l,
    parameters: {
      month: 1,
      date: 2,
      dayIndexes: [0, 1, 0, 1, 0, 1, 0]
    },
    bytes: [0x3c, 0x09, 0x01, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00]
  }
};
const fromBytes$n = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getSeasonProfile();
};
const toBytes$n = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$l);
  buffer.setSeasonProfile(parameters);
  return toBytes$23(id$l, buffer.data);
};

var getSeasonProfile = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$l,
    examples: examples$l,
    fromBytes: fromBytes$n,
    headerSize: headerSize$l,
    id: id$l,
    isLoraOnly: isLoraOnly$l,
    maxSize: maxSize$l,
    name: name$l,
    toBytes: toBytes$n
});

const id$k = getSpecialDay$2;
const name$k = uplinkNames[getSpecialDay$2];
const headerSize$k = 2;
const maxSize$k = 4;
const accessLevel$k = READ_ONLY;
const isLoraOnly$k = false;
const examples$k = {
  'special day response': {
    id: id$k,
    name: name$k,
    headerSize: headerSize$k,
    maxSize: maxSize$k,
    accessLevel: accessLevel$k,
    parameters: {
      month: 1,
      date: 9,
      dayIndex: 3,
      isPeriodic: true
    },
    bytes: [0x3d, 0x04, 0x01, 0x09, 0x03, 0x00]
  }
};
const fromBytes$m = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  return buffer.getSpecialDay();
};
const toBytes$m = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$k);
  buffer.setSpecialDay(parameters);
  return toBytes$23(id$k, buffer.data);
};

var getSpecialDay = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$k,
    examples: examples$k,
    fromBytes: fromBytes$m,
    headerSize: headerSize$k,
    id: id$k,
    isLoraOnly: isLoraOnly$k,
    maxSize: maxSize$k,
    name: name$k,
    toBytes: toBytes$m
});

const id$j = getVersion$2;
const name$j = uplinkNames[getVersion$2];
const headerSize$j = 2;
const maxSize$j = 10;
const accessLevel$j = READ_ONLY;
const isLoraOnly$j = false;
const examples$j = {
  'simple response': {
    id: id$j,
    name: name$j,
    headerSize: headerSize$j,
    maxSize: maxSize$j,
    accessLevel: accessLevel$j,
    parameters: {
      version: '104.25.003'
    },
    bytes: [0x28, 0x0a, 0x31, 0x30, 0x34, 0x2e, 0x32, 0x35, 0x2e, 0x30, 0x30, 0x33]
  }
};
const fromBytes$l = bytes => ({
  version: String.fromCharCode.apply(null, [...bytes])
});
const toBytes$l = parameters => {
  const version = parameters.version.split('').map(char => char.charCodeAt(0));
  return toBytes$23(id$j, version);
};

var getVersion = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$j,
    examples: examples$j,
    fromBytes: fromBytes$l,
    headerSize: headerSize$j,
    id: id$j,
    isLoraOnly: isLoraOnly$j,
    maxSize: maxSize$j,
    name: name$j,
    toBytes: toBytes$l
});

const id$i = prepareRatePlan$2;
const name$i = uplinkNames[prepareRatePlan$2];
const headerSize$i = 2;
const maxSize$i = 0;
const accessLevel$i = READ_WRITE;
const isLoraOnly$i = false;
const examples$i = {
  'simple response': {
    id: id$i,
    name: name$i,
    headerSize: headerSize$i,
    maxSize: maxSize$i,
    accessLevel: accessLevel$i,
    parameters: {},
    bytes: [0x14, 0x00]
  }
};
const fromBytes$k = bytes => {
  if (bytes.length !== maxSize$i) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$k = () => toBytes$23(id$i);

var prepareRatePlan = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$i,
    examples: examples$i,
    fromBytes: fromBytes$k,
    headerSize: headerSize$i,
    id: id$i,
    isLoraOnly: isLoraOnly$i,
    maxSize: maxSize$i,
    name: name$i,
    toBytes: toBytes$k
});

const id$h = resetPowerMaxDay$2;
const name$h = uplinkNames[resetPowerMaxDay$2];
const headerSize$h = 2;
const maxSize$h = 0;
const accessLevel$h = READ_WRITE;
const isLoraOnly$h = false;
const examples$h = {
  'simple response': {
    id: id$h,
    name: name$h,
    headerSize: headerSize$h,
    maxSize: maxSize$h,
    accessLevel: accessLevel$h,
    parameters: {},
    bytes: [0x35, 0x00]
  }
};
const fromBytes$j = bytes => {
  if (bytes.length !== maxSize$h) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$j = () => toBytes$23(id$h);

var resetPowerMaxDay = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$h,
    examples: examples$h,
    fromBytes: fromBytes$j,
    headerSize: headerSize$h,
    id: id$h,
    isLoraOnly: isLoraOnly$h,
    maxSize: maxSize$h,
    name: name$h,
    toBytes: toBytes$j
});

const id$g = resetPowerMaxMonth$2;
const name$g = uplinkNames[resetPowerMaxMonth$2];
const headerSize$g = 2;
const maxSize$g = 0;
const accessLevel$g = READ_WRITE;
const isLoraOnly$g = false;
const examples$g = {
  'simple response': {
    id: id$g,
    name: name$g,
    headerSize: headerSize$g,
    maxSize: maxSize$g,
    accessLevel: accessLevel$g,
    parameters: {},
    bytes: [0x36, 0x00]
  }
};
const fromBytes$i = bytes => {
  if (bytes.length !== maxSize$g) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$i = () => toBytes$23(id$g);

var resetPowerMaxMonth = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$g,
    examples: examples$g,
    fromBytes: fromBytes$i,
    headerSize: headerSize$g,
    id: id$g,
    isLoraOnly: isLoraOnly$g,
    maxSize: maxSize$g,
    name: name$g,
    toBytes: toBytes$i
});

const id$f = runTariffPlan$2;
const name$f = uplinkNames[runTariffPlan$2];
const headerSize$f = 2;
const maxSize$f = 0;
const accessLevel$f = READ_WRITE;
const isLoraOnly$f = false;
const examples$f = {
  'simple response': {
    id: id$f,
    name: name$f,
    headerSize: headerSize$f,
    maxSize: maxSize$f,
    accessLevel: accessLevel$f,
    parameters: {},
    bytes: [0x46, 0x00]
  }
};
const fromBytes$h = bytes => {
  if (bytes.length !== maxSize$f) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$h = () => toBytes$23(id$f);

var runTariffPlan = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$f,
    examples: examples$f,
    fromBytes: fromBytes$h,
    headerSize: headerSize$f,
    id: id$f,
    isLoraOnly: isLoraOnly$f,
    maxSize: maxSize$f,
    name: name$f,
    toBytes: toBytes$h
});

const id$e = setAccessKey$2;
const name$e = uplinkNames[setAccessKey$2];
const headerSize$e = 2;
const maxSize$e = 0;
const accessLevel$e = READ_WRITE;
const isLoraOnly$e = false;
const examples$e = {
  'simple response': {
    id: id$e,
    name: name$e,
    headerSize: headerSize$e,
    maxSize: maxSize$e,
    accessLevel: accessLevel$e,
    parameters: {},
    bytes: [0x09, 0x00]
  }
};
const fromBytes$g = bytes => {
  if (bytes.length !== maxSize$e) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$g = () => toBytes$23(id$e);

var setAccessKey = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$e,
    examples: examples$e,
    fromBytes: fromBytes$g,
    headerSize: headerSize$e,
    id: id$e,
    isLoraOnly: isLoraOnly$e,
    maxSize: maxSize$e,
    name: name$e,
    toBytes: toBytes$g
});

const id$d = setCorrectDateTime$2;
const name$d = uplinkNames[setCorrectDateTime$2];
const headerSize$d = 2;
const maxSize$d = 0;
const accessLevel$d = READ_ONLY;
const isLoraOnly$d = false;
const examples$d = {
  'simple response': {
    id: id$d,
    name: name$d,
    headerSize: headerSize$d,
    maxSize: maxSize$d,
    accessLevel: accessLevel$d,
    parameters: {},
    bytes: [0x5c, 0x00]
  }
};
const fromBytes$f = bytes => {
  if (bytes.length !== maxSize$d) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$f = () => toBytes$23(id$d);

var setCorrectDateTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$d,
    examples: examples$d,
    fromBytes: fromBytes$f,
    headerSize: headerSize$d,
    id: id$d,
    isLoraOnly: isLoraOnly$d,
    maxSize: maxSize$d,
    name: name$d,
    toBytes: toBytes$f
});

const id$c = setCorrectTime$2;
const name$c = uplinkNames[setCorrectTime$2];
const headerSize$c = 2;
const maxSize$c = 0;
const accessLevel$c = READ_WRITE;
const isLoraOnly$c = false;
const examples$c = {
  'simple response': {
    id: id$c,
    name: name$c,
    headerSize: headerSize$c,
    maxSize: maxSize$c,
    accessLevel: accessLevel$c,
    parameters: {},
    bytes: [0x1c, 0x00]
  }
};
const fromBytes$e = bytes => {
  if (bytes.length !== maxSize$c) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$e = () => toBytes$23(id$c);

var setCorrectTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$c,
    examples: examples$c,
    fromBytes: fromBytes$e,
    headerSize: headerSize$c,
    id: id$c,
    isLoraOnly: isLoraOnly$c,
    maxSize: maxSize$c,
    name: name$c,
    toBytes: toBytes$e
});

const id$b = setDateTime$2;
const name$b = uplinkNames[setDateTime$2];
const headerSize$b = 2;
const maxSize$b = 0;
const accessLevel$b = READ_ONLY;
const isLoraOnly$b = false;
const examples$b = {
  'simple response': {
    id: id$b,
    name: name$b,
    headerSize: headerSize$b,
    maxSize: maxSize$b,
    accessLevel: accessLevel$b,
    parameters: {},
    bytes: [0x08, 0x00]
  }
};
const fromBytes$d = bytes => {
  if (bytes.length !== maxSize$b) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$d = () => toBytes$23(id$b);

var setDateTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$b,
    examples: examples$b,
    fromBytes: fromBytes$d,
    headerSize: headerSize$b,
    id: id$b,
    isLoraOnly: isLoraOnly$b,
    maxSize: maxSize$b,
    name: name$b,
    toBytes: toBytes$d
});

const id$a = setDayProfile$2;
const name$a = uplinkNames[setDayProfile$2];
const headerSize$a = 2;
const maxSize$a = 0;
const accessLevel$a = READ_WRITE;
const isLoraOnly$a = false;
const examples$a = {
  'simple response': {
    id: id$a,
    name: name$a,
    headerSize: headerSize$a,
    maxSize: maxSize$a,
    accessLevel: accessLevel$a,
    parameters: {},
    bytes: [0x10, 0x00]
  }
};
const fromBytes$c = bytes => {
  if (bytes.length !== maxSize$a) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$c = () => toBytes$23(id$a);

var setDayProfile = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$a,
    examples: examples$a,
    fromBytes: fromBytes$c,
    headerSize: headerSize$a,
    id: id$a,
    isLoraOnly: isLoraOnly$a,
    maxSize: maxSize$a,
    name: name$a,
    toBytes: toBytes$c
});

const id$9 = setDisplayParam$2;
const name$9 = uplinkNames[setDisplayParam$2];
const headerSize$9 = 2;
const maxSize$9 = 0;
const accessLevel$9 = READ_WRITE;
const isLoraOnly$9 = false;
const examples$9 = {
  'simple response': {
    id: id$9,
    name: name$9,
    headerSize: headerSize$9,
    maxSize: maxSize$9,
    accessLevel: accessLevel$9,
    parameters: {},
    bytes: [0x5d, 0x00]
  }
};
const fromBytes$b = bytes => {
  if (bytes.length !== maxSize$9) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$b = () => toBytes$23(id$9);

var setDisplayParam = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$9,
    examples: examples$9,
    fromBytes: fromBytes$b,
    headerSize: headerSize$9,
    id: id$9,
    isLoraOnly: isLoraOnly$9,
    maxSize: maxSize$9,
    name: name$9,
    toBytes: toBytes$b
});

const id$8 = setOperatorParametersExtended3$2;
const name$8 = uplinkNames[setOperatorParametersExtended3$2];
const headerSize$8 = 2;
const maxSize$8 = 0;
const accessLevel$8 = READ_WRITE;
const isLoraOnly$8 = false;
const examples$8 = {
  'simple response': {
    id: id$8,
    name: name$8,
    headerSize: headerSize$8,
    maxSize: maxSize$8,
    accessLevel: accessLevel$8,
    parameters: {},
    bytes: [0x72, 0x00]
  }
};
const fromBytes$a = bytes => {
  if (bytes.length !== maxSize$8) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$a = () => toBytes$23(id$8);

var setOperatorParametersExtended3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$8,
    examples: examples$8,
    fromBytes: fromBytes$a,
    headerSize: headerSize$8,
    id: id$8,
    isLoraOnly: isLoraOnly$8,
    maxSize: maxSize$8,
    name: name$8,
    toBytes: toBytes$a
});

const id$7 = setOperatorParameters$2;
const name$7 = uplinkNames[setOperatorParameters$2];
const headerSize$7 = 2;
const maxSize$7 = 0;
const accessLevel$7 = READ_WRITE;
const isLoraOnly$7 = false;
const examples$7 = {
  'simple response': {
    id: id$7,
    name: name$7,
    headerSize: headerSize$7,
    maxSize: maxSize$7,
    accessLevel: accessLevel$7,
    parameters: {},
    bytes: [0x1f, 0x00]
  }
};
const fromBytes$9 = bytes => {
  if (bytes.length !== maxSize$7) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$9 = () => toBytes$23(id$7);

var setOperatorParameters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$7,
    examples: examples$7,
    fromBytes: fromBytes$9,
    headerSize: headerSize$7,
    id: id$7,
    isLoraOnly: isLoraOnly$7,
    maxSize: maxSize$7,
    name: name$7,
    toBytes: toBytes$9
});

const id$6 = setSaldo$2;
const name$6 = uplinkNames[setSaldo$2];
const headerSize$6 = 2;
const maxSize$6 = 0;
const accessLevel$6 = READ_WRITE;
const isLoraOnly$6 = false;
const examples$6 = {
  'simple response': {
    id: id$6,
    name: name$6,
    headerSize: headerSize$6,
    maxSize: maxSize$6,
    accessLevel: accessLevel$6,
    parameters: {},
    bytes: [0x2a, 0x00]
  }
};
const fromBytes$8 = bytes => {
  if (bytes.length !== maxSize$6) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$8 = () => toBytes$23(id$6);

var setSaldo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$6,
    examples: examples$6,
    fromBytes: fromBytes$8,
    headerSize: headerSize$6,
    id: id$6,
    isLoraOnly: isLoraOnly$6,
    maxSize: maxSize$6,
    name: name$6,
    toBytes: toBytes$8
});

const id$5 = setSaldoParameters$2;
const name$5 = uplinkNames[setSaldoParameters$2];
const headerSize$5 = 2;
const maxSize$5 = 0;
const accessLevel$5 = READ_WRITE;
const isLoraOnly$5 = false;
const examples$5 = {
  'simple response': {
    id: id$5,
    name: name$5,
    headerSize: headerSize$5,
    maxSize: maxSize$5,
    accessLevel: accessLevel$5,
    parameters: {},
    bytes: [0x2f, 0x00]
  }
};
const fromBytes$7 = bytes => {
  if (bytes.length !== maxSize$5) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$7 = () => toBytes$23(id$5);

var setSaldoParameters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$5,
    examples: examples$5,
    fromBytes: fromBytes$7,
    headerSize: headerSize$5,
    id: id$5,
    isLoraOnly: isLoraOnly$5,
    maxSize: maxSize$5,
    name: name$5,
    toBytes: toBytes$7
});

const id$4 = setSeasonProfile$2;
const name$4 = uplinkNames[setSeasonProfile$2];
const headerSize$4 = 2;
const maxSize$4 = 0;
const accessLevel$4 = READ_WRITE;
const isLoraOnly$4 = false;
const examples$4 = {
  'simple response': {
    id: id$4,
    name: name$4,
    headerSize: headerSize$4,
    maxSize: maxSize$4,
    accessLevel: accessLevel$4,
    parameters: {},
    bytes: [0x11, 0x00]
  }
};
const fromBytes$6 = bytes => {
  if (bytes.length !== maxSize$4) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$6 = () => toBytes$23(id$4);

var setSeasonProfile = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$4,
    examples: examples$4,
    fromBytes: fromBytes$6,
    headerSize: headerSize$4,
    id: id$4,
    isLoraOnly: isLoraOnly$4,
    maxSize: maxSize$4,
    name: name$4,
    toBytes: toBytes$6
});

const id$3 = setSpecialDay$2;
const name$3 = uplinkNames[setSpecialDay$2];
const headerSize$3 = 2;
const maxSize$3 = 0;
const accessLevel$3 = READ_WRITE;
const isLoraOnly$3 = false;
const examples$3 = {
  'simple response': {
    id: id$3,
    name: name$3,
    headerSize: headerSize$3,
    maxSize: maxSize$3,
    accessLevel: accessLevel$3,
    parameters: {},
    bytes: [0x12, 0x00]
  }
};
const fromBytes$5 = bytes => {
  if (bytes.length !== maxSize$3) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$5 = () => toBytes$23(id$3);

var setSpecialDay = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$3,
    examples: examples$3,
    fromBytes: fromBytes$5,
    headerSize: headerSize$3,
    id: id$3,
    isLoraOnly: isLoraOnly$3,
    maxSize: maxSize$3,
    name: name$3,
    toBytes: toBytes$5
});

const id$2 = setSpecialOperation$2;
const name$2 = uplinkNames[setSpecialOperation$2];
const headerSize$2 = 2;
const maxSize$2 = 1;
const accessLevel$2 = READ_WRITE;
const isLoraOnly$2 = false;
const examples$2 = {
  'electro-magnetic screen is present': {
    id: id$2,
    name: name$2,
    headerSize: headerSize$2,
    maxSize: maxSize$2,
    accessLevel: accessLevel$2,
    parameters: {
      electroMagneticIndication: true,
      magneticIndication: false
    },
    bytes: [0x64, 0x01, 0x01]
  },
  'magnetic screen is present': {
    id: id$2,
    name: name$2,
    headerSize: headerSize$2,
    maxSize: maxSize$2,
    accessLevel: accessLevel$2,
    parameters: {
      electroMagneticIndication: false,
      magneticIndication: true
    },
    bytes: [0x64, 0x01, 0x02]
  },
  'both screens are present': {
    id: id$2,
    name: name$2,
    headerSize: headerSize$2,
    maxSize: maxSize$2,
    accessLevel: accessLevel$2,
    parameters: {
      electroMagneticIndication: true,
      magneticIndication: true
    },
    bytes: [0x64, 0x01, 0x03]
  }
};
const fromBytes$4 = bytes => {
  const buffer = new CommandBinaryBuffer$1(bytes);
  const flags = buffer.getUint8();
  const electroMagneticIndication = !!(flags & 1);
  const magneticIndication = !!(flags & 2);
  return {
    electroMagneticIndication,
    magneticIndication
  };
};
const toBytes$4 = parameters => {
  const buffer = new CommandBinaryBuffer$1(maxSize$2);
  let flags = 0;
  if (parameters.electroMagneticIndication) {
    flags |= 1;
  }
  if (parameters.magneticIndication) {
    flags |= 2;
  }
  buffer.setUint8(flags);
  return toBytes$23(id$2, buffer.data);
};

var setSpecialOperation = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$2,
    examples: examples$2,
    fromBytes: fromBytes$4,
    headerSize: headerSize$2,
    id: id$2,
    isLoraOnly: isLoraOnly$2,
    maxSize: maxSize$2,
    name: name$2,
    toBytes: toBytes$4
});

const id$1 = turnRelayOff$2;
const name$1 = uplinkNames[turnRelayOff$2];
const headerSize$1 = 2;
const maxSize$1 = 0;
const accessLevel$1 = READ_WRITE;
const isLoraOnly$1 = false;
const examples$1 = {
  'simple response': {
    id: id$1,
    name: name$1,
    headerSize: headerSize$1,
    maxSize: maxSize$1,
    accessLevel: accessLevel$1,
    parameters: {},
    bytes: [0x19, 0x00]
  }
};
const fromBytes$3 = bytes => {
  if (bytes.length !== maxSize$1) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$3 = () => toBytes$23(id$1);

var turnRelayOff = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1,
    examples: examples$1,
    fromBytes: fromBytes$3,
    headerSize: headerSize$1,
    id: id$1,
    isLoraOnly: isLoraOnly$1,
    maxSize: maxSize$1,
    name: name$1,
    toBytes: toBytes$3
});

const id = turnRelayOn$2;
const name = uplinkNames[turnRelayOn$2];
const headerSize = 2;
const maxSize = 0;
const accessLevel = READ_WRITE;
const isLoraOnly = false;
const examples = {
  'simple response': {
    id,
    name,
    headerSize,
    maxSize,
    accessLevel,
    parameters: {},
    bytes: [0x18, 0x00]
  }
};
const fromBytes$2 = bytes => {
  if (bytes.length !== maxSize) {
    throw new Error(`Wrong buffer size: ${bytes.length}.`);
  }
  return {};
};
const toBytes$2 = () => toBytes$23(id);

var turnRelayOn = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel,
    examples: examples,
    fromBytes: fromBytes$2,
    headerSize: headerSize,
    id: id,
    isLoraOnly: isLoraOnly,
    maxSize: maxSize,
    name: name,
    toBytes: toBytes$2
});

var uplink$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan,
    errorResponse: errorResponse,
    getBuildVersion: getBuildVersion,
    getCorrectTime: getCorrectTime,
    getCriticalEvent: getCriticalEvent,
    getCurrentStatusMeter: getCurrentStatusMeter,
    getCurrentValues: getCurrentValues,
    getDateTime: getDateTime,
    getDayDemand: getDayDemand,
    getDayDemandExport: getDayDemandExport,
    getDayEnergies: getDayEnergies,
    getDayMaxDemand: getDayMaxDemand,
    getDayMaxDemandExport: getDayMaxDemandExport,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious,
    getDayMaxPower: getDayMaxPower,
    getDayProfile: getDayProfile,
    getDemand: getDemand,
    getDeviceId: getDeviceId,
    getDeviceType: getDeviceType,
    getDisplayParam: getDisplayParam,
    getEnergy: getEnergy,
    getEnergyDayPrevious: getEnergyDayPrevious,
    getEnergyExport: getEnergyExport,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious,
    getEventStatus: getEventStatus,
    getEvents: getEvents,
    getEventsCounters: getEventsCounters,
    getExtendedCurrentValues: getExtendedCurrentValues,
    getExtendedCurrentValues2: getExtendedCurrentValues2,
    getHalfHourDemand: getHalfHourDemand,
    getHalfHourDemandExport: getHalfHourDemandExport,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious,
    getHalfhoursEnergies: getHalfhoursEnergies,
    getMagneticFieldThreshold: getMagneticFieldThreshold,
    getMeterInfo: getMeterInfo,
    getMonthDemand: getMonthDemand,
    getMonthDemandExport: getMonthDemandExport,
    getMonthMaxDemand: getMonthMaxDemand,
    getMonthMaxDemandExport: getMonthMaxDemandExport,
    getOperatorParameters: getOperatorParameters,
    getOperatorParametersExtended3: getOperatorParametersExtended3,
    getRatePlanInfo: getRatePlanInfo,
    getSaldo: getSaldo,
    getSaldoParameters: getSaldoParameters,
    getSeasonProfile: getSeasonProfile,
    getSpecialDay: getSpecialDay,
    getVersion: getVersion,
    prepareRatePlan: prepareRatePlan,
    resetPowerMaxDay: resetPowerMaxDay,
    resetPowerMaxMonth: resetPowerMaxMonth,
    runTariffPlan: runTariffPlan,
    setAccessKey: setAccessKey,
    setCorrectDateTime: setCorrectDateTime,
    setCorrectTime: setCorrectTime,
    setDateTime: setDateTime,
    setDayProfile: setDayProfile,
    setDisplayParam: setDisplayParam,
    setOperatorParameters: setOperatorParameters,
    setOperatorParametersExtended3: setOperatorParametersExtended3,
    setSaldo: setSaldo,
    setSaldoParameters: setSaldoParameters,
    setSeasonProfile: setSeasonProfile,
    setSpecialDay: setSpecialDay,
    setSpecialOperation: setSpecialOperation,
    turnRelayOff: turnRelayOff,
    turnRelayOn: turnRelayOn
});

const getCommandsById = commands => Object.fromEntries(Object.entries(commands).map(_ref => {
  let [, command] = _ref;
  return [command.id, command];
}));

const downlinkById = getCommandsById(downlink$2);
const uplinkById = getCommandsById(uplink$2);

var commands = /*#__PURE__*/Object.freeze({
    __proto__: null,
    downlink: downlink$2,
    downlinkById: downlinkById,
    uplink: uplink$2,
    uplinkById: uplinkById
});

const SET_ALL_SEGMENT_DISPLAY = 1;
const SOFTWARE_VERSION = 2;
const TOTAL_ACTIVE_ENERGY = 3;
const ACTIVE_ENERGY_T1 = 4;
const ACTIVE_ENERGY_T2 = 5;
const ACTIVE_ENERGY_T3 = 6;
const ACTIVE_ENERGY_T4 = 7;
const ACTIVE_POWER_PER_PHASE = 8;
const ACTIVE_POWER_IN_NEUTRAL = 9;
const CURRENT_IN_PHASE = 10;
const CURRENT_IN_NEUTRAL = 11;
const VOLTAGE = 12;
const HOUR_MINUTE_SECOND = 13;
const DATE_MONTH_YEAR = 14;
const TOTAL_EXPORTED_ACTIVE_ENERGY = 15;
const EXPORTED_ACTIVE_ENERGY_T1 = 16;
const EXPORTED_ACTIVE_ENERGY_T2 = 17;
const EXPORTED_ACTIVE_ENERGY_T3 = 18;
const EXPORTED_ACTIVE_ENERGY_T4 = 19;
const POWER_COEFFICIENT_PHASE_A = 20;
const POWER_COEFFICIENT_PHASE_B = 21;
const BATTERY_VOLTAGE = 22;
const POWER_THRESHOLD_T1 = 23;
const POWER_THRESHOLD_T2 = 24;
const POWER_THRESHOLD_T3 = 25;
const POWER_THRESHOLD_T4 = 26;
const MAGNET_INDUCTION = 28;
const CURRENT_BALANCE = 30;
const OPTOPORT_SPEED = 31;

var screenIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACTIVE_ENERGY_T1: ACTIVE_ENERGY_T1,
    ACTIVE_ENERGY_T2: ACTIVE_ENERGY_T2,
    ACTIVE_ENERGY_T3: ACTIVE_ENERGY_T3,
    ACTIVE_ENERGY_T4: ACTIVE_ENERGY_T4,
    ACTIVE_POWER_IN_NEUTRAL: ACTIVE_POWER_IN_NEUTRAL,
    ACTIVE_POWER_PER_PHASE: ACTIVE_POWER_PER_PHASE,
    BATTERY_VOLTAGE: BATTERY_VOLTAGE,
    CURRENT_BALANCE: CURRENT_BALANCE,
    CURRENT_IN_NEUTRAL: CURRENT_IN_NEUTRAL,
    CURRENT_IN_PHASE: CURRENT_IN_PHASE,
    DATE_MONTH_YEAR: DATE_MONTH_YEAR,
    EXPORTED_ACTIVE_ENERGY_T1: EXPORTED_ACTIVE_ENERGY_T1,
    EXPORTED_ACTIVE_ENERGY_T2: EXPORTED_ACTIVE_ENERGY_T2,
    EXPORTED_ACTIVE_ENERGY_T3: EXPORTED_ACTIVE_ENERGY_T3,
    EXPORTED_ACTIVE_ENERGY_T4: EXPORTED_ACTIVE_ENERGY_T4,
    HOUR_MINUTE_SECOND: HOUR_MINUTE_SECOND,
    MAGNET_INDUCTION: MAGNET_INDUCTION,
    OPTOPORT_SPEED: OPTOPORT_SPEED,
    POWER_COEFFICIENT_PHASE_A: POWER_COEFFICIENT_PHASE_A,
    POWER_COEFFICIENT_PHASE_B: POWER_COEFFICIENT_PHASE_B,
    POWER_THRESHOLD_T1: POWER_THRESHOLD_T1,
    POWER_THRESHOLD_T2: POWER_THRESHOLD_T2,
    POWER_THRESHOLD_T3: POWER_THRESHOLD_T3,
    POWER_THRESHOLD_T4: POWER_THRESHOLD_T4,
    SET_ALL_SEGMENT_DISPLAY: SET_ALL_SEGMENT_DISPLAY,
    SOFTWARE_VERSION: SOFTWARE_VERSION,
    TOTAL_ACTIVE_ENERGY: TOTAL_ACTIVE_ENERGY,
    TOTAL_EXPORTED_ACTIVE_ENERGY: TOTAL_EXPORTED_ACTIVE_ENERGY,
    VOLTAGE: VOLTAGE
});

invertObject(screenIds);

// this is required to shadow crypto-js implementation
const aes$2 = {
  encrypt: () => {},
  decrypt: () => {}
};

var calculateLrc = (function (data) {
  let initialLrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0x55;
  let lrc = initialLrc;
  data.forEach(item => {
    lrc ^= item;
  });
  return lrc;
});

const ACCESS_LEVEL_MASK = 0x03;
const MESSAGE_HEADER_SIZE = 2;
const BLOCK_SIZE = 16;
const COMMANDS_END_MARK = [0];
const COMMAND_HEADER_SIZE = 2;
const getFromBytes = (fromBytesMap, nameMap) => function () {
  let bytes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const aesKey = config?.aesKey;
  const commands = [];
  const [messageId, maskedAccessLevel] = bytes;
  const accessLevel = maskedAccessLevel & ACCESS_LEVEL_MASK;
  const message = {
    messageId,
    accessLevel,
    commands,
    bytes,
    lrc: {
      received: undefined,
      calculated: 0
    }
  };
  let messageBody = bytes.slice(MESSAGE_HEADER_SIZE);
  let error;
  if (aesKey && accessLevel !== UNENCRYPTED) {
    messageBody = [...aes$2.decrypt(aesKey, messageBody)];
  }
  const receivedLrc = messageBody[messageBody.length - 1];
  messageBody = messageBody.slice(0, -1);
  const calculatedLrc = calculateLrc(messageBody);
  if (accessLevel !== UNENCRYPTED || receivedLrc !== 0) {
    if (receivedLrc !== calculatedLrc) {
      error = 'Mismatch LRC.';
    }
  }
  const accessLevel2 = messageBody[0] & ACCESS_LEVEL_MASK;
  const commandsData = messageBody.slice(1);
  if (accessLevel !== accessLevel2) {
    error = 'Mismatch access levels.';
  }
  let position = 0;
  do {
    const commandId = commandsData[position];
    const commandBodySize = commandsData[position + 1];
    const commandSize = COMMAND_HEADER_SIZE + commandBodySize;
    const commandBody = commandsData.slice(position + COMMAND_HEADER_SIZE, position + commandSize);
    const command = {
      id: commandId,
      name: nameMap[commandId],
      headerSize: COMMAND_HEADER_SIZE,
      bytes: commandsData.slice(position, position + commandSize)
    };
    if (!commandId) {
      break;
    }
    try {
      if (!fromBytesMap[commandId]) {
        throw new Error(`Unsupported command id: ${commandId}!`);
      }
      command.parameters = fromBytesMap[commandId](commandBody, config);
      commands.push(command);
    } catch (exception) {
      commands.push({
        command,
        error: exception.message
      });
    }
    position += commandSize;
  } while (position <= commandsData.length);
  message.lrc.calculated = calculatedLrc;
  message.lrc.received = receivedLrc;
  if (error) {
    return {
      message,
      error
    };
  }
  return message;
};
const getToBytes = toBytesMap => (commands, _ref) => {
  let {
    messageId = 1,
    accessLevel = READ_ONLY,
    aesKey
  } = _ref;
  const commandBytes = commands.map(command => {
    if ('id' in command) {
      return toBytesMap[command.id](command.parameters || {});
    }
    if ('command' in command) {
      return command.command.bytes;
    }
    throw new Error('wrong command format');
  });
  const maskedAccessLevel = accessLevel | 0x10;
  const header = [messageId, maskedAccessLevel];
  let body = [].concat(maskedAccessLevel, ...commandBytes, COMMANDS_END_MARK);
  if (accessLevel !== UNENCRYPTED) {
    const padding = (body.length + 1) % BLOCK_SIZE;
    if (padding) {
      body = body.concat(new Array(BLOCK_SIZE - padding).fill(0));
    }
  }
  body = body.concat(calculateLrc(body));
  if (aesKey && accessLevel !== UNENCRYPTED) {
    body = [...aes$2.encrypt(aesKey, body)];
  }
  return header.concat(body);
};

const toBytesMap$1 = {};
const fromBytesMap$1 = {};
const nameMap$1 = downlinkNames;
const fromBytes$1 = getFromBytes(fromBytesMap$1, nameMap$1);
const toBytes$1 = getToBytes(toBytesMap$1);
toBytesMap$1[id$20] = toBytes$22;
toBytesMap$1[id$1$] = toBytes$21;
toBytesMap$1[id$1_] = toBytes$20;
toBytesMap$1[id$1Z] = toBytes$1$;
toBytesMap$1[id$1Y] = toBytes$1_;
toBytesMap$1[id$1X] = toBytes$1Z;
toBytesMap$1[id$1W] = toBytes$1Y;
toBytesMap$1[id$1V] = toBytes$1X;
toBytesMap$1[id$1U] = toBytes$1W;
toBytesMap$1[id$1T] = toBytes$1V;
toBytesMap$1[id$1S] = toBytes$1U;
toBytesMap$1[id$1R] = toBytes$1T;
toBytesMap$1[id$1Q] = toBytes$1S;
toBytesMap$1[id$1P] = toBytes$1R;
toBytesMap$1[id$1O] = toBytes$1Q;
toBytesMap$1[id$1N] = toBytes$1P;
toBytesMap$1[id$1M] = toBytes$1O;
toBytesMap$1[id$1L] = toBytes$1N;
toBytesMap$1[id$1K] = toBytes$1M;
toBytesMap$1[id$1J] = toBytes$1L;
toBytesMap$1[id$1I] = toBytes$1K;
toBytesMap$1[id$1H] = toBytes$1J;
toBytesMap$1[id$1G] = toBytes$1I;
toBytesMap$1[id$1F] = toBytes$1H;
toBytesMap$1[id$1E] = toBytes$1G;
toBytesMap$1[id$1D] = toBytes$1F;
toBytesMap$1[id$1C] = toBytes$1E;
toBytesMap$1[id$1B] = toBytes$1D;
toBytesMap$1[id$1A] = toBytes$1C;
toBytesMap$1[id$1z] = toBytes$1B;
toBytesMap$1[id$1y] = toBytes$1A;
toBytesMap$1[id$1x] = toBytes$1z;
toBytesMap$1[id$1w] = toBytes$1y;
toBytesMap$1[id$1v] = toBytes$1x;
toBytesMap$1[id$1u] = toBytes$1w;
toBytesMap$1[id$1t] = toBytes$1v;
toBytesMap$1[id$1s] = toBytes$1u;
toBytesMap$1[id$1r] = toBytes$1t;
toBytesMap$1[id$1q] = toBytes$1s;
toBytesMap$1[id$1p] = toBytes$1r;
toBytesMap$1[id$1o] = toBytes$1q;
toBytesMap$1[id$1n] = toBytes$1p;
toBytesMap$1[id$1m] = toBytes$1o;
toBytesMap$1[id$1l] = toBytes$1n;
toBytesMap$1[id$1k] = toBytes$1m;
toBytesMap$1[id$1j] = toBytes$1l;
toBytesMap$1[id$1i] = toBytes$1k;
toBytesMap$1[id$1h] = toBytes$1j;
toBytesMap$1[id$1g] = toBytes$1i;
toBytesMap$1[id$1f] = toBytes$1h;
toBytesMap$1[id$1e] = toBytes$1g;
toBytesMap$1[id$1d] = toBytes$1f;
toBytesMap$1[id$1c] = toBytes$1e;
toBytesMap$1[id$1b] = toBytes$1d;
toBytesMap$1[id$1a] = toBytes$1c;
toBytesMap$1[id$19] = toBytes$1b;
toBytesMap$1[id$18] = toBytes$1a;
toBytesMap$1[id$17] = toBytes$19;
toBytesMap$1[id$16] = toBytes$18;
toBytesMap$1[id$15] = toBytes$17;
toBytesMap$1[id$14] = toBytes$16;
toBytesMap$1[id$13] = toBytes$15;
toBytesMap$1[id$12] = toBytes$14;
fromBytesMap$1[id$20] = fromBytes$22;
fromBytesMap$1[id$1$] = fromBytes$21;
fromBytesMap$1[id$1_] = fromBytes$20;
fromBytesMap$1[id$1Z] = fromBytes$1$;
fromBytesMap$1[id$1Y] = fromBytes$1_;
fromBytesMap$1[id$1X] = fromBytes$1Z;
fromBytesMap$1[id$1W] = fromBytes$1Y;
fromBytesMap$1[id$1V] = fromBytes$1X;
fromBytesMap$1[id$1U] = fromBytes$1W;
fromBytesMap$1[id$1T] = fromBytes$1V;
fromBytesMap$1[id$1S] = fromBytes$1U;
fromBytesMap$1[id$1R] = fromBytes$1T;
fromBytesMap$1[id$1Q] = fromBytes$1S;
fromBytesMap$1[id$1P] = fromBytes$1R;
fromBytesMap$1[id$1O] = fromBytes$1Q;
fromBytesMap$1[id$1N] = fromBytes$1P;
fromBytesMap$1[id$1M] = fromBytes$1O;
fromBytesMap$1[id$1L] = fromBytes$1N;
fromBytesMap$1[id$1K] = fromBytes$1M;
fromBytesMap$1[id$1J] = fromBytes$1L;
fromBytesMap$1[id$1I] = fromBytes$1K;
fromBytesMap$1[id$1H] = fromBytes$1J;
fromBytesMap$1[id$1G] = fromBytes$1I;
fromBytesMap$1[id$1F] = fromBytes$1H;
fromBytesMap$1[id$1E] = fromBytes$1G;
fromBytesMap$1[id$1D] = fromBytes$1F;
fromBytesMap$1[id$1C] = fromBytes$1E;
fromBytesMap$1[id$1B] = fromBytes$1D;
fromBytesMap$1[id$1A] = fromBytes$1C;
fromBytesMap$1[id$1z] = fromBytes$1B;
fromBytesMap$1[id$1y] = fromBytes$1A;
fromBytesMap$1[id$1x] = fromBytes$1z;
fromBytesMap$1[id$1w] = fromBytes$1y;
fromBytesMap$1[id$1v] = fromBytes$1x;
fromBytesMap$1[id$1u] = fromBytes$1w;
fromBytesMap$1[id$1t] = fromBytes$1v;
fromBytesMap$1[id$1s] = fromBytes$1u;
fromBytesMap$1[id$1r] = fromBytes$1t;
fromBytesMap$1[id$1q] = fromBytes$1s;
fromBytesMap$1[id$1p] = fromBytes$1r;
fromBytesMap$1[id$1o] = fromBytes$1q;
fromBytesMap$1[id$1n] = fromBytes$1p;
fromBytesMap$1[id$1m] = fromBytes$1o;
fromBytesMap$1[id$1l] = fromBytes$1n;
fromBytesMap$1[id$1k] = fromBytes$1m;
fromBytesMap$1[id$1j] = fromBytes$1l;
fromBytesMap$1[id$1i] = fromBytes$1k;
fromBytesMap$1[id$1h] = fromBytes$1j;
fromBytesMap$1[id$1g] = fromBytes$1i;
fromBytesMap$1[id$1f] = fromBytes$1h;
fromBytesMap$1[id$1e] = fromBytes$1g;
fromBytesMap$1[id$1d] = fromBytes$1f;
fromBytesMap$1[id$1c] = fromBytes$1e;
fromBytesMap$1[id$1b] = fromBytes$1d;
fromBytesMap$1[id$1a] = fromBytes$1c;
fromBytesMap$1[id$19] = fromBytes$1b;
fromBytesMap$1[id$18] = fromBytes$1a;
fromBytesMap$1[id$17] = fromBytes$19;
fromBytesMap$1[id$16] = fromBytes$18;
fromBytesMap$1[id$15] = fromBytes$17;
fromBytesMap$1[id$14] = fromBytes$16;
fromBytesMap$1[id$13] = fromBytes$15;
fromBytesMap$1[id$12] = fromBytes$14;

var downlink$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    fromBytes: fromBytes$1,
    fromBytesMap: fromBytesMap$1,
    nameMap: nameMap$1,
    toBytes: toBytes$1,
    toBytesMap: toBytesMap$1
});

const toBytesMap = {};
const fromBytesMap = {};
const nameMap = uplinkNames;
const fromBytes = getFromBytes(fromBytesMap, nameMap);
const toBytes = getToBytes(toBytesMap);
toBytesMap[id$11] = toBytes$13;
toBytesMap[id$10] = toBytes$12;
toBytesMap[id$] = toBytes$11;
toBytesMap[id$_] = toBytes$10;
toBytesMap[id$Z] = toBytes$;
toBytesMap[id$Y] = toBytes$_;
toBytesMap[id$X] = toBytes$Z;
toBytesMap[id$W] = toBytes$Y;
toBytesMap[id$V] = toBytes$X;
toBytesMap[id$U] = toBytes$W;
toBytesMap[id$T] = toBytes$V;
toBytesMap[id$S] = toBytes$U;
toBytesMap[id$R] = toBytes$T;
toBytesMap[id$Q] = toBytes$S;
toBytesMap[id$P] = toBytes$R;
toBytesMap[id$O] = toBytes$Q;
toBytesMap[id$N] = toBytes$P;
toBytesMap[id$M] = toBytes$O;
toBytesMap[id$L] = toBytes$N;
toBytesMap[id$K] = toBytes$M;
toBytesMap[id$J] = toBytes$L;
toBytesMap[id$I] = toBytes$K;
toBytesMap[id$H] = toBytes$J;
toBytesMap[id$G] = toBytes$I;
toBytesMap[id$F] = toBytes$H;
toBytesMap[id$E] = toBytes$G;
toBytesMap[id$D] = toBytes$F;
toBytesMap[id$C] = toBytes$E;
toBytesMap[id$B] = toBytes$D;
toBytesMap[id$A] = toBytes$C;
toBytesMap[id$z] = toBytes$B;
toBytesMap[id$y] = toBytes$A;
toBytesMap[id$x] = toBytes$z;
toBytesMap[id$w] = toBytes$y;
toBytesMap[id$v] = toBytes$x;
toBytesMap[id$u] = toBytes$w;
toBytesMap[id$t] = toBytes$v;
toBytesMap[id$s] = toBytes$u;
toBytesMap[id$r] = toBytes$t;
toBytesMap[id$q] = toBytes$s;
toBytesMap[id$p] = toBytes$r;
toBytesMap[id$o] = toBytes$q;
toBytesMap[id$n] = toBytes$p;
toBytesMap[id$m] = toBytes$o;
toBytesMap[id$l] = toBytes$n;
toBytesMap[id$k] = toBytes$m;
toBytesMap[id$j] = toBytes$l;
toBytesMap[id$i] = toBytes$k;
toBytesMap[id$h] = toBytes$j;
toBytesMap[id$g] = toBytes$i;
toBytesMap[id$f] = toBytes$h;
toBytesMap[id$e] = toBytes$g;
toBytesMap[id$d] = toBytes$f;
toBytesMap[id$c] = toBytes$e;
toBytesMap[id$b] = toBytes$d;
toBytesMap[id$a] = toBytes$c;
toBytesMap[id$9] = toBytes$b;
toBytesMap[id$8] = toBytes$a;
toBytesMap[id$7] = toBytes$9;
toBytesMap[id$6] = toBytes$8;
toBytesMap[id$5] = toBytes$7;
toBytesMap[id$4] = toBytes$6;
toBytesMap[id$3] = toBytes$5;
toBytesMap[id$2] = toBytes$4;
toBytesMap[id$1] = toBytes$3;
toBytesMap[id] = toBytes$2;
fromBytesMap[id$11] = fromBytes$13;
fromBytesMap[id$10] = fromBytes$12;
fromBytesMap[id$] = fromBytes$11;
fromBytesMap[id$_] = fromBytes$10;
fromBytesMap[id$Z] = fromBytes$;
fromBytesMap[id$Y] = fromBytes$_;
fromBytesMap[id$X] = fromBytes$Z;
fromBytesMap[id$W] = fromBytes$Y;
fromBytesMap[id$V] = fromBytes$X;
fromBytesMap[id$U] = fromBytes$W;
fromBytesMap[id$T] = fromBytes$V;
fromBytesMap[id$S] = fromBytes$U;
fromBytesMap[id$R] = fromBytes$T;
fromBytesMap[id$Q] = fromBytes$S;
fromBytesMap[id$P] = fromBytes$R;
fromBytesMap[id$O] = fromBytes$Q;
fromBytesMap[id$N] = fromBytes$P;
fromBytesMap[id$M] = fromBytes$O;
fromBytesMap[id$L] = fromBytes$N;
fromBytesMap[id$K] = fromBytes$M;
fromBytesMap[id$J] = fromBytes$L;
fromBytesMap[id$I] = fromBytes$K;
fromBytesMap[id$H] = fromBytes$J;
fromBytesMap[id$G] = fromBytes$I;
fromBytesMap[id$F] = fromBytes$H;
fromBytesMap[id$E] = fromBytes$G;
fromBytesMap[id$D] = fromBytes$F;
fromBytesMap[id$C] = fromBytes$E;
fromBytesMap[id$B] = fromBytes$D;
fromBytesMap[id$A] = fromBytes$C;
fromBytesMap[id$z] = fromBytes$B;
fromBytesMap[id$y] = fromBytes$A;
fromBytesMap[id$x] = fromBytes$z;
fromBytesMap[id$w] = fromBytes$y;
fromBytesMap[id$v] = fromBytes$x;
fromBytesMap[id$u] = fromBytes$w;
fromBytesMap[id$t] = fromBytes$v;
fromBytesMap[id$s] = fromBytes$u;
fromBytesMap[id$r] = fromBytes$t;
fromBytesMap[id$q] = fromBytes$s;
fromBytesMap[id$p] = fromBytes$r;
fromBytesMap[id$o] = fromBytes$q;
fromBytesMap[id$n] = fromBytes$p;
fromBytesMap[id$m] = fromBytes$o;
fromBytesMap[id$l] = fromBytes$n;
fromBytesMap[id$k] = fromBytes$m;
fromBytesMap[id$j] = fromBytes$l;
fromBytesMap[id$i] = fromBytes$k;
fromBytesMap[id$h] = fromBytes$j;
fromBytesMap[id$g] = fromBytes$i;
fromBytesMap[id$f] = fromBytes$h;
fromBytesMap[id$e] = fromBytes$g;
fromBytesMap[id$d] = fromBytes$f;
fromBytesMap[id$c] = fromBytes$e;
fromBytesMap[id$b] = fromBytes$d;
fromBytesMap[id$a] = fromBytes$c;
fromBytesMap[id$9] = fromBytes$b;
fromBytesMap[id$8] = fromBytes$a;
fromBytesMap[id$7] = fromBytes$9;
fromBytesMap[id$6] = fromBytes$8;
fromBytesMap[id$5] = fromBytes$7;
fromBytesMap[id$4] = fromBytes$6;
fromBytesMap[id$3] = fromBytes$5;
fromBytesMap[id$2] = fromBytes$4;
fromBytesMap[id$1] = fromBytes$3;
fromBytesMap[id] = fromBytes$2;

var uplink$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    fromBytes: fromBytes,
    fromBytesMap: fromBytesMap,
    nameMap: nameMap,
    toBytes: toBytes,
    toBytesMap: toBytesMap
});

var mtxMessage = /*#__PURE__*/Object.freeze({
    __proto__: null,
    downlink: downlink$1,
    uplink: uplink$1
});

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var cryptoJs$1 = {exports: {}};

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var core$1 = {exports: {}};

var core = core$1.exports;
var hasRequiredCore;
function requireCore() {
  if (hasRequiredCore) return core$1.exports;
  hasRequiredCore = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory();
      }
    })(core, function () {
      /*globals window, global, require*/

      /**
       * CryptoJS core components.
       */
      var CryptoJS = CryptoJS || function (Math, undefined$1) {
        var crypto;

        // Native crypto from window (Browser)
        if (typeof window !== 'undefined' && window.crypto) {
          crypto = window.crypto;
        }

        // Native crypto in web worker (Browser)
        if (typeof self !== 'undefined' && self.crypto) {
          crypto = self.crypto;
        }

        // Native crypto from worker
        if (typeof globalThis !== 'undefined' && globalThis.crypto) {
          crypto = globalThis.crypto;
        }

        // Native (experimental IE 11) crypto from window (Browser)
        if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
          crypto = window.msCrypto;
        }

        // Native crypto from global (NodeJS)
        if (!crypto && typeof commonjsGlobal !== 'undefined' && commonjsGlobal.crypto) {
          crypto = commonjsGlobal.crypto;
        }

        // Native crypto import via require (NodeJS)
        if (!crypto && typeof commonjsRequire === 'function') {
          try {
            crypto = require('crypto');
          } catch (err) {}
        }

        /*
         * Cryptographically secure pseudorandom number generator
         *
         * As Math.random() is cryptographically not safe to use
         */
        var cryptoSecureRandomInt = function () {
          if (crypto) {
            // Use getRandomValues method (Browser)
            if (typeof crypto.getRandomValues === 'function') {
              try {
                return crypto.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {}
            }

            // Use randomBytes method (NodeJS)
            if (typeof crypto.randomBytes === 'function') {
              try {
                return crypto.randomBytes(4).readInt32LE();
              } catch (err) {}
            }
          }
          throw new Error('Native crypto module could not be used to get secure random number.');
        };

        /*
         * Local polyfill of Object.create
          */
        var create = Object.create || function () {
          function F() {}
          return function (obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();

        /**
         * CryptoJS namespace.
         */
        var C = {};

        /**
         * Library namespace.
         */
        var C_lib = C.lib = {};

        /**
         * Base object for prototypal inheritance.
         */
        var Base = C_lib.Base = function () {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function (overrides) {
              // Spawn
              var subtype = create(this);

              // Augment
              if (overrides) {
                subtype.mixIn(overrides);
              }

              // Create default initializer
              if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                subtype.init = function () {
                  subtype.$super.init.apply(this, arguments);
                };
              }

              // Initializer's prototype is the subtype object
              subtype.init.prototype = subtype;

              // Reference supertype
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function () {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function () {},
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function (properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }

              // IE won't copy toString using the loop above
              if (properties.hasOwnProperty('toString')) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function () {
              return this.init.prototype.extend(this);
            }
          };
        }();

        /**
         * An array of 32-bit words.
         *
         * @property {Array} words The array of 32-bit words.
         * @property {number} sigBytes The number of significant bytes in this word array.
         */
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function (words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined$1) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function (encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function (wordArray) {
            // Shortcuts
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;

            // Clamp excess bits
            this.clamp();

            // Concat
            if (thisSigBytes % 4) {
              // Copy one byte at a time
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              // Copy one word at a time
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;

            // Chainable
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function () {
            // Shortcuts
            var words = this.words;
            var sigBytes = this.sigBytes;

            // Clamp
            words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
            words.length = Math.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function () {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function (nBytes) {
            var words = [];
            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });

        /**
         * Encoder namespace.
         */
        var C_enc = C.enc = {};

        /**
         * Hex encoding strategy.
         */
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;

            // Convert
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 0x0f).toString(16));
            }
            return hexChars.join('');
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function (hexStr) {
            // Shortcut
            var hexStrLength = hexStr.length;

            // Convert
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };

        /**
         * Latin1 encoding strategy.
         */
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;

            // Convert
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join('');
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function (latin1Str) {
            // Shortcut
            var latin1StrLength = latin1Str.length;

            // Convert
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };

        /**
         * UTF-8 encoding strategy.
         */
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function (wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error('Malformed UTF-8 data');
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function (utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };

        /**
         * Abstract buffered block algorithm template.
         *
         * The property blockSize must be implemented in a concrete subtype.
         *
         * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
         */
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function () {
            // Initial values
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function (data) {
            // Convert string to WordArray, else assume WordArray already
            if (typeof data == 'string') {
              data = Utf8.parse(data);
            }

            // Append
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function (doFlush) {
            var processedWords;

            // Shortcuts
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;

            // Count blocks ready
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              // Round up to include partial blocks
              nBlocksReady = Math.ceil(nBlocksReady);
            } else {
              // Round down to include only full blocks,
              // less the number of blocks that must remain in the buffer
              nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }

            // Count words ready
            var nWordsReady = nBlocksReady * blockSize;

            // Count bytes ready
            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

            // Process blocks
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                // Perform concrete-algorithm logic
                this._doProcessBlock(dataWords, offset);
              }

              // Remove processed words
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }

            // Return processed words
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function () {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });

        /**
         * Abstract hasher template.
         *
         * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
         */
        C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function (cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg);

            // Set initial values
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function () {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this);

            // Perform concrete-hasher logic
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function (messageUpdate) {
            // Append
            this._append(messageUpdate);

            // Update the hash
            this._process();

            // Chainable
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function (messageUpdate) {
            // Final message update
            if (messageUpdate) {
              this._append(messageUpdate);
            }

            // Perform concrete-hasher logic
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function (hasher) {
            return function (message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function (hasher) {
            return function (message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });

        /**
         * Algorithm namespace.
         */
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS;
    });
  })(core$1);
  return core$1.exports;
}

var x64Core$1 = {exports: {}};

var x64Core = x64Core$1.exports;
var hasRequiredX64Core;
function requireX64Core() {
  if (hasRequiredX64Core) return x64Core$1.exports;
  hasRequiredX64Core = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory(requireCore());
      }
    })(x64Core, function (CryptoJS) {
      (function (undefined$1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;

        /**
         * x64 namespace.
         */
        var C_x64 = C.x64 = {};

        /**
         * A 64-bit word.
         */
        C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function (high, low) {
            this.high = high;
            this.low = low;
          }

          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;

          // return X64Word.create(high, low);
          // },

          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;

          // return X64Word.create(high, low);
          // },

          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;

          // return X64Word.create(high, low);
          // },

          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;

          // return X64Word.create(high, low);
          // },

          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }

          // return X64Word.create(high, low);
          // },

          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }

          // return X64Word.create(high, low);
          // },

          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },

          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },

          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;

          // return X64Word.create(high, low);
          // }
        });

        /**
         * An array of 64-bit words.
         *
         * @property {Array} words The array of CryptoJS.x64.Word objects.
         * @property {number} sigBytes The number of significant bytes in this word array.
         */
        C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function (words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined$1) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function () {
            // Shortcuts
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;

            // Convert
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function () {
            var clone = Base.clone.call(this);

            // Clone "words" array
            var words = clone.words = this.words.slice(0);

            // Clone each X64Word object
            var wordsLength = words.length;
            for (var i = 0; i < wordsLength; i++) {
              words[i] = words[i].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS;
    });
  })(x64Core$1);
  return x64Core$1.exports;
}

var libTypedarrays$1 = {exports: {}};

var libTypedarrays = libTypedarrays$1.exports;
var hasRequiredLibTypedarrays;
function requireLibTypedarrays() {
  if (hasRequiredLibTypedarrays) return libTypedarrays$1.exports;
  hasRequiredLibTypedarrays = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory(requireCore());
      }
    })(libTypedarrays, function (CryptoJS) {
      (function () {
        // Check if typed arrays are supported
        if (typeof ArrayBuffer != 'function') {
          return;
        }

        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;

        // Reference original init
        var superInit = WordArray.init;

        // Augment WordArray.init to handle typed arrays
        var subInit = WordArray.init = function (typedArray) {
          // Convert buffers to uint8
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }

          // Convert other array views to uint8
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }

          // Handle Uint8Array
          if (typedArray instanceof Uint8Array) {
            // Shortcut
            var typedArrayByteLength = typedArray.byteLength;

            // Extract bytes
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }

            // Initialize this word array
            superInit.call(this, words, typedArrayByteLength);
          } else {
            // Else call normal init
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS.lib.WordArray;
    });
  })(libTypedarrays$1);
  return libTypedarrays$1.exports;
}

var encUtf16$1 = {exports: {}};

var encUtf16 = encUtf16$1.exports;
var hasRequiredEncUtf16;
function requireEncUtf16() {
  if (hasRequiredEncUtf16) return encUtf16$1.exports;
  hasRequiredEncUtf16 = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory(requireCore());
      }
    })(encUtf16, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;

        /**
         * UTF-16 BE encoding strategy.
         */
        C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;

            // Convert
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join('');
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function (utf16Str) {
            // Shortcut
            var utf16StrLength = utf16Str.length;

            // Convert
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };

        /**
         * UTF-16 LE encoding strategy.
         */
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;

            // Convert
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join('');
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function (utf16Str) {
            // Shortcut
            var utf16StrLength = utf16Str.length;

            // Convert
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;
        }
      })();
      return CryptoJS.enc.Utf16;
    });
  })(encUtf16$1);
  return encUtf16$1.exports;
}

var encBase64$1 = {exports: {}};

var encBase64 = encBase64$1.exports;
var hasRequiredEncBase64;
function requireEncBase64() {
  if (hasRequiredEncBase64) return encBase64$1.exports;
  hasRequiredEncBase64 = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory(requireCore());
      }
    })(encBase64, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;

        /**
         * Base64 encoding strategy.
         */
        C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;

            // Clamp excess bits
            wordArray.clamp();

            // Convert
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
              }
            }

            // Add padding
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join('');
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function (base64Str) {
            // Shortcuts
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }

            // Ignore padding
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }

            // Convert
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  })(encBase64$1);
  return encBase64$1.exports;
}

var encBase64url$1 = {exports: {}};

var encBase64url = encBase64url$1.exports;
var hasRequiredEncBase64url;
function requireEncBase64url() {
  if (hasRequiredEncBase64url) return encBase64url$1.exports;
  hasRequiredEncBase64url = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory(requireCore());
      }
    })(encBase64url, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;

        /**
         * Base64url encoding strategy.
         */
        C_enc.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function (wordArray, urlSafe) {
            if (urlSafe === undefined) {
              urlSafe = true;
            }
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = urlSafe ? this._safe_map : this._map;

            // Clamp excess bits
            wordArray.clamp();

            // Convert
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
              }
            }

            // Add padding
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join('');
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function (base64Str, urlSafe) {
            if (urlSafe === undefined) {
              urlSafe = true;
            }

            // Shortcuts
            var base64StrLength = base64Str.length;
            var map = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }

            // Ignore padding
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }

            // Convert
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
          _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64url;
    });
  })(encBase64url$1);
  return encBase64url$1.exports;
}

var md5$1 = {exports: {}};

var md5 = md5$1.exports;
var hasRequiredMd5;
function requireMd5() {
  if (hasRequiredMd5) return md5$1.exports;
  hasRequiredMd5 = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory(requireCore());
      }
    })(md5, function (CryptoJS) {
      (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;

        // Constants table
        var T = [];

        // Compute constants
        (function () {
          for (var i = 0; i < 64; i++) {
            T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
          }
        })();

        /**
         * MD5 hash algorithm.
         */
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function () {
            this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
          },
          _doProcessBlock: function (M, offset) {
            // Swap endian
            for (var i = 0; i < 16; i++) {
              // Shortcuts
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
            }

            // Shortcuts
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];

            // Working variables
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];

            // Computation
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);

            // Intermediate hash value
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function () {
            // Shortcuts
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;

            // Add padding
            dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
            data.sigBytes = (dataWords.length + 1) * 4;

            // Hash final blocks
            this._process();

            // Shortcuts
            var hash = this._hash;
            var H = hash.words;

            // Swap endian
            for (var i = 0; i < 4; i++) {
              // Shortcut
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
            }

            // Return final computed hash
            return hash;
          },
          clone: function () {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a, b, c, d, x, s, t) {
          var n = a + (b & c | ~b & d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function GG(a, b, c, d, x, s, t) {
          var n = a + (b & d | c & ~d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function HH(a, b, c, d, x, s, t) {
          var n = a + (b ^ c ^ d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function II(a, b, c, d, x, s, t) {
          var n = a + (c ^ (b | ~d)) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }

        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.MD5('message');
         *     var hash = CryptoJS.MD5(wordArray);
         */
        C.MD5 = Hasher._createHelper(MD5);

        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacMD5(message, key);
         */
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  })(md5$1);
  return md5$1.exports;
}

var sha1$1 = {exports: {}};

var sha1 = sha1$1.exports;
var hasRequiredSha1;
function requireSha1() {
  if (hasRequiredSha1) return sha1$1.exports;
  hasRequiredSha1 = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory(requireCore());
      }
    })(sha1, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;

        // Reusable object
        var W = [];

        /**
         * SHA-1 hash algorithm.
         */
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function () {
            this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
          },
          _doProcessBlock: function (M, offset) {
            // Shortcut
            var H = this._hash.words;

            // Working variables
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e = H[4];

            // Computation
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W[i];
              if (i < 20) {
                t += (b & c | ~b & d) + 0x5a827999;
              } else if (i < 40) {
                t += (b ^ c ^ d) + 0x6ed9eba1;
              } else if (i < 60) {
                t += (b & c | b & d | c & d) - 0x70e44324;
              } else /* if (i < 80) */{
                  t += (b ^ c ^ d) - 0x359d3e2a;
                }
              e = d;
              d = c;
              c = b << 30 | b >>> 2;
              b = a;
              a = t;
            }

            // Intermediate hash value
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e | 0;
          },
          _doFinalize: function () {
            // Shortcuts
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;

            // Add padding
            dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;

            // Hash final blocks
            this._process();

            // Return final computed hash
            return this._hash;
          },
          clone: function () {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });

        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA1('message');
         *     var hash = CryptoJS.SHA1(wordArray);
         */
        C.SHA1 = Hasher._createHelper(SHA1);

        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA1(message, key);
         */
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  })(sha1$1);
  return sha1$1.exports;
}

var sha256$1 = {exports: {}};

var sha256 = sha256$1.exports;
var hasRequiredSha256;
function requireSha256() {
  if (hasRequiredSha256) return sha256$1.exports;
  hasRequiredSha256 = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory(requireCore());
      }
    })(sha256, function (CryptoJS) {
      (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;

        // Initialization and round constants tables
        var H = [];
        var K = [];

        // Compute constants
        (function () {
          function isPrime(n) {
            var sqrtN = Math.sqrt(n);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n) {
            return (n - (n | 0)) * 0x100000000 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();

        // Reusable object
        var W = [];

        /**
         * SHA-256 hash algorithm.
         */
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function () {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function (M, offset) {
            // Shortcut
            var H = this._hash.words;

            // Working variables
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e = H[4];
            var f = H[5];
            var g = H[6];
            var h = H[7];

            // Computation
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e & f ^ ~e & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h + sigma1 + ch + K[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f;
              f = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }

            // Intermediate hash value
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e | 0;
            H[5] = H[5] + f | 0;
            H[6] = H[6] + g | 0;
            H[7] = H[7] + h | 0;
          },
          _doFinalize: function () {
            // Shortcuts
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;

            // Add padding
            dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;

            // Hash final blocks
            this._process();

            // Return final computed hash
            return this._hash;
          },
          clone: function () {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });

        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA256('message');
         *     var hash = CryptoJS.SHA256(wordArray);
         */
        C.SHA256 = Hasher._createHelper(SHA256);

        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA256(message, key);
         */
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  })(sha256$1);
  return sha256$1.exports;
}

var sha224$1 = {exports: {}};

var sha224 = sha224$1.exports;
var hasRequiredSha224;
function requireSha224() {
  if (hasRequiredSha224) return sha224$1.exports;
  hasRequiredSha224 = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireSha256());
      }
    })(sha224, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;

        /**
         * SHA-224 hash algorithm.
         */
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function () {
            this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
          },
          _doFinalize: function () {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });

        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA224('message');
         *     var hash = CryptoJS.SHA224(wordArray);
         */
        C.SHA224 = SHA256._createHelper(SHA224);

        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA224(message, key);
         */
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS.SHA224;
    });
  })(sha224$1);
  return sha224$1.exports;
}

var sha512$1 = {exports: {}};

var sha512 = sha512$1.exports;
var hasRequiredSha512;
function requireSha512() {
  if (hasRequiredSha512) return sha512$1.exports;
  hasRequiredSha512 = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireX64Core());
      }
    })(sha512, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }

        // Constants
        var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];

        // Reusable objects
        var W = [];
        (function () {
          for (var i = 0; i < 80; i++) {
            W[i] = X64Word_create();
          }
        })();

        /**
         * SHA-512 hash algorithm.
         */
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function () {
            this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
          },
          _doProcessBlock: function (M, offset) {
            // Shortcuts
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;

            // Working variables
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;

            // Rounds
            for (var i = 0; i < 80; i++) {
              var Wil;
              var Wih;

              // Shortcut
              var Wi = W[i];

              // Extend message
              if (i < 16) {
                Wih = Wi.high = M[offset + i * 2] | 0;
                Wil = Wi.low = M[offset + i * 2 + 1] | 0;
              } else {
                // Gamma0
                var gamma0x = W[i - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);

                // Gamma1
                var gamma1x = W[i - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);

                // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);

              // t1 = h + sigma1 + ch + K[i] + W[i]
              var Ki = K[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);

              // t2 = sigma0 + maj
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);

              // Update working variables
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }

            // Intermediate hash value
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function () {
            // Shortcuts
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;

            // Add padding
            dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;

            // Hash final blocks
            this._process();

            // Convert hash to 32-bit word array before returning
            var hash = this._hash.toX32();

            // Return final computed hash
            return hash;
          },
          clone: function () {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          },
          blockSize: 1024 / 32
        });

        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA512('message');
         *     var hash = CryptoJS.SHA512(wordArray);
         */
        C.SHA512 = Hasher._createHelper(SHA512);

        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA512(message, key);
         */
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS.SHA512;
    });
  })(sha512$1);
  return sha512$1.exports;
}

var sha384$1 = {exports: {}};

var sha384 = sha384$1.exports;
var hasRequiredSha384;
function requireSha384() {
  if (hasRequiredSha384) return sha384$1.exports;
  hasRequiredSha384 = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireX64Core(), requireSha512());
      }
    })(sha384, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;

        /**
         * SHA-384 hash algorithm.
         */
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function () {
            this._hash = new X64WordArray.init([new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507), new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939), new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511), new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);
          },
          _doFinalize: function () {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });

        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA384('message');
         *     var hash = CryptoJS.SHA384(wordArray);
         */
        C.SHA384 = SHA512._createHelper(SHA384);

        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA384(message, key);
         */
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS.SHA384;
    });
  })(sha384$1);
  return sha384$1.exports;
}

var sha3$1 = {exports: {}};

var sha3 = sha3$1.exports;
var hasRequiredSha3;
function requireSha3() {
  if (hasRequiredSha3) return sha3$1.exports;
  hasRequiredSha3 = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireX64Core());
      }
    })(sha3, function (CryptoJS) {
      (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;

        // Constants tables
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];

        // Compute Constants
        (function () {
          // Compute rho offset constants
          var x = 1,
            y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }

          // Compute pi index constants
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }

          // Compute round constants
          var LFSR = 0x01;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 0x01) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else /* if (bitPosition >= 32) */{
                    roundConstantMsw ^= 1 << bitPosition - 32;
                  }
              }

              // Compute next LFSR
              if (LFSR & 0x80) {
                // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
                LFSR = LFSR << 1 ^ 0x71;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();

        // Reusable objects for temporary values
        var T = [];
        (function () {
          for (var i = 0; i < 25; i++) {
            T[i] = X64Word.create();
          }
        })();

        /**
         * SHA-3 hash algorithm.
         */
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function () {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function (M, offset) {
            // Shortcuts
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;

            // Absorb
            for (var i = 0; i < nBlockSizeLanes; i++) {
              // Shortcuts
              var M2i = M[offset + 2 * i];
              var M2i1 = M[offset + 2 * i + 1];

              // Swap endian
              M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;

              // Absorb message into state
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }

            // Rounds
            for (var round = 0; round < 24; round++) {
              // Theta
              for (var x = 0; x < 5; x++) {
                // Mix column lanes
                var tMsw = 0,
                  tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }

                // Temporary values
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                // Shortcuts
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;

                // Mix surrounding columns
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }

              // Rho Pi
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;

                // Shortcuts
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];

                // Rotate lanes
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else /* if (rhoOffset >= 32) */{
                    tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                    tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                  }

                // Transpose lanes
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }

              // Rho pi at x = y = 0
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;

              // Chi
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  // Shortcuts
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];

                  // Mix rows
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }

              // Iota
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function () {
            // Shortcuts
            var data = this._data;
            var dataWords = data.words;
            this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;

            // Add padding
            dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;
            dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;
            data.sigBytes = dataWords.length * 4;

            // Hash final blocks
            this._process();

            // Shortcuts
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;

            // Squeeze
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              // Shortcuts
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;

              // Swap endian
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;

              // Squeeze state to retrieve hash
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }

            // Return final computed hash
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function () {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone;
          }
        });

        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.SHA3('message');
         *     var hash = CryptoJS.SHA3(wordArray);
         */
        C.SHA3 = Hasher._createHelper(SHA3);

        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacSHA3(message, key);
         */
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS.SHA3;
    });
  })(sha3$1);
  return sha3$1.exports;
}

var ripemd160$1 = {exports: {}};

var ripemd160 = ripemd160$1.exports;
var hasRequiredRipemd160;
function requireRipemd160() {
  if (hasRequiredRipemd160) return ripemd160$1.exports;
  hasRequiredRipemd160 = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory(requireCore());
      }
    })(ripemd160, function (CryptoJS) {
      /** @preserve
      (c) 2012 by Cédric Mesnil. All rights reserved.
      	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
      	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
          - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      */

      (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;

        // Constants table
        var _zl = WordArray.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);
        var _zr = WordArray.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);
        var _sl = WordArray.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);
        var _sr = WordArray.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);
        var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
        var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

        /**
         * RIPEMD160 hash algorithm.
         */
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function () {
            this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
          },
          _doProcessBlock: function (M, offset) {
            // Swap endian
            for (var i = 0; i < 16; i++) {
              // Shortcuts
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];

              // Swap
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
            }
            // Shortcut
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;

            // Working variables
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            // Computation
            var t;
            for (var i = 0; i < 80; i += 1) {
              t = al + M[offset + zl[i]] | 0;
              if (i < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                // if (i<80) {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset + zr[i]] | 0;
              if (i < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                // if (i<80) {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            // Intermediate hash value
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function () {
            // Shortcuts
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;

            // Add padding
            dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;
            data.sigBytes = (dataWords.length + 1) * 4;

            // Hash final blocks
            this._process();

            // Shortcuts
            var hash = this._hash;
            var H = hash.words;

            // Swap endian
            for (var i = 0; i < 5; i++) {
              // Shortcut
              var H_i = H[i];

              // Swap
              H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
            }

            // Return final computed hash
            return hash;
          },
          clone: function () {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }

        /**
         * Shortcut function to the hasher's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         *
         * @return {WordArray} The hash.
         *
         * @static
         *
         * @example
         *
         *     var hash = CryptoJS.RIPEMD160('message');
         *     var hash = CryptoJS.RIPEMD160(wordArray);
         */
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

        /**
         * Shortcut function to the HMAC's object interface.
         *
         * @param {WordArray|string} message The message to hash.
         * @param {WordArray|string} key The secret key.
         *
         * @return {WordArray} The HMAC.
         *
         * @static
         *
         * @example
         *
         *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
         */
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })();
      return CryptoJS.RIPEMD160;
    });
  })(ripemd160$1);
  return ripemd160$1.exports;
}

var hmac$1 = {exports: {}};

var hmac = hmac$1.exports;
var hasRequiredHmac;
function requireHmac() {
  if (hasRequiredHmac) return hmac$1.exports;
  hasRequiredHmac = 1;
  (function (module, exports) {
    (function (root, factory) {
      {
        // CommonJS
        module.exports = factory(requireCore());
      }
    })(hmac, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;

        /**
         * HMAC algorithm.
         */
        C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function (hasher, key) {
            // Init hasher
            hasher = this._hasher = new hasher.init();

            // Convert string to WordArray, else assume WordArray already
            if (typeof key == 'string') {
              key = Utf8.parse(key);
            }

            // Shortcuts
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;

            // Allow arbitrary length keys
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }

            // Clamp excess bits
            key.clamp();

            // Clone key for inner and outer pads
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();

            // Shortcuts
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;

            // XOR keys with pad constants
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 0x5c5c5c5c;
              iKeyWords[i] ^= 0x36363636;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

            // Set initial values
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function () {
            // Shortcut
            var hasher = this._hasher;

            // Reset
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function (messageUpdate) {
            this._hasher.update(messageUpdate);

            // Chainable
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function (messageUpdate) {
            // Shortcut
            var hasher = this._hasher;

            // Compute HMAC
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  })(hmac$1);
  return hmac$1.exports;
}

var pbkdf2$1 = {exports: {}};

var pbkdf2 = pbkdf2$1.exports;
var hasRequiredPbkdf2;
function requirePbkdf2() {
  if (hasRequiredPbkdf2) return pbkdf2$1.exports;
  hasRequiredPbkdf2 = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireSha256(), requireHmac());
      }
    })(pbkdf2, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var HMAC = C_algo.HMAC;

        /**
         * Password-Based Key Derivation Function 2 algorithm.
         */
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA256
           * @property {number} iterations The number of iterations to perform. Default: 250000
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA256,
            iterations: 250000
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function (cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function (password, salt) {
            // Shortcut
            var cfg = this.cfg;

            // Init HMAC
            var hmac = HMAC.create(cfg.hasher, password);

            // Initial values
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([0x00000001]);

            // Shortcuts
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;

            // Generate key
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();

              // Shortcuts
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;

              // Iterations
              var intermediate = block;
              for (var i = 1; i < iterations; i++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();

                // Shortcut
                var intermediateWords = intermediate.words;

                // XOR intermediate with block
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });

        /**
         * Computes the Password-Based Key Derivation Function 2.
         *
         * @param {WordArray|string} password The password.
         * @param {WordArray|string} salt A salt.
         * @param {Object} cfg (Optional) The configuration options to use for this computation.
         *
         * @return {WordArray} The derived key.
         *
         * @static
         *
         * @example
         *
         *     var key = CryptoJS.PBKDF2(password, salt);
         *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
         *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
         */
        C.PBKDF2 = function (password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.PBKDF2;
    });
  })(pbkdf2$1);
  return pbkdf2$1.exports;
}

var evpkdf$1 = {exports: {}};

var evpkdf = evpkdf$1.exports;
var hasRequiredEvpkdf;
function requireEvpkdf() {
  if (hasRequiredEvpkdf) return evpkdf$1.exports;
  hasRequiredEvpkdf = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireSha1(), requireHmac());
      }
    })(evpkdf, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;

        /**
         * This key derivation function is meant to conform with EVP_BytesToKey.
         * www.openssl.org/docs/crypto/EVP_BytesToKey.html
         */
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function (cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function (password, salt) {
            var block;

            // Shortcut
            var cfg = this.cfg;

            // Init hasher
            var hasher = cfg.hasher.create();

            // Initial values
            var derivedKey = WordArray.create();

            // Shortcuts
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;

            // Generate key
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();

              // Iterations
              for (var i = 1; i < iterations; i++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });

        /**
         * Derives a key from a password.
         *
         * @param {WordArray|string} password The password.
         * @param {WordArray|string} salt A salt.
         * @param {Object} cfg (Optional) The configuration options to use for this computation.
         *
         * @return {WordArray} The derived key.
         *
         * @static
         *
         * @example
         *
         *     var key = CryptoJS.EvpKDF(password, salt);
         *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
         *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
         */
        C.EvpKDF = function (password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  })(evpkdf$1);
  return evpkdf$1.exports;
}

var cipherCore$1 = {exports: {}};

var cipherCore = cipherCore$1.exports;
var hasRequiredCipherCore;
function requireCipherCore() {
  if (hasRequiredCipherCore) return cipherCore$1.exports;
  hasRequiredCipherCore = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireEvpkdf());
      }
    })(cipherCore, function (CryptoJS) {
      /**
       * Cipher core components.
       */
      CryptoJS.lib.Cipher || function (undefined$1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;

        /**
         * Abstract base cipher template.
         *
         * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
         * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
         * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
         * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
         */
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function (key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function (key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function (xformMode, key, cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg);

            // Store transform mode and key
            this._xformMode = xformMode;
            this._key = key;

            // Set initial values
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function () {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this);

            // Perform concrete-cipher logic
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function (dataUpdate) {
            // Append
            this._append(dataUpdate);

            // Process available blocks
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function (dataUpdate) {
            // Final data update
            if (dataUpdate) {
              this._append(dataUpdate);
            }

            // Perform concrete-cipher logic
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: function () {
            function selectCipherStrategy(key) {
              if (typeof key == 'string') {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function (cipher) {
              return {
                encrypt: function (message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function (ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });

        /**
         * Abstract base stream cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
         */
        C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function () {
            // Process partial blocks
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });

        /**
         * Mode namespace.
         */
        var C_mode = C.mode = {};

        /**
         * Abstract base block cipher mode template.
         */
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function (cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function (cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function (cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });

        /**
         * Cipher Block Chaining mode.
         */
        var CBC = C_mode.CBC = function () {
          /**
           * Abstract base CBC mode.
           */
          var CBC = BlockCipherMode.extend();

          /**
           * CBC encryptor.
           */
          CBC.Encryptor = CBC.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function (words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;

              // XOR and encrypt
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);

              // Remember this block to use with next block
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });

          /**
           * CBC decryptor.
           */
          CBC.Decryptor = CBC.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function (words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;

              // Remember this block to use with next block
              var thisBlock = words.slice(offset, offset + blockSize);

              // Decrypt and XOR
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);

              // This block becomes the previous block
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block;

            // Shortcut
            var iv = this._iv;

            // Choose mixing block
            if (iv) {
              block = iv;

              // Remove IV for subsequent blocks
              this._iv = undefined$1;
            } else {
              block = this._prevBlock;
            }

            // XOR blocks
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }
          return CBC;
        }();

        /**
         * Padding namespace.
         */
        var C_pad = C.pad = {};

        /**
         * PKCS #5/7 padding strategy.
         */
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function (data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4;

            // Count padding bytes
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

            // Create padding word
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;

            // Create padding
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);

            // Add padding
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function (data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

            // Remove padding
            data.sigBytes -= nPaddingBytes;
          }
        };

        /**
         * Abstract base block cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
         */
        C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function () {
            var modeCreator;

            // Reset cipher
            Cipher.reset.call(this);

            // Shortcuts
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;

            // Reset block mode
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
                modeCreator = mode.createDecryptor;
                // Keep at least one block in the buffer for unpadding
                this._minBufferSize = 1;
              }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function (words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function () {
            var finalProcessedBlocks;

            // Shortcut
            var padding = this.cfg.padding;

            // Finalize
            if (this._xformMode == this._ENC_XFORM_MODE) {
              // Pad data
              padding.pad(this._data, this.blockSize);

              // Process final blocks
              finalProcessedBlocks = this._process(true);
            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
                // Process final blocks
                finalProcessedBlocks = this._process(true);

                // Unpad data
                padding.unpad(finalProcessedBlocks);
              }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });

        /**
         * A collection of cipher parameters.
         *
         * @property {WordArray} ciphertext The raw ciphertext.
         * @property {WordArray} key The key to this ciphertext.
         * @property {WordArray} iv The IV used in the ciphering operation.
         * @property {WordArray} salt The salt used with a key derivation function.
         * @property {Cipher} algorithm The cipher algorithm.
         * @property {Mode} mode The block mode used in the ciphering operation.
         * @property {Padding} padding The padding scheme used in the ciphering operation.
         * @property {number} blockSize The block size of the cipher.
         * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
         */
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function (cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function (formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });

        /**
         * Format namespace.
         */
        var C_format = C.format = {};

        /**
         * OpenSSL formatting strategy.
         */
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function (cipherParams) {
            var wordArray;

            // Shortcuts
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;

            // Format
            if (salt) {
              wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function (openSSLStr) {
            var salt;

            // Parse base64
            var ciphertext = Base64.parse(openSSLStr);

            // Shortcut
            var ciphertextWords = ciphertext.words;

            // Test for salt
            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
              // Extract salt
              salt = WordArray.create(ciphertextWords.slice(2, 4));

              // Remove salt from ciphertext
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({
              ciphertext: ciphertext,
              salt: salt
            });
          }
        };

        /**
         * A cipher wrapper that returns ciphertext as a serializable cipher params object.
         */
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function (cipher, message, key, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg);

            // Encrypt
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);

            // Shortcut
            var cipherCfg = encryptor.cfg;

            // Create and return serializable cipher params
            return CipherParams.create({
              ciphertext: ciphertext,
              key: key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function (cipher, ciphertext, key, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg);

            // Convert string to CipherParams
            ciphertext = this._parse(ciphertext, cfg.format);

            // Decrypt
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function (ciphertext, format) {
            if (typeof ciphertext == 'string') {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });

        /**
         * Key derivation function namespace.
         */
        var C_kdf = C.kdf = {};

        /**
         * OpenSSL key derivation function.
         */
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function (password, keySize, ivSize, salt, hasher) {
            // Generate random salt
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }

            // Derive key and IV
            if (!hasher) {
              var key = EvpKDF.create({
                keySize: keySize + ivSize
              }).compute(password, salt);
            } else {
              var key = EvpKDF.create({
                keySize: keySize + ivSize,
                hasher: hasher
              }).compute(password, salt);
            }

            // Separate key and IV
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;

            // Return params
            return CipherParams.create({
              key: key,
              iv: iv,
              salt: salt
            });
          }
        };

        /**
         * A serializable cipher wrapper that derives the key from a password,
         * and returns ciphertext as a serializable cipher params object.
         */
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function (cipher, message, password, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg);

            // Derive key and other params
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);

            // Add IV to config
            cfg.iv = derivedParams.iv;

            // Encrypt
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

            // Mix in derived params
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function (cipher, ciphertext, password, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg);

            // Convert string to CipherParams
            ciphertext = this._parse(ciphertext, cfg.format);

            // Derive key and other params
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);

            // Add IV to config
            cfg.iv = derivedParams.iv;

            // Decrypt
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  })(cipherCore$1);
  return cipherCore$1.exports;
}

var modeCfb$1 = {exports: {}};

var modeCfb = modeCfb$1.exports;
var hasRequiredModeCfb;
function requireModeCfb() {
  if (hasRequiredModeCfb) return modeCfb$1.exports;
  hasRequiredModeCfb = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(modeCfb, function (CryptoJS) {
      /**
       * Cipher Feedback block mode.
       */
      CryptoJS.mode.CFB = function () {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function (words, offset) {
            // Shortcuts
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

            // Remember this block to use with next block
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function (words, offset) {
            // Shortcuts
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;

            // Remember this block to use with next block
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

            // This block becomes the previous block
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;

          // Shortcut
          var iv = this._iv;

          // Generate keystream
          if (iv) {
            keystream = iv.slice(0);

            // Remove IV for subsequent blocks
            this._iv = undefined;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);

          // Encrypt
          for (var i = 0; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
        return CFB;
      }();
      return CryptoJS.mode.CFB;
    });
  })(modeCfb$1);
  return modeCfb$1.exports;
}

var modeCtr$1 = {exports: {}};

var modeCtr = modeCtr$1.exports;
var hasRequiredModeCtr;
function requireModeCtr() {
  if (hasRequiredModeCtr) return modeCtr$1.exports;
  hasRequiredModeCtr = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(modeCtr, function (CryptoJS) {
      /**
       * Counter block mode.
       */
      CryptoJS.mode.CTR = function () {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function (words, offset) {
            // Shortcuts
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;

            // Generate keystream
            if (iv) {
              counter = this._counter = iv.slice(0);

              // Remove IV for subsequent blocks
              this._iv = undefined;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);

            // Increment counter
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;

            // Encrypt
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS.mode.CTR;
    });
  })(modeCtr$1);
  return modeCtr$1.exports;
}

var modeCtrGladman$1 = {exports: {}};

var modeCtrGladman = modeCtrGladman$1.exports;
var hasRequiredModeCtrGladman;
function requireModeCtrGladman() {
  if (hasRequiredModeCtrGladman) return modeCtrGladman$1.exports;
  hasRequiredModeCtrGladman = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(modeCtrGladman, function (CryptoJS) {
      /** @preserve
       * Counter block mode compatible with  Dr Brian Gladman fileenc.c
       * derived from CryptoJS.mode.CTR
       * Jan Hruby jhruby.web@gmail.com
       */
      CryptoJS.mode.CTRGladman = function () {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 0xff) === 0xff) {
            //overflow
            var b1 = word >> 16 & 0xff;
            var b2 = word >> 8 & 0xff;
            var b3 = word & 0xff;
            if (b1 === 0xff)
              // overflow b1
              {
                b1 = 0;
                if (b2 === 0xff) {
                  b2 = 0;
                  if (b3 === 0xff) {
                    b3 = 0;
                  } else {
                    ++b3;
                  }
                } else {
                  ++b2;
                }
              } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 0x01 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function (words, offset) {
            // Shortcuts
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;

            // Generate keystream
            if (iv) {
              counter = this._counter = iv.slice(0);

              // Remove IV for subsequent blocks
              this._iv = undefined;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);

            // Encrypt
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS.mode.CTRGladman;
    });
  })(modeCtrGladman$1);
  return modeCtrGladman$1.exports;
}

var modeOfb$1 = {exports: {}};

var modeOfb = modeOfb$1.exports;
var hasRequiredModeOfb;
function requireModeOfb() {
  if (hasRequiredModeOfb) return modeOfb$1.exports;
  hasRequiredModeOfb = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(modeOfb, function (CryptoJS) {
      /**
       * Output Feedback block mode.
       */
      CryptoJS.mode.OFB = function () {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function (words, offset) {
            // Shortcuts
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;

            // Generate keystream
            if (iv) {
              keystream = this._keystream = iv.slice(0);

              // Remove IV for subsequent blocks
              this._iv = undefined;
            }
            cipher.encryptBlock(keystream, 0);

            // Encrypt
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS.mode.OFB;
    });
  })(modeOfb$1);
  return modeOfb$1.exports;
}

var modeEcb$1 = {exports: {}};

var modeEcb = modeEcb$1.exports;
var hasRequiredModeEcb;
function requireModeEcb() {
  if (hasRequiredModeEcb) return modeEcb$1.exports;
  hasRequiredModeEcb = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(modeEcb, function (CryptoJS) {
      /**
       * Electronic Codebook block mode.
       */
      CryptoJS.mode.ECB = function () {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function (words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function (words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS.mode.ECB;
    });
  })(modeEcb$1);
  return modeEcb$1.exports;
}

var padAnsix923$1 = {exports: {}};

var padAnsix923 = padAnsix923$1.exports;
var hasRequiredPadAnsix923;
function requirePadAnsix923() {
  if (hasRequiredPadAnsix923) return padAnsix923$1.exports;
  hasRequiredPadAnsix923 = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(padAnsix923, function (CryptoJS) {
      /**
       * ANSI X.923 padding strategy.
       */
      CryptoJS.pad.AnsiX923 = {
        pad: function (data, blockSize) {
          // Shortcuts
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;

          // Count padding bytes
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

          // Compute last byte position
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;

          // Pad
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function (data) {
          // Get number of padding bytes from last byte
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

          // Remove padding
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Ansix923;
    });
  })(padAnsix923$1);
  return padAnsix923$1.exports;
}

var padIso10126$1 = {exports: {}};

var padIso10126 = padIso10126$1.exports;
var hasRequiredPadIso10126;
function requirePadIso10126() {
  if (hasRequiredPadIso10126) return padIso10126$1.exports;
  hasRequiredPadIso10126 = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(padIso10126, function (CryptoJS) {
      /**
       * ISO 10126 padding strategy.
       */
      CryptoJS.pad.Iso10126 = {
        pad: function (data, blockSize) {
          // Shortcut
          var blockSizeBytes = blockSize * 4;

          // Count padding bytes
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

          // Pad
          data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function (data) {
          // Get number of padding bytes from last byte
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

          // Remove padding
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Iso10126;
    });
  })(padIso10126$1);
  return padIso10126$1.exports;
}

var padIso97971$1 = {exports: {}};

var padIso97971 = padIso97971$1.exports;
var hasRequiredPadIso97971;
function requirePadIso97971() {
  if (hasRequiredPadIso97971) return padIso97971$1.exports;
  hasRequiredPadIso97971 = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(padIso97971, function (CryptoJS) {
      /**
       * ISO/IEC 9797-1 Padding Method 2.
       */
      CryptoJS.pad.Iso97971 = {
        pad: function (data, blockSize) {
          // Add 0x80 byte
          data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

          // Zero pad the rest
          CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function (data) {
          // Remove zero padding
          CryptoJS.pad.ZeroPadding.unpad(data);

          // Remove one more byte -- the 0x80 byte
          data.sigBytes--;
        }
      };
      return CryptoJS.pad.Iso97971;
    });
  })(padIso97971$1);
  return padIso97971$1.exports;
}

var padZeropadding$1 = {exports: {}};

var padZeropadding = padZeropadding$1.exports;
var hasRequiredPadZeropadding;
function requirePadZeropadding() {
  if (hasRequiredPadZeropadding) return padZeropadding$1.exports;
  hasRequiredPadZeropadding = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(padZeropadding, function (CryptoJS) {
      /**
       * Zero padding strategy.
       */
      CryptoJS.pad.ZeroPadding = {
        pad: function (data, blockSize) {
          // Shortcut
          var blockSizeBytes = blockSize * 4;

          // Pad
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function (data) {
          // Shortcut
          var dataWords = data.words;

          // Unpad
          var i = data.sigBytes - 1;
          for (var i = data.sigBytes - 1; i >= 0; i--) {
            if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff) {
              data.sigBytes = i + 1;
              break;
            }
          }
        }
      };
      return CryptoJS.pad.ZeroPadding;
    });
  })(padZeropadding$1);
  return padZeropadding$1.exports;
}

var padNopadding$1 = {exports: {}};

var padNopadding = padNopadding$1.exports;
var hasRequiredPadNopadding;
function requirePadNopadding() {
  if (hasRequiredPadNopadding) return padNopadding$1.exports;
  hasRequiredPadNopadding = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(padNopadding, function (CryptoJS) {
      /**
       * A noop padding strategy.
       */
      CryptoJS.pad.NoPadding = {
        pad: function () {},
        unpad: function () {}
      };
      return CryptoJS.pad.NoPadding;
    });
  })(padNopadding$1);
  return padNopadding$1.exports;
}

var formatHex$1 = {exports: {}};

var formatHex = formatHex$1.exports;
var hasRequiredFormatHex;
function requireFormatHex() {
  if (hasRequiredFormatHex) return formatHex$1.exports;
  hasRequiredFormatHex = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireCipherCore());
      }
    })(formatHex, function (CryptoJS) {
      (function (undefined$1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function (cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function (input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({
              ciphertext: ciphertext
            });
          }
        };
      })();
      return CryptoJS.format.Hex;
    });
  })(formatHex$1);
  return formatHex$1.exports;
}

var aes$1 = {exports: {}};

var aes = aes$1.exports;
var hasRequiredAes;
function requireAes() {
  if (hasRequiredAes) return aes$1.exports;
  hasRequiredAes = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(aes, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;

        // Lookup tables
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];

        // Compute lookup tables
        (function () {
          // Compute double table
          var d = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d[i] = i << 1;
            } else {
              d[i] = i << 1 ^ 0x11b;
            }
          }

          // Walk GF(2^8)
          var x = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            // Compute sbox
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;

            // Compute multiplication
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];

            // Compute sub bytes, mix columns tables
            var t = d[sx] * 0x101 ^ sx * 0x1010100;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;

            // Compute inv sub bytes, inv mix columns tables
            var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;

            // Compute next counter
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
        })();

        // Precomputed Rcon lookup
        var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

        /**
         * AES block cipher algorithm.
         */
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function () {
            var t;

            // Skip reset of nRounds has been set before and key did not change
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }

            // Shortcuts
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;

            // Compute number of rounds
            var nRounds = this._nRounds = keySize + 6;

            // Compute number of key schedule rows
            var ksRows = (nRounds + 1) * 4;

            // Compute key schedule
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  // Rot word
                  t = t << 8 | t >>> 24;

                  // Sub word
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];

                  // Mix Rcon
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  // Sub word
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }

            // Compute inv key schedule
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
              }
            }
          },
          encryptBlock: function (M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function (M, offset) {
            // Swap 2nd and 4th rows
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

            // Inv swap 2nd and 4th rows
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
          },
          _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
            // Shortcut
            var nRounds = this._nRounds;

            // Get input, add round key
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];

            // Key schedule row counter
            var ksRow = 4;

            // Rounds
            for (var round = 1; round < nRounds; round++) {
              // Shift rows, sub bytes, mix columns, add round key
              var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

              // Update state
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }

            // Shift rows, sub bytes, add round key
            var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
            var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
            var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
            var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

            // Set output
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });

        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
         */
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  })(aes$1);
  return aes$1.exports;
}

var tripledes$1 = {exports: {}};

var tripledes = tripledes$1.exports;
var hasRequiredTripledes;
function requireTripledes() {
  if (hasRequiredTripledes) return tripledes$1.exports;
  hasRequiredTripledes = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(tripledes, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;

        // Permuted Choice 1 constants
        var PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4];

        // Permuted Choice 2 constants
        var PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32];

        // Cumulative bit shift constants
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

        // SBOXes and round permutation constants
        var SBOX_P = [{
          0x0: 0x808200,
          0x10000000: 0x8000,
          0x20000000: 0x808002,
          0x30000000: 0x2,
          0x40000000: 0x200,
          0x50000000: 0x808202,
          0x60000000: 0x800202,
          0x70000000: 0x800000,
          0x80000000: 0x202,
          0x90000000: 0x800200,
          0xa0000000: 0x8200,
          0xb0000000: 0x808000,
          0xc0000000: 0x8002,
          0xd0000000: 0x800002,
          0xe0000000: 0x0,
          0xf0000000: 0x8202,
          0x8000000: 0x0,
          0x18000000: 0x808202,
          0x28000000: 0x8202,
          0x38000000: 0x8000,
          0x48000000: 0x808200,
          0x58000000: 0x200,
          0x68000000: 0x808002,
          0x78000000: 0x2,
          0x88000000: 0x800200,
          0x98000000: 0x8200,
          0xa8000000: 0x808000,
          0xb8000000: 0x800202,
          0xc8000000: 0x800002,
          0xd8000000: 0x8002,
          0xe8000000: 0x202,
          0xf8000000: 0x800000,
          0x1: 0x8000,
          0x10000001: 0x2,
          0x20000001: 0x808200,
          0x30000001: 0x800000,
          0x40000001: 0x808002,
          0x50000001: 0x8200,
          0x60000001: 0x200,
          0x70000001: 0x800202,
          0x80000001: 0x808202,
          0x90000001: 0x808000,
          0xa0000001: 0x800002,
          0xb0000001: 0x8202,
          0xc0000001: 0x202,
          0xd0000001: 0x800200,
          0xe0000001: 0x8002,
          0xf0000001: 0x0,
          0x8000001: 0x808202,
          0x18000001: 0x808000,
          0x28000001: 0x800000,
          0x38000001: 0x200,
          0x48000001: 0x8000,
          0x58000001: 0x800002,
          0x68000001: 0x2,
          0x78000001: 0x8202,
          0x88000001: 0x8002,
          0x98000001: 0x800202,
          0xa8000001: 0x202,
          0xb8000001: 0x808200,
          0xc8000001: 0x800200,
          0xd8000001: 0x0,
          0xe8000001: 0x8200,
          0xf8000001: 0x808002
        }, {
          0x0: 0x40084010,
          0x1000000: 0x4000,
          0x2000000: 0x80000,
          0x3000000: 0x40080010,
          0x4000000: 0x40000010,
          0x5000000: 0x40084000,
          0x6000000: 0x40004000,
          0x7000000: 0x10,
          0x8000000: 0x84000,
          0x9000000: 0x40004010,
          0xa000000: 0x40000000,
          0xb000000: 0x84010,
          0xc000000: 0x80010,
          0xd000000: 0x0,
          0xe000000: 0x4010,
          0xf000000: 0x40080000,
          0x800000: 0x40004000,
          0x1800000: 0x84010,
          0x2800000: 0x10,
          0x3800000: 0x40004010,
          0x4800000: 0x40084010,
          0x5800000: 0x40000000,
          0x6800000: 0x80000,
          0x7800000: 0x40080010,
          0x8800000: 0x80010,
          0x9800000: 0x0,
          0xa800000: 0x4000,
          0xb800000: 0x40080000,
          0xc800000: 0x40000010,
          0xd800000: 0x84000,
          0xe800000: 0x40084000,
          0xf800000: 0x4010,
          0x10000000: 0x0,
          0x11000000: 0x40080010,
          0x12000000: 0x40004010,
          0x13000000: 0x40084000,
          0x14000000: 0x40080000,
          0x15000000: 0x10,
          0x16000000: 0x84010,
          0x17000000: 0x4000,
          0x18000000: 0x4010,
          0x19000000: 0x80000,
          0x1a000000: 0x80010,
          0x1b000000: 0x40000010,
          0x1c000000: 0x84000,
          0x1d000000: 0x40004000,
          0x1e000000: 0x40000000,
          0x1f000000: 0x40084010,
          0x10800000: 0x84010,
          0x11800000: 0x80000,
          0x12800000: 0x40080000,
          0x13800000: 0x4000,
          0x14800000: 0x40004000,
          0x15800000: 0x40084010,
          0x16800000: 0x10,
          0x17800000: 0x40000000,
          0x18800000: 0x40084000,
          0x19800000: 0x40000010,
          0x1a800000: 0x40004010,
          0x1b800000: 0x80010,
          0x1c800000: 0x0,
          0x1d800000: 0x4010,
          0x1e800000: 0x40080010,
          0x1f800000: 0x84000
        }, {
          0x0: 0x104,
          0x100000: 0x0,
          0x200000: 0x4000100,
          0x300000: 0x10104,
          0x400000: 0x10004,
          0x500000: 0x4000004,
          0x600000: 0x4010104,
          0x700000: 0x4010000,
          0x800000: 0x4000000,
          0x900000: 0x4010100,
          0xa00000: 0x10100,
          0xb00000: 0x4010004,
          0xc00000: 0x4000104,
          0xd00000: 0x10000,
          0xe00000: 0x4,
          0xf00000: 0x100,
          0x80000: 0x4010100,
          0x180000: 0x4010004,
          0x280000: 0x0,
          0x380000: 0x4000100,
          0x480000: 0x4000004,
          0x580000: 0x10000,
          0x680000: 0x10004,
          0x780000: 0x104,
          0x880000: 0x4,
          0x980000: 0x100,
          0xa80000: 0x4010000,
          0xb80000: 0x10104,
          0xc80000: 0x10100,
          0xd80000: 0x4000104,
          0xe80000: 0x4010104,
          0xf80000: 0x4000000,
          0x1000000: 0x4010100,
          0x1100000: 0x10004,
          0x1200000: 0x10000,
          0x1300000: 0x4000100,
          0x1400000: 0x100,
          0x1500000: 0x4010104,
          0x1600000: 0x4000004,
          0x1700000: 0x0,
          0x1800000: 0x4000104,
          0x1900000: 0x4000000,
          0x1a00000: 0x4,
          0x1b00000: 0x10100,
          0x1c00000: 0x4010000,
          0x1d00000: 0x104,
          0x1e00000: 0x10104,
          0x1f00000: 0x4010004,
          0x1080000: 0x4000000,
          0x1180000: 0x104,
          0x1280000: 0x4010100,
          0x1380000: 0x0,
          0x1480000: 0x10004,
          0x1580000: 0x4000100,
          0x1680000: 0x100,
          0x1780000: 0x4010004,
          0x1880000: 0x10000,
          0x1980000: 0x4010104,
          0x1a80000: 0x10104,
          0x1b80000: 0x4000004,
          0x1c80000: 0x4000104,
          0x1d80000: 0x4010000,
          0x1e80000: 0x4,
          0x1f80000: 0x10100
        }, {
          0x0: 0x80401000,
          0x10000: 0x80001040,
          0x20000: 0x401040,
          0x30000: 0x80400000,
          0x40000: 0x0,
          0x50000: 0x401000,
          0x60000: 0x80000040,
          0x70000: 0x400040,
          0x80000: 0x80000000,
          0x90000: 0x400000,
          0xa0000: 0x40,
          0xb0000: 0x80001000,
          0xc0000: 0x80400040,
          0xd0000: 0x1040,
          0xe0000: 0x1000,
          0xf0000: 0x80401040,
          0x8000: 0x80001040,
          0x18000: 0x40,
          0x28000: 0x80400040,
          0x38000: 0x80001000,
          0x48000: 0x401000,
          0x58000: 0x80401040,
          0x68000: 0x0,
          0x78000: 0x80400000,
          0x88000: 0x1000,
          0x98000: 0x80401000,
          0xa8000: 0x400000,
          0xb8000: 0x1040,
          0xc8000: 0x80000000,
          0xd8000: 0x400040,
          0xe8000: 0x401040,
          0xf8000: 0x80000040,
          0x100000: 0x400040,
          0x110000: 0x401000,
          0x120000: 0x80000040,
          0x130000: 0x0,
          0x140000: 0x1040,
          0x150000: 0x80400040,
          0x160000: 0x80401000,
          0x170000: 0x80001040,
          0x180000: 0x80401040,
          0x190000: 0x80000000,
          0x1a0000: 0x80400000,
          0x1b0000: 0x401040,
          0x1c0000: 0x80001000,
          0x1d0000: 0x400000,
          0x1e0000: 0x40,
          0x1f0000: 0x1000,
          0x108000: 0x80400000,
          0x118000: 0x80401040,
          0x128000: 0x0,
          0x138000: 0x401000,
          0x148000: 0x400040,
          0x158000: 0x80000000,
          0x168000: 0x80001040,
          0x178000: 0x40,
          0x188000: 0x80000040,
          0x198000: 0x1000,
          0x1a8000: 0x80001000,
          0x1b8000: 0x80400040,
          0x1c8000: 0x1040,
          0x1d8000: 0x80401000,
          0x1e8000: 0x400000,
          0x1f8000: 0x401040
        }, {
          0x0: 0x80,
          0x1000: 0x1040000,
          0x2000: 0x40000,
          0x3000: 0x20000000,
          0x4000: 0x20040080,
          0x5000: 0x1000080,
          0x6000: 0x21000080,
          0x7000: 0x40080,
          0x8000: 0x1000000,
          0x9000: 0x20040000,
          0xa000: 0x20000080,
          0xb000: 0x21040080,
          0xc000: 0x21040000,
          0xd000: 0x0,
          0xe000: 0x1040080,
          0xf000: 0x21000000,
          0x800: 0x1040080,
          0x1800: 0x21000080,
          0x2800: 0x80,
          0x3800: 0x1040000,
          0x4800: 0x40000,
          0x5800: 0x20040080,
          0x6800: 0x21040000,
          0x7800: 0x20000000,
          0x8800: 0x20040000,
          0x9800: 0x0,
          0xa800: 0x21040080,
          0xb800: 0x1000080,
          0xc800: 0x20000080,
          0xd800: 0x21000000,
          0xe800: 0x1000000,
          0xf800: 0x40080,
          0x10000: 0x40000,
          0x11000: 0x80,
          0x12000: 0x20000000,
          0x13000: 0x21000080,
          0x14000: 0x1000080,
          0x15000: 0x21040000,
          0x16000: 0x20040080,
          0x17000: 0x1000000,
          0x18000: 0x21040080,
          0x19000: 0x21000000,
          0x1a000: 0x1040000,
          0x1b000: 0x20040000,
          0x1c000: 0x40080,
          0x1d000: 0x20000080,
          0x1e000: 0x0,
          0x1f000: 0x1040080,
          0x10800: 0x21000080,
          0x11800: 0x1000000,
          0x12800: 0x1040000,
          0x13800: 0x20040080,
          0x14800: 0x20000000,
          0x15800: 0x1040080,
          0x16800: 0x80,
          0x17800: 0x21040000,
          0x18800: 0x40080,
          0x19800: 0x21040080,
          0x1a800: 0x0,
          0x1b800: 0x21000000,
          0x1c800: 0x1000080,
          0x1d800: 0x40000,
          0x1e800: 0x20040000,
          0x1f800: 0x20000080
        }, {
          0x0: 0x10000008,
          0x100: 0x2000,
          0x200: 0x10200000,
          0x300: 0x10202008,
          0x400: 0x10002000,
          0x500: 0x200000,
          0x600: 0x200008,
          0x700: 0x10000000,
          0x800: 0x0,
          0x900: 0x10002008,
          0xa00: 0x202000,
          0xb00: 0x8,
          0xc00: 0x10200008,
          0xd00: 0x202008,
          0xe00: 0x2008,
          0xf00: 0x10202000,
          0x80: 0x10200000,
          0x180: 0x10202008,
          0x280: 0x8,
          0x380: 0x200000,
          0x480: 0x202008,
          0x580: 0x10000008,
          0x680: 0x10002000,
          0x780: 0x2008,
          0x880: 0x200008,
          0x980: 0x2000,
          0xa80: 0x10002008,
          0xb80: 0x10200008,
          0xc80: 0x0,
          0xd80: 0x10202000,
          0xe80: 0x202000,
          0xf80: 0x10000000,
          0x1000: 0x10002000,
          0x1100: 0x10200008,
          0x1200: 0x10202008,
          0x1300: 0x2008,
          0x1400: 0x200000,
          0x1500: 0x10000000,
          0x1600: 0x10000008,
          0x1700: 0x202000,
          0x1800: 0x202008,
          0x1900: 0x0,
          0x1a00: 0x8,
          0x1b00: 0x10200000,
          0x1c00: 0x2000,
          0x1d00: 0x10002008,
          0x1e00: 0x10202000,
          0x1f00: 0x200008,
          0x1080: 0x8,
          0x1180: 0x202000,
          0x1280: 0x200000,
          0x1380: 0x10000008,
          0x1480: 0x10002000,
          0x1580: 0x2008,
          0x1680: 0x10202008,
          0x1780: 0x10200000,
          0x1880: 0x10202000,
          0x1980: 0x10200008,
          0x1a80: 0x2000,
          0x1b80: 0x202008,
          0x1c80: 0x200008,
          0x1d80: 0x0,
          0x1e80: 0x10000000,
          0x1f80: 0x10002008
        }, {
          0x0: 0x100000,
          0x10: 0x2000401,
          0x20: 0x400,
          0x30: 0x100401,
          0x40: 0x2100401,
          0x50: 0x0,
          0x60: 0x1,
          0x70: 0x2100001,
          0x80: 0x2000400,
          0x90: 0x100001,
          0xa0: 0x2000001,
          0xb0: 0x2100400,
          0xc0: 0x2100000,
          0xd0: 0x401,
          0xe0: 0x100400,
          0xf0: 0x2000000,
          0x8: 0x2100001,
          0x18: 0x0,
          0x28: 0x2000401,
          0x38: 0x2100400,
          0x48: 0x100000,
          0x58: 0x2000001,
          0x68: 0x2000000,
          0x78: 0x401,
          0x88: 0x100401,
          0x98: 0x2000400,
          0xa8: 0x2100000,
          0xb8: 0x100001,
          0xc8: 0x400,
          0xd8: 0x2100401,
          0xe8: 0x1,
          0xf8: 0x100400,
          0x100: 0x2000000,
          0x110: 0x100000,
          0x120: 0x2000401,
          0x130: 0x2100001,
          0x140: 0x100001,
          0x150: 0x2000400,
          0x160: 0x2100400,
          0x170: 0x100401,
          0x180: 0x401,
          0x190: 0x2100401,
          0x1a0: 0x100400,
          0x1b0: 0x1,
          0x1c0: 0x0,
          0x1d0: 0x2100000,
          0x1e0: 0x2000001,
          0x1f0: 0x400,
          0x108: 0x100400,
          0x118: 0x2000401,
          0x128: 0x2100001,
          0x138: 0x1,
          0x148: 0x2000000,
          0x158: 0x100000,
          0x168: 0x401,
          0x178: 0x2100400,
          0x188: 0x2000001,
          0x198: 0x2100000,
          0x1a8: 0x0,
          0x1b8: 0x2100401,
          0x1c8: 0x100401,
          0x1d8: 0x400,
          0x1e8: 0x2000400,
          0x1f8: 0x100001
        }, {
          0x0: 0x8000820,
          0x1: 0x20000,
          0x2: 0x8000000,
          0x3: 0x20,
          0x4: 0x20020,
          0x5: 0x8020820,
          0x6: 0x8020800,
          0x7: 0x800,
          0x8: 0x8020000,
          0x9: 0x8000800,
          0xa: 0x20800,
          0xb: 0x8020020,
          0xc: 0x820,
          0xd: 0x0,
          0xe: 0x8000020,
          0xf: 0x20820,
          0x80000000: 0x800,
          0x80000001: 0x8020820,
          0x80000002: 0x8000820,
          0x80000003: 0x8000000,
          0x80000004: 0x8020000,
          0x80000005: 0x20800,
          0x80000006: 0x20820,
          0x80000007: 0x20,
          0x80000008: 0x8000020,
          0x80000009: 0x820,
          0x8000000a: 0x20020,
          0x8000000b: 0x8020800,
          0x8000000c: 0x0,
          0x8000000d: 0x8020020,
          0x8000000e: 0x8000800,
          0x8000000f: 0x20000,
          0x10: 0x20820,
          0x11: 0x8020800,
          0x12: 0x20,
          0x13: 0x800,
          0x14: 0x8000800,
          0x15: 0x8000020,
          0x16: 0x8020020,
          0x17: 0x20000,
          0x18: 0x0,
          0x19: 0x20020,
          0x1a: 0x8020000,
          0x1b: 0x8000820,
          0x1c: 0x8020820,
          0x1d: 0x20800,
          0x1e: 0x820,
          0x1f: 0x8000000,
          0x80000010: 0x20000,
          0x80000011: 0x800,
          0x80000012: 0x8020020,
          0x80000013: 0x20820,
          0x80000014: 0x20,
          0x80000015: 0x8020000,
          0x80000016: 0x8000000,
          0x80000017: 0x8000820,
          0x80000018: 0x8020820,
          0x80000019: 0x8000020,
          0x8000001a: 0x8000800,
          0x8000001b: 0x0,
          0x8000001c: 0x20800,
          0x8000001d: 0x820,
          0x8000001e: 0x20020,
          0x8000001f: 0x8020800
        }];

        // Masks that select the SBOX input
        var SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];

        /**
         * DES block cipher algorithm.
         */
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function () {
            // Shortcuts
            var key = this._key;
            var keyWords = key.words;

            // Select 56 bits according to PC1
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
              var keyBitPos = PC1[i] - 1;
              keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }

            // Assemble 16 subkeys
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              // Create subkey
              var subKey = subKeys[nSubKey] = [];

              // Shortcut
              var bitShift = BIT_SHIFTS[nSubKey];

              // Select 48 bits according to PC2
              for (var i = 0; i < 24; i++) {
                // Select from the left 28 key bits
                subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;

                // Select from the right 28 key bits
                subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
              }

              // Since each subkey is applied to an expanded 32-bit input,
              // the subkey can be broken into 8 values scaled to 32-bits,
              // which allows the key to be used without expansion
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i = 1; i < 7; i++) {
                subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }

            // Compute inverse subkeys
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
              invSubKeys[i] = subKeys[15 - i];
            }
          },
          encryptBlock: function (M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function (M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function (M, offset, subKeys) {
            // Get input
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];

            // Initial permutation
            exchangeLR.call(this, 4, 0x0f0f0f0f);
            exchangeLR.call(this, 16, 0x0000ffff);
            exchangeRL.call(this, 2, 0x33333333);
            exchangeRL.call(this, 8, 0x00ff00ff);
            exchangeLR.call(this, 1, 0x55555555);

            // Rounds
            for (var round = 0; round < 16; round++) {
              // Shortcuts
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;

              // Feistel function
              var f = 0;
              for (var i = 0; i < 8; i++) {
                f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f;
            }

            // Undo swap from last round
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;

            // Final permutation
            exchangeLR.call(this, 1, 0x55555555);
            exchangeRL.call(this, 8, 0x00ff00ff);
            exchangeRL.call(this, 2, 0x33333333);
            exchangeLR.call(this, 16, 0x0000ffff);
            exchangeLR.call(this, 4, 0x0f0f0f0f);

            // Set output
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });

        // Swap bits across the left and right words
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }

        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
         */
        C.DES = BlockCipher._createHelper(DES);

        /**
         * Triple-DES block cipher algorithm.
         */
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function () {
            // Shortcuts
            var key = this._key;
            var keyWords = key.words;
            // Make sure the key length is valid (64, 128 or >= 192 bit)
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');
            }

            // Extend the key according to the keying options defined in 3DES standard
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);

            // Create DES instances
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function (M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function (M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });

        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
         */
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS.TripleDES;
    });
  })(tripledes$1);
  return tripledes$1.exports;
}

var rc4$1 = {exports: {}};

var rc4 = rc4$1.exports;
var hasRequiredRc4;
function requireRc4() {
  if (hasRequiredRc4) return rc4$1.exports;
  hasRequiredRc4 = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(rc4, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;

        /**
         * RC4 stream cipher algorithm.
         */
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function () {
            // Shortcuts
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;

            // Init sbox
            var S = this._S = [];
            for (var i = 0; i < 256; i++) {
              S[i] = i;
            }

            // Key setup
            for (var i = 0, j = 0; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;
              j = (j + S[i] + keyByte) % 256;

              // Swap
              var t = S[i];
              S[i] = S[j];
              S[j] = t;
            }

            // Counters
            this._i = this._j = 0;
          },
          _doProcessBlock: function (M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          // Shortcuts
          var S = this._S;
          var i = this._i;
          var j = this._j;

          // Generate keystream word
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i = (i + 1) % 256;
            j = (j + S[i]) % 256;

            // Swap
            var t = S[i];
            S[i] = S[j];
            S[j] = t;
            keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
          }

          // Update counters
          this._i = i;
          this._j = j;
          return keystreamWord;
        }

        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
         */
        C.RC4 = StreamCipher._createHelper(RC4);

        /**
         * Modified RC4 stream cipher algorithm.
         */
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function () {
            RC4._doReset.call(this);

            // Drop
            for (var i = this.cfg.drop; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });

        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
         */
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS.RC4;
    });
  })(rc4$1);
  return rc4$1.exports;
}

var rabbit$1 = {exports: {}};

var rabbit = rabbit$1.exports;
var hasRequiredRabbit;
function requireRabbit() {
  if (hasRequiredRabbit) return rabbit$1.exports;
  hasRequiredRabbit = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(rabbit, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;

        // Reusable objects
        var S = [];
        var C_ = [];
        var G = [];

        /**
         * Rabbit stream cipher algorithm
         */
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function () {
            // Shortcuts
            var K = this._key.words;
            var iv = this.cfg.iv;

            // Swap endian
            for (var i = 0; i < 4; i++) {
              K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff | (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;
            }

            // Generate initial state values
            var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];

            // Generate initial counter values
            var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];

            // Carry bit
            this._b = 0;

            // Iterate the system four times
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }

            // Modify the counters
            for (var i = 0; i < 8; i++) {
              C[i] ^= X[i + 4 & 7];
            }

            // IV setup
            if (iv) {
              // Shortcuts
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];

              // Generate four subvectors
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
              var i1 = i0 >>> 16 | i2 & 0xffff0000;
              var i3 = i2 << 16 | i0 & 0x0000ffff;

              // Modify counter values
              C[0] ^= i0;
              C[1] ^= i1;
              C[2] ^= i2;
              C[3] ^= i3;
              C[4] ^= i0;
              C[5] ^= i1;
              C[6] ^= i2;
              C[7] ^= i3;

              // Iterate the system four times
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function (M, offset) {
            // Shortcut
            var X = this._X;

            // Iterate the system
            nextState.call(this);

            // Generate four keystream words
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              // Swap endian
              S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;

              // Encrypt
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          // Shortcuts
          var X = this._X;
          var C = this._C;

          // Save old counter values
          for (var i = 0; i < 8; i++) {
            C_[i] = C[i];
          }

          // Calculate new counter values
          C[0] = C[0] + 0x4d34d34d + this._b | 0;
          C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

          // Calculate the g-values
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C[i];

            // Construct high and low argument for squaring
            var ga = gx & 0xffff;
            var gb = gx >>> 16;

            // Calculate high and low result of squaring
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);

            // High XOR low
            G[i] = gh ^ gl;
          }

          // Calculate new state values
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }

        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
         */
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS.Rabbit;
    });
  })(rabbit$1);
  return rabbit$1.exports;
}

var rabbitLegacy$1 = {exports: {}};

var rabbitLegacy = rabbitLegacy$1.exports;
var hasRequiredRabbitLegacy;
function requireRabbitLegacy() {
  if (hasRequiredRabbitLegacy) return rabbitLegacy$1.exports;
  hasRequiredRabbitLegacy = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(rabbitLegacy, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;

        // Reusable objects
        var S = [];
        var C_ = [];
        var G = [];

        /**
         * Rabbit stream cipher algorithm.
         *
         * This is a legacy version that neglected to convert the key to little-endian.
         * This error doesn't affect the cipher's security,
         * but it does affect its compatibility with other implementations.
         */
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function () {
            // Shortcuts
            var K = this._key.words;
            var iv = this.cfg.iv;

            // Generate initial state values
            var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];

            // Generate initial counter values
            var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];

            // Carry bit
            this._b = 0;

            // Iterate the system four times
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }

            // Modify the counters
            for (var i = 0; i < 8; i++) {
              C[i] ^= X[i + 4 & 7];
            }

            // IV setup
            if (iv) {
              // Shortcuts
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];

              // Generate four subvectors
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
              var i1 = i0 >>> 16 | i2 & 0xffff0000;
              var i3 = i2 << 16 | i0 & 0x0000ffff;

              // Modify counter values
              C[0] ^= i0;
              C[1] ^= i1;
              C[2] ^= i2;
              C[3] ^= i3;
              C[4] ^= i0;
              C[5] ^= i1;
              C[6] ^= i2;
              C[7] ^= i3;

              // Iterate the system four times
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function (M, offset) {
            // Shortcut
            var X = this._X;

            // Iterate the system
            nextState.call(this);

            // Generate four keystream words
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              // Swap endian
              S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;

              // Encrypt
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          // Shortcuts
          var X = this._X;
          var C = this._C;

          // Save old counter values
          for (var i = 0; i < 8; i++) {
            C_[i] = C[i];
          }

          // Calculate new counter values
          C[0] = C[0] + 0x4d34d34d + this._b | 0;
          C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

          // Calculate the g-values
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C[i];

            // Construct high and low argument for squaring
            var ga = gx & 0xffff;
            var gb = gx >>> 16;

            // Calculate high and low result of squaring
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);

            // High XOR low
            G[i] = gh ^ gl;
          }

          // Calculate new state values
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }

        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
         */
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS.RabbitLegacy;
    });
  })(rabbitLegacy$1);
  return rabbitLegacy$1.exports;
}

var blowfish$1 = {exports: {}};

var blowfish = blowfish$1.exports;
var hasRequiredBlowfish;
function requireBlowfish() {
  if (hasRequiredBlowfish) return blowfish$1.exports;
  hasRequiredBlowfish = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
      }
    })(blowfish, function (CryptoJS) {
      (function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        const N = 16;

        //Origin pbox and sbox, derived from PI
        const ORIG_P = [0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344, 0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89, 0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C, 0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917, 0x9216D5D9, 0x8979FB1B];
        const ORIG_S = [[0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7, 0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99, 0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16, 0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E, 0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE, 0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013, 0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF, 0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E, 0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60, 0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440, 0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE, 0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A, 0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E, 0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677, 0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193, 0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032, 0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88, 0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239, 0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E, 0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0, 0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3, 0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98, 0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88, 0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE, 0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6, 0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D, 0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B, 0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7, 0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA, 0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463, 0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F, 0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09, 0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3, 0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB, 0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279, 0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8, 0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB, 0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82, 0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB, 0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573, 0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0, 0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B, 0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790, 0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8, 0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4, 0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0, 0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7, 0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C, 0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD, 0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1, 0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299, 0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9, 0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477, 0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF, 0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49, 0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF, 0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA, 0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5, 0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41, 0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915, 0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400, 0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915, 0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664, 0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A], [0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623, 0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266, 0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1, 0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E, 0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6, 0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1, 0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E, 0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1, 0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737, 0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8, 0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF, 0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD, 0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701, 0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7, 0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41, 0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331, 0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF, 0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF, 0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E, 0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87, 0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C, 0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2, 0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16, 0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD, 0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B, 0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509, 0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E, 0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3, 0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F, 0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A, 0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4, 0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960, 0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66, 0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28, 0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802, 0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84, 0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510, 0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF, 0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14, 0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E, 0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50, 0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7, 0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8, 0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281, 0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99, 0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696, 0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128, 0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73, 0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0, 0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0, 0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105, 0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250, 0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3, 0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285, 0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00, 0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061, 0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB, 0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E, 0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735, 0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC, 0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9, 0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340, 0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20, 0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7], [0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934, 0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068, 0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF, 0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840, 0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45, 0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504, 0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A, 0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB, 0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE, 0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6, 0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42, 0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B, 0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2, 0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB, 0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527, 0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B, 0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33, 0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C, 0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3, 0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC, 0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17, 0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564, 0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B, 0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115, 0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922, 0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728, 0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0, 0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E, 0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37, 0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D, 0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804, 0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B, 0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3, 0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB, 0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D, 0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C, 0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350, 0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9, 0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A, 0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE, 0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D, 0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC, 0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F, 0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61, 0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2, 0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9, 0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2, 0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C, 0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E, 0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633, 0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10, 0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169, 0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52, 0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027, 0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5, 0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62, 0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634, 0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76, 0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24, 0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC, 0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4, 0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C, 0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837, 0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0], [0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B, 0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE, 0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B, 0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4, 0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8, 0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6, 0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304, 0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22, 0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4, 0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6, 0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9, 0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59, 0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593, 0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51, 0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28, 0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C, 0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B, 0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28, 0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C, 0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD, 0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A, 0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319, 0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB, 0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F, 0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991, 0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32, 0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680, 0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166, 0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE, 0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB, 0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5, 0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47, 0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370, 0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D, 0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84, 0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048, 0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8, 0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD, 0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9, 0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7, 0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38, 0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F, 0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C, 0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525, 0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1, 0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442, 0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964, 0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E, 0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8, 0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D, 0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F, 0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299, 0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02, 0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC, 0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614, 0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A, 0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6, 0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B, 0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0, 0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060, 0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E, 0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9, 0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F, 0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6]];
        var BLOWFISH_CTX = {
          pbox: [],
          sbox: []
        };
        function F(ctx, x) {
          let a = x >> 24 & 0xFF;
          let b = x >> 16 & 0xFF;
          let c = x >> 8 & 0xFF;
          let d = x & 0xFF;
          let y = ctx.sbox[0][a] + ctx.sbox[1][b];
          y = y ^ ctx.sbox[2][c];
          y = y + ctx.sbox[3][d];
          return y;
        }
        function BlowFish_Encrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = 0; i < N; ++i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[N];
          Xl = Xl ^ ctx.pbox[N + 1];
          return {
            left: Xl,
            right: Xr
          };
        }
        function BlowFish_Decrypt(ctx, left, right) {
          let Xl = left;
          let Xr = right;
          let temp;
          for (let i = N + 1; i > 1; --i) {
            Xl = Xl ^ ctx.pbox[i];
            Xr = F(ctx, Xl) ^ Xr;
            temp = Xl;
            Xl = Xr;
            Xr = temp;
          }
          temp = Xl;
          Xl = Xr;
          Xr = temp;
          Xr = Xr ^ ctx.pbox[1];
          Xl = Xl ^ ctx.pbox[0];
          return {
            left: Xl,
            right: Xr
          };
        }

        /**
         * Initialization ctx's pbox and sbox.
         *
         * @param {Object} ctx The object has pbox and sbox.
         * @param {Array} key An array of 32-bit words.
         * @param {int} keysize The length of the key.
         *
         * @example
         *
         *     BlowFishInit(BLOWFISH_CTX, key, 128/32);
         */
        function BlowFishInit(ctx, key, keysize) {
          for (let Row = 0; Row < 4; Row++) {
            ctx.sbox[Row] = [];
            for (let Col = 0; Col < 256; Col++) {
              ctx.sbox[Row][Col] = ORIG_S[Row][Col];
            }
          }
          let keyIndex = 0;
          for (let index = 0; index < N + 2; index++) {
            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
            keyIndex++;
            if (keyIndex >= keysize) {
              keyIndex = 0;
            }
          }
          let Data1 = 0;
          let Data2 = 0;
          let res = 0;
          for (let i = 0; i < N + 2; i += 2) {
            res = BlowFish_Encrypt(ctx, Data1, Data2);
            Data1 = res.left;
            Data2 = res.right;
            ctx.pbox[i] = Data1;
            ctx.pbox[i + 1] = Data2;
          }
          for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 256; j += 2) {
              res = BlowFish_Encrypt(ctx, Data1, Data2);
              Data1 = res.left;
              Data2 = res.right;
              ctx.sbox[i][j] = Data1;
              ctx.sbox[i][j + 1] = Data2;
            }
          }
          return true;
        }

        /**
         * Blowfish block cipher algorithm.
         */
        var Blowfish = C_algo.Blowfish = BlockCipher.extend({
          _doReset: function () {
            // Skip reset of nRounds has been set before and key did not change
            if (this._keyPriorReset === this._key) {
              return;
            }

            // Shortcuts
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;

            //Initialization pbox and sbox
            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
          },
          encryptBlock: function (M, offset) {
            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          decryptBlock: function (M, offset) {
            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
            M[offset] = res.left;
            M[offset + 1] = res.right;
          },
          blockSize: 64 / 32,
          keySize: 128 / 32,
          ivSize: 64 / 32
        });

        /**
         * Shortcut functions to the cipher's object interface.
         *
         * @example
         *
         *     var ciphertext = CryptoJS.Blowfish.encrypt(message, key, cfg);
         *     var plaintext  = CryptoJS.Blowfish.decrypt(ciphertext, key, cfg);
         */
        C.Blowfish = BlockCipher._createHelper(Blowfish);
      })();
      return CryptoJS.Blowfish;
    });
  })(blowfish$1);
  return blowfish$1.exports;
}

var cryptoJs = cryptoJs$1.exports;
var hasRequiredCryptoJs;
function requireCryptoJs() {
  if (hasRequiredCryptoJs) return cryptoJs$1.exports;
  hasRequiredCryptoJs = 1;
  (function (module, exports) {
    (function (root, factory, undef) {
      {
        // CommonJS
        module.exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy(), requireBlowfish());
      }
    })(cryptoJs, function (CryptoJS) {
      return CryptoJS;
    });
  })(cryptoJs$1);
  return cryptoJs$1.exports;
}

var cryptoJsExports = requireCryptoJs();
var crypto = /*@__PURE__*/getDefaultExportFromCjs(cryptoJsExports);

var Crc16Type;
(function (Crc16Type) {
  Crc16Type[Crc16Type["X25"] = 0] = "X25";
})(Crc16Type || (Crc16Type = {}));

({
  keySize: 16,
  mode: crypto.mode.ECB,
  padding: crypto.pad.NoPadding
});

/**
 * Data segment wrapper around an MTX message.
 */


// 0b10010001 (segmentIndex: 1, segmentsNumber: 1, isLast: true)
const SINGLE_SEGMENT_FLAG = 0x91;
const DATA_SEGMENT_COMMAND_ID = 0x1e;
const get = bytes => {
  // check if it is a DataSegment command
  if (bytes[0] !== DATA_SEGMENT_COMMAND_ID) {
    return {};
  }

  // DataSegment command size
  const size = bytes[1];

  // segment metadata
  const flag = bytes[3];

  // payload
  const data = bytes.slice(4, size + 2);

  // if the mtx message is unencrypted, the device sets the LRC to 0
  // no need to validate for now
  // const expectedLrc = calculateLrc(bytes.slice(0, size + 2));
  // const actualLrc = bytes[size + 2];

  // just a single data segment (without lrc validation)
  if (flag === SINGLE_SEGMENT_FLAG) {
    return data;
  }
  return null;
};
const set = bytes => {
  const body = [DATA_SEGMENT_COMMAND_ID, bytes.length + 2, 0, SINGLE_SEGMENT_FLAG, ...bytes];
  return [...body, calculateLrc(body)];
};

// export
message = mtxMessage;
getDataSegment = get;
setDataSegment = set;

const {
  uplink,
  downlink
} = commands;
const checkExample = (_ref, commandExample) => {
  let {
    headerSize,
    fromBytes,
    toBytes
  } = _ref;
  // valid command
  if ('bytes' in commandExample) {
    const parametersFromBytes = fromBytes(commandExample.bytes?.slice(headerSize) || [], commandExample.config);
    const bytesFromParameters = toBytes(commandExample.parameters, commandExample.config);
    assert.equal(getHexFromBytes(bytesFromParameters), getHexFromBytes(commandExample.bytes || []));
    assert.deepEqual(parametersFromBytes, commandExample.parameters);
    assert.equal(JSON.stringify(parametersFromBytes), JSON.stringify(commandExample.parameters));
  } else {
    // everything else
    throw new Error('wrong command format');
  }
};
const processExamples = commandMap => {
  for (const [commandName, commandImplementation] of Object.entries(commandMap)) {
    // each command should export at least 1 example
    assert.equal(Object.keys(commandImplementation.examples).length > 0, true);
    describe(`${commandName} ${getHexFromBytes([commandImplementation.id])}/${commandImplementation.id}`, () => {
      for (const [exampleName, example] of Object.entries(commandImplementation.examples)) {
        it(exampleName, () => checkExample(commandImplementation, example));
      }
    });
  }
};
describe('mtx1 downlink commands', () => {
  processExamples(downlink);
});
describe('mtx1 uplink commands', () => {
  processExamples(uplink);
});
describe('analog encodeDownlink/decodeDownlink functions', () => {
  const commands = [{
    id: 0x07,
    name: 'getDateTime'
  }, {
    id: 0x3e,
    name: 'getCorrectTime'
  }, {
    id: 0x5d,
    name: 'setDisplayParam',
    parameters: {
      displayMode: 1,
      order: [4, 5, 6, 7]
    }
  }, {
    id: 0x19,
    name: 'turnRelayOff'
  }];
  const hex = '1e 14 00 91 da 10 10 07 00 3e 00 5d 05 01 04 05 06 07 19 00 00 3c 51';
  const result = encodeDownlink({
    data: {
      commands,
      config: {
        messageId: 218,
        accessLevel: UNENCRYPTED
      }
    }
  });
  assert.equal(getHexFromBytes(result.bytes), hex);
  const {
    data,
    errors
  } = decodeDownlink({
    bytes: result.bytes
  });
  assert.deepEqual(errors, []);
  data.message.commands.forEach((_ref2, index) => {
    let {
      id,
      name,
      parameters
    } = _ref2;
    const command = commands[index];
    assert.equal(command.id, id);
    assert.equal(command.name, name);
    assert.deepEqual(command.parameters || {}, parameters);
  });
});
describe('analog decodeUplink function', () => {
  const commands = [{
    id: 0x6f,
    name: 'getHalfhoursEnergies',
    parameters: {
      date: {
        year: 24,
        month: 8,
        date: 27
      },
      firstHalfhour: 27,
      halfhoursNumber: 3,
      energies: {
        'A+': [92, 98, 77]
      }
    }
  }];
  const hex = '1e 14 dd 91 d9 10 10 6f 0b 31 1b 01 1b 03 00 5c 00 62 00 4d 00 00 63 fd ad 55 88';
  const bytes = getBytesFromHex(hex);
  const result = decodeUplink({
    bytes
  });
  assert.deepEqual(result.errors, []);
  assert.deepEqual(result.warnings, []);
  assert.deepEqual(result.data.bytes, bytes);
  result.data.message.commands.forEach((_ref3, index) => {
    let {
      id,
      name,
      parameters
    } = _ref3;
    const command = commands[index];
    assert.equal(command.id, id);
    assert.equal(command.name, name);
    assert.deepEqual(command.parameters || {}, parameters);
  });
});
//#endregion
