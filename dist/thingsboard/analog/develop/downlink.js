// IMPORTANT!!!
// This example only for default downlink data converter.
// Data converters for other integrations use different input and result.
// Find example of uplink data converter for your integration and edit usage of payload and result
// Integrations list: https://thingsboard.io/docs/user-guide/integrations/

// these options can be edited
// available hardware types can be found here:
// https://github.com/jooby-dev/jooby-docs/blob/main/docs/analog/basics.md#hardware-types
var config = {
    hardwareType: 0
};


//#region [autogenerated jooby-codec bundle from index.js]
var toBytes, getBase64FromBytes;

(function () {
  'use strict';

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (undefined !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : undefined;
    }
  }

  var hexFormatOptions = {
    separator: ' ',
    prefix: ''
  };

  var INT8_SIZE = 1;
  var INT16_SIZE = 2;
  var INT24_SIZE = 3;
  var INT32_SIZE = 4;
  var log = Math.log,
    pow = Math.pow,
    LN2 = Math.LN2;
  var readFloat = function (buffer, offset, isLittleEndian, mLen, bytes) {
    var e,
      m,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLittleEndian ? bytes - 1 : 0,
      d = isLittleEndian ? -1 : 1,
      s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * pow(2, e - mLen);
  };
  var writeFloat = function (buffer, offset, value, isLittleEndian, mLen, bytes) {
    var e,
      m,
      c,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
      i = isLittleEndian ? 0 : bytes - 1,
      d = isLittleEndian ? 1 : -1,
      s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value < 0 && (value = -value);
    if (value !== value || value === Infinity) {
      m = value !== value ? 1 : 0;
      e = eMax;
    } else {
      e = log(value) / LN2 | 0;
      if (value * (c = pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 0x100, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 0x100, eLen -= 8);
    buffer[offset + i - d] |= s * 0x80;
  };
  var be2 = [1, 0];
  var be3 = [2, 1, 0];
  var be4 = [3, 2, 1, 0];
  var le2 = [0, 1];
  var le3 = [0, 1, 2];
  var le4 = [0, 1, 2, 3];
  var readUint8 = function (buffer, offset) {
    return buffer[offset];
  };
  var readUint16 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    return b0 | b1;
  };
  var readUint24 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le3 : be3;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    var b2 = buffer[offset + order[2]] << 16;
    return b0 | b1 | b2;
  };
  var readUint32 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    var b0 = buffer[offset + order[3]] * 0x1000000;
    var b1 = buffer[offset + order[2]] * 0x10000;
    var b2 = buffer[offset + order[1]] * 0x100;
    var b3 = buffer[offset + order[0]];
    return b0 + b1 + b2 + b3;
  };
  var writeUint8 = function (buffer, offset, value) {
    buffer[offset] = value & 0xff;
  };
  var writeUint16 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
  };
  var writeUint24 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le3 : be3;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
  };
  var writeUint32 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
    buffer[offset + order[3]] = value >>> 24 & 0xff;
  };
  function BinaryBuffer(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (typeof dataOrLength === 'number') {
      var bytes = new Array(dataOrLength).fill(0);
      this.data = bytes;
    } else {
      this.data = dataOrLength;
    }
    this.offset = 0;
    this.isLittleEndian = isLittleEndian;
  }
  BinaryBuffer.prototype = {
    toUint8Array: function () {
      return this.data;
    },
    seek: function (position) {
      if (position < 0 || position >= this.data.length) {
        throw new Error('Invalid position.');
      }
      this.offset = position;
    },
    setInt8: function (value) {
      writeUint8(this.data, this.offset, value < 0 ? value | 0x100 : value);
      this.offset += INT8_SIZE;
    },
    getInt8: function () {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result & 0x80 ? result ^ -256 : result;
    },
    setUint8: function (value) {
      writeUint8(this.data, this.offset, value);
      this.offset += INT8_SIZE;
    },
    getUint8: function () {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result;
    },
    setInt16: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value < 0 ? value | 0x10000 : value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getInt16: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result & 0x8000 ? result ^ -65536 : result;
    },
    setUint16: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getUint16: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result;
    },
    setInt24: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint24(this.data, this.offset, value < 0 ? value | 0x1000000 : value, isLittleEndian);
      this.offset += INT24_SIZE;
    },
    getInt24: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint24(this.data, this.offset, isLittleEndian);
      this.offset += INT24_SIZE;
      return result & 0x800000 ? result ^ -16777216 : result;
    },
    setUint24: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint24(this.data, this.offset, value, isLittleEndian);
      this.offset += INT24_SIZE;
    },
    getUint24: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint24(this.data, this.offset, isLittleEndian);
      this.offset += INT24_SIZE;
      return result;
    },
    setInt32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value < 0 ? value | 0x100000000 : value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getInt32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result & 0x80000000 ? result ^ -4294967296 : result;
    },
    setUint32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getUint32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result;
    },
    setFloat32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeFloat(this.data, this.offset, value, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
    },
    getFloat32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readFloat(this.data, this.offset, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
      return result;
    },
    setString: function (value) {
      this.setUint8(value.length);
      for (var index = 0; index < value.length; ++index) {
        this.setUint8(value.charCodeAt(index));
      }
    },
    getString: function () {
      var size = this.getUint8();
      var endIndex = this.offset + size;
      var chars = [];
      while (this.offset < endIndex) {
        chars.push(String.fromCharCode(this.getUint8()));
      }
      return chars.join('');
    },
    getBytesToOffset: function () {
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offset;
      return this.data.slice(0, offset);
    },
    getBytesLeft: function () {
      return this.getBytes(this.bytesLeft);
    },
    getBytes: function (length) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      this.offset = offset + length;
      return this.data.slice(offset, this.offset);
    },
    setBytes: function (data) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      var bytes = this.data;
      bytes.splice.apply(bytes, [offset, data.length].concat(_toConsumableArray(data)));
      this.data = bytes;
      this.offset = offset + data.length;
    }
  };
  Object.defineProperties(BinaryBuffer.prototype, {
    size: {
      get: function () {
        return this.data.length;
      }
    },
    isEmpty: {
      get: function () {
        if (this.offset > this.data.length) {
          throw new Error("current offset ".concat(this.offset, " is outside the bounds of the buffer"));
        }
        return this.data.length - this.offset === 0;
      }
    },
    bytesLeft: {
      get: function () {
        return this.data.length - this.offset;
      }
    },
    position: {
      get: function () {
        return this.offset;
      }
    }
  });

  var extraCommandMask = 0x1f;
  var toBytes$v = function (commandId, commandSize) {
    if ((commandId & extraCommandMask) === 0) {
      if (commandSize > extraCommandMask) {
        throw new Error("Wrong command id/size. Id: ".concat(commandId, ", size: ").concat(commandSize, "."));
      }
      return [commandId | commandSize];
    }
    if (commandId > extraCommandMask) {
      return [extraCommandMask, commandId >> 8, commandSize];
    }
    return [commandId, commandSize];
  };

  var toBytes$u = function (commandId) {
    var commandData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var headerData = toBytes$v(commandId, commandData.length);
    return [].concat(_toConsumableArray(headerData), _toConsumableArray(commandData));
  };

  var setTime2000 = 0x02;
  var setParameter = 0x03;
  var getParameter = 0x04;
  var getArchiveHours = 0x05;
  var getArchiveDays = 0x06;
  var getCurrent = 0x07;
  var getTime2000 = 0x09;
  var getArchiveEvents = 0x0b;
  var correctTime2000 = 0x0c;
  var getStatus = 0x14;
  var getCurrentMc = 0x18;
  var softRestart = 0x19;
  var getArchiveHoursMc = 0x1a;
  var getArchiveDaysMc = 0x1b;
  var dataSegment = 0x1e;
  var getLmicInfo = 0x21f;
  var getBatteryStatus = 0x51f;
  var usWaterMeterCommand = 0x71f;
  var getExAbsArchiveHoursMc = 0xc1f;
  var getExAbsArchiveDaysMc = 0xd1f;
  var getExAbsCurrentMc = 0xf1f;
  var writeImage = 0x2a1f;
  var verifyImage = 0x2b1f;
  var updateRun = 0x2c1f;
  var getArchiveHoursMcEx = 0x301f;
  var getChannelsStatus = 0x321f;
  var getChannelsTypes = 0x331f;
  var getSignalQuality = 0x341f;

  var downlinkIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    correctTime2000: correctTime2000,
    dataSegment: dataSegment,
    getArchiveDays: getArchiveDays,
    getArchiveDaysMc: getArchiveDaysMc,
    getArchiveEvents: getArchiveEvents,
    getArchiveHours: getArchiveHours,
    getArchiveHoursMc: getArchiveHoursMc,
    getArchiveHoursMcEx: getArchiveHoursMcEx,
    getBatteryStatus: getBatteryStatus,
    getChannelsStatus: getChannelsStatus,
    getChannelsTypes: getChannelsTypes,
    getCurrent: getCurrent,
    getCurrentMc: getCurrentMc,
    getExAbsArchiveDaysMc: getExAbsArchiveDaysMc,
    getExAbsArchiveHoursMc: getExAbsArchiveHoursMc,
    getExAbsCurrentMc: getExAbsCurrentMc,
    getLmicInfo: getLmicInfo,
    getParameter: getParameter,
    getSignalQuality: getSignalQuality,
    getStatus: getStatus,
    getTime2000: getTime2000,
    setParameter: setParameter,
    setTime2000: setTime2000,
    softRestart: softRestart,
    updateRun: updateRun,
    usWaterMeterCommand: usWaterMeterCommand,
    verifyImage: verifyImage,
    writeImage: writeImage
  });

  var invertObject = (function (source) {
    var target = {};
    for (var property in source) {
      var value = source[property];
      target[value] = property;
    }
    return target;
  });

  var downlinkNames = invertObject(downlinkIds);

  var id$r = correctTime2000;
  downlinkNames[correctTime2000];
  var COMMAND_BODY_SIZE$9 = 2;
  var toBytes$t = function (parameters) {
    var sequenceNumber = parameters.sequenceNumber,
      seconds = parameters.seconds;
    var buffer = new BinaryBuffer(COMMAND_BODY_SIZE$9, false);
    buffer.setUint8(sequenceNumber);
    buffer.setInt8(seconds);
    return toBytes$u(id$r, buffer.data);
  };

  var fromObject = function () {
    var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var booleanObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var result = 0;
    for (var name in booleanObject) {
      if (name in bitMask && booleanObject[name]) {
        result |= bitMask[name];
      }
    }
    return result;
  };
  var toObject = function () {
    var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var result = {};
    for (var name in bitMask) {
      result[name] = (value & bitMask[name]) !== 0;
    }
    return result;
  };
  var extractBits = function (value, bitsNumber, startIndex) {
    return (1 << bitsNumber) - 1 & value >> startIndex - 1;
  };
  var fillBits = function (value, bitsNumber, startIndex, valueToSet) {
    var mask = (1 << bitsNumber) - 1 << startIndex - 1;
    var newValueToSet = valueToSet;
    var result = value;
    result &= ~mask;
    newValueToSet <<= startIndex - 1;
    result |= newValueToSet;
    return result;
  };

  var getHexFromBytes = (function (bytes) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _Object$assign = Object.assign({}, hexFormatOptions, options),
      separator = _Object$assign.separator,
      prefix = _Object$assign.prefix;
    return bytes.map(function (byte) {
      return "".concat(prefix).concat(byte.toString(16).padStart(2, '0'));
    }).join(separator);
  });

  var getBytesFromHex = (function (hex) {
    var cleanHex = hex.trim();
    if (!cleanHex) {
      return [];
    }
    cleanHex = cleanHex.replace(/0x/g, '').split(/\s+/).map(function (byte) {
      return byte.padStart(2, '0');
    }).join('');
    if (cleanHex.length % 2 !== 0) {
      cleanHex = "0".concat(cleanHex);
    }
    var resultLength = cleanHex.length / 2;
    var bytes = new Array(resultLength);
    for (var index = 0; index < resultLength; index++) {
      bytes[index] = parseInt(cleanHex.substring(index * 2, index * 2 + 2), 16);
    }
    return bytes;
  });

  var roundNumber = (function (value) {
    var decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;
    var places = Math.pow(10, decimalPlaces);
    return Math.round(value * places * (1 + Number.EPSILON)) / places;
  });

  var INITIAL_YEAR_TIMESTAMP = 946684800000;
  var MILLISECONDS_IN_SECONDS = 1000;
  var getDateFromTime2000 = function (time2000) {
    return new Date(INITIAL_YEAR_TIMESTAMP + time2000 * MILLISECONDS_IN_SECONDS);
  };
  var getTime2000FromDate = function (date) {
    return (date.getTime() - INITIAL_YEAR_TIMESTAMP) / MILLISECONDS_IN_SECONDS;
  };

  var GASI1 = 1;
  var GASI2 = 2;
  var GASI3 = 3;
  var NOVATOR = 4;
  var IMP2EU = 5;
  var IMP4EU = 6;
  var MTXLORA = 7;
  var IMP2AS = 8;
  var IMP2IN = 9;
  var IMP4IN = 10;
  var ELIMP = 11;
  var GASIC = 12;
  var US_WATER = 13;
  var NBIOT = 24;

  var REPORTING_DATA_INTERVAL = 1;
  var DAY_CHECKOUT_HOUR = 4;
  var REPORTING_DATA_TYPE = 5;
  var PRIORITY_DATA_DELIVERY_TYPE = 8;
  var ACTIVATION_METHOD = 9;
  var BATTERY_DEPASSIVATION_INFO = 10;
  var BATTERY_MINIMAL_LOAD_TIME = 11;
  var CHANNELS_CONFIG = 13;
  var RX2_CONFIG = 18;
  var ABSOLUTE_DATA = 23;
  var ABSOLUTE_DATA_ENABLE = 24;
  var SERIAL_NUMBER = 25;
  var GEOLOCATION = 26;
  var EXTRA_FRAME_INTERVAL = 28;
  var ABSOLUTE_DATA_MULTI_CHANNEL = 29;
  var ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL = 30;
  var PULSE_CHANNELS_SCAN_CONFIG = 31;
  var PULSE_CHANNELS_SET_CONFIG = 32;
  var BATTERY_DEPASSIVATION_CONFIG = 33;
  var MQTT_SESSION_CONFIG = 34;
  var MQTT_BROKER_ADDRESS = 35;
  var MQTT_SSL_ENABLE = 36;
  var MQTT_TOPIC_PREFIX = 37;
  var MQTT_DATA_RECEIVE_CONFIG = 38;
  var MQTT_DATA_SEND_CONFIG = 39;
  var NBIOT_SSL_CONFIG = 40;
  var NBIOT_SSL_CACERT_WRITE = 41;
  var NBIOT_SSL_CACERT_SET = 42;
  var NBIOT_SSL_CLIENT_CERT_WRITE = 43;
  var NBIOT_SSL_CLIENT_CERT_SET = 44;
  var NBIOT_SSL_CLIENT_KEY_WRITE = 45;
  var NBIOT_SSL_CLIENT_KEY_SET = 46;
  var NBIOT_DEVICE_SOFTWARE_UPDATE = 47;
  var NBIOT_MODULE_FIRMWARE_UPDATE = 48;
  var REPORTING_DATA_CONFIG = 49;
  var EVENTS_CONFIG = 50;
  var NBIOT_MODULE_INFO = 51;
  var NBIOT_BANDS = 52;
  var NBIOT_APN = 53;
  var NBIOT_LED_INDICATION = 54;
  var NBIOT_SIM = 55;
  var CHANNEL_TYPE = 56;
  var EXTRA_PAYLOAD_ENABLE = 57;

  var deviceParameters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ABSOLUTE_DATA: ABSOLUTE_DATA,
    ABSOLUTE_DATA_ENABLE: ABSOLUTE_DATA_ENABLE,
    ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL: ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL,
    ABSOLUTE_DATA_MULTI_CHANNEL: ABSOLUTE_DATA_MULTI_CHANNEL,
    ACTIVATION_METHOD: ACTIVATION_METHOD,
    BATTERY_DEPASSIVATION_CONFIG: BATTERY_DEPASSIVATION_CONFIG,
    BATTERY_DEPASSIVATION_INFO: BATTERY_DEPASSIVATION_INFO,
    BATTERY_MINIMAL_LOAD_TIME: BATTERY_MINIMAL_LOAD_TIME,
    CHANNELS_CONFIG: CHANNELS_CONFIG,
    CHANNEL_TYPE: CHANNEL_TYPE,
    DAY_CHECKOUT_HOUR: DAY_CHECKOUT_HOUR,
    EVENTS_CONFIG: EVENTS_CONFIG,
    EXTRA_FRAME_INTERVAL: EXTRA_FRAME_INTERVAL,
    EXTRA_PAYLOAD_ENABLE: EXTRA_PAYLOAD_ENABLE,
    GEOLOCATION: GEOLOCATION,
    MQTT_BROKER_ADDRESS: MQTT_BROKER_ADDRESS,
    MQTT_DATA_RECEIVE_CONFIG: MQTT_DATA_RECEIVE_CONFIG,
    MQTT_DATA_SEND_CONFIG: MQTT_DATA_SEND_CONFIG,
    MQTT_SESSION_CONFIG: MQTT_SESSION_CONFIG,
    MQTT_SSL_ENABLE: MQTT_SSL_ENABLE,
    MQTT_TOPIC_PREFIX: MQTT_TOPIC_PREFIX,
    NBIOT_APN: NBIOT_APN,
    NBIOT_BANDS: NBIOT_BANDS,
    NBIOT_DEVICE_SOFTWARE_UPDATE: NBIOT_DEVICE_SOFTWARE_UPDATE,
    NBIOT_LED_INDICATION: NBIOT_LED_INDICATION,
    NBIOT_MODULE_FIRMWARE_UPDATE: NBIOT_MODULE_FIRMWARE_UPDATE,
    NBIOT_MODULE_INFO: NBIOT_MODULE_INFO,
    NBIOT_SIM: NBIOT_SIM,
    NBIOT_SSL_CACERT_SET: NBIOT_SSL_CACERT_SET,
    NBIOT_SSL_CACERT_WRITE: NBIOT_SSL_CACERT_WRITE,
    NBIOT_SSL_CLIENT_CERT_SET: NBIOT_SSL_CLIENT_CERT_SET,
    NBIOT_SSL_CLIENT_CERT_WRITE: NBIOT_SSL_CLIENT_CERT_WRITE,
    NBIOT_SSL_CLIENT_KEY_SET: NBIOT_SSL_CLIENT_KEY_SET,
    NBIOT_SSL_CLIENT_KEY_WRITE: NBIOT_SSL_CLIENT_KEY_WRITE,
    NBIOT_SSL_CONFIG: NBIOT_SSL_CONFIG,
    PRIORITY_DATA_DELIVERY_TYPE: PRIORITY_DATA_DELIVERY_TYPE,
    PULSE_CHANNELS_SCAN_CONFIG: PULSE_CHANNELS_SCAN_CONFIG,
    PULSE_CHANNELS_SET_CONFIG: PULSE_CHANNELS_SET_CONFIG,
    REPORTING_DATA_CONFIG: REPORTING_DATA_CONFIG,
    REPORTING_DATA_INTERVAL: REPORTING_DATA_INTERVAL,
    REPORTING_DATA_TYPE: REPORTING_DATA_TYPE,
    RX2_CONFIG: RX2_CONFIG,
    SERIAL_NUMBER: SERIAL_NUMBER
  });

  var deviceParameterNames = invertObject(deviceParameters);

  var EMPTY_VALUE = 0xffffffff;

  var IDLE = 0;
  var POWER_CHANNEL = 2;
  var BINARY_SENSOR = 3;
  var TEMPERATURE_SENSOR = 4;

  var SF12B125 = 0;
  var SF11B125 = 1;
  var SF10B125 = 2;
  var SF9B125 = 3;
  var SF8B125 = 4;
  var SF7B125 = 5;
  var SF7B250 = 6;

  var rx2SpreadFactors = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SF10B125: SF10B125,
    SF11B125: SF11B125,
    SF12B125: SF12B125,
    SF7B125: SF7B125,
    SF7B250: SF7B250,
    SF8B125: SF8B125,
    SF9B125: SF9B125
  });

  var spreadFactorNames = invertObject(rx2SpreadFactors);

  var _parametersSizeMap, _deviceParameterConve;
  var INITIAL_YEAR = 2000;
  var MONTH_BIT_SIZE = 4;
  var DATE_BIT_SIZE = 5;
  var YEAR_START_INDEX = 1;
  var UNKNOWN_BATTERY_VOLTAGE = 4095;
  var EXTEND_BIT_MASK = 0x80;
  var LAST_BIT_INDEX = 7;
  var DATA_SENDING_INTERVAL_SECONDS_COEFFICIENT = 600;
  var DATA_SENDING_INTERVAL_RESERVED_BYTES = 3;
  var PARAMETER_RX2_FREQUENCY_COEFFICIENT = 100;
  var SERIAL_NUMBER_SIZE = 6;
  var MAGNETIC_INFLUENCE_BIT_INDEX = 8;
  var LEGACY_HOUR_COUNTER_SIZE = 2 + 4;
  var LEGACY_HOUR_DIFF_SIZE = 2;
  var GAS_HARDWARE_TYPES = [GASI2, GASI3, GASI1, GASIC, NBIOT];
  var TWO_CHANNELS_HARDWARE_TYPES = [IMP2AS, IMP2EU, IMP2IN, NOVATOR];
  var ELIMP_HARDWARE_TYPES = [ELIMP];
  var FOUR_CHANNELS_HARDWARE_TYPES = [IMP4EU, IMP4IN];
  var MTX_HARDWARE_TYPES = [MTXLORA];
  var gasBitMask = {
    isBatteryLow: Math.pow(2, 0),
    isMagneticInfluence: Math.pow(2, 1),
    isButtonReleased: Math.pow(2, 2),
    isConnectionLost: Math.pow(2, 3)
  };
  var twoChannelBitMask = {
    isBatteryLow: Math.pow(2, 0),
    isConnectionLost: Math.pow(2, 3),
    isFirstChannelInactive: Math.pow(2, 4),
    isSecondChannelInactive: Math.pow(2, 5)
  };
  var elimpBitMask = {
    isConnectionLost: Math.pow(2, 3)
  };
  var fourChannelBitMask = {
    isBatteryLow: Math.pow(2, 0),
    isConnectionLost: Math.pow(2, 3),
    isFirstChannelInactive: Math.pow(2, 4),
    isSecondChannelInactive: Math.pow(2, 5),
    isThirdChannelInactive: Math.pow(2, 6),
    isForthChannelInactive: Math.pow(2, 8)
  };
  var mtxBitMask = {
    isMeterCaseOpen: Math.pow(2, 0),
    isMagneticInfluence: Math.pow(2, 1),
    isParametersSetRemotely: Math.pow(2, 2),
    isParametersSetLocally: Math.pow(2, 3),
    isMeterProgramRestarted: Math.pow(2, 4),
    isLockedOut: Math.pow(2, 5),
    isTimeSet: Math.pow(2, 6),
    isTimeCorrected: Math.pow(2, 7),
    isMeterFailure: Math.pow(2, 8),
    isMeterTerminalBoxOpen: Math.pow(2, 9),
    isModuleCompartmentOpen: Math.pow(2, 10),
    isTariffPlanChanged: Math.pow(2, 11),
    isNewTariffPlanReceived: Math.pow(2, 12)
  };
  var usWaterMeterEventBitMask = {
    transportMode: 0x01,
    frequencyOutput: 0x02,
    reverseFlow: 0x04,
    tamperBreak: 0x08,
    leakage: 0x10,
    pipeBreak: 0x20,
    pipeEmpty: 0x40,
    batteryDischarge: 0x80
  };
  var getChannelTypeSize = function (_ref) {
    var type = _ref.type;
    var size = 1;
    switch (type) {
      case IDLE:
      case POWER_CHANNEL:
        break;
      case BINARY_SENSOR:
        size += 2;
        break;
      case TEMPERATURE_SENSOR:
        size += 5;
        break;
    }
    return size;
  };
  var parametersSizeMap = (_parametersSizeMap = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_parametersSizeMap, REPORTING_DATA_INTERVAL, 1 + 4), DAY_CHECKOUT_HOUR, 1 + 1), REPORTING_DATA_TYPE, 1 + 1), PRIORITY_DATA_DELIVERY_TYPE, 1 + 1), ACTIVATION_METHOD, 1 + 1), BATTERY_DEPASSIVATION_INFO, 1 + 6), BATTERY_MINIMAL_LOAD_TIME, 1 + 4), CHANNELS_CONFIG, 1 + 1), RX2_CONFIG, 1 + 4), ABSOLUTE_DATA, 1 + 9), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_parametersSizeMap, ABSOLUTE_DATA_ENABLE, 1 + 1), SERIAL_NUMBER, 1 + 6), GEOLOCATION, 1 + 10), EXTRA_FRAME_INTERVAL, 1 + 2), ABSOLUTE_DATA_MULTI_CHANNEL, 1 + 10), ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL, 1 + 2), PULSE_CHANNELS_SCAN_CONFIG, 1 + 3), PULSE_CHANNELS_SET_CONFIG, 1 + 1), BATTERY_DEPASSIVATION_CONFIG, 1 + 4), MQTT_SSL_ENABLE, 1 + 1), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_parametersSizeMap, MQTT_DATA_RECEIVE_CONFIG, 1 + 3), MQTT_DATA_SEND_CONFIG, 1 + 3), NBIOT_SSL_CONFIG, 1 + 2), NBIOT_SSL_CACERT_SET, 1 + 4), NBIOT_SSL_CLIENT_CERT_SET, 1 + 4), NBIOT_SSL_CLIENT_KEY_SET, 1 + 4), REPORTING_DATA_CONFIG, 1 + 4), EVENTS_CONFIG, 1 + 3), NBIOT_LED_INDICATION, 1 + 2), NBIOT_SIM, 1 + 3), _defineProperty(_parametersSizeMap, EXTRA_PAYLOAD_ENABLE, 1 + 1));
  var fourChannelsBitMask = {
    channel1: Math.pow(2, 0),
    channel2: Math.pow(2, 1),
    channel3: Math.pow(2, 2),
    channel4: Math.pow(2, 3)
  };
  var getChannelsMaskFromNumber = function (value) {
    var object = toObject(fourChannelsBitMask, value);
    return {
      channel1: object.channel1,
      channel2: object.channel2,
      channel3: object.channel3,
      channel4: object.channel4
    };
  };
  var setChannelsMaskToNumber = function (channelsMask) {
    var channel1 = channelsMask.channel1,
      channel2 = channelsMask.channel2,
      channel3 = channelsMask.channel3,
      channel4 = channelsMask.channel4;
    return fromObject(fourChannelsBitMask, {
      channel1: channel1,
      channel2: channel2,
      channel3: channel3,
      channel4: channel4
    });
  };
  var getChannelsMask = function (buffer) {
    return getChannelsMaskFromNumber(buffer.getUint8());
  };
  var setChannelsMask = function (buffer, channelsMask) {
    return buffer.setUint8(setChannelsMaskToNumber(channelsMask));
  };
  var byteToPulseCoefficientMap = {
    128: 1,
    129: 5,
    130: 10,
    131: 100,
    132: 1000,
    133: 10000,
    134: 100000
  };
  var pulseCoefficientToByteMap = invertObject(byteToPulseCoefficientMap);
  var isMSBSet = function (value) {
    return !!(value & 0x80);
  };
  var getNbiotSslWrite = function (buffer) {
    return {
      size: buffer.getUint16(),
      position: buffer.getUint16(),
      chunk: buffer.getBytesLeft()
    };
  };
  var setNbiotSslWrite = function (buffer, parameter) {
    if (parameter.size !== parameter.chunk.length) {
      throw new Error('ssl chunk size parameter doesn\'t match actual ssl chunk size');
    }
    buffer.setUint16(parameter.size);
    buffer.setUint16(parameter.position);
    buffer.setBytes(parameter.chunk);
  };
  var getNbiotSslSet = function (buffer) {
    return {
      crc32: buffer.getUint32()
    };
  };
  var setNbiotSslSet = function (buffer, parameter) {
    buffer.setUint32(parameter.crc32);
  };
  var deviceParameterConvertersMap = (_deviceParameterConve = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_deviceParameterConve, REPORTING_DATA_INTERVAL, {
    get: function (buffer) {
      buffer.seek(buffer.offset + DATA_SENDING_INTERVAL_RESERVED_BYTES);
      return {
        value: buffer.getUint8() * DATA_SENDING_INTERVAL_SECONDS_COEFFICIENT
      };
    },
    set: function (buffer, parameter) {
      buffer.seek(buffer.offset + DATA_SENDING_INTERVAL_RESERVED_BYTES);
      buffer.setUint8(parameter.value / DATA_SENDING_INTERVAL_SECONDS_COEFFICIENT);
    }
  }), DAY_CHECKOUT_HOUR, {
    get: function (buffer) {
      return {
        value: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.value);
    }
  }), REPORTING_DATA_TYPE, {
    get: function (buffer) {
      return {
        type: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.type);
    }
  }), PRIORITY_DATA_DELIVERY_TYPE, {
    get: function (buffer) {
      return {
        value: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.value);
    }
  }), ACTIVATION_METHOD, {
    get: function (buffer) {
      return {
        type: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.type);
    }
  }), BATTERY_DEPASSIVATION_INFO, {
    get: function (buffer) {
      return {
        loadTime: buffer.getUint16(),
        internalResistance: buffer.getUint16(),
        lowVoltage: buffer.getUint16()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint16(parameter.loadTime);
      buffer.setUint16(parameter.internalResistance);
      buffer.setUint16(parameter.lowVoltage);
    }
  }), BATTERY_MINIMAL_LOAD_TIME, {
    get: function (buffer) {
      return {
        value: buffer.getUint32()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint32(parameter.value);
    }
  }), CHANNELS_CONFIG, {
    get: function (buffer) {
      return {
        value: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      if (parameter.value < 0 || parameter.value > 18) {
        throw new Error('channels config must be between 0-18');
      }
      buffer.setUint8(parameter.value);
    }
  }), RX2_CONFIG, {
    get: function (buffer) {
      var spreadFactor = buffer.getUint8();
      var spreadFactorName = spreadFactorNames[spreadFactor];
      var frequency = buffer.getUint24() * PARAMETER_RX2_FREQUENCY_COEFFICIENT;
      return {
        spreadFactor: spreadFactor,
        spreadFactorName: spreadFactorName,
        frequency: frequency
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.spreadFactor);
      buffer.setUint24(parameter.frequency / PARAMETER_RX2_FREQUENCY_COEFFICIENT);
    }
  }), ABSOLUTE_DATA, {
    get: function (buffer) {
      return {
        meterValue: buffer.getUint32(),
        pulseCoefficient: buffer.getPulseCoefficient(),
        value: buffer.getUint32()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint32(parameter.meterValue);
      buffer.setPulseCoefficient(parameter.pulseCoefficient);
      buffer.setUint32(parameter.value);
    }
  }), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_deviceParameterConve, ABSOLUTE_DATA_ENABLE, {
    get: function (buffer) {
      return {
        state: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.state);
    }
  }), SERIAL_NUMBER, {
    get: function (buffer) {
      return {
        value: getHexFromBytes(buffer.getBytes(SERIAL_NUMBER_SIZE))
      };
    },
    set: function (buffer, parameter) {
      getBytesFromHex(parameter.value).forEach(function (byte) {
        return buffer.setUint8(byte);
      });
    }
  }), GEOLOCATION, {
    get: function (buffer) {
      return {
        latitude: roundNumber(buffer.getFloat32()),
        longitude: roundNumber(buffer.getFloat32()),
        altitude: roundNumber(buffer.getUint16())
      };
    },
    set: function (buffer, parameter) {
      buffer.setFloat32(roundNumber(parameter.latitude));
      buffer.setFloat32(roundNumber(parameter.longitude));
      buffer.setUint16(roundNumber(parameter.altitude));
    }
  }), EXTRA_FRAME_INTERVAL, {
    get: function (buffer) {
      return {
        value: buffer.getUint16()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint16(parameter.value);
    }
  }), ABSOLUTE_DATA_MULTI_CHANNEL, {
    get: function (buffer) {
      return {
        channel: buffer.getChannelValue(),
        meterValue: buffer.getUint32(),
        pulseCoefficient: buffer.getPulseCoefficient(),
        value: buffer.getUint32()
      };
    },
    set: function (buffer, parameter) {
      buffer.setChannelValue(parameter.channel);
      buffer.setUint32(parameter.meterValue);
      buffer.setPulseCoefficient(parameter.pulseCoefficient);
      buffer.setUint32(parameter.value);
    }
  }), ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL, {
    get: function (buffer) {
      return {
        channel: buffer.getChannelValue(),
        state: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setChannelValue(parameter.channel);
      buffer.setUint8(parameter.state);
    }
  }), PULSE_CHANNELS_SCAN_CONFIG, {
    get: function (buffer) {
      return {
        channelList: buffer.getChannels(),
        pullUpTime: buffer.getUint8(),
        scanTime: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      if (parameter.pullUpTime < 17) {
        throw new Error('minimal value for pullUpTime - 17');
      }
      if (parameter.scanTime < 15) {
        throw new Error('minimal value for scanTime - 15');
      }
      buffer.setChannels(parameter.channelList.map(function (index) {
        return {
          index: index
        };
      }));
      buffer.setUint8(parameter.pullUpTime);
      buffer.setUint8(parameter.scanTime);
    }
  }), PULSE_CHANNELS_SET_CONFIG, {
    get: getChannelsMask,
    set: setChannelsMask
  }), BATTERY_DEPASSIVATION_CONFIG, {
    get: function (buffer) {
      return {
        resistanceStartThreshold: buffer.getUint16(),
        resistanceStopThreshold: buffer.getUint16()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint16(parameter.resistanceStartThreshold);
      buffer.setUint16(parameter.resistanceStopThreshold);
    }
  }), MQTT_SESSION_CONFIG, {
    get: function (buffer) {
      return {
        clientId: buffer.getString(),
        username: buffer.getString(),
        password: buffer.getString(),
        cleanSession: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.clientId);
      buffer.setString(parameter.username);
      buffer.setString(parameter.password);
      buffer.setUint8(parameter.cleanSession);
    }
  }), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_deviceParameterConve, MQTT_BROKER_ADDRESS, {
    get: function (buffer) {
      return {
        hostName: buffer.getString(),
        port: buffer.getUint16()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.hostName);
      buffer.setUint16(parameter.port);
    }
  }), MQTT_SSL_ENABLE, {
    get: function (buffer) {
      return {
        enable: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.enable);
    }
  }), MQTT_TOPIC_PREFIX, {
    get: function (buffer) {
      return {
        topicPrefix: buffer.getString()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.topicPrefix);
    }
  }), MQTT_DATA_RECEIVE_CONFIG, {
    get: function (buffer) {
      return {
        qos: buffer.getUint8(),
        count: buffer.getUint8(),
        timeout: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.qos);
      buffer.setUint8(parameter.count);
      buffer.setUint8(parameter.timeout);
    }
  }), MQTT_DATA_SEND_CONFIG, {
    get: function (buffer) {
      return {
        qos: buffer.getUint8(),
        retain: buffer.getUint8(),
        newestSendFirst: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.qos);
      buffer.setUint8(parameter.retain);
      buffer.setUint8(parameter.newestSendFirst);
    }
  }), NBIOT_SSL_CONFIG, {
    get: function (buffer) {
      return {
        securityLevel: buffer.getUint8(),
        version: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.securityLevel);
      buffer.setUint8(parameter.version);
    }
  }), NBIOT_SSL_CACERT_WRITE, {
    get: getNbiotSslWrite,
    set: setNbiotSslWrite
  }), NBIOT_SSL_CACERT_SET, {
    get: getNbiotSslSet,
    set: setNbiotSslSet
  }), NBIOT_SSL_CLIENT_CERT_WRITE, {
    get: getNbiotSslWrite,
    set: setNbiotSslWrite
  }), NBIOT_SSL_CLIENT_CERT_SET, {
    get: getNbiotSslSet,
    set: setNbiotSslSet
  }), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_deviceParameterConve, NBIOT_SSL_CLIENT_KEY_WRITE, {
    get: getNbiotSslWrite,
    set: setNbiotSslWrite
  }), NBIOT_SSL_CLIENT_KEY_SET, {
    get: getNbiotSslSet,
    set: setNbiotSslSet
  }), NBIOT_DEVICE_SOFTWARE_UPDATE, {
    get: function (buffer) {
      return {
        softwareImageUrl: buffer.getString()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.softwareImageUrl);
    }
  }), NBIOT_MODULE_FIRMWARE_UPDATE, {
    get: function (buffer) {
      return {
        moduleFirmwareImageUrl: buffer.getString()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.moduleFirmwareImageUrl);
    }
  }), REPORTING_DATA_CONFIG, {
    get: function (buffer) {
      return {
        dataType: buffer.getUint8(),
        hour: buffer.getUint8(),
        minutes: buffer.getUint8(),
        countToSend: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.dataType);
      buffer.setUint8(parameter.hour);
      buffer.setUint8(parameter.minutes);
      buffer.setUint8(parameter.countToSend);
    }
  }), EVENTS_CONFIG, {
    get: function (buffer) {
      return {
        eventId: buffer.getUint8(),
        sendEvent: buffer.getUint8(),
        saveEvent: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.eventId);
      buffer.setUint8(parameter.sendEvent);
      buffer.setUint8(parameter.saveEvent);
    }
  }), NBIOT_MODULE_INFO, {
    get: function (buffer) {
      return {
        moduleInfo: buffer.getString()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.moduleInfo);
    }
  }), NBIOT_BANDS, {
    get: function (buffer) {
      var count = buffer.getUint8();
      var bands = [];
      for (var index = 0; index < count; index++) {
        bands.push(buffer.getUint8());
      }
      return {
        bands: bands
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.bands.length);
      for (var band of parameter.bands) {
        buffer.setUint8(band);
      }
    }
  }), NBIOT_APN, {
    get: function (buffer) {
      return {
        apn: buffer.getString()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.apn);
    }
  }), NBIOT_LED_INDICATION, {
    get: function (buffer) {
      return {
        enableLed: buffer.getUint8(),
        enableNbiotNetworkLed: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.enableLed);
      buffer.setUint8(parameter.enableNbiotNetworkLed);
    }
  }), _defineProperty(_defineProperty(_defineProperty(_deviceParameterConve, NBIOT_SIM, {
    get: function (buffer) {
      return {
        enable: buffer.getUint8(),
        pin: buffer.getUint16()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.enable);
      buffer.setUint16(parameter.pin);
    }
  }), CHANNEL_TYPE, {
    get: function (buffer) {
      return buffer.getChannelType();
    },
    set: function (buffer, parameter) {
      return buffer.setChannelType(parameter);
    }
  }), EXTRA_PAYLOAD_ENABLE, {
    get: function (buffer) {
      return {
        enable: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.enable);
    }
  }));
  var getParameterSize = function (parameter) {
    var size;
    var data;
    switch (parameter.id) {
      case MQTT_SESSION_CONFIG:
        data = parameter.data;
        size = 1 + 1;
        size += data.clientId.length + 1;
        size += data.username.length + 1;
        size += data.password.length + 1;
        break;
      case MQTT_BROKER_ADDRESS:
        data = parameter.data;
        size = 1 + 2;
        size += data.hostName.length + 1;
        break;
      case MQTT_TOPIC_PREFIX:
        data = parameter.data;
        size = 1;
        size += data.topicPrefix.length + 1;
        break;
      case NBIOT_SSL_CACERT_WRITE:
      case NBIOT_SSL_CLIENT_CERT_WRITE:
      case NBIOT_SSL_CLIENT_KEY_WRITE:
        data = parameter.data;
        size = 1 + 2 + 2;
        size += data.chunk.length;
        break;
      case NBIOT_DEVICE_SOFTWARE_UPDATE:
        data = parameter.data;
        size = 1;
        size += data.softwareImageUrl.length + 1;
        break;
      case NBIOT_MODULE_FIRMWARE_UPDATE:
        data = parameter.data;
        size = 1;
        size += data.moduleFirmwareImageUrl.length + 1;
        break;
      case NBIOT_MODULE_INFO:
        data = parameter.data;
        size = 1 + 1 + data.moduleInfo.length;
        break;
      case NBIOT_BANDS:
        data = parameter.data;
        size = 1 + 1;
        size += data.bands.length;
        break;
      case NBIOT_APN:
        data = parameter.data;
        size = 1 + 1 + data.apn.length;
        break;
      case CHANNEL_TYPE:
        data = parameter.data;
        size = 1 + getChannelTypeSize(data);
        break;
      default:
        size = parametersSizeMap[parameter.id];
    }
    if (size === undefined) {
      throw new Error('unknown parameter id');
    }
    return size;
  };
  var getRequestParameterSize = function (parameter) {
    var size;
    switch (parameter.id) {
      case ABSOLUTE_DATA_MULTI_CHANNEL:
      case ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL:
      case REPORTING_DATA_CONFIG:
      case EVENTS_CONFIG:
      case CHANNEL_TYPE:
        size = 2;
        break;
      default:
        size = 1;
        break;
    }
    return size;
  };
  function CommandBinaryBuffer(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    BinaryBuffer.call(this, dataOrLength, isLittleEndian);
  }
  CommandBinaryBuffer.prototype = Object.create(BinaryBuffer.prototype);
  CommandBinaryBuffer.prototype.constructor = CommandBinaryBuffer;
  CommandBinaryBuffer.getMagneticInfluenceBit = function (byte) {
    return !!extractBits(byte, 1, MAGNETIC_INFLUENCE_BIT_INDEX);
  };
  CommandBinaryBuffer.setMagneticInfluenceBit = function (byte, value) {
    return fillBits(byte, 1, MAGNETIC_INFLUENCE_BIT_INDEX, +value);
  };
  CommandBinaryBuffer.getLegacyHourCounterSize = function (hourCounter) {
    return LEGACY_HOUR_COUNTER_SIZE + hourCounter.diff.length * LEGACY_HOUR_DIFF_SIZE;
  };
  CommandBinaryBuffer.prototype.getExtendedValue = function () {
    var value = 0;
    var isByteExtended = true;
    var position = 0;
    while (isByteExtended && this.offset <= this.data.length) {
      var byte = this.getUint8();
      isByteExtended = !!(byte & EXTEND_BIT_MASK);
      value += (byte & 0x7f) << 7 * position >>> 0;
      ++position;
    }
    return value;
  };
  CommandBinaryBuffer.prototype.setExtendedValue = function (value) {
    var _this = this;
    if (value === 0) {
      this.setUint8(0);
      return;
    }
    var data = [];
    var encodedValue = value;
    while (encodedValue) {
      data.push(EXTEND_BIT_MASK | encodedValue & 0x7f);
      encodedValue >>>= 7;
    }
    var lastByte = data.pop();
    if (lastByte) {
      data.push(lastByte & 0x7f);
    }
    data.forEach(function (extendedValue) {
      return _this.setUint8(extendedValue);
    });
  };
  CommandBinaryBuffer.prototype.getExtendedValueSize = function (bits) {
    var extBits = Math.ceil(bits / 7);
    var totalBits = bits + extBits;
    var extBytes = Math.ceil(totalBits / 8);
    return extBytes;
  };
  CommandBinaryBuffer.prototype.getTime = function () {
    return this.getUint32();
  };
  CommandBinaryBuffer.prototype.setTime = function (value) {
    this.setUint32(value);
  };
  CommandBinaryBuffer.prototype.getBatteryVoltage = function () {
    var lowVoltageByte = this.getUint8();
    var lowAndHightVoltageByte = this.getUint8();
    var highVoltageByte = this.getUint8();
    var underLowLoad = lowVoltageByte << 4;
    underLowLoad |= (lowAndHightVoltageByte & 0xf0) >> 4;
    var underHighLoad = (lowAndHightVoltageByte & 0x0f) << 8 | highVoltageByte;
    if (underHighLoad === UNKNOWN_BATTERY_VOLTAGE) {
      underHighLoad = undefined;
    }
    if (underLowLoad === UNKNOWN_BATTERY_VOLTAGE) {
      underLowLoad = undefined;
    }
    return {
      underLowLoad: underLowLoad,
      underHighLoad: underHighLoad
    };
  };
  CommandBinaryBuffer.prototype.setBatteryVoltage = function (batteryVoltage) {
    var _this2 = this;
    var underLowLoad = batteryVoltage.underLowLoad,
      underHighLoad = batteryVoltage.underHighLoad;
    if (underLowLoad === undefined) {
      underLowLoad = UNKNOWN_BATTERY_VOLTAGE;
    }
    if (underHighLoad === undefined) {
      underHighLoad = UNKNOWN_BATTERY_VOLTAGE;
    }
    var lowVoltageByte = underLowLoad >> 4 & 0xff;
    var lowAndHighVoltageByte = (underLowLoad & 0x0f) << 4 | underHighLoad >> 8 & 0x0f;
    var highVoltageByte = underHighLoad & 0xff;
    [lowVoltageByte, lowAndHighVoltageByte, highVoltageByte].forEach(function (byte) {
      return _this2.setUint8(byte);
    });
  };
  CommandBinaryBuffer.prototype.getLegacyCounterValue = function () {
    return this.getUint24();
  };
  CommandBinaryBuffer.prototype.setLegacyCounterValue = function (value) {
    this.setUint24(value);
  };
  CommandBinaryBuffer.prototype.getLegacyCounter = function () {
    var byte = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getUint8();
    var isArchiveValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var value = this.getLegacyCounterValue();
    return {
      isMagneticInfluence: CommandBinaryBuffer.getMagneticInfluenceBit(byte),
      value: isArchiveValue && value === EMPTY_VALUE ? 0 : value
    };
  };
  CommandBinaryBuffer.prototype.setLegacyCounter = function (counter) {
    var byte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var isArchiveValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    this.setUint8(CommandBinaryBuffer.setMagneticInfluenceBit(byte, counter.isMagneticInfluence));
    this.setLegacyCounterValue(isArchiveValue && counter.value === 0 ? EMPTY_VALUE : counter.value);
  };
  CommandBinaryBuffer.prototype.getChannels = function () {
    var channelList = [];
    var extended = true;
    var channelIndex = 1;
    while (extended) {
      var byte = this.getUint8();
      var bits = byte.toString(2).padStart(LAST_BIT_INDEX + 1, '0').split('').reverse();
      bits.forEach(function (bit, index) {
        var value = Number(bit);
        if (index === LAST_BIT_INDEX) {
          extended = !!value;
        } else {
          if (value) {
            channelList.push(channelIndex);
          }
          ++channelIndex;
        }
      });
    }
    return channelList;
  };
  CommandBinaryBuffer.prototype.setChannels = function (channelList) {
    var _this3 = this;
    if (channelList.length === 0) {
      this.setUint8(0);
      return;
    }
    channelList.sort(function (a, b) {
      return a.index - b.index;
    });
    var maxChannel = Math.max.apply(Math, _toConsumableArray(channelList.map(function (_ref2) {
      var index = _ref2.index;
      return index;
    })));
    var size = (maxChannel - maxChannel % 8) / 8;
    var data = new Array(size + 1).fill(0);
    var byte = 0;
    data.forEach(function (_, byteIndex) {
      var channelIndex = byteIndex * LAST_BIT_INDEX + 1;
      var maxChannelIndex = channelIndex + LAST_BIT_INDEX;
      while (channelIndex < maxChannelIndex) {
        var channel = channelList.find(function (item) {
          return item.index === channelIndex;
        });
        if (channel !== undefined) {
          byte |= 1 << (channel.index - 1) % LAST_BIT_INDEX;
        }
        ++channelIndex;
      }
      if (data[byteIndex + 1] !== undefined) {
        byte |= 1 << LAST_BIT_INDEX;
      }
      data[byteIndex] = byte;
      byte = 0;
    });
    data.forEach(function (value) {
      return _this3.setUint8(value);
    });
  };
  CommandBinaryBuffer.prototype.getChannelValue = function () {
    return this.getUint8() + 1;
  };
  CommandBinaryBuffer.prototype.setChannelValue = function (value) {
    if (value < 1) {
      throw new Error('channel must be 1 or greater');
    }
    this.setUint8(value - 1);
  };
  CommandBinaryBuffer.prototype.getChannelsValuesWithHourDiff = function () {
    var _this4 = this;
    var isArchiveValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var date = this.getDate();
    var _this$getHours = this.getHours(),
      hour = _this$getHours.hour,
      hours = _this$getHours.hours;
    var channels = this.getChannels();
    var channelList = [];
    date.setUTCHours(hour);
    channels.forEach(function (channelIndex) {
      var diff = [];
      var value = _this4.getExtendedValue();
      for (var diffHour = 1; diffHour < hours; ++diffHour) {
        diff.push(_this4.getExtendedValue());
      }
      channelList.push({
        value: value === isArchiveValue && EMPTY_VALUE ? 0 : value,
        diff: diff,
        index: channelIndex
      });
    });
    return {
      startTime2000: getTime2000FromDate(date),
      hours: hours,
      channelList: channelList
    };
  };
  CommandBinaryBuffer.prototype.setChannelsValuesWithHourDiff = function (hours, startTime2000, channelList) {
    var _this5 = this;
    var isArchiveValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var date = getDateFromTime2000(startTime2000);
    var hour = date.getUTCHours();
    this.setDate(date);
    this.setHours(hour, hours);
    this.setChannels(channelList);
    channelList.forEach(function (_ref3) {
      var value = _ref3.value,
        diff = _ref3.diff;
      _this5.setExtendedValue(isArchiveValue && value === 0 ? EMPTY_VALUE : value);
      diff.forEach(function (diffValue) {
        return _this5.setExtendedValue(diffValue);
      });
    });
  };
  CommandBinaryBuffer.prototype.getHours = function () {
    var byte = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getUint8();
    if (byte === 0) {
      return {
        hours: 0,
        hour: 0
      };
    }
    var hours = ((byte & 0xe0) >> 5) + 1;
    var hour = byte & 0x1f;
    return {
      hours: hours,
      hour: hour
    };
  };
  CommandBinaryBuffer.prototype.setHours = function (hour, hours) {
    if (hour === 0 && hours === 0) {
      this.setUint8(0);
      return;
    }
    this.setUint8((hours - 1 & 0x07) << 5 | hour & 0x1f);
  };
  CommandBinaryBuffer.prototype.getDate = function () {
    var yearMonthByte = this.getUint8();
    var monthDateByte = this.getUint8();
    var year = yearMonthByte >> YEAR_START_INDEX;
    var month = (yearMonthByte & 0x01) << MONTH_BIT_SIZE - YEAR_START_INDEX | monthDateByte >> DATE_BIT_SIZE;
    var monthDay = monthDateByte & 0x1f;
    return new Date(Date.UTC(year + INITIAL_YEAR, month - 1, monthDay, 0, 0, 0, 0));
  };
  CommandBinaryBuffer.prototype.setDate = function (dateOrTime) {
    var _this6 = this;
    var date;
    if (dateOrTime instanceof Date) {
      date = dateOrTime;
    } else {
      date = getDateFromTime2000(dateOrTime);
    }
    var year = date.getUTCFullYear() - INITIAL_YEAR;
    var month = date.getUTCMonth() + 1;
    var day = date.getUTCDate();
    var yearMonthByte = year << YEAR_START_INDEX | month >> MONTH_BIT_SIZE - YEAR_START_INDEX;
    var monthDateByte = (month & 0x07) << DATE_BIT_SIZE | day;
    [yearMonthByte, monthDateByte].forEach(function (byte) {
      return _this6.setUint8(byte);
    });
  };
  CommandBinaryBuffer.prototype.getPulseCoefficient = function () {
    var pulseCoefficient = this.getUint8();
    if (isMSBSet(pulseCoefficient)) {
      var value = byteToPulseCoefficientMap[pulseCoefficient];
      if (value) {
        return value;
      }
      throw new Error('pulseCoefficient MSB is set, but value unknown');
    }
    return pulseCoefficient;
  };
  CommandBinaryBuffer.prototype.setPulseCoefficient = function (value) {
    if (value in pulseCoefficientToByteMap) {
      var byte = pulseCoefficientToByteMap[value];
      if (byte) {
        this.setUint8(byte);
      } else {
        throw new Error('pulseCoefficient MSB is set, but value unknown');
      }
    } else {
      this.setUint8(value);
    }
  };
  CommandBinaryBuffer.prototype.getChannelsWithAbsoluteValues = function () {
    var _this7 = this;
    var channels = this.getChannels();
    var channelList = [];
    channels.forEach(function (channelIndex) {
      channelList.push({
        pulseCoefficient: _this7.getPulseCoefficient(),
        value: _this7.getExtendedValue(),
        index: channelIndex
      });
    });
    return channelList;
  };
  CommandBinaryBuffer.prototype.setChannelsWithAbsoluteValues = function (channelList) {
    var _this8 = this;
    this.setChannels(channelList);
    channelList.forEach(function (_ref4) {
      var value = _ref4.value,
        pulseCoefficient = _ref4.pulseCoefficient;
      _this8.setPulseCoefficient(pulseCoefficient);
      _this8.setExtendedValue(value);
    });
  };
  CommandBinaryBuffer.prototype.getChannelsAbsoluteValuesWithHourDiff = function (hours) {
    var _this9 = this;
    var channels = this.getChannels();
    var channelList = [];
    channels.forEach(function (channelIndex) {
      var pulseCoefficient = _this9.getPulseCoefficient();
      var value = _this9.getExtendedValue();
      var diff = [];
      for (var hourIndex = 1; hourIndex < hours; ++hourIndex) {
        diff.push(_this9.getExtendedValue());
      }
      channelList.push({
        diff: diff,
        value: value,
        pulseCoefficient: pulseCoefficient,
        index: channelIndex
      });
    });
    return channelList;
  };
  CommandBinaryBuffer.prototype.setChannelsAbsoluteValuesWithHourDiff = function (channelList) {
    var _this10 = this;
    this.setChannels(channelList);
    channelList.forEach(function (_ref5) {
      var value = _ref5.value,
        diff = _ref5.diff,
        pulseCoefficient = _ref5.pulseCoefficient;
      _this10.setPulseCoefficient(pulseCoefficient);
      _this10.setExtendedValue(value);
      diff.forEach(function (diffValue) {
        return _this10.setExtendedValue(diffValue);
      });
    });
  };
  CommandBinaryBuffer.prototype.getEventStatus = function (hardwareType) {
    var status;
    if (GAS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      status = toObject(gasBitMask, this.getUint8());
    } else if (TWO_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      status = toObject(twoChannelBitMask, this.getUint8());
    } else if (ELIMP_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      status = toObject(elimpBitMask, this.getUint8());
    } else if (FOUR_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      status = toObject(fourChannelBitMask, this.getUint16(true));
    } else if (MTX_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      status = toObject(mtxBitMask, this.getUint16(true));
    } else if (hardwareType === US_WATER) {
      var event = toObject(usWaterMeterEventBitMask, this.getUint8());
      status = {
        event: event,
        error: this.getUint8()
      };
    } else {
      throw new Error('wrong hardwareType');
    }
    return status;
  };
  CommandBinaryBuffer.prototype.setEventStatus = function (hardwareType, status) {
    if (GAS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      this.setUint8(fromObject(gasBitMask, status));
    } else if (TWO_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      this.setUint8(fromObject(twoChannelBitMask, status));
    } else if (ELIMP_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      this.setUint8(fromObject(elimpBitMask, status));
    } else if (FOUR_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      this.setUint16(fromObject(fourChannelBitMask, status) | 1 << 7, true);
    } else if (MTX_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      this.setUint16(fromObject(mtxBitMask, status), true);
    } else if (hardwareType === US_WATER) {
      var data = status;
      this.setUint8(fromObject(usWaterMeterEventBitMask, data.event));
      this.setUint8(data.error);
    } else {
      throw new Error('wrong hardwareType');
    }
  };
  CommandBinaryBuffer.prototype.getParameter = function () {
    var id = this.getUint8();
    var name = deviceParameterNames[id];
    if (!deviceParameterConvertersMap[id] || !deviceParameterConvertersMap[id].get) {
      throw new Error("parameter ".concat(id, " is not supported"));
    }
    var data = deviceParameterConvertersMap[id].get(this);
    return {
      id: id,
      name: name,
      data: data
    };
  };
  CommandBinaryBuffer.prototype.setParameter = function (parameter) {
    var id = parameter.id,
      data = parameter.data;
    if (!deviceParameterConvertersMap[id] || !deviceParameterConvertersMap[id].set) {
      throw new Error("parameter ".concat(id, " is not supported"));
    }
    this.setUint8(id);
    deviceParameterConvertersMap[id].set(this, data);
  };
  CommandBinaryBuffer.prototype.getRequestParameter = function () {
    var id = this.getUint8();
    var name = deviceParameterNames[id];
    var data = null;
    switch (id) {
      case ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL:
      case ABSOLUTE_DATA_MULTI_CHANNEL:
      case CHANNEL_TYPE:
        data = {
          channel: this.getChannelValue()
        };
        break;
      case REPORTING_DATA_CONFIG:
        data = {
          dataType: this.getUint8()
        };
        break;
      case EVENTS_CONFIG:
        data = {
          eventId: this.getUint8()
        };
        break;
    }
    return {
      id: id,
      name: name,
      data: data
    };
  };
  CommandBinaryBuffer.prototype.setRequestParameter = function (parameter) {
    var id = parameter.id,
      parameterData = parameter.data;
    var data;
    this.setUint8(id);
    switch (id) {
      case ABSOLUTE_DATA_MULTI_CHANNEL:
      case ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL:
      case CHANNEL_TYPE:
        data = parameterData;
        this.setChannelValue(data.channel);
        break;
      case REPORTING_DATA_CONFIG:
        data = parameterData;
        this.setUint8(data.dataType);
        break;
      case EVENTS_CONFIG:
        data = parameterData;
        this.setUint8(data.eventId);
        break;
    }
  };
  CommandBinaryBuffer.prototype.getResponseParameter = function () {
    var id = this.getUint8();
    var name = deviceParameterNames[id];
    var data;
    if (!deviceParameterConvertersMap[id] || !deviceParameterConvertersMap[id].get) {
      throw new Error("parameter ".concat(id, " is not supported"));
    }
    switch (id) {
      case MQTT_SESSION_CONFIG:
      case NBIOT_SSL_CACERT_WRITE:
      case NBIOT_SSL_CLIENT_CERT_WRITE:
      case NBIOT_SSL_CLIENT_KEY_WRITE:
      case NBIOT_SSL_CACERT_SET:
      case NBIOT_SSL_CLIENT_CERT_SET:
      case NBIOT_SSL_CLIENT_KEY_SET:
      case NBIOT_DEVICE_SOFTWARE_UPDATE:
      case NBIOT_MODULE_FIRMWARE_UPDATE:
        data = null;
        break;
      default:
        data = deviceParameterConvertersMap[id].get(this);
    }
    return {
      id: id,
      name: name,
      data: data
    };
  };
  CommandBinaryBuffer.prototype.setResponseParameter = function (parameter) {
    var id = parameter.id,
      data = parameter.data;
    if (!deviceParameterConvertersMap[id] || !deviceParameterConvertersMap[id].set) {
      throw new Error("parameter ".concat(id, " is not supported"));
    }
    this.setUint8(id);
    switch (id) {
      case MQTT_SESSION_CONFIG:
      case NBIOT_SSL_CACERT_WRITE:
      case NBIOT_SSL_CLIENT_CERT_WRITE:
      case NBIOT_SSL_CLIENT_KEY_WRITE:
      case NBIOT_SSL_CACERT_SET:
      case NBIOT_SSL_CLIENT_CERT_SET:
      case NBIOT_SSL_CLIENT_KEY_SET:
      case NBIOT_DEVICE_SOFTWARE_UPDATE:
      case NBIOT_MODULE_FIRMWARE_UPDATE:
        break;
      default:
        deviceParameterConvertersMap[id].set(this, data);
    }
  };
  CommandBinaryBuffer.prototype.getLegacyHourDiff = function () {
    var stateWithValueByte = this.getUint8();
    var valueLowerByte = this.getUint8();
    return {
      isMagneticInfluence: CommandBinaryBuffer.getMagneticInfluenceBit(stateWithValueByte),
      value: (stateWithValueByte & 0x1f) << 8 | valueLowerByte
    };
  };
  CommandBinaryBuffer.prototype.setLegacyHourDiff = function (diff) {
    var _this11 = this;
    var bytes = [diff.value >> 8, diff.value & 0xff];
    bytes[0] = CommandBinaryBuffer.setMagneticInfluenceBit(bytes[0], diff.isMagneticInfluence);
    bytes.forEach(function (byte) {
      return _this11.setUint8(byte);
    });
  };
  CommandBinaryBuffer.prototype.getLegacyHourCounterWithDiff = function () {
    var isArchiveValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var date = this.getDate();
    var byte = this.getUint8();
    var _this$getHours2 = this.getHours(byte),
      hour = _this$getHours2.hour;
    var value = this.getLegacyCounterValue();
    var counter = {
      isMagneticInfluence: CommandBinaryBuffer.getMagneticInfluenceBit(byte),
      value: isArchiveValue && value === EMPTY_VALUE ? 0 : value
    };
    var diff = [];
    while (this.offset < this.data.length) {
      diff.push(this.getLegacyHourDiff());
    }
    date.setUTCHours(hour);
    return {
      startTime2000: getTime2000FromDate(date),
      counter: counter,
      diff: diff
    };
  };
  CommandBinaryBuffer.prototype.setLegacyHourCounterWithDiff = function (hourCounter) {
    var _this12 = this;
    var isArchiveValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var date = getDateFromTime2000(hourCounter.startTime2000);
    var hour = date.getUTCHours();
    var value = hourCounter.counter.value;
    this.setDate(date);
    this.setHours(hour, 1);
    this.seek(this.offset - 1);
    var byte = this.getUint8();
    this.seek(this.offset - 1);
    this.setUint8(CommandBinaryBuffer.setMagneticInfluenceBit(byte, hourCounter.counter.isMagneticInfluence));
    this.setLegacyCounterValue(isArchiveValue && value === 0 ? EMPTY_VALUE : value);
    hourCounter.diff.forEach(function (diffItem) {
      return _this12.setLegacyHourDiff(diffItem);
    });
  };
  CommandBinaryBuffer.prototype.getChannelsValuesWithHourDiffExtended = function () {
    var _this13 = this;
    var isArchiveValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var date = this.getDate();
    var hour = this.getUint8();
    var hours = this.getUint8();
    var channels = this.getChannels();
    var channelList = [];
    date.setUTCHours(hour);
    channels.forEach(function (channelIndex) {
      var diff = [];
      var value = _this13.getExtendedValue();
      for (var diffHour = 0; diffHour < hours; ++diffHour) {
        diff.push(_this13.getExtendedValue());
      }
      channelList.push({
        value: value === isArchiveValue && EMPTY_VALUE ? 0 : value,
        diff: diff,
        index: channelIndex
      });
    });
    return {
      startTime2000: getTime2000FromDate(date),
      hour: hour,
      hours: hours,
      channelList: channelList
    };
  };
  CommandBinaryBuffer.prototype.setChannelsValuesWithHourDiffExtended = function (parameters) {
    var _this14 = this;
    var isArchiveValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var date = getDateFromTime2000(parameters.startTime2000);
    this.setDate(date);
    this.setUint8(parameters.hour);
    this.setUint8(parameters.hours);
    this.setChannels(parameters.channelList);
    parameters.channelList.forEach(function (_ref6) {
      var value = _ref6.value,
        diff = _ref6.diff;
      _this14.setExtendedValue(isArchiveValue && value === 0 ? EMPTY_VALUE : value);
      diff.forEach(function (diffValue) {
        return _this14.setExtendedValue(diffValue);
      });
    });
  };
  CommandBinaryBuffer.prototype.getDataSegment = function () {
    var segmentationSessionId = this.getUint8();
    var flag = this.getUint8();
    return {
      segmentationSessionId: segmentationSessionId,
      segmentIndex: extractBits(flag, 3, 1),
      segmentsNumber: extractBits(flag, 3, 5),
      isLast: Boolean(extractBits(flag, 1, 8)),
      data: this.getBytesLeft()
    };
  };
  CommandBinaryBuffer.prototype.setDataSegment = function (parameters) {
    var flag = fillBits(0, 3, 1, parameters.segmentIndex);
    flag = fillBits(flag, 3, 5, parameters.segmentsNumber);
    flag = fillBits(flag, 1, 8, +parameters.isLast);
    this.setUint8(parameters.segmentationSessionId);
    this.setUint8(flag);
    this.setBytes(parameters.data);
  };
  CommandBinaryBuffer.prototype.getBinarySensor = function () {
    var activeStateTimeMs = this.getUint16();
    return {
      activeStateTimeMs: activeStateTimeMs
    };
  };
  CommandBinaryBuffer.prototype.setBinarySensor = function (parameters) {
    this.setUint16(parameters.activeStateTimeMs);
  };
  CommandBinaryBuffer.prototype.getTemperatureSensor = function () {
    var measurementPeriod = this.getUint16();
    var hysteresisSec = this.getUint8();
    var highTemperatureThreshold = this.getInt8();
    var lowTemperatureThreshold = this.getInt8();
    return {
      measurementPeriod: measurementPeriod,
      hysteresisSec: hysteresisSec,
      highTemperatureThreshold: highTemperatureThreshold,
      lowTemperatureThreshold: lowTemperatureThreshold
    };
  };
  CommandBinaryBuffer.prototype.setTemperatureSensor = function (parameters) {
    this.setInt16(parameters.measurementPeriod);
    this.setInt8(parameters.hysteresisSec);
    this.setInt8(parameters.highTemperatureThreshold);
    this.setInt8(parameters.lowTemperatureThreshold);
  };
  CommandBinaryBuffer.prototype.getChannelType = function () {
    var channel = this.getChannelValue();
    var type = this.getUint8();
    var parameters = {};
    switch (type) {
      case BINARY_SENSOR:
        parameters = this.getBinarySensor();
        break;
      case TEMPERATURE_SENSOR:
        parameters = this.getTemperatureSensor();
        break;
    }
    return {
      channel: channel,
      type: type,
      parameters: parameters
    };
  };
  CommandBinaryBuffer.prototype.setChannelType = function (_ref7) {
    var type = _ref7.type,
      channel = _ref7.channel,
      parameters = _ref7.parameters;
    this.setChannelValue(channel);
    this.setUint8(type);
    switch (type) {
      case BINARY_SENSOR:
        this.setBinarySensor(parameters);
        break;
      case TEMPERATURE_SENSOR:
        this.setTemperatureSensor(parameters);
        break;
    }
  };

  var getBase64FromBytes$1 = (function (bytes) {
    return btoa(bytes.map(function (byte) {
      return String.fromCharCode(byte);
    }).join(''));
  });

  var id$q = dataSegment;
  downlinkNames[dataSegment];
  var COMMAND_BODY_MIN_SIZE$1 = 2;
  var toBytes$s = function (parameters) {
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_MIN_SIZE$1 + parameters.data.length);
    buffer.setDataSegment(parameters);
    return toBytes$u(id$q, buffer.data);
  };

  var id$p = getArchiveDays;
  downlinkNames[getArchiveDays];
  var COMMAND_BODY_SIZE$8 = 3;
  var toBytes$r = function (parameters) {
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$8);
    var startTime2000 = parameters.startTime2000,
      days = parameters.days;
    var date = getDateFromTime2000(startTime2000);
    buffer.setDate(date);
    buffer.setUint8(days);
    return toBytes$u(id$p, buffer.data);
  };

  var id$o = getArchiveDaysMc;
  downlinkNames[getArchiveDaysMc];
  var COMMAND_BODY_SIZE$7 = 4;
  var toBytes$q = function (parameters) {
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$7);
    var startTime2000 = parameters.startTime2000,
      days = parameters.days,
      channelList = parameters.channelList;
    var date = getDateFromTime2000(startTime2000);
    buffer.setDate(date);
    buffer.setChannels(channelList.map(function (index) {
      return {
        index: index
      };
    }));
    buffer.setUint8(days);
    return toBytes$u(id$o, buffer.data);
  };

  var id$n = getArchiveEvents;
  downlinkNames[getArchiveEvents];
  var COMMAND_BODY_SIZE$6 = 5;
  var toBytes$p = function (parameters) {
    var startTime2000 = parameters.startTime2000,
      events = parameters.events;
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$6);
    buffer.setTime(startTime2000);
    buffer.setUint8(events);
    return toBytes$u(id$n, buffer.data);
  };

  var id$m = getArchiveHours;
  downlinkNames[getArchiveHours];
  var COMMAND_BODY_SIZE$5 = 4;
  var toBytes$o = function (parameters) {
    var startTime2000 = parameters.startTime2000,
      hours = parameters.hours;
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$5);
    var date = getDateFromTime2000(startTime2000);
    var hour = date.getUTCHours();
    buffer.setDate(date);
    buffer.setHours(hour, 1);
    buffer.setUint8(hours);
    return toBytes$u(id$m, buffer.data);
  };

  var id$l = getArchiveHoursMc;
  downlinkNames[getArchiveHoursMc];
  var COMMAND_BODY_SIZE$4 = 4;
  var toBytes$n = function (parameters) {
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$4);
    var hours = parameters.hours,
      startTime2000 = parameters.startTime2000,
      channelList = parameters.channelList;
    var date = getDateFromTime2000(startTime2000);
    var hour = date.getUTCHours();
    buffer.setDate(date);
    buffer.setHours(hour, hours);
    buffer.setChannels(channelList.map(function (index) {
      return {
        index: index
      };
    }));
    return toBytes$u(id$l, buffer.data);
  };

  var id$k = getArchiveHoursMcEx;
  downlinkNames[getArchiveHoursMcEx];
  var COMMAND_BODY_SIZE$3 = 5;
  var toBytes$m = function (parameters) {
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$3);
    var channelList = parameters.channelList,
      hour = parameters.hour,
      hours = parameters.hours,
      startTime2000 = parameters.startTime2000;
    var date = getDateFromTime2000(startTime2000);
    buffer.setDate(date);
    buffer.setUint8(hour);
    buffer.setUint8(hours);
    buffer.setChannels(channelList.map(function (index) {
      return {
        index: index
      };
    }));
    return toBytes$u(id$k, buffer.data);
  };

  var id$j = getBatteryStatus;
  downlinkNames[getBatteryStatus];
  var toBytes$l = function () {
    return toBytes$u(id$j);
  };

  var id$i = getChannelsStatus;
  downlinkNames[getChannelsStatus];
  var toBytes$k = function (parameters) {
    return toBytes$u(id$i, Object.keys(parameters).length !== 0 ? [setChannelsMaskToNumber(parameters)] : []);
  };

  var id$h = getChannelsTypes;
  downlinkNames[getChannelsTypes];
  var toBytes$j = function () {
    return toBytes$u(id$h);
  };

  var id$g = getCurrent;
  downlinkNames[getCurrent];
  var toBytes$i = function () {
    return toBytes$u(id$g);
  };

  var id$f = getCurrentMc;
  downlinkNames[getCurrentMc];
  var toBytes$h = function () {
    return toBytes$u(id$f);
  };

  var id$e = getExAbsArchiveDaysMc;
  downlinkNames[getExAbsArchiveDaysMc];
  var COMMAND_BODY_SIZE$2 = 4;
  var toBytes$g = function (parameters) {
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$2);
    var startTime2000 = parameters.startTime2000,
      days = parameters.days,
      channelList = parameters.channelList;
    buffer.setDate(startTime2000);
    buffer.setChannels(channelList.map(function (index) {
      return {
        index: index
      };
    }));
    buffer.setUint8(days);
    return toBytes$u(id$e, buffer.data);
  };

  var id$d = getExAbsArchiveHoursMc;
  downlinkNames[getExAbsArchiveHoursMc];
  var COMMAND_BODY_SIZE$1 = 4;
  var toBytes$f = function (parameters) {
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$1);
    var startTime2000 = parameters.startTime2000,
      hours = parameters.hours,
      channelList = parameters.channelList;
    var date = getDateFromTime2000(startTime2000);
    var hour = date.getUTCHours();
    buffer.setDate(date);
    buffer.setHours(hour, hours);
    buffer.setChannels(channelList.map(function (index) {
      return {
        index: index
      };
    }));
    return toBytes$u(id$d, buffer.data);
  };

  var id$c = getExAbsCurrentMc;
  downlinkNames[getExAbsCurrentMc];
  var toBytes$e = function () {
    return toBytes$u(id$c);
  };

  var id$b = getLmicInfo;
  downlinkNames[getLmicInfo];
  var toBytes$d = function () {
    return toBytes$u(id$b);
  };

  var id$a = getParameter;
  downlinkNames[getParameter];
  var toBytes$c = function (parameters) {
    var buffer = new CommandBinaryBuffer(getRequestParameterSize(parameters));
    buffer.setRequestParameter(parameters);
    return toBytes$u(id$a, buffer.data);
  };

  var id$9 = getSignalQuality;
  downlinkNames[getSignalQuality];
  var toBytes$b = function () {
    return toBytes$u(id$9, []);
  };

  var id$8 = getStatus;
  downlinkNames[getStatus];
  var toBytes$a = function () {
    return toBytes$u(id$8);
  };

  var id$7 = getTime2000;
  downlinkNames[getTime2000];
  var toBytes$9 = function () {
    return toBytes$u(id$7, []);
  };

  var id$6 = setParameter;
  downlinkNames[setParameter];
  var toBytes$8 = function (parameters) {
    var buffer = new CommandBinaryBuffer(getParameterSize(parameters));
    buffer.setParameter(parameters);
    return toBytes$u(id$6, buffer.data);
  };

  var id$5 = setTime2000;
  downlinkNames[setTime2000];
  var COMMAND_BODY_SIZE = 5;
  var toBytes$7 = function (parameters) {
    var sequenceNumber = parameters.sequenceNumber,
      seconds = parameters.seconds;
    var buffer = new BinaryBuffer(COMMAND_BODY_SIZE, false);
    buffer.setUint8(sequenceNumber);
    buffer.setInt32(seconds);
    return toBytes$u(id$5, buffer.data);
  };

  var id$4 = softRestart;
  downlinkNames[softRestart];
  var toBytes$6 = function () {
    return toBytes$u(id$4);
  };

  var id$3 = updateRun;
  downlinkNames[updateRun];
  var toBytes$5 = function () {
    return toBytes$u(id$3);
  };

  var id$2 = usWaterMeterCommand;
  downlinkNames[usWaterMeterCommand];
  var toBytes$4 = function (parameters) {
    var data = parameters.data,
      length = parameters.length;
    var buffer = new CommandBinaryBuffer(length);
    buffer.setUint8(length);
    buffer.setBytes(data);
    return toBytes$u(id$2, buffer.data);
  };

  var id$1 = verifyImage;
  downlinkNames[verifyImage];
  var toBytes$3 = function () {
    return toBytes$u(id$1);
  };

  var id = writeImage;
  downlinkNames[writeImage];
  var COMMAND_BODY_MIN_SIZE = 4;
  var toBytes$2 = function (parameters) {
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_MIN_SIZE);
    buffer.setUint32(parameters.offset);
    buffer.setBytes(parameters.data);
    return toBytes$u(id, buffer.data);
  };

  var calculateLrc = (function (data) {
    var initialLrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0x55;
    var lrc = initialLrc;
    data.forEach(function (item) {
      lrc ^= item;
    });
    return lrc;
  });

  var getToBytes = function (toBytesMap) {
    return function (commands) {
      var _ref;
      var commandBytes = commands.map(function (command) {
        if ('id' in command) {
          return toBytesMap[command.id](command.parameters || {}, command.config);
        }
        if ('command' in command) {
          return command.command.bytes;
        }
        throw new Error('wrong command format');
      });
      var body = (_ref = []).concat.apply(_ref, _toConsumableArray(commandBytes));
      return [].concat(_toConsumableArray(body), [calculateLrc(body)]);
    };
  };

  var toBytesMap = {};
  var toBytes$1 = getToBytes(toBytesMap);
  toBytesMap[id$r] = toBytes$t;
  toBytesMap[id$q] = toBytes$s;
  toBytesMap[id$p] = toBytes$r;
  toBytesMap[id$o] = toBytes$q;
  toBytesMap[id$n] = toBytes$p;
  toBytesMap[id$m] = toBytes$o;
  toBytesMap[id$l] = toBytes$n;
  toBytesMap[id$k] = toBytes$m;
  toBytesMap[id$j] = toBytes$l;
  toBytesMap[id$i] = toBytes$k;
  toBytesMap[id$h] = toBytes$j;
  toBytesMap[id$g] = toBytes$i;
  toBytesMap[id$f] = toBytes$h;
  toBytesMap[id$e] = toBytes$g;
  toBytesMap[id$d] = toBytes$f;
  toBytesMap[id$c] = toBytes$e;
  toBytesMap[id$b] = toBytes$d;
  toBytesMap[id$a] = toBytes$c;
  toBytesMap[id$9] = toBytes$b;
  toBytesMap[id$8] = toBytes$a;
  toBytesMap[id$7] = toBytes$9;
  toBytesMap[id$6] = toBytes$8;
  toBytesMap[id$5] = toBytes$7;
  toBytesMap[id$4] = toBytes$6;
  toBytesMap[id$3] = toBytes$5;
  toBytesMap[id$2] = toBytes$4;
  toBytesMap[id$1] = toBytes$3;
  toBytesMap[id] = toBytes$2;

  // export
  getBase64FromBytes = getBase64FromBytes$1;
  toBytes = toBytes$1;

})();
//#endregion


/*
  Incoming arguments:
    * msg - JSON message payload downlink message json
    * msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.
    * metadata - list of key-value pairs with additional data about the message
    * integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter

  Output must be an object with the following fields:
    * contentType - BINARY
    * data - payload in base64
*/

var result = {
    contentType: 'BINARY',
    data: getBase64FromBytes(toBytes(msg.commands, config))
};

return result;
