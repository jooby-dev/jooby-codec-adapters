// this is for testing only!

var logs = '';


//#region [autogenerated jooby-codec bundle]
(function () {
  'use strict';

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var INT8_SIZE = 1;
  var INT16_SIZE = 2;
  var INT32_SIZE = 4;
  var log = Math.log,
    pow = Math.pow,
    LN2 = Math.LN2;
  var readFloat = function readFloat(buffer, offset, isLittleEndian, mLen, bytes) {
    var e,
      m,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLittleEndian ? bytes - 1 : 0,
      d = isLittleEndian ? -1 : 1,
      s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * pow(2, e - mLen);
  };
  var writeFloat = function writeFloat(buffer, offset, value, isLittleEndian, mLen, bytes) {
    var e,
      m,
      c,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
      i = isLittleEndian ? 0 : bytes - 1,
      d = isLittleEndian ? 1 : -1,
      s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value < 0 && (value = -value);
    if (value !== value || value === Infinity) {
      m = value !== value ? 1 : 0;
      e = eMax;
    } else {
      e = log(value) / LN2 | 0;
      if (value * (c = pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 0x100, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 0x100, eLen -= 8);
    buffer[offset + i - d] |= s * 0x80;
  };
  var be2 = [1, 0];
  var be4 = [3, 2, 1, 0];
  var le2 = [0, 1];
  var le4 = [0, 1, 2, 3];
  var readUint8 = function readUint8(buffer, offset) {
    return buffer[offset];
  };
  var readUint16 = function readUint16(buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    return b0 | b1;
  };
  var readUint32 = function readUint32(buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    var b0 = buffer[offset + order[3]] * 0x1000000;
    var b1 = buffer[offset + order[2]] * 0x10000;
    var b2 = buffer[offset + order[1]] * 0x100;
    var b3 = buffer[offset + order[0]];
    return b0 + b1 + b2 + b3;
  };
  var writeUint8 = function writeUint8(buffer, offset, value) {
    buffer[offset] = value & 0xff;
  };
  var writeUint16 = function writeUint16(buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
  };
  var writeUint32 = function writeUint32(buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
    buffer[offset + order[3]] = value >>> 24 & 0xff;
  };
  function BinaryBuffer(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (typeof dataOrLength === 'number') {
      var bytes = new Array(dataOrLength).fill(0);
      this.data = bytes;
    } else {
      this.data = dataOrLength;
    }
    this.offset = 0;
    this.isLittleEndian = isLittleEndian;
  }
  BinaryBuffer.prototype = {
    toUint8Array: function toUint8Array() {
      return this.data;
    },
    seek: function seek(position) {
      if (position < 0 || position >= this.data.length) {
        throw new Error('Invalid position.');
      }
      this.offset = position;
    },
    setInt8: function setInt8(value) {
      writeUint8(this.data, this.offset, value < 0 ? value | 0x100 : value);
      this.offset += INT8_SIZE;
    },
    getInt8: function getInt8() {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result & 0x80 ? result ^ -0x100 : result;
    },
    setUint8: function setUint8(value) {
      writeUint8(this.data, this.offset, value);
      this.offset += INT8_SIZE;
    },
    getUint8: function getUint8() {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result;
    },
    setInt16: function setInt16(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value < 0 ? value | 0x10000 : value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getInt16: function getInt16() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result & 0x8000 ? result ^ -0x10000 : result;
    },
    setUint16: function setUint16(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getUint16: function getUint16() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result;
    },
    setInt32: function setInt32(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value < 0 ? value | 0x100000000 : value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getInt32: function getInt32() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result & 0x80000000 ? result ^ -0x100000000 : result;
    },
    setUint32: function setUint32(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getUint32: function getUint32() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result;
    },
    setFloat32: function setFloat32(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeFloat(this.data, this.offset, value, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
    },
    getFloat32: function getFloat32() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readFloat(this.data, this.offset, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
      return result;
    },
    setString: function setString(value) {
      this.setUint8(value.length);
      for (var index = 0; index < value.length; ++index) {
        this.setUint8(value.charCodeAt(index));
      }
    },
    getString: function getString() {
      var size = this.getUint8();
      var endIndex = this.offset + size;
      var chars = [];
      while (this.offset < endIndex) {
        chars.push(String.fromCharCode(this.getUint8()));
      }
      return chars.join('');
    },
    getBytesToOffset: function getBytesToOffset() {
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offset;
      return this.data.slice(0, offset);
    },
    getBytesLeft: function getBytesLeft() {
      return this.getBytes(this.bytesLeft);
    },
    getBytes: function getBytes(length) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      this.offset = offset + length;
      return this.data.slice(offset, this.offset);
    },
    setBytes: function setBytes(data) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      var bytes = this.data;
      bytes.splice.apply(bytes, [offset, data.length].concat(_toConsumableArray(data)));
      this.data = bytes;
      this.offset = offset + data.length;
    }
  };
  Object.defineProperties(BinaryBuffer.prototype, {
    size: {
      get: function get() {
        return this.data.length;
      }
    },
    isEmpty: {
      get: function get() {
        return this.data.length - this.offset === 0;
      }
    },
    bytesLeft: {
      get: function get() {
        return this.data.length - this.offset;
      }
    },
    position: {
      get: function get() {
        return this.offset;
      }
    }
  });

  var extraCommandMask = 0x1f;
  var toBytes$b = function toBytes(commandId, commandSize) {
    if ((commandId & extraCommandMask) === 0) {
      if (commandSize > extraCommandMask) {
        throw new Error("Wrong command id/size. Id: ".concat(commandId, ", size: ").concat(commandSize, "."));
      }
      return [commandId | commandSize];
    }
    if (commandId > extraCommandMask) {
      return [extraCommandMask, commandId >> 8, commandSize];
    }
    return [commandId, commandSize];
  };

  var toBytes$a = function toBytes(commandId) {
    var commandData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var headerData = toBytes$b(commandId, commandData.length);
    return [].concat(_toConsumableArray(headerData), _toConsumableArray(commandData));
  };

  var id$9 = 0x0c;
  var name$9 = 'correctTime2000';
  var headerSize$9 = 2;
  var COMMAND_BODY_SIZE$9 = 2;
  var examples$9 = {
    'correct time 120 seconds to the past': {
      id: id$9,
      name: name$9,
      headerSize: headerSize$9,
      parameters: {
        sequenceNumber: 45,
        seconds: -120
      },
      bytes: [0x0c, 0x02, 0x2d, 0x88]
    },
    'correct time 95 seconds to the future': {
      id: id$9,
      name: name$9,
      headerSize: headerSize$9,
      parameters: {
        sequenceNumber: 46,
        seconds: 95
      },
      bytes: [0x0c, 0x02, 0x2e, 0x5f]
    }
  };
  var fromBytes$9 = function fromBytes(data) {
    if (data.length !== COMMAND_BODY_SIZE$9) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    var buffer = new BinaryBuffer(data, false);
    var parameters = {
      sequenceNumber: buffer.getUint8(),
      seconds: buffer.getInt8()
    };
    if (!buffer.isEmpty) {
      throw new Error('BinaryBuffer is not empty.');
    }
    return parameters;
  };
  var toBytes$9 = function toBytes(parameters) {
    var sequenceNumber = parameters.sequenceNumber,
      seconds = parameters.seconds;
    var buffer = new BinaryBuffer(COMMAND_BODY_SIZE$9, false);
    buffer.setUint8(sequenceNumber);
    buffer.setInt8(seconds);
    return toBytes$a(id$9, buffer.data);
  };

  var correctTime2000 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    examples: examples$9,
    fromBytes: fromBytes$9,
    headerSize: headerSize$9,
    id: id$9,
    name: name$9,
    toBytes: toBytes$9
  });

  var id$8 = 0x07;
  var name$8 = 'getCurrent';
  var headerSize$8 = 2;
  var COMMAND_BODY_SIZE$8 = 0;
  var examples$8 = {
    'simple request': {
      id: id$8,
      headerSize: headerSize$8,
      name: name$8,
      parameters: {},
      bytes: [0x07, 0x00]
    }
  };
  var fromBytes$8 = function fromBytes(data) {
    if (data.length !== COMMAND_BODY_SIZE$8) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    return {};
  };
  var toBytes$8 = function toBytes() {
    return toBytes$a(id$8);
  };

  var getCurrent = /*#__PURE__*/Object.freeze({
    __proto__: null,
    examples: examples$8,
    fromBytes: fromBytes$8,
    headerSize: headerSize$8,
    id: id$8,
    name: name$8,
    toBytes: toBytes$8
  });

  var INITIAL_YEAR_TIMESTAMP = 946684800000;
  var MILLISECONDS_IN_SECONDS = 1000;
  var getDateFromTime2000 = function getDateFromTime2000(time2000) {
    return new Date(INITIAL_YEAR_TIMESTAMP + time2000 * MILLISECONDS_IN_SECONDS);
  };
  var getTime2000FromDate = function getTime2000FromDate(date) {
    return (date.getTime() - INITIAL_YEAR_TIMESTAMP) / MILLISECONDS_IN_SECONDS;
  };

  var fromObject = function fromObject() {
    var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var booleanObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var result = 0;
    for (var name in booleanObject) {
      if (name in bitMask && booleanObject[name]) {
        result |= bitMask[name];
      }
    }
    return result;
  };
  var toObject = function toObject() {
    var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var result = {};
    for (var name in bitMask) {
      result[name] = (value & bitMask[name]) !== 0;
    }
    return result;
  };

  var GASI1 = 1;
  var GASI2 = 2;
  var GASI3 = 3;
  var NOVATOR = 4;
  var IMP2EU = 5;
  var IMP4EU = 6;
  var MTXLORA = 7;
  var IMP2AS = 8;
  var IMP2IN = 9;
  var IMP4IN = 10;
  var ELIMP = 11;
  var GASIC = 12;

  var invertObject = (function (source) {
    var target = {};
    for (var property in source) {
      var value = source[property];
      target[value] = property;
    }
    return target;
  });

  var INITIAL_YEAR = 2000;
  var MONTH_BIT_SIZE = 4;
  var DATE_BIT_SIZE = 5;
  var YEAR_START_INDEX = 1;
  var UNKNOWN_BATTERY_VOLTAGE = 4095;
  var EXTEND_BIT_MASK = 0x80;
  var LAST_BIT_INDEX = 7;
  var GAS_HARDWARE_TYPES = [GASI2, GASI3, GASI1, GASIC];
  var TWO_CHANNELS_HARDWARE_TYPES = [IMP2AS, IMP2EU, IMP2IN, NOVATOR];
  var ELIMP_HARDWARE_TYPES = [ELIMP];
  var FOUR_CHANNELS_HARDWARE_TYPES = [IMP4EU, IMP4IN];
  var MTX_HARDWARE_TYPES = [MTXLORA];
  var gasBitMask = {
    isBatteryLow: Math.pow(2, 0),
    isMagneticInfluence: Math.pow(2, 1),
    isButtonReleased: Math.pow(2, 2),
    isConnectionLost: Math.pow(2, 3)
  };
  var twoChannelBitMask = {
    isBatteryLow: Math.pow(2, 0),
    isConnectionLost: Math.pow(2, 3),
    isFirstChannelInactive: Math.pow(2, 4),
    isSecondChannelInactive: Math.pow(2, 5)
  };
  var elimpBitMask = {
    isConnectionLost: Math.pow(2, 3)
  };
  var fourChannelBitMask = {
    isBatteryLow: Math.pow(2, 0),
    isConnectionLost: Math.pow(2, 3),
    isFirstChannelInactive: Math.pow(2, 4),
    isSecondChannelInactive: Math.pow(2, 5),
    isThirdChannelInactive: Math.pow(2, 6),
    isForthChannelInactive: Math.pow(2, 7)
  };
  var mtxBitMask = {
    isMeterCaseOpen: Math.pow(2, 0),
    isMagneticInfluence: Math.pow(2, 1),
    isParametersSetRemotely: Math.pow(2, 2),
    isParametersSetLocally: Math.pow(2, 3),
    isMeterProgramRestarted: Math.pow(2, 4),
    isLockedOut: Math.pow(2, 5),
    isTimeSet: Math.pow(2, 6),
    isTimeCorrected: Math.pow(2, 7),
    isMeterFailure: Math.pow(2, 8),
    isMeterTerminalBoxOpen: Math.pow(2, 9),
    isModuleCompartmentOpen: Math.pow(2, 10),
    isTariffPlanChanged: Math.pow(2, 11),
    isNewTariffPlanReceived: Math.pow(2, 12)
  };
  var byteToPulseCoefficientMap = {
    128: 1,
    129: 5,
    130: 10,
    131: 100,
    132: 1000,
    133: 10000,
    134: 100000
  };
  var pulseCoefficientToByteMap = invertObject(byteToPulseCoefficientMap);
  var isMSBSet = function isMSBSet(value) {
    return !!(value & 0x80);
  };
  function CommandBinaryBuffer(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    BinaryBuffer.call(this, dataOrLength, isLittleEndian);
  }
  CommandBinaryBuffer.prototype = Object.create(BinaryBuffer.prototype);
  CommandBinaryBuffer.prototype.constructor = CommandBinaryBuffer;
  CommandBinaryBuffer.prototype.getExtendedValue = function () {
    var value = 0;
    var isByteExtended = true;
    var position = 0;
    while (isByteExtended && this.offset <= this.data.length) {
      var _byte3 = this.getUint8();
      isByteExtended = !!(_byte3 & EXTEND_BIT_MASK);
      value += (_byte3 & 0x7f) << 7 * position;
      ++position;
    }
    if (value < 0) {
      value = 0;
    }
    return value;
  };
  CommandBinaryBuffer.prototype.setExtendedValue = function (value) {
    var _this = this;
    if (value === 0) {
      this.setUint8(0);
      return;
    }
    var data = [];
    var encodedValue = value;
    while (encodedValue) {
      data.push(EXTEND_BIT_MASK | encodedValue & 0x7f);
      encodedValue >>= 7;
    }
    var lastByte = data.pop();
    if (lastByte) {
      data.push(lastByte & 0x7f);
    }
    data.forEach(function (extendedValue) {
      return _this.setUint8(extendedValue);
    });
  };
  CommandBinaryBuffer.prototype.getExtendedValueSize = function (bits) {
    var extBits = Math.ceil(bits / 7);
    var totalBits = bits + extBits;
    var extBytes = Math.ceil(totalBits / 8);
    return extBytes;
  };
  CommandBinaryBuffer.prototype.getTime = function () {
    return this.getUint32(false);
  };
  CommandBinaryBuffer.prototype.setTime = function (value) {
    this.setUint32(value, false);
  };
  CommandBinaryBuffer.prototype.getBatteryVoltage = function () {
    var lowVoltageByte = this.getUint8();
    var lowAndHightVoltageByte = this.getUint8();
    var highVoltageByte = this.getUint8();
    var underLowLoad = lowVoltageByte << 4;
    underLowLoad |= (lowAndHightVoltageByte & 0xf0) >> 4;
    var underHighLoad = (lowAndHightVoltageByte & 0x0f) << 8 | highVoltageByte;
    if (underHighLoad === UNKNOWN_BATTERY_VOLTAGE) {
      underHighLoad = undefined;
    }
    if (underLowLoad === UNKNOWN_BATTERY_VOLTAGE) {
      underLowLoad = undefined;
    }
    return {
      underLowLoad: underLowLoad,
      underHighLoad: underHighLoad
    };
  };
  CommandBinaryBuffer.prototype.setBatteryVoltage = function (batteryVoltage) {
    var _this2 = this;
    var underLowLoad = batteryVoltage.underLowLoad,
      underHighLoad = batteryVoltage.underHighLoad;
    if (underLowLoad === undefined) {
      underLowLoad = UNKNOWN_BATTERY_VOLTAGE;
    }
    if (underHighLoad === undefined) {
      underHighLoad = UNKNOWN_BATTERY_VOLTAGE;
    }
    var lowVoltageByte = underLowLoad >> 4 & 0xff;
    var lowAndHighVoltageByte = (underLowLoad & 0x0f) << 4 | underHighLoad >> 8 & 0x0f;
    var highVoltageByte = underHighLoad & 0xff;
    [lowVoltageByte, lowAndHighVoltageByte, highVoltageByte].forEach(function (_byte4) {
      return _this2.setUint8(_byte4);
    });
  };
  CommandBinaryBuffer.prototype.getChannels = function () {
    var channelList = [];
    var extended = true;
    var channelIndex = 1;
    while (extended) {
      var _byte5 = this.getUint8();
      var bits = _byte5.toString(2).padStart(LAST_BIT_INDEX + 1, '0').split('').reverse();
      bits.forEach(function (bit, index) {
        var value = Number(bit);
        if (index === LAST_BIT_INDEX) {
          extended = !!value;
        } else {
          if (value) {
            channelList.push(channelIndex);
          }
          ++channelIndex;
        }
      });
    }
    return channelList;
  };
  CommandBinaryBuffer.prototype.setChannels = function (channelList) {
    var _this3 = this;
    if (channelList.length === 0) {
      this.setUint8(0);
      return;
    }
    channelList.sort(function (a, b) {
      return a.index - b.index;
    });
    var maxChannel = Math.max.apply(Math, _toConsumableArray(channelList.map(function (_ref) {
      var index = _ref.index;
      return index;
    })));
    var size = (maxChannel - maxChannel % 8) / 8;
    var data = new Array(size + 1).fill(0);
    var _byte6 = 0;
    data.forEach(function (_, byteIndex) {
      var channelIndex = byteIndex * LAST_BIT_INDEX + 1;
      var maxChannelIndex = channelIndex + LAST_BIT_INDEX;
      while (channelIndex < maxChannelIndex) {
        var channel = channelList.find(function (item) {
          return item.index === channelIndex;
        });
        if (channel !== undefined) {
          _byte6 |= 1 << (channel.index - 1) % LAST_BIT_INDEX;
        }
        ++channelIndex;
      }
      if (data[byteIndex + 1] !== undefined) {
        _byte6 |= 1 << LAST_BIT_INDEX;
      }
      data[byteIndex] = _byte6;
      _byte6 = 0;
    });
    data.forEach(function (value) {
      return _this3.setUint8(value);
    });
  };
  CommandBinaryBuffer.prototype.getChannelsValuesWithHourDiff = function () {
    var _this4 = this;
    var date = this.getDate();
    var _this$getHours = this.getHours(),
      hour = _this$getHours.hour,
      hours = _this$getHours.hours;
    var channels = this.getChannels();
    var channelList = [];
    date.setUTCHours(hour);
    channels.forEach(function (channelIndex) {
      var diff = [];
      var value = _this4.getExtendedValue();
      for (var diffHour = 1; diffHour < hours; ++diffHour) {
        diff.push(_this4.getExtendedValue());
      }
      channelList.push({
        value: value,
        diff: diff,
        index: channelIndex
      });
    });
    return {
      startTime2000: getTime2000FromDate(date),
      hours: hours,
      channelList: channelList
    };
  };
  CommandBinaryBuffer.prototype.setChannelsValuesWithHourDiff = function (hours, startTime2000, channelList) {
    var _this5 = this;
    var date = getDateFromTime2000(startTime2000);
    var hour = date.getUTCHours();
    this.setDate(date);
    this.setHours(hour, hours);
    this.setChannels(channelList);
    channelList.forEach(function (_ref2) {
      var value = _ref2.value,
        diff = _ref2.diff;
      _this5.setExtendedValue(value);
      diff.forEach(function (diffValue) {
        return _this5.setExtendedValue(diffValue);
      });
    });
  };
  CommandBinaryBuffer.prototype.getHours = function () {
    var _byte7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getUint8();
    if (_byte7 === 0) {
      return {
        hours: 0,
        hour: 0
      };
    }
    var hours = ((_byte7 & 0xe0) >> 5) + 1;
    var hour = _byte7 & 0x1f;
    return {
      hours: hours,
      hour: hour
    };
  };
  CommandBinaryBuffer.prototype.setHours = function (hour, hours) {
    if (hour === 0 && hours === 0) {
      this.setUint8(0);
      return;
    }
    this.setUint8((hours - 1 & 0x07) << 5 | hour & 0x1f);
  };
  CommandBinaryBuffer.prototype.getDate = function () {
    var yearMonthByte = this.getUint8();
    var monthDateByte = this.getUint8();
    var year = yearMonthByte >> YEAR_START_INDEX;
    var month = (yearMonthByte & 0x01) << MONTH_BIT_SIZE - YEAR_START_INDEX | monthDateByte >> DATE_BIT_SIZE;
    var monthDay = monthDateByte & 0x1f;
    return new Date(Date.UTC(year + INITIAL_YEAR, month - 1, monthDay, 0, 0, 0, 0));
  };
  CommandBinaryBuffer.prototype.setDate = function (dateOrTime) {
    var _this6 = this;
    var date;
    if (dateOrTime instanceof Date) {
      date = dateOrTime;
    } else {
      date = getDateFromTime2000(dateOrTime);
    }
    var year = date.getUTCFullYear() - INITIAL_YEAR;
    var month = date.getUTCMonth() + 1;
    var day = date.getUTCDate();
    var yearMonthByte = year << YEAR_START_INDEX | month >> MONTH_BIT_SIZE - YEAR_START_INDEX;
    var monthDateByte = (month & 0x07) << DATE_BIT_SIZE | day;
    [yearMonthByte, monthDateByte].forEach(function (_byte8) {
      return _this6.setUint8(_byte8);
    });
  };
  CommandBinaryBuffer.prototype.getPulseCoefficient = function () {
    var pulseCoefficient = this.getUint8();
    if (isMSBSet(pulseCoefficient)) {
      var value = byteToPulseCoefficientMap[pulseCoefficient];
      if (value) {
        return value;
      }
      throw new Error('pulseCoefficient MSB is set, but value unknown');
    }
    return pulseCoefficient;
  };
  CommandBinaryBuffer.prototype.setPulseCoefficient = function (value) {
    if (value in pulseCoefficientToByteMap) {
      var _byte9 = pulseCoefficientToByteMap[value];
      if (_byte9) {
        this.setUint8(_byte9);
      } else {
        throw new Error('pulseCoefficient MSB is set, but value unknown');
      }
    } else {
      this.setUint8(value);
    }
  };
  CommandBinaryBuffer.prototype.getChannelsWithAbsoluteValues = function () {
    var _this7 = this;
    var channels = this.getChannels();
    var channelList = [];
    channels.forEach(function (channelIndex) {
      channelList.push({
        pulseCoefficient: _this7.getPulseCoefficient(),
        value: _this7.getExtendedValue(),
        index: channelIndex
      });
    });
    return channelList;
  };
  CommandBinaryBuffer.prototype.setChannelsWithAbsoluteValues = function (channelList) {
    var _this8 = this;
    this.setChannels(channelList);
    channelList.forEach(function (_ref3) {
      var value = _ref3.value,
        pulseCoefficient = _ref3.pulseCoefficient;
      _this8.setPulseCoefficient(pulseCoefficient);
      _this8.setExtendedValue(value);
    });
  };
  CommandBinaryBuffer.prototype.getChannelsAbsoluteValuesWithHourDiff = function (hours) {
    var _this9 = this;
    var channels = this.getChannels();
    var channelList = [];
    channels.forEach(function (channelIndex) {
      var pulseCoefficient = _this9.getPulseCoefficient();
      var value = _this9.getExtendedValue();
      var diff = [];
      for (var hourIndex = 1; hourIndex < hours; ++hourIndex) {
        diff.push(_this9.getExtendedValue());
      }
      channelList.push({
        diff: diff,
        value: value,
        pulseCoefficient: pulseCoefficient,
        index: channelIndex
      });
    });
    return channelList;
  };
  CommandBinaryBuffer.prototype.setChannelsAbsoluteValuesWithHourDiff = function (channelList) {
    var _this10 = this;
    this.setChannels(channelList);
    channelList.forEach(function (_ref4) {
      var value = _ref4.value,
        diff = _ref4.diff,
        pulseCoefficient = _ref4.pulseCoefficient;
      _this10.setPulseCoefficient(pulseCoefficient);
      _this10.setExtendedValue(value);
      diff.forEach(function (diffValue) {
        return _this10.setExtendedValue(diffValue);
      });
    });
  };
  CommandBinaryBuffer.prototype.getEventStatus = function (hardwareType) {
    var status;
    if (GAS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      status = toObject(gasBitMask, this.getUint8());
    } else if (TWO_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      status = toObject(twoChannelBitMask, this.getUint8());
    } else if (ELIMP_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      status = toObject(elimpBitMask, this.getUint8());
    } else if (FOUR_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      status = toObject(fourChannelBitMask, this.getExtendedValue());
    } else if (MTX_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      status = toObject(mtxBitMask, this.getUint16());
    } else {
      throw new Error('wrong hardwareType');
    }
    return status;
  };
  CommandBinaryBuffer.prototype.setEventStatus = function (hardwareType, status) {
    if (GAS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      this.setUint8(fromObject(gasBitMask, status));
    } else if (TWO_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      this.setUint8(fromObject(twoChannelBitMask, status));
    } else if (ELIMP_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      this.setUint8(fromObject(elimpBitMask, status));
    } else if (FOUR_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      this.setExtendedValue(fromObject(fourChannelBitMask, status));
    } else if (MTX_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
      this.setUint16(fromObject(mtxBitMask, status));
    } else {
      throw new Error('wrong hardwareType');
    }
  };

  var id$7 = 0x1b;
  var name$7 = 'getArchiveDaysMC';
  var headerSize$7 = 2;
  var COMMAND_BODY_SIZE$7 = 4;
  var examples$7 = {
    '1 day pulse counter for 1 channel from 2023.03.10 00:00:00 GMT': {
      id: id$7,
      name: name$7,
      headerSize: headerSize$7,
      parameters: {
        startTime2000: 731721600,
        days: 1,
        channelList: [1]
      },
      bytes: [0x1b, 0x04, 0x2e, 0x6a, 0x01, 0x01]
    }
  };
  var fromBytes$7 = function fromBytes(data) {
    if (data.length !== COMMAND_BODY_SIZE$7) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    var buffer = new CommandBinaryBuffer(data);
    var date = buffer.getDate();
    var channelList = buffer.getChannels();
    var days = buffer.getUint8();
    if (!buffer.isEmpty) {
      throw new Error('BinaryBuffer is not empty.');
    }
    return {
      startTime2000: getTime2000FromDate(date),
      days: days,
      channelList: channelList
    };
  };
  var toBytes$7 = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$7);
    var startTime2000 = parameters.startTime2000,
      days = parameters.days,
      channelList = parameters.channelList;
    var date = getDateFromTime2000(startTime2000);
    buffer.setDate(date);
    buffer.setChannels(channelList.map(function (index) {
      return {
        index: index
      };
    }));
    buffer.setUint8(days);
    return toBytes$a(id$7, buffer.data);
  };

  var getArchiveDaysMc = /*#__PURE__*/Object.freeze({
    __proto__: null,
    examples: examples$7,
    fromBytes: fromBytes$7,
    headerSize: headerSize$7,
    id: id$7,
    name: name$7,
    toBytes: toBytes$7
  });

  var id$6 = 0x0b;
  var name$6 = 'getArchiveEvents';
  var headerSize$6 = 2;
  var COMMAND_BODY_SIZE$6 = 5;
  var examples$6 = {
    'request 4 events from 2023.04.03 14:01:17 GMT': {
      id: id$6,
      name: name$6,
      headerSize: headerSize$6,
      parameters: {
        startTime2000: 733845677,
        events: 4
      },
      bytes: [0x0b, 0x05, 0x2b, 0xbd, 0x98, 0xad, 0x04]
    }
  };
  var fromBytes$6 = function fromBytes(data) {
    if (data.length !== COMMAND_BODY_SIZE$6) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    var buffer = new CommandBinaryBuffer(data);
    var startTime2000 = buffer.getTime();
    var events = buffer.getUint8();
    if (!buffer.isEmpty) {
      throw new Error('BinaryBuffer is not empty.');
    }
    return {
      startTime2000: startTime2000,
      events: events
    };
  };
  var toBytes$6 = function toBytes(parameters) {
    var startTime2000 = parameters.startTime2000,
      events = parameters.events;
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$6);
    buffer.setTime(startTime2000);
    buffer.setUint8(events);
    return toBytes$a(id$6, buffer.data);
  };

  var getArchiveEvents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    examples: examples$6,
    fromBytes: fromBytes$6,
    headerSize: headerSize$6,
    id: id$6,
    name: name$6,
    toBytes: toBytes$6
  });

  var id$5 = 0x1a;
  var name$5 = 'getArchiveHoursMC';
  var headerSize$5 = 2;
  var COMMAND_BODY_SIZE$5 = 4;
  var examples$5 = {
    'hour pulse counter and 1 hour diff for 1 channel from 2023.12.23 12:00:00 GMT': {
      id: id$5,
      name: name$5,
      headerSize: headerSize$5,
      parameters: {
        startTime2000: 756648000,
        hours: 2,
        channelList: [1]
      },
      bytes: [0x1a, 0x04, 0x2f, 0x97, 0x2c, 0x01]
    }
  };
  var fromBytes$5 = function fromBytes(data) {
    if (data.length !== COMMAND_BODY_SIZE$5) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    var buffer = new CommandBinaryBuffer(data);
    var date = buffer.getDate();
    var _buffer$getHours = buffer.getHours(),
      hour = _buffer$getHours.hour,
      hours = _buffer$getHours.hours;
    var channelList = buffer.getChannels();
    date.setUTCHours(hour);
    if (!buffer.isEmpty) {
      throw new Error('BinaryBuffer is not empty.');
    }
    return {
      startTime2000: getTime2000FromDate(date),
      hours: hours,
      channelList: channelList
    };
  };
  var toBytes$5 = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer(COMMAND_BODY_SIZE$5);
    var hours = parameters.hours,
      startTime2000 = parameters.startTime2000,
      channelList = parameters.channelList;
    var date = getDateFromTime2000(startTime2000);
    var hour = date.getUTCHours();
    buffer.setDate(date);
    buffer.setHours(hour, hours);
    buffer.setChannels(channelList.map(function (index) {
      return {
        index: index
      };
    }));
    return toBytes$a(id$5, buffer.data);
  };

  var getArchiveHoursMc = /*#__PURE__*/Object.freeze({
    __proto__: null,
    examples: examples$5,
    fromBytes: fromBytes$5,
    headerSize: headerSize$5,
    id: id$5,
    name: name$5,
    toBytes: toBytes$5
  });

  var id$4 = 0x18;
  var name$4 = 'getCurrentMc';
  var headerSize$4 = 2;
  var COMMAND_BODY_SIZE$4 = 0;
  var examples$4 = {
    'simple request': {
      id: id$4,
      name: name$4,
      headerSize: headerSize$4,
      parameters: {},
      bytes: [0x18, 0x00]
    }
  };
  var fromBytes$4 = function fromBytes(data) {
    if (data.length !== COMMAND_BODY_SIZE$4) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    return {};
  };
  var toBytes$4 = function toBytes() {
    return toBytes$a(id$4);
  };

  var getCurrentMc = /*#__PURE__*/Object.freeze({
    __proto__: null,
    examples: examples$4,
    fromBytes: fromBytes$4,
    headerSize: headerSize$4,
    id: id$4,
    name: name$4,
    toBytes: toBytes$4
  });

  var id$3 = 0x021f;
  var name$3 = 'getLmicInfo';
  var headerSize$3 = 3;
  var COMMAND_BODY_SIZE$3 = 0;
  var examples$3 = {
    'simple request': {
      id: id$3,
      name: name$3,
      headerSize: headerSize$3,
      parameters: {},
      bytes: [0x1f, 0x02, 0x00]
    }
  };
  var fromBytes$3 = function fromBytes(data) {
    if (data.length !== COMMAND_BODY_SIZE$3) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    return {};
  };
  var toBytes$3 = function toBytes() {
    return toBytes$a(id$3);
  };

  var getLmicInfo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    examples: examples$3,
    fromBytes: fromBytes$3,
    headerSize: headerSize$3,
    id: id$3,
    name: name$3,
    toBytes: toBytes$3
  });

  var id$2 = 0x14;
  var name$2 = 'getStatus';
  var headerSize$2 = 2;
  var COMMAND_BODY_SIZE$2 = 0;
  var examples$2 = {
    'simple request': {
      id: id$2,
      name: name$2,
      headerSize: headerSize$2,
      parameters: {},
      bytes: [0x14, 0x00]
    }
  };
  var fromBytes$2 = function fromBytes(data) {
    if (data.length !== COMMAND_BODY_SIZE$2) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    return {};
  };
  var toBytes$2 = function toBytes() {
    return toBytes$a(id$2);
  };

  var getStatus = /*#__PURE__*/Object.freeze({
    __proto__: null,
    examples: examples$2,
    fromBytes: fromBytes$2,
    headerSize: headerSize$2,
    id: id$2,
    name: name$2,
    toBytes: toBytes$2
  });

  var id$1 = 0x09;
  var name$1 = 'getTime2000';
  var headerSize$1 = 2;
  var COMMAND_BODY_SIZE$1 = 0;
  var examples$1 = {
    'simple request': {
      id: id$1,
      name: name$1,
      headerSize: headerSize$1,
      parameters: {},
      bytes: [0x09, 0x00]
    }
  };
  var fromBytes$1 = function fromBytes(data) {
    if (data.length !== COMMAND_BODY_SIZE$1) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    return {};
  };
  var toBytes$1 = function toBytes() {
    return toBytes$a(id$1, []);
  };

  var getTime2000 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    examples: examples$1,
    fromBytes: fromBytes$1,
    headerSize: headerSize$1,
    id: id$1,
    name: name$1,
    toBytes: toBytes$1
  });

  var id = 0x02;
  var name = 'setTime2000';
  var headerSize = 2;
  var COMMAND_BODY_SIZE = 5;
  var examples = {
    'set time to 2023.04.03 14:01:17 GMT': {
      id: id,
      headerSize: headerSize,
      parameters: {
        sequenceNumber: 78,
        seconds: 733845677
      },
      bytes: [0x02, 0x05, 0x4e, 0x2b, 0xbd, 0x98, 0xad]
    }
  };
  var fromBytes = function fromBytes(data) {
    if (data.length !== COMMAND_BODY_SIZE) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    var buffer = new BinaryBuffer(data, false);
    var parameters = {
      sequenceNumber: buffer.getUint8(),
      seconds: buffer.getInt32()
    };
    if (!buffer.isEmpty) {
      throw new Error('BinaryBuffer is not empty.');
    }
    return parameters;
  };
  var toBytes = function toBytes(parameters) {
    var sequenceNumber = parameters.sequenceNumber,
      seconds = parameters.seconds;
    var buffer = new BinaryBuffer(COMMAND_BODY_SIZE, false);
    buffer.setUint8(sequenceNumber);
    buffer.setInt32(seconds);
    return toBytes$a(id, buffer.data);
  };

  var setTime2000 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    examples: examples,
    fromBytes: fromBytes,
    headerSize: headerSize,
    id: id,
    name: name,
    toBytes: toBytes
  });

  var commands = /*#__PURE__*/Object.freeze({
    __proto__: null,
    correctTime2000: correctTime2000,
    getArchiveDaysMc: getArchiveDaysMc,
    getArchiveEvents: getArchiveEvents,
    getArchiveHoursMc: getArchiveHoursMc,
    getCurrent: getCurrent,
    getCurrentMc: getCurrentMc,
    getLmicInfo: getLmicInfo,
    getStatus: getStatus,
    getTime2000: getTime2000,
    setTime2000: setTime2000
  });

  var equal = function equal(actual, expected) {
    if (actual !== expected) {
      return 'Assertion error!' + ' actual: ' + actual + ' expected: ' + expected;
    }
    return '';
  };
  var deepEqual = function deepEqual(actual, expected) {
    return equal(JSON.stringify(actual), JSON.stringify(expected));
  };
  var testCommands = function testCommands(commands) {
    var output = '';
    for (var commandName in commands) {
      var command = commands[commandName];
      var examples = command === null || command === void 0 ? void 0 : command.examples;
      if (command) {
        output += commandName + ' ';
        for (var exampleName in examples) {
          var exampleData = examples[exampleName];
          output += deepEqual(command.toBytes(exampleData.parameters, exampleData.config), exampleData.bytes);
          output += deepEqual(command.fromBytes(exampleData.bytes.slice(command.headerSize), exampleData.config), exampleData.parameters);
        }
      }
    }
    return output;
  };

  logs += testCommands(commands);

})();
//#endregion


var result = {
    contentType: 'BINARY',
    data: '',
    logs: logs
};

return result;
