// these options can be edited
// available hardware types can be found here:
// https://github.com/jooby-dev/jooby-docs/blob/main/docs/analog/basics.md#hardware-types
var config = {
    hardwareType: 0
};


//#region [autogenerated jooby-codec bundle]
var fromBytes;

'use strict';

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var hexFormatOptions = {
  separator: ' ',
  prefix: ''
};

var INT8_SIZE = 1;
var INT16_SIZE = 2;
var INT24_SIZE = 3;
var INT32_SIZE = 4;
var log = Math.log,
  pow = Math.pow,
  LN2 = Math.LN2;
var readFloat = function (buffer, offset, isLittleEndian, mLen, bytes) {
  var e,
    m,
    eLen = bytes * 8 - mLen - 1,
    eMax = (1 << eLen) - 1,
    eBias = eMax >> 1,
    nBits = -7,
    i = isLittleEndian ? bytes - 1 : 0,
    d = isLittleEndian ? -1 : 1,
    s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 0x100 + buffer[offset + i], i += d, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 0x100 + buffer[offset + i], i += d, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * pow(2, e - mLen);
};
var writeFloat = function (buffer, offset, value, isLittleEndian, mLen, bytes) {
  var e,
    m,
    c,
    eLen = bytes * 8 - mLen - 1,
    eMax = (1 << eLen) - 1,
    eBias = eMax >> 1,
    rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
    i = isLittleEndian ? 0 : bytes - 1,
    d = isLittleEndian ? 1 : -1,
    s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value < 0 && (value = -value);
  if (value !== value || value === Infinity) {
    m = value !== value ? 1 : 0;
    e = eMax;
  } else {
    e = log(value) / LN2 | 0;
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 0x100, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 0x100, eLen -= 8);
  buffer[offset + i - d] |= s * 0x80;
};
var be2 = [1, 0];
var be3 = [2, 1, 0];
var be4 = [3, 2, 1, 0];
var le2 = [0, 1];
var le3 = [0, 1, 2];
var le4 = [0, 1, 2, 3];
var readUint8 = function (buffer, offset) {
  return buffer[offset];
};
var readUint16 = function (buffer, offset, isLittleEndian) {
  var order = isLittleEndian ? le2 : be2;
  var b0 = buffer[offset + order[0]];
  var b1 = buffer[offset + order[1]] << 8;
  return b0 | b1;
};
var readUint24 = function (buffer, offset, isLittleEndian) {
  var order = isLittleEndian ? le3 : be3;
  var b0 = buffer[offset + order[0]];
  var b1 = buffer[offset + order[1]] << 8;
  var b2 = buffer[offset + order[2]] << 16;
  return b0 | b1 | b2;
};
var readUint32 = function (buffer, offset, isLittleEndian) {
  var order = isLittleEndian ? le4 : be4;
  var b0 = buffer[offset + order[3]] * 0x1000000;
  var b1 = buffer[offset + order[2]] * 0x10000;
  var b2 = buffer[offset + order[1]] * 0x100;
  var b3 = buffer[offset + order[0]];
  return b0 + b1 + b2 + b3;
};
var writeUint8 = function (buffer, offset, value) {
  buffer[offset] = value & 0xff;
};
var writeUint16 = function (buffer, offset, value, isLittleEndian) {
  var order = isLittleEndian ? le2 : be2;
  buffer[offset + order[0]] = value & 0xff;
  buffer[offset + order[1]] = value >>> 8 & 0xff;
};
var writeUint24 = function (buffer, offset, value, isLittleEndian) {
  var order = isLittleEndian ? le3 : be3;
  buffer[offset + order[0]] = value & 0xff;
  buffer[offset + order[1]] = value >>> 8 & 0xff;
  buffer[offset + order[2]] = value >>> 16 & 0xff;
};
var writeUint32 = function (buffer, offset, value, isLittleEndian) {
  var order = isLittleEndian ? le4 : be4;
  buffer[offset + order[0]] = value & 0xff;
  buffer[offset + order[1]] = value >>> 8 & 0xff;
  buffer[offset + order[2]] = value >>> 16 & 0xff;
  buffer[offset + order[3]] = value >>> 24 & 0xff;
};
function BinaryBuffer(dataOrLength) {
  var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (typeof dataOrLength === 'number') {
    var bytes = new Array(dataOrLength).fill(0);
    this.data = bytes;
  } else {
    this.data = dataOrLength;
  }
  this.offset = 0;
  this.isLittleEndian = isLittleEndian;
}
BinaryBuffer.prototype = {
  toUint8Array: function () {
    return this.data;
  },
  seek: function (position) {
    if (position < 0 || position >= this.data.length) {
      throw new Error('Invalid position.');
    }
    this.offset = position;
  },
  setInt8: function (value) {
    writeUint8(this.data, this.offset, value < 0 ? value | 0x100 : value);
    this.offset += INT8_SIZE;
  },
  getInt8: function () {
    var result = readUint8(this.data, this.offset);
    this.offset += INT8_SIZE;
    return result & 0x80 ? result ^ -0x100 : result;
  },
  setUint8: function (value) {
    writeUint8(this.data, this.offset, value);
    this.offset += INT8_SIZE;
  },
  getUint8: function () {
    var result = readUint8(this.data, this.offset);
    this.offset += INT8_SIZE;
    return result;
  },
  setInt16: function (value) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint16(this.data, this.offset, value < 0 ? value | 0x10000 : value, isLittleEndian);
    this.offset += INT16_SIZE;
  },
  getInt16: function () {
    var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    var result = readUint16(this.data, this.offset, isLittleEndian);
    this.offset += INT16_SIZE;
    return result & 0x8000 ? result ^ -0x10000 : result;
  },
  setUint16: function (value) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint16(this.data, this.offset, value, isLittleEndian);
    this.offset += INT16_SIZE;
  },
  getUint16: function () {
    var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    var result = readUint16(this.data, this.offset, isLittleEndian);
    this.offset += INT16_SIZE;
    return result;
  },
  setInt24: function (value) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint24(this.data, this.offset, value < 0 ? value | 0x1000000 : value, isLittleEndian);
    this.offset += INT24_SIZE;
  },
  getInt24: function () {
    var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    var result = readUint24(this.data, this.offset, isLittleEndian);
    this.offset += INT24_SIZE;
    return result & 0x800000 ? result ^ -0x1000000 : result;
  },
  setUint24: function (value) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint24(this.data, this.offset, value, isLittleEndian);
    this.offset += INT24_SIZE;
  },
  getUint24: function () {
    var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    var result = readUint24(this.data, this.offset, isLittleEndian);
    this.offset += INT24_SIZE;
    return result;
  },
  setInt32: function (value) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint32(this.data, this.offset, value < 0 ? value | 0x100000000 : value, isLittleEndian);
    this.offset += INT32_SIZE;
  },
  getInt32: function () {
    var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    var result = readUint32(this.data, this.offset, isLittleEndian);
    this.offset += INT32_SIZE;
    return result & 0x80000000 ? result ^ -0x100000000 : result;
  },
  setUint32: function (value) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeUint32(this.data, this.offset, value, isLittleEndian);
    this.offset += INT32_SIZE;
  },
  getUint32: function () {
    var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    var result = readUint32(this.data, this.offset, isLittleEndian);
    this.offset += INT32_SIZE;
    return result;
  },
  setFloat32: function (value) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
    writeFloat(this.data, this.offset, value, isLittleEndian, 23, 4);
    this.offset += INT32_SIZE;
  },
  getFloat32: function () {
    var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
    var result = readFloat(this.data, this.offset, isLittleEndian, 23, 4);
    this.offset += INT32_SIZE;
    return result;
  },
  setString: function (value) {
    this.setUint8(value.length);
    for (var index = 0; index < value.length; ++index) {
      this.setUint8(value.charCodeAt(index));
    }
  },
  getString: function () {
    var size = this.getUint8();
    var endIndex = this.offset + size;
    var chars = [];
    while (this.offset < endIndex) {
      chars.push(String.fromCharCode(this.getUint8()));
    }
    return chars.join('');
  },
  getBytesToOffset: function () {
    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offset;
    return this.data.slice(0, offset);
  },
  getBytesLeft: function () {
    return this.getBytes(this.bytesLeft);
  },
  getBytes: function (length) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
    this.offset = offset + length;
    return this.data.slice(offset, this.offset);
  },
  setBytes: function (data) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
    var bytes = this.data;
    bytes.splice.apply(bytes, [offset, data.length].concat(_toConsumableArray(data)));
    this.data = bytes;
    this.offset = offset + data.length;
  }
};
Object.defineProperties(BinaryBuffer.prototype, {
  size: {
    get: function () {
      return this.data.length;
    }
  },
  isEmpty: {
    get: function () {
      return this.data.length - this.offset === 0;
    }
  },
  bytesLeft: {
    get: function () {
      return this.data.length - this.offset;
    }
  },
  position: {
    get: function () {
      return this.offset;
    }
  }
});

var shortCommandMask = 0xe0;
var extraCommandMask = 0x1f;
var fromBytes$u = function (data) {
  if (data.length === 0) {
    throw new Error('Invalid buffer size');
  }
  var header = {
    shortCode: data[0] & shortCommandMask,
    extraCode: data[0] & extraCommandMask
  };
  if (header.shortCode !== 0) {
    return {
      headerSize: 1,
      commandId: data[0] & ~header.extraCode,
      commandSize: header.extraCode
    };
  }
  if (header.extraCode === extraCommandMask) {
    if (data.length < 3) {
      throw new Error('Invalid buffer size');
    }
    return {
      headerSize: 3,
      commandId: data[1] << 8 | extraCommandMask,
      commandSize: data[2]
    };
  }
  if (data.length < 2) {
    throw new Error('Invalid buffer size');
  }
  return {
    headerSize: 2,
    commandId: header.extraCode,
    commandSize: data[1]
  };
};

var id$r = 0x0c;
var name$r = 'correctTime2000';
var COMMAND_BODY_SIZE$5 = 1;
var fromBytes$t = function (data) {
  if (data.length !== COMMAND_BODY_SIZE$5) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new BinaryBuffer(data, false);
  var parameters = {
    status: buffer.getUint8()
  };
  if (!buffer.isEmpty) {
    throw new Error('BinaryBuffer is not empty.');
  }
  return parameters;
};

var fromObject = function () {
  var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var booleanObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var result = 0;
  for (var name in booleanObject) {
    if (name in bitMask && booleanObject[name]) {
      result |= bitMask[name];
    }
  }
  return result;
};
var toObject = function () {
  var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var result = {};
  for (var name in bitMask) {
    result[name] = (value & bitMask[name]) !== 0;
  }
  return result;
};
var extractBits = function (value, bitsNumber, startIndex) {
  return (1 << bitsNumber) - 1 & value >> startIndex - 1;
};
var fillBits = function (value, bitsNumber, startIndex, valueToSet) {
  var mask = (1 << bitsNumber) - 1 << startIndex - 1;
  var newValueToSet = valueToSet;
  var result = value;
  result &= ~mask;
  newValueToSet <<= startIndex - 1;
  result |= newValueToSet;
  return result;
};

var INITIAL_YEAR_TIMESTAMP = 946684800000;
var MILLISECONDS_IN_SECONDS = 1000;
var getDateFromTime2000 = function (time2000) {
  return new Date(INITIAL_YEAR_TIMESTAMP + time2000 * MILLISECONDS_IN_SECONDS);
};
var getTime2000FromDate = function (date) {
  return (date.getTime() - INITIAL_YEAR_TIMESTAMP) / MILLISECONDS_IN_SECONDS;
};

var getHexFromBytes = (function (bytes) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _Object$assign = Object.assign({}, hexFormatOptions, options),
    separator = _Object$assign.separator,
    prefix = _Object$assign.prefix;
  return bytes.map(function (byte) {
    return "".concat(prefix).concat(byte.toString(16).padStart(2, '0'));
  }).join(separator);
});

var getBytesFromHex = (function (hex) {
  var cleanHex = hex.replace(/\s+|0x/g, '');
  if (cleanHex.length % 2 !== 0) {
    cleanHex = "0".concat(cleanHex);
  }
  var resultLength = cleanHex.length / 2;
  var bytes = new Array(resultLength);
  for (var index = 0; index < resultLength; index++) {
    bytes[index] = parseInt(cleanHex.substring(index * 2, index * 2 + 2), 16);
  }
  return bytes;
});

var roundNumber = (function (value) {
  var decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;
  var places = Math.pow(10, decimalPlaces);
  return Math.round(value * places * (1 + Number.EPSILON)) / places;
});

var GASI1 = 1;
var GASI2 = 2;
var GASI3 = 3;
var NOVATOR = 4;
var IMP2EU = 5;
var IMP4EU = 6;
var MTXLORA = 7;
var IMP2AS = 8;
var IMP2IN = 9;
var IMP4IN = 10;
var ELIMP = 11;
var GASIC = 12;
var NBIOT = 24;

var REPORTING_DATA_INTERVAL = 1;
var DAY_CHECKOUT_HOUR = 4;
var REPORTING_DATA_TYPE = 5;
var PRIORITY_DATA_DELIVERY_TYPE = 8;
var ACTIVATION_METHOD = 9;
var BATTERY_DEPASSIVATION_INFO = 10;
var BATTERY_MINIMAL_LOAD_TIME = 11;
var CHANNELS_CONFIG = 13;
var RX2_CONFIG = 18;
var ABSOLUTE_DATA = 23;
var ABSOLUTE_DATA_ENABLE = 24;
var SERIAL_NUMBER = 25;
var GEOLOCATION = 26;
var EXTRA_FRAME_INTERVAL = 28;
var ABSOLUTE_DATA_MULTI_CHANNEL = 29;
var ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL = 30;
var PULSE_CHANNELS_SCAN_CONFIG = 31;
var PULSE_CHANNELS_SET_CONFIG = 32;
var BATTERY_DEPASSIVATION_CONFIG = 33;
var MQTT_SESSION_CONFIG = 34;
var MQTT_BROKER_ADDRESS = 35;
var MQTT_SSL_ENABLE = 36;
var MQTT_TOPIC_PREFIX = 37;
var MQTT_DATA_RECEIVE_CONFIG = 38;
var MQTT_DATA_SEND_CONFIG = 39;
var NBIOT_SSL_CONFIG = 40;
var NBIOT_SSL_CACERT_WRITE = 41;
var NBIOT_SSL_CACERT_SET = 42;
var NBIOT_SSL_CLIENT_CERT_WRITE = 43;
var NBIOT_SSL_CLIENT_CERT_SET = 44;
var NBIOT_SSL_CLIENT_KEY_WRITE = 45;
var NBIOT_SSL_CLIENT_KEY_SET = 46;
var NBIOT_DEVICE_SOFTWARE_UPDATE = 47;
var NBIOT_MODULE_FIRMWARE_UPDATE = 48;
var REPORTING_DATA_CONFIG = 49;
var EVENTS_CONFIG = 50;

var invertObject = (function (source) {
  var target = {};
  for (var property in source) {
    var value = source[property];
    target[value] = property;
  }
  return target;
});

var INITIAL_YEAR = 2000;
var MONTH_BIT_SIZE = 4;
var DATE_BIT_SIZE = 5;
var YEAR_START_INDEX = 1;
var UNKNOWN_BATTERY_VOLTAGE = 4095;
var EXTEND_BIT_MASK = 0x80;
var LAST_BIT_INDEX = 7;
var DATA_SENDING_INTERVAL_SECONDS_COEFFICIENT = 600;
var DATA_SENDING_INTERVAL_RESERVED_BYTES = 3;
var PARAMETER_RX2_FREQUENCY_COEFFICIENT = 100;
var SERIAL_NUMBER_SIZE = 6;
var MAGNETIC_INFLUENCE_BIT_INDEX = 8;
var LEGACY_HOUR_COUNTER_SIZE = 2 + 4;
var LEGACY_HOUR_DIFF_SIZE = 2;
var GAS_HARDWARE_TYPES = [GASI2, GASI3, GASI1, GASIC];
var TWO_CHANNELS_HARDWARE_TYPES = [IMP2AS, IMP2EU, IMP2IN, NOVATOR];
var ELIMP_HARDWARE_TYPES = [ELIMP];
var FOUR_CHANNELS_HARDWARE_TYPES = [IMP4EU, IMP4IN];
var MTX_HARDWARE_TYPES = [MTXLORA];
var gasBitMask = {
  isBatteryLow: Math.pow(2, 0),
  isMagneticInfluence: Math.pow(2, 1),
  isButtonReleased: Math.pow(2, 2),
  isConnectionLost: Math.pow(2, 3)
};
var twoChannelBitMask = {
  isBatteryLow: Math.pow(2, 0),
  isConnectionLost: Math.pow(2, 3),
  isFirstChannelInactive: Math.pow(2, 4),
  isSecondChannelInactive: Math.pow(2, 5)
};
var elimpBitMask = {
  isConnectionLost: Math.pow(2, 3)
};
var fourChannelBitMask = {
  isBatteryLow: Math.pow(2, 0),
  isConnectionLost: Math.pow(2, 3),
  isFirstChannelInactive: Math.pow(2, 4),
  isSecondChannelInactive: Math.pow(2, 5),
  isThirdChannelInactive: Math.pow(2, 6),
  isForthChannelInactive: Math.pow(2, 7)
};
var mtxBitMask = {
  isMeterCaseOpen: Math.pow(2, 0),
  isMagneticInfluence: Math.pow(2, 1),
  isParametersSetRemotely: Math.pow(2, 2),
  isParametersSetLocally: Math.pow(2, 3),
  isMeterProgramRestarted: Math.pow(2, 4),
  isLockedOut: Math.pow(2, 5),
  isTimeSet: Math.pow(2, 6),
  isTimeCorrected: Math.pow(2, 7),
  isMeterFailure: Math.pow(2, 8),
  isMeterTerminalBoxOpen: Math.pow(2, 9),
  isModuleCompartmentOpen: Math.pow(2, 10),
  isTariffPlanChanged: Math.pow(2, 11),
  isNewTariffPlanReceived: Math.pow(2, 12)
};
var fourChannelsBitMask = {
  channel1: Math.pow(2, 0),
  channel2: Math.pow(2, 1),
  channel3: Math.pow(2, 2),
  channel4: Math.pow(2, 3)
};
var byteToPulseCoefficientMap = {
  128: 1,
  129: 5,
  130: 10,
  131: 100,
  132: 1000,
  133: 10000,
  134: 100000
};
var pulseCoefficientToByteMap = invertObject(byteToPulseCoefficientMap);
var isMSBSet = function (value) {
  return !!(value & 0x80);
};
var getChannelValue = function (buffer) {
  return buffer.getUint8() + 1;
};
var setChannelValue = function (buffer, value) {
  if (value < 1) {
    throw new Error('channel must be 1 or greater');
  }
  buffer.setUint8(value - 1);
};
var getNbiotSslWrite = function (buffer) {
  return {
    size: buffer.getUint16(false),
    position: buffer.getUint16(false),
    chunk: buffer.getBytesLeft()
  };
};
var setNbiotSslWrite = function (buffer, parameter) {
  if (parameter.size !== parameter.chunk.length) {
    throw new Error('ssl chunk size parameter doesn\'t match actual ssl chunk size');
  }
  buffer.setUint16(parameter.size, false);
  buffer.setUint16(parameter.position, false);
  buffer.setBytes(parameter.chunk);
};
var getNbiotSslSet = function (buffer) {
  return {
    crc32: buffer.getUint32(false)
  };
};
var setNbiotSslSet = function (buffer, parameter) {
  buffer.setUint32(parameter.crc32, false);
};
var deviceParameterConvertersMap = {
  [REPORTING_DATA_INTERVAL]: {
    get: function (buffer) {
      buffer.seek(buffer.offset + DATA_SENDING_INTERVAL_RESERVED_BYTES);
      return {
        value: buffer.getUint8() * DATA_SENDING_INTERVAL_SECONDS_COEFFICIENT
      };
    },
    set: function (buffer, parameter) {
      buffer.seek(buffer.offset + DATA_SENDING_INTERVAL_RESERVED_BYTES);
      buffer.setUint8(parameter.value / DATA_SENDING_INTERVAL_SECONDS_COEFFICIENT);
    }
  },
  [DAY_CHECKOUT_HOUR]: {
    get: function (buffer) {
      return {
        value: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.value);
    }
  },
  [REPORTING_DATA_TYPE]: {
    get: function (buffer) {
      return {
        type: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.type);
    }
  },
  [PRIORITY_DATA_DELIVERY_TYPE]: {
    get: function (buffer) {
      return {
        value: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.value);
    }
  },
  [ACTIVATION_METHOD]: {
    get: function (buffer) {
      return {
        type: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.type);
    }
  },
  [BATTERY_DEPASSIVATION_INFO]: {
    get: function (buffer) {
      return {
        loadTime: buffer.getUint16(false),
        internalResistance: buffer.getUint16(false),
        lowVoltage: buffer.getUint16(false)
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint16(parameter.loadTime, false);
      buffer.setUint16(parameter.internalResistance, false);
      buffer.setUint16(parameter.lowVoltage, false);
    }
  },
  [BATTERY_MINIMAL_LOAD_TIME]: {
    get: function (buffer) {
      return {
        value: buffer.getUint32(false)
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint32(parameter.value, false);
    }
  },
  [CHANNELS_CONFIG]: {
    get: function (buffer) {
      return {
        value: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      if (parameter.value < 0 || parameter.value > 18) {
        throw new Error('channels config must be between 0-18');
      }
      buffer.setUint8(parameter.value);
    }
  },
  [RX2_CONFIG]: {
    get: function (buffer) {
      return {
        spreadFactor: buffer.getUint8(),
        frequency: buffer.getUint24(false) * PARAMETER_RX2_FREQUENCY_COEFFICIENT
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.spreadFactor);
      buffer.setUint24(parameter.frequency / PARAMETER_RX2_FREQUENCY_COEFFICIENT, false);
    }
  },
  [ABSOLUTE_DATA]: {
    get: function (buffer) {
      return {
        meterValue: buffer.getUint32(false),
        pulseCoefficient: buffer.getPulseCoefficient(),
        value: buffer.getUint32(false)
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint32(parameter.meterValue, false);
      buffer.setPulseCoefficient(parameter.pulseCoefficient);
      buffer.setUint32(parameter.value, false);
    }
  },
  [ABSOLUTE_DATA_ENABLE]: {
    get: function (buffer) {
      return {
        state: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.state);
    }
  },
  [SERIAL_NUMBER]: {
    get: function (buffer) {
      return {
        value: getHexFromBytes(buffer.getBytes(SERIAL_NUMBER_SIZE))
      };
    },
    set: function (buffer, parameter) {
      getBytesFromHex(parameter.value).forEach(function (byte) {
        return buffer.setUint8(byte);
      });
    }
  },
  [GEOLOCATION]: {
    get: function (buffer) {
      return {
        latitude: roundNumber(buffer.getFloat32()),
        longitude: roundNumber(buffer.getFloat32()),
        altitude: roundNumber(buffer.getUint16())
      };
    },
    set: function (buffer, parameter) {
      buffer.setFloat32(roundNumber(parameter.latitude));
      buffer.setFloat32(roundNumber(parameter.longitude));
      buffer.setUint16(roundNumber(parameter.altitude));
    }
  },
  [EXTRA_FRAME_INTERVAL]: {
    get: function (buffer) {
      return {
        value: buffer.getUint16()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint16(parameter.value);
    }
  },
  [ABSOLUTE_DATA_MULTI_CHANNEL]: {
    get: function (buffer) {
      return {
        channel: getChannelValue(buffer),
        meterValue: buffer.getUint32(false),
        pulseCoefficient: buffer.getPulseCoefficient(),
        value: buffer.getUint32(false)
      };
    },
    set: function (buffer, parameter) {
      setChannelValue(buffer, parameter.channel);
      buffer.setUint32(parameter.meterValue, false);
      buffer.setPulseCoefficient(parameter.pulseCoefficient);
      buffer.setUint32(parameter.value, false);
    }
  },
  [ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL]: {
    get: function (buffer) {
      return {
        channel: getChannelValue(buffer),
        state: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      setChannelValue(buffer, parameter.channel);
      buffer.setUint8(parameter.state);
    }
  },
  [PULSE_CHANNELS_SCAN_CONFIG]: {
    get: function (buffer) {
      return {
        channelList: buffer.getChannels(),
        pullUpTime: buffer.getUint8(),
        scanTime: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      if (parameter.pullUpTime < 17) {
        throw new Error('minimal value for pullUpTime - 17');
      }
      if (parameter.scanTime < 15) {
        throw new Error('minimal value for scanTime - 15');
      }
      buffer.setChannels(parameter.channelList.map(function (index) {
        return {
          index: index
        };
      }));
      buffer.setUint8(parameter.pullUpTime);
      buffer.setUint8(parameter.scanTime);
    }
  },
  [PULSE_CHANNELS_SET_CONFIG]: {
    get: function (buffer) {
      var object = toObject(fourChannelsBitMask, buffer.getUint8());
      return {
        channel1: object.channel1,
        channel2: object.channel2,
        channel3: object.channel3,
        channel4: object.channel4
      };
    },
    set: function (buffer, parameter) {
      var channel1 = parameter.channel1,
        channel2 = parameter.channel2,
        channel3 = parameter.channel3,
        channel4 = parameter.channel4;
      buffer.setUint8(fromObject(fourChannelsBitMask, {
        channel1: channel1,
        channel2: channel2,
        channel3: channel3,
        channel4: channel4
      }));
    }
  },
  [BATTERY_DEPASSIVATION_CONFIG]: {
    get: function (buffer) {
      return {
        resistanceStartThreshold: buffer.getUint16(false),
        resistanceStopThreshold: buffer.getUint16(false)
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint16(parameter.resistanceStartThreshold, false);
      buffer.setUint16(parameter.resistanceStopThreshold, false);
    }
  },
  [MQTT_SESSION_CONFIG]: {
    get: function (buffer) {
      return {
        clientId: buffer.getString(),
        username: buffer.getString(),
        password: buffer.getString(),
        cleanSession: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.clientId);
      buffer.setString(parameter.username);
      buffer.setString(parameter.password);
      buffer.setUint8(parameter.cleanSession);
    }
  },
  [MQTT_BROKER_ADDRESS]: {
    get: function (buffer) {
      return {
        hostName: buffer.getString(),
        port: buffer.getUint16(false)
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.hostName);
      buffer.setUint16(parameter.port, false);
    }
  },
  [MQTT_SSL_ENABLE]: {
    get: function (buffer) {
      return {
        enable: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.enable);
    }
  },
  [MQTT_TOPIC_PREFIX]: {
    get: function (buffer) {
      return {
        topicPrefix: buffer.getString()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.topicPrefix);
    }
  },
  [MQTT_DATA_RECEIVE_CONFIG]: {
    get: function (buffer) {
      return {
        qos: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.qos);
    }
  },
  [MQTT_DATA_SEND_CONFIG]: {
    get: function (buffer) {
      return {
        qos: buffer.getUint8(),
        retain: buffer.getUint8(),
        newestSendFirst: buffer.getUint8(),
        sendCountAttempts: buffer.getUint8(),
        sendTimeoutBetweenAttempts: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.qos);
      buffer.setUint8(parameter.retain);
      buffer.setUint8(parameter.newestSendFirst);
      buffer.setUint8(parameter.sendCountAttempts);
      buffer.setUint8(parameter.sendTimeoutBetweenAttempts);
    }
  },
  [NBIOT_SSL_CONFIG]: {
    get: function (buffer) {
      return {
        securityLevel: buffer.getUint8(),
        version: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.securityLevel);
      buffer.setUint8(parameter.version);
    }
  },
  [NBIOT_SSL_CACERT_WRITE]: {
    get: getNbiotSslWrite,
    set: setNbiotSslWrite
  },
  [NBIOT_SSL_CACERT_SET]: {
    get: getNbiotSslSet,
    set: setNbiotSslSet
  },
  [NBIOT_SSL_CLIENT_CERT_WRITE]: {
    get: getNbiotSslWrite,
    set: setNbiotSslWrite
  },
  [NBIOT_SSL_CLIENT_CERT_SET]: {
    get: getNbiotSslSet,
    set: setNbiotSslSet
  },
  [NBIOT_SSL_CLIENT_KEY_WRITE]: {
    get: getNbiotSslWrite,
    set: setNbiotSslWrite
  },
  [NBIOT_SSL_CLIENT_KEY_SET]: {
    get: getNbiotSslSet,
    set: setNbiotSslSet
  },
  [NBIOT_DEVICE_SOFTWARE_UPDATE]: {
    get: function (buffer) {
      return {
        softwareImageUrl: buffer.getString()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.softwareImageUrl);
    }
  },
  [NBIOT_MODULE_FIRMWARE_UPDATE]: {
    get: function (buffer) {
      return {
        moduleFirmwareImageUrl: buffer.getString()
      };
    },
    set: function (buffer, parameter) {
      buffer.setString(parameter.moduleFirmwareImageUrl);
    }
  },
  [REPORTING_DATA_CONFIG]: {
    get: function (buffer) {
      return {
        dataType: buffer.getUint8(),
        hour: buffer.getUint8(),
        minutes: buffer.getUint8(),
        countToSend: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.dataType);
      buffer.setUint8(parameter.hour);
      buffer.setUint8(parameter.minutes);
      buffer.setUint8(parameter.countToSend);
    }
  },
  [EVENTS_CONFIG]: {
    get: function (buffer) {
      return {
        eventId: buffer.getUint8(),
        enableEvent: buffer.getUint8(),
        sendEvent: buffer.getUint8(),
        saveEvent: buffer.getUint8()
      };
    },
    set: function (buffer, parameter) {
      buffer.setUint8(parameter.eventId);
      buffer.setUint8(parameter.enableEvent);
      buffer.setUint8(parameter.sendEvent);
      buffer.setUint8(parameter.saveEvent);
    }
  }
};
function CommandBinaryBuffer(dataOrLength) {
  var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  BinaryBuffer.call(this, dataOrLength, isLittleEndian);
}
CommandBinaryBuffer.prototype = Object.create(BinaryBuffer.prototype);
CommandBinaryBuffer.prototype.constructor = CommandBinaryBuffer;
CommandBinaryBuffer.getMagneticInfluenceBit = function (byte) {
  return !!extractBits(byte, 1, MAGNETIC_INFLUENCE_BIT_INDEX);
};
CommandBinaryBuffer.setMagneticInfluenceBit = function (byte, value) {
  return fillBits(byte, 1, MAGNETIC_INFLUENCE_BIT_INDEX, +value);
};
CommandBinaryBuffer.getLegacyHourCounterSize = function (hourCounter) {
  return LEGACY_HOUR_COUNTER_SIZE + hourCounter.diff.length * LEGACY_HOUR_DIFF_SIZE;
};
CommandBinaryBuffer.prototype.getExtendedValue = function () {
  var value = 0;
  var isByteExtended = true;
  var position = 0;
  while (isByteExtended && this.offset <= this.data.length) {
    var byte = this.getUint8();
    isByteExtended = !!(byte & EXTEND_BIT_MASK);
    value += (byte & 0x7f) << 7 * position;
    ++position;
  }
  if (value < 0) {
    value = 0;
  }
  return value;
};
CommandBinaryBuffer.prototype.setExtendedValue = function (value) {
  var _this = this;
  if (value === 0) {
    this.setUint8(0);
    return;
  }
  var data = [];
  var encodedValue = value;
  while (encodedValue) {
    data.push(EXTEND_BIT_MASK | encodedValue & 0x7f);
    encodedValue >>= 7;
  }
  var lastByte = data.pop();
  if (lastByte) {
    data.push(lastByte & 0x7f);
  }
  data.forEach(function (extendedValue) {
    return _this.setUint8(extendedValue);
  });
};
CommandBinaryBuffer.prototype.getExtendedValueSize = function (bits) {
  var extBits = Math.ceil(bits / 7);
  var totalBits = bits + extBits;
  var extBytes = Math.ceil(totalBits / 8);
  return extBytes;
};
CommandBinaryBuffer.prototype.getTime = function () {
  return this.getUint32(false);
};
CommandBinaryBuffer.prototype.setTime = function (value) {
  this.setUint32(value, false);
};
CommandBinaryBuffer.prototype.getBatteryVoltage = function () {
  var lowVoltageByte = this.getUint8();
  var lowAndHightVoltageByte = this.getUint8();
  var highVoltageByte = this.getUint8();
  var underLowLoad = lowVoltageByte << 4;
  underLowLoad |= (lowAndHightVoltageByte & 0xf0) >> 4;
  var underHighLoad = (lowAndHightVoltageByte & 0x0f) << 8 | highVoltageByte;
  if (underHighLoad === UNKNOWN_BATTERY_VOLTAGE) {
    underHighLoad = undefined;
  }
  if (underLowLoad === UNKNOWN_BATTERY_VOLTAGE) {
    underLowLoad = undefined;
  }
  return {
    underLowLoad: underLowLoad,
    underHighLoad: underHighLoad
  };
};
CommandBinaryBuffer.prototype.setBatteryVoltage = function (batteryVoltage) {
  var _this2 = this;
  var underLowLoad = batteryVoltage.underLowLoad,
    underHighLoad = batteryVoltage.underHighLoad;
  if (underLowLoad === undefined) {
    underLowLoad = UNKNOWN_BATTERY_VOLTAGE;
  }
  if (underHighLoad === undefined) {
    underHighLoad = UNKNOWN_BATTERY_VOLTAGE;
  }
  var lowVoltageByte = underLowLoad >> 4 & 0xff;
  var lowAndHighVoltageByte = (underLowLoad & 0x0f) << 4 | underHighLoad >> 8 & 0x0f;
  var highVoltageByte = underHighLoad & 0xff;
  [lowVoltageByte, lowAndHighVoltageByte, highVoltageByte].forEach(function (byte) {
    return _this2.setUint8(byte);
  });
};
CommandBinaryBuffer.prototype.getLegacyCounterValue = function () {
  return this.getUint24(false);
};
CommandBinaryBuffer.prototype.setLegacyCounterValue = function (value) {
  this.setUint24(value, false);
};
CommandBinaryBuffer.prototype.getLegacyCounter = function () {
  var byte = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getUint8();
  return {
    isMagneticInfluence: CommandBinaryBuffer.getMagneticInfluenceBit(byte),
    value: this.getLegacyCounterValue()
  };
};
CommandBinaryBuffer.prototype.setLegacyCounter = function (counter) {
  var byte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  this.setUint8(CommandBinaryBuffer.setMagneticInfluenceBit(byte, counter.isMagneticInfluence));
  this.setLegacyCounterValue(counter.value);
};
CommandBinaryBuffer.prototype.getChannels = function () {
  var channelList = [];
  var extended = true;
  var channelIndex = 1;
  while (extended) {
    var byte = this.getUint8();
    var bits = byte.toString(2).padStart(LAST_BIT_INDEX + 1, '0').split('').reverse();
    bits.forEach(function (bit, index) {
      var value = Number(bit);
      if (index === LAST_BIT_INDEX) {
        extended = !!value;
      } else {
        if (value) {
          channelList.push(channelIndex);
        }
        ++channelIndex;
      }
    });
  }
  return channelList;
};
CommandBinaryBuffer.prototype.setChannels = function (channelList) {
  var _this3 = this;
  if (channelList.length === 0) {
    this.setUint8(0);
    return;
  }
  channelList.sort(function (a, b) {
    return a.index - b.index;
  });
  var maxChannel = Math.max.apply(Math, _toConsumableArray(channelList.map(function (_ref) {
    var index = _ref.index;
    return index;
  })));
  var size = (maxChannel - maxChannel % 8) / 8;
  var data = new Array(size + 1).fill(0);
  var byte = 0;
  data.forEach(function (_, byteIndex) {
    var channelIndex = byteIndex * LAST_BIT_INDEX + 1;
    var maxChannelIndex = channelIndex + LAST_BIT_INDEX;
    while (channelIndex < maxChannelIndex) {
      var channel = channelList.find(function (item) {
        return item.index === channelIndex;
      });
      if (channel !== undefined) {
        byte |= 1 << (channel.index - 1) % LAST_BIT_INDEX;
      }
      ++channelIndex;
    }
    if (data[byteIndex + 1] !== undefined) {
      byte |= 1 << LAST_BIT_INDEX;
    }
    data[byteIndex] = byte;
    byte = 0;
  });
  data.forEach(function (value) {
    return _this3.setUint8(value);
  });
};
CommandBinaryBuffer.prototype.getChannelsValuesWithHourDiff = function () {
  var _this4 = this;
  var date = this.getDate();
  var _this$getHours = this.getHours(),
    hour = _this$getHours.hour,
    hours = _this$getHours.hours;
  var channels = this.getChannels();
  var channelList = [];
  date.setUTCHours(hour);
  channels.forEach(function (channelIndex) {
    var diff = [];
    var value = _this4.getExtendedValue();
    for (var diffHour = 1; diffHour < hours; ++diffHour) {
      diff.push(_this4.getExtendedValue());
    }
    channelList.push({
      value: value,
      diff: diff,
      index: channelIndex
    });
  });
  return {
    startTime2000: getTime2000FromDate(date),
    hours: hours,
    channelList: channelList
  };
};
CommandBinaryBuffer.prototype.setChannelsValuesWithHourDiff = function (hours, startTime2000, channelList) {
  var _this5 = this;
  var date = getDateFromTime2000(startTime2000);
  var hour = date.getUTCHours();
  this.setDate(date);
  this.setHours(hour, hours);
  this.setChannels(channelList);
  channelList.forEach(function (_ref2) {
    var value = _ref2.value,
      diff = _ref2.diff;
    _this5.setExtendedValue(value);
    diff.forEach(function (diffValue) {
      return _this5.setExtendedValue(diffValue);
    });
  });
};
CommandBinaryBuffer.prototype.getHours = function () {
  var byte = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getUint8();
  if (byte === 0) {
    return {
      hours: 0,
      hour: 0
    };
  }
  var hours = ((byte & 0xe0) >> 5) + 1;
  var hour = byte & 0x1f;
  return {
    hours: hours,
    hour: hour
  };
};
CommandBinaryBuffer.prototype.setHours = function (hour, hours) {
  if (hour === 0 && hours === 0) {
    this.setUint8(0);
    return;
  }
  this.setUint8((hours - 1 & 0x07) << 5 | hour & 0x1f);
};
CommandBinaryBuffer.prototype.getDate = function () {
  var yearMonthByte = this.getUint8();
  var monthDateByte = this.getUint8();
  var year = yearMonthByte >> YEAR_START_INDEX;
  var month = (yearMonthByte & 0x01) << MONTH_BIT_SIZE - YEAR_START_INDEX | monthDateByte >> DATE_BIT_SIZE;
  var monthDay = monthDateByte & 0x1f;
  return new Date(Date.UTC(year + INITIAL_YEAR, month - 1, monthDay, 0, 0, 0, 0));
};
CommandBinaryBuffer.prototype.setDate = function (dateOrTime) {
  var _this6 = this;
  var date;
  if (dateOrTime instanceof Date) {
    date = dateOrTime;
  } else {
    date = getDateFromTime2000(dateOrTime);
  }
  var year = date.getUTCFullYear() - INITIAL_YEAR;
  var month = date.getUTCMonth() + 1;
  var day = date.getUTCDate();
  var yearMonthByte = year << YEAR_START_INDEX | month >> MONTH_BIT_SIZE - YEAR_START_INDEX;
  var monthDateByte = (month & 0x07) << DATE_BIT_SIZE | day;
  [yearMonthByte, monthDateByte].forEach(function (byte) {
    return _this6.setUint8(byte);
  });
};
CommandBinaryBuffer.prototype.getPulseCoefficient = function () {
  var pulseCoefficient = this.getUint8();
  if (isMSBSet(pulseCoefficient)) {
    var value = byteToPulseCoefficientMap[pulseCoefficient];
    if (value) {
      return value;
    }
    throw new Error('pulseCoefficient MSB is set, but value unknown');
  }
  return pulseCoefficient;
};
CommandBinaryBuffer.prototype.setPulseCoefficient = function (value) {
  if (value in pulseCoefficientToByteMap) {
    var byte = pulseCoefficientToByteMap[value];
    if (byte) {
      this.setUint8(byte);
    } else {
      throw new Error('pulseCoefficient MSB is set, but value unknown');
    }
  } else {
    this.setUint8(value);
  }
};
CommandBinaryBuffer.prototype.getChannelsWithAbsoluteValues = function () {
  var _this7 = this;
  var channels = this.getChannels();
  var channelList = [];
  channels.forEach(function (channelIndex) {
    channelList.push({
      pulseCoefficient: _this7.getPulseCoefficient(),
      value: _this7.getExtendedValue(),
      index: channelIndex
    });
  });
  return channelList;
};
CommandBinaryBuffer.prototype.setChannelsWithAbsoluteValues = function (channelList) {
  var _this8 = this;
  this.setChannels(channelList);
  channelList.forEach(function (_ref3) {
    var value = _ref3.value,
      pulseCoefficient = _ref3.pulseCoefficient;
    _this8.setPulseCoefficient(pulseCoefficient);
    _this8.setExtendedValue(value);
  });
};
CommandBinaryBuffer.prototype.getChannelsAbsoluteValuesWithHourDiff = function (hours) {
  var _this9 = this;
  var channels = this.getChannels();
  var channelList = [];
  channels.forEach(function (channelIndex) {
    var pulseCoefficient = _this9.getPulseCoefficient();
    var value = _this9.getExtendedValue();
    var diff = [];
    for (var hourIndex = 1; hourIndex < hours; ++hourIndex) {
      diff.push(_this9.getExtendedValue());
    }
    channelList.push({
      diff: diff,
      value: value,
      pulseCoefficient: pulseCoefficient,
      index: channelIndex
    });
  });
  return channelList;
};
CommandBinaryBuffer.prototype.setChannelsAbsoluteValuesWithHourDiff = function (channelList) {
  var _this10 = this;
  this.setChannels(channelList);
  channelList.forEach(function (_ref4) {
    var value = _ref4.value,
      diff = _ref4.diff,
      pulseCoefficient = _ref4.pulseCoefficient;
    _this10.setPulseCoefficient(pulseCoefficient);
    _this10.setExtendedValue(value);
    diff.forEach(function (diffValue) {
      return _this10.setExtendedValue(diffValue);
    });
  });
};
CommandBinaryBuffer.prototype.getEventStatus = function (hardwareType) {
  var status;
  if (GAS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
    status = toObject(gasBitMask, this.getUint8());
  } else if (TWO_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
    status = toObject(twoChannelBitMask, this.getUint8());
  } else if (ELIMP_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
    status = toObject(elimpBitMask, this.getUint8());
  } else if (FOUR_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
    status = toObject(fourChannelBitMask, this.getExtendedValue());
  } else if (MTX_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
    status = toObject(mtxBitMask, this.getUint16());
  } else {
    throw new Error('wrong hardwareType');
  }
  return status;
};
CommandBinaryBuffer.prototype.setEventStatus = function (hardwareType, status) {
  if (GAS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
    this.setUint8(fromObject(gasBitMask, status));
  } else if (TWO_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
    this.setUint8(fromObject(twoChannelBitMask, status));
  } else if (ELIMP_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
    this.setUint8(fromObject(elimpBitMask, status));
  } else if (FOUR_CHANNELS_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
    this.setExtendedValue(fromObject(fourChannelBitMask, status));
  } else if (MTX_HARDWARE_TYPES.indexOf(hardwareType) !== -1) {
    this.setUint16(fromObject(mtxBitMask, status));
  } else {
    throw new Error('wrong hardwareType');
  }
};
CommandBinaryBuffer.prototype.getParameter = function () {
  var id = this.getUint8();
  if (!deviceParameterConvertersMap[id] || !deviceParameterConvertersMap[id].get) {
    throw new Error("parameter ".concat(id, " is not supported"));
  }
  var data = deviceParameterConvertersMap[id].get(this);
  return {
    id: id,
    data: data
  };
};
CommandBinaryBuffer.prototype.setParameter = function (parameter) {
  var id = parameter.id,
    data = parameter.data;
  if (!deviceParameterConvertersMap[id] || !deviceParameterConvertersMap[id].set) {
    throw new Error("parameter ".concat(id, " is not supported"));
  }
  this.setUint8(id);
  deviceParameterConvertersMap[id].set(this, data);
};
CommandBinaryBuffer.prototype.getRequestParameter = function () {
  var id = this.getUint8();
  var data = null;
  switch (id) {
    case ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL:
    case ABSOLUTE_DATA_MULTI_CHANNEL:
      data = {
        channel: getChannelValue(this)
      };
      break;
    case REPORTING_DATA_CONFIG:
      data = {
        dataType: this.getUint8()
      };
      break;
    case EVENTS_CONFIG:
      data = {
        eventId: this.getUint8()
      };
      break;
  }
  return {
    id: id,
    data: data
  };
};
CommandBinaryBuffer.prototype.setRequestParameter = function (parameter) {
  var id = parameter.id,
    parameterData = parameter.data;
  var data;
  this.setUint8(id);
  switch (id) {
    case ABSOLUTE_DATA_MULTI_CHANNEL:
    case ABSOLUTE_DATA_ENABLE_MULTI_CHANNEL:
      data = parameterData;
      setChannelValue(this, data.channel);
      break;
    case REPORTING_DATA_CONFIG:
      data = parameterData;
      this.setUint8(data.dataType);
      break;
    case EVENTS_CONFIG:
      data = parameterData;
      this.setUint8(data.eventId);
      break;
  }
};
CommandBinaryBuffer.prototype.getResponseParameter = function () {
  var id = this.getUint8();
  var data;
  if (!deviceParameterConvertersMap[id] || !deviceParameterConvertersMap[id].get) {
    throw new Error("parameter ".concat(id, " is not supported"));
  }
  switch (id) {
    case MQTT_SESSION_CONFIG:
    case NBIOT_SSL_CACERT_WRITE:
    case NBIOT_SSL_CLIENT_CERT_WRITE:
    case NBIOT_SSL_CLIENT_KEY_WRITE:
    case NBIOT_SSL_CACERT_SET:
    case NBIOT_SSL_CLIENT_CERT_SET:
    case NBIOT_SSL_CLIENT_KEY_SET:
    case NBIOT_DEVICE_SOFTWARE_UPDATE:
    case NBIOT_MODULE_FIRMWARE_UPDATE:
      data = null;
      break;
    default:
      data = deviceParameterConvertersMap[id].get(this);
  }
  return {
    id: id,
    data: data
  };
};
CommandBinaryBuffer.prototype.setResponseParameter = function (parameter) {
  var id = parameter.id,
    data = parameter.data;
  if (!deviceParameterConvertersMap[id] || !deviceParameterConvertersMap[id].set) {
    throw new Error("parameter ".concat(id, " is not supported"));
  }
  this.setUint8(id);
  switch (id) {
    case MQTT_SESSION_CONFIG:
    case NBIOT_SSL_CACERT_WRITE:
    case NBIOT_SSL_CLIENT_CERT_WRITE:
    case NBIOT_SSL_CLIENT_KEY_WRITE:
    case NBIOT_SSL_CACERT_SET:
    case NBIOT_SSL_CLIENT_CERT_SET:
    case NBIOT_SSL_CLIENT_KEY_SET:
    case NBIOT_DEVICE_SOFTWARE_UPDATE:
    case NBIOT_MODULE_FIRMWARE_UPDATE:
      break;
    default:
      deviceParameterConvertersMap[id].set(this, data);
  }
};
CommandBinaryBuffer.prototype.getLegacyHourDiff = function () {
  var stateWithValueByte = this.getUint8();
  var valueLowerByte = this.getUint8();
  return {
    isMagneticInfluence: CommandBinaryBuffer.getMagneticInfluenceBit(stateWithValueByte),
    value: (stateWithValueByte & 0x1f) << 8 | valueLowerByte
  };
};
CommandBinaryBuffer.prototype.setLegacyHourDiff = function (diff) {
  var _this11 = this;
  var bytes = [diff.value >> 8, diff.value & 0xff];
  bytes[0] = CommandBinaryBuffer.setMagneticInfluenceBit(bytes[0], diff.isMagneticInfluence);
  bytes.forEach(function (byte) {
    return _this11.setUint8(byte);
  });
};
CommandBinaryBuffer.prototype.getLegacyHourCounterWithDiff = function () {
  var date = this.getDate();
  var byte = this.getUint8();
  var _this$getHours2 = this.getHours(byte),
    hour = _this$getHours2.hour;
  var counter = {
    isMagneticInfluence: CommandBinaryBuffer.getMagneticInfluenceBit(byte),
    value: this.getLegacyCounterValue()
  };
  var diff = [];
  while (this.offset < this.data.length) {
    diff.push(this.getLegacyHourDiff());
  }
  date.setUTCHours(hour);
  return {
    startTime2000: getTime2000FromDate(date),
    counter: counter,
    diff: diff
  };
};
CommandBinaryBuffer.prototype.setLegacyHourCounterWithDiff = function (hourCounter) {
  var _this12 = this;
  var date = getDateFromTime2000(hourCounter.startTime2000);
  var hour = date.getUTCHours();
  this.setDate(date);
  this.setHours(hour, 1);
  this.seek(this.offset - 1);
  var byte = this.getUint8();
  this.seek(this.offset - 1);
  this.setUint8(CommandBinaryBuffer.setMagneticInfluenceBit(byte, hourCounter.counter.isMagneticInfluence));
  this.setLegacyCounterValue(hourCounter.counter.value);
  hourCounter.diff.forEach(function (diffItem) {
    return _this12.setLegacyHourDiff(diffItem);
  });
};
CommandBinaryBuffer.prototype.getChannelsValuesWithHourDiffExtended = function () {
  var _this13 = this;
  var date = this.getDate();
  var hour = this.getUint8();
  var hours = this.getUint8();
  var channels = this.getChannels();
  var channelList = [];
  date.setUTCHours(hour);
  channels.forEach(function (channelIndex) {
    var diff = [];
    var value = _this13.getExtendedValue();
    for (var diffHour = 1; diffHour < hours; ++diffHour) {
      diff.push(_this13.getExtendedValue());
    }
    channelList.push({
      value: value,
      diff: diff,
      index: channelIndex
    });
  });
  return {
    startTime2000: getTime2000FromDate(date),
    hour: hour,
    hours: hours,
    channelList: channelList
  };
};
CommandBinaryBuffer.prototype.setChannelsValuesWithHourDiffExtended = function (parameters) {
  var _this14 = this;
  var date = getDateFromTime2000(parameters.startTime2000);
  this.setDate(date);
  this.setUint8(parameters.hour);
  this.setUint8(parameters.hours);
  this.setChannels(parameters.channelList);
  parameters.channelList.forEach(function (_ref5) {
    var value = _ref5.value,
      diff = _ref5.diff;
    _this14.setExtendedValue(value);
    diff.forEach(function (diffValue) {
      return _this14.setExtendedValue(diffValue);
    });
  });
};

var id$q = 0x07;
var name$q = 'current';
var COMMAND_BODY_MAX_SIZE$9 = 4;
var fromBytes$s = function (data) {
  if (data.length > COMMAND_BODY_MAX_SIZE$9) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  return buffer.getLegacyCounter();
};

var id$p = 0x18;
var name$p = 'currentMc';
var COMMAND_BODY_MAX_SIZE$8 = 37;
var fromBytes$r = function (data) {
  if (data.length > COMMAND_BODY_MAX_SIZE$8) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var parameters = {
    channelList: []
  };
  var buffer = new CommandBinaryBuffer(data);
  var channelList = buffer.getChannels();
  parameters.channelList = channelList.map(function (channelIndex) {
    return {
      value: buffer.getExtendedValue(),
      index: channelIndex
    };
  });
  return parameters;
};

var id$o = 0x20;
var name$o = 'day';
var fromBytes$q = function (data) {
  var buffer = new CommandBinaryBuffer(data);
  var date = buffer.getDate();
  var byte = buffer.getUint8();
  var _buffer$getHours = buffer.getHours(byte),
    hour = _buffer$getHours.hour;
  var isMagneticInfluence = CommandBinaryBuffer.getMagneticInfluenceBit(byte);
  var value = buffer.getLegacyCounterValue();
  date.setUTCHours(hour);
  return {
    value: value,
    isMagneticInfluence: isMagneticInfluence,
    startTime2000: getTime2000FromDate(date)
  };
};

var id$n = 0x16;
var name$n = 'dayMc';
var COMMAND_BODY_MAX_SIZE$7 = 32;
var fromBytes$p = function (data) {
  if (data.length > COMMAND_BODY_MAX_SIZE$7) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  var date = buffer.getDate();
  var channels = buffer.getChannels();
  var channelList = channels.map(function (channelIndex) {
    return {
      value: buffer.getExtendedValue(),
      index: channelIndex
    };
  });
  return {
    startTime2000: getTime2000FromDate(date),
    channelList: channelList
  };
};

var id$m = 0x0b1f;
var name$m = 'exAbsDayMc';
var COMMAND_BODY_MAX_SIZE$6 = 89;
var fromBytes$o = function (data) {
  if (data.length > COMMAND_BODY_MAX_SIZE$6) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  var date = buffer.getDate();
  var channelList = buffer.getChannelsWithAbsoluteValues();
  return {
    startTime2000: getTime2000FromDate(date),
    channelList: channelList
  };
};

var id$l = 0x0a1f;
var name$l = 'exAbsHourMc';
var COMMAND_BODY_MAX_SIZE$5 = 168;
var fromBytes$n = function (data) {
  if (data.length > COMMAND_BODY_MAX_SIZE$5) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  var date = buffer.getDate();
  var _buffer$getHours = buffer.getHours(),
    hour = _buffer$getHours.hour,
    hours = _buffer$getHours.hours;
  var channelList = buffer.getChannelsAbsoluteValuesWithHourDiff(hours);
  date.setUTCHours(hour);
  return {
    startTime2000: getTime2000FromDate(date),
    hours: hours,
    channelList: channelList
  };
};

var id$k = 0x06;
var name$k = 'getArchiveDays';
var fromBytes$m = function (data) {
  var buffer = new CommandBinaryBuffer(data);
  var date = buffer.getDate();
  var dayList = [];
  while (buffer.offset < buffer.data.length) {
    dayList.push(buffer.getLegacyCounter());
  }
  return {
    startTime2000: getTime2000FromDate(date),
    dayList: dayList
  };
};

var id$j = 0x1b;
var name$j = 'getArchiveDaysMc';
var fromBytes$l = function (data) {
  var buffer = new CommandBinaryBuffer(data);
  var date = buffer.getDate();
  var channels = buffer.getChannels();
  var days = buffer.getUint8();
  var channelList = [];
  channels.forEach(function (channelIndex) {
    var dayList = [];
    channelList.push({
      dayList: dayList,
      index: channelIndex
    });
    for (var day = 0; day < days; ++day) {
      dayList.push(buffer.getExtendedValue());
    }
  });
  return {
    startTime2000: getTime2000FromDate(date),
    days: days,
    channelList: channelList
  };
};

var id$i = 0x0b;
var name$i = 'getArchiveEvents';
var getEvent = function (buffer) {
  return {
    time2000: buffer.getTime(),
    id: buffer.getUint8(),
    sequenceNumber: buffer.getUint8()
  };
};
var fromBytes$k = function (data) {
  var buffer = new CommandBinaryBuffer(data, false);
  var eventList = [];
  while (buffer.bytesLeft > 0) {
    eventList.push(getEvent(buffer));
  }
  return {
    eventList: eventList
  };
};

var id$h = 0x05;
var name$h = 'getArchiveHours';
var fromBytes$j = function (data) {
  var buffer = new CommandBinaryBuffer(data);
  return buffer.getLegacyHourCounterWithDiff();
};

var id$g = 0x1a;
var name$g = 'getArchiveHoursMc';
var COMMAND_BODY_MAX_SIZE$4 = 164;
var fromBytes$i = function (data) {
  if (data.length > COMMAND_BODY_MAX_SIZE$4) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  return buffer.getChannelsValuesWithHourDiff();
};

var id$f = 0x051f;
var name$f = 'getBatteryStatus';
var fromBytes$h = function (data) {
  var buffer = new CommandBinaryBuffer(data);
  return {
    voltageUnderLowLoad: buffer.getUint16(),
    voltageUnderHighLoad: buffer.getUint16(),
    internalResistance: buffer.getUint16(),
    temperature: buffer.getUint8(),
    remainingCapacity: buffer.getUint8(),
    isLastDayOverconsumption: buffer.getUint8() === 1,
    averageDailyOverconsumptionCounter: buffer.getUint16()
  };
};

var id$e = 0x0d1f;
var name$e = 'getExAbsArchiveDaysMc';
var fromBytes$g = function (data) {
  var buffer = new CommandBinaryBuffer(data);
  var date = buffer.getDate();
  var channels = buffer.getChannels();
  var days = buffer.getUint8();
  var channelList = [];
  channels.forEach(function (channelIndex) {
    var dayList = [];
    var pulseCoefficient = buffer.getPulseCoefficient();
    channelList.push({
      pulseCoefficient: pulseCoefficient,
      dayList: dayList,
      index: channelIndex
    });
    for (var day = 0; day < days; ++day) {
      dayList.push(buffer.getExtendedValue());
    }
  });
  return {
    channelList: channelList,
    days: days,
    startTime2000: getTime2000FromDate(date)
  };
};

var id$d = 0x1a;
var name$d = 'getExAbsArchiveHoursMc';
var fromBytes$f = function (data) {
  var buffer = new CommandBinaryBuffer(data);
  return buffer.getChannelsValuesWithHourDiff();
};

var id$c = 0x301f;
var name$c = 'getExAbsArchiveHoursMcEx';
var COMMAND_BODY_MAX_SIZE$3 = 164;
var fromBytes$e = function (data) {
  if (data.length > COMMAND_BODY_MAX_SIZE$3) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  return buffer.getChannelsValuesWithHourDiffExtended();
};

var id$b = 0x021f;
var name$b = 'getLmicInfo';
var COMMAND_BODY_SIZE$4 = 2;
var lmicCapabilitiesBitMask = {
  isMulticastSupported: 1 << 0,
  isFragmentedDataSupported: 1 << 1
};
var fromBytes$d = function (data) {
  if (data.length !== COMMAND_BODY_SIZE$4) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new BinaryBuffer(data);
  var capabilities = toObject(lmicCapabilitiesBitMask, buffer.getUint8());
  var version = buffer.getUint8();
  if (!buffer.isEmpty) {
    throw new Error('BinaryBuffer is not empty.');
  }
  return {
    capabilities: capabilities,
    version: version
  };
};

var id$a = 0x04;
var name$a = 'getParameter';
var fromBytes$c = function (data) {
  var buffer = new CommandBinaryBuffer(data);
  return buffer.getResponseParameter();
};

var id$9 = 0x40;
var name$9 = 'hour';
var fromBytes$b = function (data) {
  var buffer = new CommandBinaryBuffer(data);
  return buffer.getLegacyHourCounterWithDiff();
};

var id$8 = 0x17;
var name$8 = 'hourMc';
var COMMAND_BODY_MAX_SIZE$2 = 164;
var fromBytes$a = function (data) {
  if (data.length > COMMAND_BODY_MAX_SIZE$2) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  return buffer.getChannelsValuesWithHourDiff();
};

var id$7 = 0x311f;
var name$7 = 'hourMcEx';
var COMMAND_BODY_MAX_SIZE$1 = 5125;
var fromBytes$9 = function (data) {
  if (data.length > COMMAND_BODY_MAX_SIZE$1) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  return buffer.getChannelsValuesWithHourDiffExtended();
};

var id$6 = 0x60;
var name$6 = 'lastEvent';
var fromBytes$8 = function (data, config) {
  if (!config.hardwareType) {
    throw new Error('hardwareType in config is mandatory');
  }
  var buffer = new CommandBinaryBuffer(data);
  var sequenceNumber = buffer.getUint8();
  var status = buffer.getEventStatus(config.hardwareType);
  return {
    sequenceNumber: sequenceNumber,
    status: status
  };
};

var MAGNET_ON = 1;
var MAGNET_OFF = 2;
var ACTIVATE = 3;
var DEACTIVATE = 4;
var BATTERY_ALARM = 5;
var CAN_OFF = 6;
var INSERT = 7;
var REMOVE = 8;
var COUNTER_OVER = 9;
var ACTIVATE_MTX = 11;
var CONNECT = 12;
var DISCONNECT = 13;
var OPTOLOW = 15;
var OPTOFLASH = 16;
var MTX = 17;
var JOIN_ACCEPT = 18;

var id$5 = 0x15;
var name$5 = 'newEvent';
var COMMAND_BODY_MAX_SIZE = 14;
var MTX_ADDRESS_SIZE = 8;
var getVoltage = function (buffer) {
  return buffer.getUint16(false);
};
var getDeviceId = function (buffer) {
  return getHexFromBytes(buffer.getBytes(MTX_ADDRESS_SIZE));
};
var fromBytes$7 = function (data) {
  if (data.length > COMMAND_BODY_MAX_SIZE) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  var eventId = buffer.getUint8();
  var sequenceNumber = buffer.getUint8();
  var eventData;
  switch (eventId) {
    case MAGNET_ON:
    case MAGNET_OFF:
    case ACTIVATE:
    case DEACTIVATE:
    case CAN_OFF:
    case INSERT:
    case REMOVE:
    case COUNTER_OVER:
    case OPTOLOW:
    case OPTOFLASH:
    case JOIN_ACCEPT:
      eventData = {
        time2000: buffer.getTime()
      };
      break;
    case BATTERY_ALARM:
      eventData = {
        voltage: getVoltage(buffer)
      };
      break;
    case ACTIVATE_MTX:
      eventData = {
        time2000: buffer.getTime(),
        deviceId: getDeviceId(buffer)
      };
      break;
    case CONNECT:
    case DISCONNECT:
      eventData = {
        channel: buffer.getUint8() + 1,
        value: buffer.getExtendedValue()
      };
      break;
    case MTX:
      eventData = {
        status: buffer.getEventStatus(MTXLORA)
      };
      break;
    default:
      throw new Error("Event ".concat(id$5, " is not supported"));
  }
  return {
    id: eventId,
    sequenceNumber: sequenceNumber,
    data: eventData
  };
};

var id$4 = 0x03;
var name$4 = 'setParameter';
var COMMAND_BODY_SIZE$3 = 2;
var fromBytes$6 = function (data) {
  if (data.length !== COMMAND_BODY_SIZE$3) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  var parameters = {
    id: buffer.getUint8(),
    status: buffer.getUint8()
  };
  if (!buffer.isEmpty) {
    throw new Error('BinaryBuffer is not empty.');
  }
  return parameters;
};

var id$3 = 0x02;
var name$3 = 'setTime2000';
var COMMAND_BODY_SIZE$2 = 1;
var fromBytes$5 = function (data) {
  if (data.length !== COMMAND_BODY_SIZE$2) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new BinaryBuffer(data, false);
  var parameters = {
    status: buffer.getUint8()
  };
  if (!buffer.isEmpty) {
    throw new Error('BinaryBuffer is not empty.');
  }
  return parameters;
};

var id$2 = 0x19;
var name$2 = 'softRestart';
var COMMAND_BODY_SIZE$1 = 0;
var fromBytes$4 = function (data) {
  if (data.length !== COMMAND_BODY_SIZE$1) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  return {};
};

var id$1 = 0x14;
var name$1 = 'status';
var UNKNOWN_BATTERY_RESISTANCE = 65535;
var UNKNOWN_BATTERY_CAPACITY = 255;
var fromBytes$3 = function (bytes) {
  var buffer = new CommandBinaryBuffer(bytes);
  var software = {
    type: buffer.getUint8(),
    version: buffer.getUint8()
  };
  var hardware = {
    type: buffer.getUint8(),
    version: buffer.getUint8()
  };
  var data;
  switch (hardware.type) {
    case GASI1:
    case GASI2:
    case GASI3:
    case NOVATOR:
    case IMP2EU:
    case IMP4EU:
    case IMP2AS:
    case IMP2IN:
    case IMP4IN:
    case GASIC:
    case NBIOT:
      {
        var statusData = {
          batteryVoltage: buffer.getBatteryVoltage(),
          batteryInternalResistance: buffer.getUint16(false),
          temperature: buffer.getUint8(),
          remainingBatteryCapacity: buffer.getUint8(),
          lastEventSequenceNumber: buffer.getUint8()
        };
        if (statusData.batteryInternalResistance === UNKNOWN_BATTERY_RESISTANCE) {
          statusData.batteryInternalResistance = undefined;
        }
        if (statusData.remainingBatteryCapacity === UNKNOWN_BATTERY_CAPACITY) {
          statusData.remainingBatteryCapacity = undefined;
        } else if (statusData.remainingBatteryCapacity !== undefined) {
          statusData.remainingBatteryCapacity = roundNumber(statusData.remainingBatteryCapacity * 100 / (UNKNOWN_BATTERY_CAPACITY - 1), 0);
        }
        data = statusData;
      }
      break;
    case MTXLORA:
      data = {
        time2000: buffer.getUint32(),
        resetReason: buffer.getUint8(),
        rssiLastDownlinkFrame: buffer.getUint8(),
        snrLastDownlinkFrame: buffer.getUint8(),
        downlinkRequestsNumber: buffer.getUint8(),
        downlinkFragmentsNumber: buffer.getUint8(),
        uplinkResponsesNumber: buffer.getUint8(),
        uplinkFragmentsNumber: buffer.getUint8(),
        signalMarginToGateway: buffer.getUint8(),
        signalMarginFromGateway: buffer.getUint8(),
        detectedGatewaysNumber: buffer.getUint8(),
        gatewayDownlinkErrorRate: buffer.getUint8(),
        lastEventSequenceNumber: buffer.getUint8()
      };
      break;
    case ELIMP:
    default:
      throw new Error("".concat(id$1, ": hardware type ").concat(hardware.type, " is not supported"));
  }
  return {
    software: software,
    hardware: hardware,
    data: data
  };
};

var id = 0x09;
var name = 'time2000';
var COMMAND_BODY_SIZE = 5;
var fromBytes$2 = function (data) {
  if (data.length !== COMMAND_BODY_SIZE) {
    throw new Error("Wrong buffer size: ".concat(data.length, "."));
  }
  var buffer = new CommandBinaryBuffer(data);
  var parameters = {
    sequenceNumber: buffer.getUint8(),
    time2000: buffer.getTime()
  };
  if (!buffer.isEmpty) {
    throw new Error('BinaryBuffer is not empty.');
  }
  return parameters;
};

var calculateLrc = (function (data) {
  var initialLrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0x55;
  var lrc = initialLrc;
  data.forEach(function (item) {
    lrc ^= item;
  });
  return lrc;
});

var HEADER_MAX_SIZE = 3;
var getFromBytes = function (fromBytesMap, nameMap) {
  return function () {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var config = arguments.length > 1 ? arguments[1] : undefined;
    var commands = [];
    var message = {
      commands: commands,
      bytes: data,
      lrc: {
        expected: undefined,
        actual: 0
      }
    };
    var processedBytes = 0;
    var expectedLrc;
    var actualLrc;
    if (!data.length) {
      return message;
    }
    do {
      var headerInfo = fromBytes$u(data.slice(processedBytes, processedBytes + HEADER_MAX_SIZE));
      var headerData = data.slice(processedBytes, processedBytes + headerInfo.headerSize);
      var bodyData = data.slice(processedBytes + headerInfo.headerSize, processedBytes + headerInfo.headerSize + headerInfo.commandSize);
      var command = {
        id: headerInfo.commandId,
        name: nameMap[headerInfo.commandId],
        headerSize: headerInfo.headerSize,
        bytes: [].concat(_toConsumableArray(headerData), _toConsumableArray(bodyData))
      };
      processedBytes = processedBytes + headerInfo.headerSize + headerInfo.commandSize;
      if (config) {
        command.config = config;
      }
      try {
        command.parameters = fromBytesMap[headerInfo.commandId](bodyData, config);
        commands.push(command);
      } catch (error) {
        commands.push({
          command: command,
          error: error.message
        });
      }
    } while (processedBytes < data.length - 1);
    if (data.length - processedBytes === 1) {
      expectedLrc = data[data.length - 1];
      actualLrc = calculateLrc(data.slice(0, -1));
    } else {
      actualLrc = calculateLrc(data);
    }
    message.lrc.actual = actualLrc;
    message.lrc.expected = expectedLrc;
    if (expectedLrc === actualLrc) {
      return message;
    }
    return {
      message: message,
      error: 'mismatch LRC'
    };
  };
};

var fromBytesMap = {};
var nameMap = {};
var fromBytes$1 = getFromBytes(fromBytesMap, nameMap);
fromBytesMap[id$r] = fromBytes$t;
fromBytesMap[id$q] = fromBytes$s;
fromBytesMap[id$p] = fromBytes$r;
fromBytesMap[id$o] = fromBytes$q;
fromBytesMap[id$n] = fromBytes$p;
fromBytesMap[id$m] = fromBytes$o;
fromBytesMap[id$l] = fromBytes$n;
fromBytesMap[id$k] = fromBytes$m;
fromBytesMap[id$j] = fromBytes$l;
fromBytesMap[id$i] = fromBytes$k;
fromBytesMap[id$f] = fromBytes$h;
fromBytesMap[id$h] = fromBytes$j;
fromBytesMap[id$g] = fromBytes$i;
fromBytesMap[id$e] = fromBytes$g;
fromBytesMap[id$d] = fromBytes$f;
fromBytesMap[id$c] = fromBytes$e;
fromBytesMap[id$b] = fromBytes$d;
fromBytesMap[id$a] = fromBytes$c;
fromBytesMap[id$9] = fromBytes$b;
fromBytesMap[id$8] = fromBytes$a;
fromBytesMap[id$7] = fromBytes$9;
fromBytesMap[id$6] = fromBytes$8;
fromBytesMap[id$5] = fromBytes$7;
fromBytesMap[id$4] = fromBytes$6;
fromBytesMap[id$3] = fromBytes$5;
fromBytesMap[id$2] = fromBytes$4;
fromBytesMap[id$1] = fromBytes$3;
fromBytesMap[id] = fromBytes$2;
nameMap[id$r] = name$r;
nameMap[id$q] = name$q;
nameMap[id$p] = name$p;
nameMap[id$o] = name$o;
nameMap[id$n] = name$n;
nameMap[id$m] = name$m;
nameMap[id$l] = name$l;
nameMap[id$k] = name$k;
nameMap[id$j] = name$j;
nameMap[id$i] = name$i;
nameMap[id$f] = name$f;
nameMap[id$h] = name$h;
nameMap[id$g] = name$g;
nameMap[id$e] = name$e;
nameMap[id$d] = name$d;
nameMap[id$c] = name$c;
nameMap[id$b] = name$b;
nameMap[id$a] = name$a;
nameMap[id$9] = name$9;
nameMap[id$8] = name$8;
nameMap[id$7] = name$7;
nameMap[id$6] = name$6;
nameMap[id$5] = name$5;
nameMap[id$4] = name$4;
nameMap[id$3] = name$3;
nameMap[id$2] = name$2;
nameMap[id$1] = name$1;
nameMap[id] = name;

// export
fromBytes = fromBytes$1;
//#endregion


/*
  Incoming arguments:
    * payload - array of bytes
    * metadata - key/value object
*/

var message = fromBytes(payload, config);

// there may be a message.error (e.g. mismatched LRC)
// in that case message.message will contain everything parsed successfully
// it should be used with caution

var result = {
    deviceName: 'Some Device Name',
    deviceType: 'Water Meter',
    attributes: {
        model: 'Device Model',
        serialNumber: 'SN111',
        manufacturer: 'Device Manufacturer'
    },
    message: message.message || message,
    metadata: metadata
};

return result;
