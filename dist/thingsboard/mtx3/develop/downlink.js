// IMPORTANT!!!
// This example only for default downlink data converter.
// Data converters for other integrations use different input and result.
// Find example of uplink data converter for your integration and edit usage of payload and result
// Integrations list: https://thingsboard.io/docs/user-guide/integrations/

// encoded message should be less than this size
// to be able to send to a device
var MAX_DATA_SEGMENT_SIZE = 50;


//#region [autogenerated jooby-codec bundle from index.js]
var toBytes, setDataSegment, getBase64FromBytes;

(function () {
  'use strict';

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }

  // this is required to shadow crypto-js implementation
  var aes = {
    encrypt: function () {},
    decrypt: function () {}
  };

  var UNENCRYPTED = 0x00;
  var READ_ONLY = 0x03;

  var calculateLrc = (function (data) {
    var initialLrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0x55;
    var lrc = initialLrc;
    data.forEach(function (item) {
      lrc ^= item;
    });
    return lrc;
  });

  var BLOCK_SIZE = 16;
  var COMMANDS_END_MARK = [0];
  var getToBytes = function (toBytesMap) {
    return function (commands, _ref) {
      var _ref2;
      var _ref$messageId = _ref.messageId,
        messageId = _ref$messageId === void 0 ? 1 : _ref$messageId,
        _ref$accessLevel = _ref.accessLevel,
        accessLevel = _ref$accessLevel === void 0 ? READ_ONLY : _ref$accessLevel,
        aesKey = _ref.aesKey;
      var commandBytes = commands.map(function (command) {
        if ('id' in command) {
          return toBytesMap[command.id](command.parameters || {});
        }
        if ('command' in command) {
          return command.command.bytes;
        }
        throw new Error('wrong command format');
      });
      var maskedAccessLevel = accessLevel | 0x10;
      var header = [messageId, maskedAccessLevel];
      var body = (_ref2 = []).concat.apply(_ref2, [maskedAccessLevel].concat(_toConsumableArray(commandBytes), [COMMANDS_END_MARK]));
      if (accessLevel !== UNENCRYPTED) {
        var padding = (body.length + 1) % BLOCK_SIZE;
        if (padding) {
          body = body.concat(new Array(BLOCK_SIZE - padding).fill(0));
        }
      }
      body = body.concat(calculateLrc(body));
      if (aesKey && accessLevel !== UNENCRYPTED) {
        body = _toConsumableArray(aes.encrypt(aesKey, body));
      }
      return header.concat(body);
    };
  };

  var getBase64FromBytes$1 = (function (bytes) {
    return btoa(bytes.map(function (byte) {
      return String.fromCharCode(byte);
    }).join(''));
  });

  var toBytes$d = function (commandId) {
    var commandBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return [commandId, commandBytes.length].concat(_toConsumableArray(commandBytes));
  };

  var getEventStatus$1 = 0x01;
  var getEnergyDayPrevious$1 = 0x03;
  var getDeviceType$1 = 0x04;
  var getDeviceId$1 = 0x05;
  var getDateTime$1 = 0x07;
  var setDateTime$2 = 0x08;
  var setAccessKey$1 = 0x09;
  var getCurrentValues$1 = 0x0d;
  var getEnergy$1 = 0x0f;
  var setDayProfile$1 = 0x10;
  var setSeasonProfile$1 = 0x11;
  var setSpecialDay$1 = 0x12;
  var activateRatePlan$1 = 0x13;
  var prepareRatePlan$1 = 0x14;
  var getHalfHourDemand$1 = 0x15;
  var getDayDemand$1 = 0x16;
  var getMonthDemand$1 = 0x17;
  var turnRelayOn$1 = 0x18;
  var turnRelayOff$1 = 0x19;
  var setCorrectTime$1 = 0x1c;
  var getOperatorParameters$1 = 0x1e;
  var setOperatorParameters$1 = 0x1f;
  var getVersion$1 = 0x28;
  var getSaldo$1 = 0x29;
  var setSaldo$1 = 0x2a;
  var getRatePlanInfo$1 = 0x2c;
  var getExtendedCurrentValues2 = 0x2d;
  var getSaldoParameters$1 = 0x2e;
  var setSaldoParameters$1 = 0x2f;
  var getDayMaxDemand$1 = 0x31;
  var getMonthMaxDemand$1 = 0x32;
  var getEvents$1 = 0x33;
  var getEventsCounters$1 = 0x34;
  var resetPowerMaxDay$1 = 0x35;
  var resetPowerMaxMonth$1 = 0x36;
  var getCurrentStatusMeter$1 = 0x39;
  var getExtendedCurrentValues$1 = 0x3a;
  var getDayProfile$1 = 0x3b;
  var getSeasonProfile$1 = 0x3c;
  var getSpecialDay$1 = 0x3d;
  var getCorrectTime$1 = 0x3e;
  var getCriticalEvent$1 = 0x41;
  var runTariffPlan$1 = 0x46;
  var getDayMaxDemandPrevious = 0x4a;
  var getHalfHourDemandPrevious = 0x4b;
  var getDayDemandExport$1 = 0x4f;
  var getEnergyExportDayPrevious$1 = 0x50;
  var getMonthDemandExport$1 = 0x52;
  var getHalfHourDemandExport$1 = 0x53;
  var getDayMaxDemandExport$1 = 0x58;
  var getMonthMaxDemandExport$1 = 0x59;
  var getEnergyExport$1 = 0x5b;
  var setCorrectDateTime$1 = 0x5c;
  var setDisplayParam$1 = 0x5d;
  var getDisplayParam$1 = 0x5e;
  var setSpecialOperation$1 = 0x64;
  var getMagneticFieldThreshold$1 = 0x6d;
  var getHalfHourEnergies$1 = 0x6f;
  var getBuildVersion$1 = 0x70;
  var getOperatorParametersExtended3$1 = 0x71;
  var setOperatorParametersExtended3$1 = 0x72;
  var setDemandParameters = 0x74;
  var getDemandParameters = 0x75;
  var getDemand$1 = 0x76;
  var getMeterInfo$1 = 0x7a;

  var downlinkIds$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan$1,
    getBuildVersion: getBuildVersion$1,
    getCorrectTime: getCorrectTime$1,
    getCriticalEvent: getCriticalEvent$1,
    getCurrentStatusMeter: getCurrentStatusMeter$1,
    getCurrentValues: getCurrentValues$1,
    getDateTime: getDateTime$1,
    getDayDemand: getDayDemand$1,
    getDayDemandExport: getDayDemandExport$1,
    getDayMaxDemand: getDayMaxDemand$1,
    getDayMaxDemandExport: getDayMaxDemandExport$1,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious,
    getDayProfile: getDayProfile$1,
    getDemand: getDemand$1,
    getDemandParameters: getDemandParameters,
    getDeviceId: getDeviceId$1,
    getDeviceType: getDeviceType$1,
    getDisplayParam: getDisplayParam$1,
    getEnergy: getEnergy$1,
    getEnergyDayPrevious: getEnergyDayPrevious$1,
    getEnergyExport: getEnergyExport$1,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious$1,
    getEventStatus: getEventStatus$1,
    getEvents: getEvents$1,
    getEventsCounters: getEventsCounters$1,
    getExtendedCurrentValues: getExtendedCurrentValues$1,
    getExtendedCurrentValues2: getExtendedCurrentValues2,
    getHalfHourDemand: getHalfHourDemand$1,
    getHalfHourDemandExport: getHalfHourDemandExport$1,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious,
    getHalfHourEnergies: getHalfHourEnergies$1,
    getMagneticFieldThreshold: getMagneticFieldThreshold$1,
    getMeterInfo: getMeterInfo$1,
    getMonthDemand: getMonthDemand$1,
    getMonthDemandExport: getMonthDemandExport$1,
    getMonthMaxDemand: getMonthMaxDemand$1,
    getMonthMaxDemandExport: getMonthMaxDemandExport$1,
    getOperatorParameters: getOperatorParameters$1,
    getOperatorParametersExtended3: getOperatorParametersExtended3$1,
    getRatePlanInfo: getRatePlanInfo$1,
    getSaldo: getSaldo$1,
    getSaldoParameters: getSaldoParameters$1,
    getSeasonProfile: getSeasonProfile$1,
    getSpecialDay: getSpecialDay$1,
    getVersion: getVersion$1,
    prepareRatePlan: prepareRatePlan$1,
    resetPowerMaxDay: resetPowerMaxDay$1,
    resetPowerMaxMonth: resetPowerMaxMonth$1,
    runTariffPlan: runTariffPlan$1,
    setAccessKey: setAccessKey$1,
    setCorrectDateTime: setCorrectDateTime$1,
    setCorrectTime: setCorrectTime$1,
    setDateTime: setDateTime$2,
    setDayProfile: setDayProfile$1,
    setDemandParameters: setDemandParameters,
    setDisplayParam: setDisplayParam$1,
    setOperatorParameters: setOperatorParameters$1,
    setOperatorParametersExtended3: setOperatorParametersExtended3$1,
    setSaldo: setSaldo$1,
    setSaldoParameters: setSaldoParameters$1,
    setSeasonProfile: setSeasonProfile$1,
    setSpecialDay: setSpecialDay$1,
    setSpecialOperation: setSpecialOperation$1,
    turnRelayOff: turnRelayOff$1,
    turnRelayOn: turnRelayOn$1
  });

  var invertObject = (function (source) {
    var target = {};
    for (var property in source) {
      var value = source[property];
      target[value] = property;
    }
    return target;
  });

  invertObject(downlinkIds$1);

  var id$b = getEventStatus$1;
  var toBytes$c = function () {
    return toBytes$d(id$b);
  };

  var id$a = getEnergyDayPrevious$1;
  var toBytes$b = function (parameters) {
    if (parameters.energyType) {
      return toBytes$d(id$a, [parameters.energyType]);
    }
    return toBytes$d(id$a);
  };

  var id$9 = getDeviceType$1;
  var toBytes$a = function () {
    return toBytes$d(id$9);
  };

  var id$8 = getDeviceId$1;
  var toBytes$9 = function () {
    return toBytes$d(id$8);
  };

  var id$7 = getDateTime$1;
  var toBytes$8 = function () {
    return toBytes$d(id$7);
  };

  var INT8_SIZE = 1;
  var INT16_SIZE = 2;
  var INT24_SIZE = 3;
  var INT32_SIZE = 4;
  var log = Math.log,
    pow = Math.pow,
    LN2 = Math.LN2;
  var readFloat = function (buffer, offset, isLittleEndian, mLen, bytes) {
    var e,
      m,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLittleEndian ? bytes - 1 : 0,
      d = isLittleEndian ? -1 : 1,
      s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * pow(2, e - mLen);
  };
  var writeFloat = function (buffer, offset, value, isLittleEndian, mLen, bytes) {
    var e,
      m,
      c,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
      i = isLittleEndian ? 0 : bytes - 1,
      d = isLittleEndian ? 1 : -1,
      s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value < 0 && (value = -value);
    if (value !== value || value === Infinity) {
      m = value !== value ? 1 : 0;
      e = eMax;
    } else {
      e = log(value) / LN2 | 0;
      if (value * (c = pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 0x100, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 0x100, eLen -= 8);
    buffer[offset + i - d] |= s * 0x80;
  };
  var be2 = [1, 0];
  var be3 = [2, 1, 0];
  var be4 = [3, 2, 1, 0];
  var le2 = [0, 1];
  var le3 = [0, 1, 2];
  var le4 = [0, 1, 2, 3];
  var readUint8 = function (buffer, offset) {
    return buffer[offset];
  };
  var readUint16 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    return b0 | b1;
  };
  var readUint24 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le3 : be3;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    var b2 = buffer[offset + order[2]] << 16;
    return b0 | b1 | b2;
  };
  var readUint32 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    var b0 = buffer[offset + order[3]] * 0x1000000;
    var b1 = buffer[offset + order[2]] * 0x10000;
    var b2 = buffer[offset + order[1]] * 0x100;
    var b3 = buffer[offset + order[0]];
    return b0 + b1 + b2 + b3;
  };
  var writeUint8 = function (buffer, offset, value) {
    buffer[offset] = value & 0xff;
  };
  var writeUint16 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
  };
  var writeUint24 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le3 : be3;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
  };
  var writeUint32 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
    buffer[offset + order[3]] = value >>> 24 & 0xff;
  };
  function BinaryBuffer(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (typeof dataOrLength === 'number') {
      var bytes = new Array(dataOrLength).fill(0);
      this.data = bytes;
    } else {
      this.data = dataOrLength;
    }
    this.offset = 0;
    this.isLittleEndian = isLittleEndian;
  }
  BinaryBuffer.prototype = {
    toUint8Array: function () {
      return this.data;
    },
    seek: function (position) {
      if (position < 0 || position >= this.data.length) {
        throw new Error('Invalid position.');
      }
      this.offset = position;
    },
    setInt8: function (value) {
      writeUint8(this.data, this.offset, value < 0 ? value | 0x100 : value);
      this.offset += INT8_SIZE;
    },
    getInt8: function () {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result & 0x80 ? result ^ -256 : result;
    },
    setUint8: function (value) {
      writeUint8(this.data, this.offset, value);
      this.offset += INT8_SIZE;
    },
    getUint8: function () {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result;
    },
    setInt16: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value < 0 ? value | 0x10000 : value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getInt16: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result & 0x8000 ? result ^ -65536 : result;
    },
    setUint16: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getUint16: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result;
    },
    setInt24: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint24(this.data, this.offset, value < 0 ? value | 0x1000000 : value, isLittleEndian);
      this.offset += INT24_SIZE;
    },
    getInt24: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint24(this.data, this.offset, isLittleEndian);
      this.offset += INT24_SIZE;
      return result & 0x800000 ? result ^ -16777216 : result;
    },
    setUint24: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint24(this.data, this.offset, value, isLittleEndian);
      this.offset += INT24_SIZE;
    },
    getUint24: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint24(this.data, this.offset, isLittleEndian);
      this.offset += INT24_SIZE;
      return result;
    },
    setInt32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value < 0 ? value | 0x100000000 : value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getInt32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result & 0x80000000 ? result ^ -4294967296 : result;
    },
    setUint32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getUint32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result;
    },
    setFloat32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeFloat(this.data, this.offset, value, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
    },
    getFloat32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readFloat(this.data, this.offset, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
      return result;
    },
    setString: function (value) {
      this.setUint8(value.length);
      for (var index = 0; index < value.length; ++index) {
        this.setUint8(value.charCodeAt(index));
      }
    },
    getString: function () {
      var size = this.getUint8();
      var endIndex = this.offset + size;
      var chars = [];
      while (this.offset < endIndex) {
        chars.push(String.fromCharCode(this.getUint8()));
      }
      return chars.join('');
    },
    getBytesToOffset: function () {
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offset;
      return this.data.slice(0, offset);
    },
    getBytesLeft: function () {
      return this.getBytes(this.bytesLeft);
    },
    getBytes: function (length) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      this.offset = offset + length;
      return this.data.slice(offset, this.offset);
    },
    setBytes: function (data) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      var bytes = this.data;
      bytes.splice.apply(bytes, [offset, data.length].concat(_toConsumableArray(data)));
      this.data = bytes;
      this.offset = offset + data.length;
    }
  };
  Object.defineProperties(BinaryBuffer.prototype, {
    size: {
      get: function () {
        return this.data.length;
      }
    },
    isEmpty: {
      get: function () {
        if (this.offset > this.data.length) {
          throw new Error("current offset ".concat(this.offset, " is outside the bounds of the buffer"));
        }
        return this.data.length - this.offset === 0;
      }
    },
    bytesLeft: {
      get: function () {
        return this.data.length - this.offset;
      }
    },
    position: {
      get: function () {
        return this.offset;
      }
    }
  });

  var DATA_REQUEST = 0x50;
  var DATA_RESPONSE = 0x51;
  var IDENT_REQUEST = 0x52;
  var IDENT_RESPONSE = 0x53;
  var L2_SET_ADDRESS_REQUEST = 0x54;
  var L2_SET_ADDRESS_RESPONSE = 0x55;
  var L2_CHECK_ADDRESS_REQUEST = 0x56;
  var L2_CHECK_ADDRESS_RESPONSE = 0x57;
  var L2_RM_ADDRESS_REQUEST = 0x58;
  var L2_RM_ADDRESS_RESPONSE = 0x59;
  var FRAGMENT_REQUEST = 0x5A;
  var FRAGMENT_RESPONSE = 0x5B;
  var INVALID = 0xFF;

  var frameTypes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DATA_REQUEST: DATA_REQUEST,
    DATA_RESPONSE: DATA_RESPONSE,
    FRAGMENT_REQUEST: FRAGMENT_REQUEST,
    FRAGMENT_RESPONSE: FRAGMENT_RESPONSE,
    IDENT_REQUEST: IDENT_REQUEST,
    IDENT_RESPONSE: IDENT_RESPONSE,
    INVALID: INVALID,
    L2_CHECK_ADDRESS_REQUEST: L2_CHECK_ADDRESS_REQUEST,
    L2_CHECK_ADDRESS_RESPONSE: L2_CHECK_ADDRESS_RESPONSE,
    L2_RM_ADDRESS_REQUEST: L2_RM_ADDRESS_REQUEST,
    L2_RM_ADDRESS_RESPONSE: L2_RM_ADDRESS_RESPONSE,
    L2_SET_ADDRESS_REQUEST: L2_SET_ADDRESS_REQUEST,
    L2_SET_ADDRESS_RESPONSE: L2_SET_ADDRESS_RESPONSE
  });

  invertObject(frameTypes);

  var ENERGY_REGISTER_FAULT = 0x01;
  var VENDOR_PAR_FAULT = 0x02;
  var OP_PAR_FAULT = 0x03;
  var ACCESS_LOCKED$1 = 0x10;
  var ERR_ACCESS$1 = 0x11;
  var CASE_OPEN$2 = 0x12;
  var CASE_CLOSE$1 = 0x13;
  var MAGNETIC_ON$2 = 0x14;
  var MAGNETIC_OFF$1 = 0x15;
  var CHANGE_ACCESS_KEY0$1 = 0x20;
  var CHANGE_ACCESS_KEY1$1 = 0x21;
  var CHANGE_ACCESS_KEY2$1 = 0x22;
  var CHANGE_ACCESS_KEY3$1 = 0x23;
  var CHANGE_PAR_LOCAL = 0x24;
  var CHANGE_PAR_REMOTE = 0x25;
  var CMD_CHANGE_TIME$1 = 0x26;
  var CMD_RELAY_ON$1 = 0x27;
  var CMD_RELAY_OFF$1 = 0x28;
  var CHANGE_COR_TIME$1 = 0x29;
  var ENERGY_REGISTER_OVERFLOW$1 = 0x31;
  var CHANGE_TARIFF_TABLE$1 = 0x32;
  var SET_TARIFF_TABLE$1 = 0x33;
  var SUMMER_TIME$1 = 0x34;
  var WINTER_TIME$1 = 0x35;
  var RELAY_ON$1 = 0x36;
  var RELAY_OFF$1 = 0x37;
  var RESTART$2 = 0x38;
  var WD_RESTART$1 = 0x39;
  var POWER_B_ON$1 = 0x3c;
  var POWER_B_OFF$1 = 0x3d;
  var POWER_C_ON$1 = 0x3e;
  var POWER_C_OFF$1 = 0x3f;
  var V_MAX_OK = 0x40;
  var V_MAX_OVER = 0x41;
  var V_MIN_OK = 0x42;
  var V_MIN_OVER = 0x43;
  var T_MAX_OK$1 = 0x44;
  var T_MAX_OVER$1 = 0x45;
  var T_MIN_OK$1 = 0x46;
  var T_MIN_OVER = 0x47;
  var F_MAX_OK$1 = 0x48;
  var F_MAX_OVER$1 = 0x49;
  var F_MIN_OK$1 = 0x4a;
  var F_MIN_OVER = 0x4b;
  var I_MAX_OK = 0x4c;
  var I_MAX_OVER = 0x4d;
  var P_MAX_OK = 0x4e;
  var P_MAX_OVER = 0x4f;
  var POWER_SALDO_OK = 0x50;
  var POWER_SALDO_OVER = 0x51;
  var BATTERY_OK$1 = 0x52;
  var BATTERY_FAULT$1 = 0x53;
  var CALIBRATION_OK$1 = 0x54;
  var CALIBRATION_FAULT$1 = 0x55;
  var CLOCK_OK$1 = 0x56;
  var CLOCK_FAULT$1 = 0x57;
  var POWER_A_OFF$1 = 0x58;
  var POWER_A_ON$1 = 0x59;
  var CMD_RELAY_2_ON$1 = 0x60;
  var CMD_RELAY_2_OFF$1 = 0x61;
  var CROSS_ZERO_ENT0 = 0x62;
  var CROSS_ZERO_ENT1$1 = 0x63;
  var CROSS_ZERO_ENT2$1 = 0x64;
  var CROSS_ZERO_ENT3$1 = 0x65;
  var CALIBRATION_FLAG_SET$1 = 0x66;
  var CALIBRATION_FLAG_RESET$1 = 0x67;
  var BAD_TEST_EEPROM$1 = 0x68;
  var BAD_TEST_FRAM$1 = 0x69;
  var SET_NEW_SALDO$1 = 0x70;
  var SALDO_PARAM_BAD$1 = 0x71;
  var ACC_PARAM_BAD = 0x72;
  var ACC_PARAM_EXT_BAD = 0x73;
  var CALC_PERIOD_BAD = 0x74;
  var BLOCK_TARIFF_BAD$1 = 0x75;
  var CALIBRATION_PARAM_BAD$1 = 0x76;
  var WINTER_SUMMER_BAD$1 = 0x77;
  var SALDO_EN_BAD = 0x78;
  var TIME_CORRECT$2 = 0x79;
  var CASE_KLEMA_OPEN$1 = 0x7a;
  var CASE_KLEMA_CLOSE$1 = 0x7b;
  var CASE_MODULE_OPEN$2 = 0x7c;
  var CASE_MODULE_CLOSE$1 = 0x7d;
  var POWER_GOOD_DIO = 0x7e;
  var RELAY_HARD_BAD_OFF$1 = 0x90;
  var RELAY_HARD_ON$1 = 0x91;
  var RELAY_HARD_BAD_ON$1 = 0x93;
  var RELAY_HARD_OFF$1 = 0x94;
  var CHANGE_TARIFF_TBL_2 = 0x98;
  var SET_SALDO_PARAM$1 = 0x9c;
  var POWER_OVER_RELAY_OFF$1 = 0x9d;
  var CROSS_ZERO_EXPORT_ENT0 = 0x9e;
  var CROSS_ZERO_EXPORT_ENT1$1 = 0x9f;
  var CROSS_ZERO_EXPORT_ENT2$1 = 0xa0;
  var CROSS_ZERO_EXPORT_ENT3$1 = 0xa1;
  var TIME_CORRECT_NEW = 0xa2;
  var EM_MAGNETIC_ON$1 = 0xb0;
  var EM_MAGNETIC_OFF$1 = 0xb1;
  var CURRENT_UNEQUAL_FAULT = 0xb2;
  var CURRENT_UNEQUAL_OK = 0xb3;
  var BIPOLAR_POWER_FAULT = 0xb4;
  var BIPOLAR_POWER_OK = 0xb5;
  var RESET_EM_FLAG$1 = 0xB6;
  var RESET_MAGNET_FLAG = 0xB7;
  var CHANGE_PARAM_CANAL = 0xB9;
  var RELAY_OFF_BAD_SALDO = 0xBA;
  var SET_DEMAND_EN_1MIN = 0xE0;
  var SET_DEMAND_EN_3MIN = 0xE1;
  var SET_DEMAND_EN_5MIN = 0xE2;
  var SET_DEMAND_EN_10MIN = 0xE3;
  var SET_DEMAND_EN_15MIN = 0xE4;
  var SET_DEMAND_EN_30MIN = 0xE5;
  var SET_DEMAND_EN_60MIN = 0xE6;
  var P_MAX_A_MINUS_OK$1 = 0xE7;
  var P_MAX_A_MINUS_OVER$1 = 0xE8;

  var events$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_LOCKED: ACCESS_LOCKED$1,
    ACC_PARAM_BAD: ACC_PARAM_BAD,
    ACC_PARAM_EXT_BAD: ACC_PARAM_EXT_BAD,
    BAD_TEST_EEPROM: BAD_TEST_EEPROM$1,
    BAD_TEST_FRAM: BAD_TEST_FRAM$1,
    BATTERY_FAULT: BATTERY_FAULT$1,
    BATTERY_OK: BATTERY_OK$1,
    BIPOLAR_POWER_FAULT: BIPOLAR_POWER_FAULT,
    BIPOLAR_POWER_OK: BIPOLAR_POWER_OK,
    BLOCK_TARIFF_BAD: BLOCK_TARIFF_BAD$1,
    CALC_PERIOD_BAD: CALC_PERIOD_BAD,
    CALIBRATION_FAULT: CALIBRATION_FAULT$1,
    CALIBRATION_FLAG_RESET: CALIBRATION_FLAG_RESET$1,
    CALIBRATION_FLAG_SET: CALIBRATION_FLAG_SET$1,
    CALIBRATION_OK: CALIBRATION_OK$1,
    CALIBRATION_PARAM_BAD: CALIBRATION_PARAM_BAD$1,
    CASE_CLOSE: CASE_CLOSE$1,
    CASE_KLEMA_CLOSE: CASE_KLEMA_CLOSE$1,
    CASE_KLEMA_OPEN: CASE_KLEMA_OPEN$1,
    CASE_MODULE_CLOSE: CASE_MODULE_CLOSE$1,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN$2,
    CASE_OPEN: CASE_OPEN$2,
    CHANGE_ACCESS_KEY0: CHANGE_ACCESS_KEY0$1,
    CHANGE_ACCESS_KEY1: CHANGE_ACCESS_KEY1$1,
    CHANGE_ACCESS_KEY2: CHANGE_ACCESS_KEY2$1,
    CHANGE_ACCESS_KEY3: CHANGE_ACCESS_KEY3$1,
    CHANGE_COR_TIME: CHANGE_COR_TIME$1,
    CHANGE_PARAM_CANAL: CHANGE_PARAM_CANAL,
    CHANGE_PAR_LOCAL: CHANGE_PAR_LOCAL,
    CHANGE_PAR_REMOTE: CHANGE_PAR_REMOTE,
    CHANGE_TARIFF_TABLE: CHANGE_TARIFF_TABLE$1,
    CHANGE_TARIFF_TBL_2: CHANGE_TARIFF_TBL_2,
    CLOCK_FAULT: CLOCK_FAULT$1,
    CLOCK_OK: CLOCK_OK$1,
    CMD_CHANGE_TIME: CMD_CHANGE_TIME$1,
    CMD_RELAY_2_OFF: CMD_RELAY_2_OFF$1,
    CMD_RELAY_2_ON: CMD_RELAY_2_ON$1,
    CMD_RELAY_OFF: CMD_RELAY_OFF$1,
    CMD_RELAY_ON: CMD_RELAY_ON$1,
    CROSS_ZERO_ENT0: CROSS_ZERO_ENT0,
    CROSS_ZERO_ENT1: CROSS_ZERO_ENT1$1,
    CROSS_ZERO_ENT2: CROSS_ZERO_ENT2$1,
    CROSS_ZERO_ENT3: CROSS_ZERO_ENT3$1,
    CROSS_ZERO_EXPORT_ENT0: CROSS_ZERO_EXPORT_ENT0,
    CROSS_ZERO_EXPORT_ENT1: CROSS_ZERO_EXPORT_ENT1$1,
    CROSS_ZERO_EXPORT_ENT2: CROSS_ZERO_EXPORT_ENT2$1,
    CROSS_ZERO_EXPORT_ENT3: CROSS_ZERO_EXPORT_ENT3$1,
    CURRENT_UNEQUAL_FAULT: CURRENT_UNEQUAL_FAULT,
    CURRENT_UNEQUAL_OK: CURRENT_UNEQUAL_OK,
    EM_MAGNETIC_OFF: EM_MAGNETIC_OFF$1,
    EM_MAGNETIC_ON: EM_MAGNETIC_ON$1,
    ENERGY_REGISTER_FAULT: ENERGY_REGISTER_FAULT,
    ENERGY_REGISTER_OVERFLOW: ENERGY_REGISTER_OVERFLOW$1,
    ERR_ACCESS: ERR_ACCESS$1,
    F_MAX_OK: F_MAX_OK$1,
    F_MAX_OVER: F_MAX_OVER$1,
    F_MIN_OK: F_MIN_OK$1,
    F_MIN_OVER: F_MIN_OVER,
    I_MAX_OK: I_MAX_OK,
    I_MAX_OVER: I_MAX_OVER,
    MAGNETIC_OFF: MAGNETIC_OFF$1,
    MAGNETIC_ON: MAGNETIC_ON$2,
    OP_PAR_FAULT: OP_PAR_FAULT,
    POWER_A_OFF: POWER_A_OFF$1,
    POWER_A_ON: POWER_A_ON$1,
    POWER_B_OFF: POWER_B_OFF$1,
    POWER_B_ON: POWER_B_ON$1,
    POWER_C_OFF: POWER_C_OFF$1,
    POWER_C_ON: POWER_C_ON$1,
    POWER_GOOD_DIO: POWER_GOOD_DIO,
    POWER_OVER_RELAY_OFF: POWER_OVER_RELAY_OFF$1,
    POWER_SALDO_OK: POWER_SALDO_OK,
    POWER_SALDO_OVER: POWER_SALDO_OVER,
    P_MAX_A_MINUS_OK: P_MAX_A_MINUS_OK$1,
    P_MAX_A_MINUS_OVER: P_MAX_A_MINUS_OVER$1,
    P_MAX_OK: P_MAX_OK,
    P_MAX_OVER: P_MAX_OVER,
    RELAY_HARD_BAD_OFF: RELAY_HARD_BAD_OFF$1,
    RELAY_HARD_BAD_ON: RELAY_HARD_BAD_ON$1,
    RELAY_HARD_OFF: RELAY_HARD_OFF$1,
    RELAY_HARD_ON: RELAY_HARD_ON$1,
    RELAY_OFF: RELAY_OFF$1,
    RELAY_OFF_BAD_SALDO: RELAY_OFF_BAD_SALDO,
    RELAY_ON: RELAY_ON$1,
    RESET_EM_FLAG: RESET_EM_FLAG$1,
    RESET_MAGNET_FLAG: RESET_MAGNET_FLAG,
    RESTART: RESTART$2,
    SALDO_EN_BAD: SALDO_EN_BAD,
    SALDO_PARAM_BAD: SALDO_PARAM_BAD$1,
    SET_DEMAND_EN_10MIN: SET_DEMAND_EN_10MIN,
    SET_DEMAND_EN_15MIN: SET_DEMAND_EN_15MIN,
    SET_DEMAND_EN_1MIN: SET_DEMAND_EN_1MIN,
    SET_DEMAND_EN_30MIN: SET_DEMAND_EN_30MIN,
    SET_DEMAND_EN_3MIN: SET_DEMAND_EN_3MIN,
    SET_DEMAND_EN_5MIN: SET_DEMAND_EN_5MIN,
    SET_DEMAND_EN_60MIN: SET_DEMAND_EN_60MIN,
    SET_NEW_SALDO: SET_NEW_SALDO$1,
    SET_SALDO_PARAM: SET_SALDO_PARAM$1,
    SET_TARIFF_TABLE: SET_TARIFF_TABLE$1,
    SUMMER_TIME: SUMMER_TIME$1,
    TIME_CORRECT: TIME_CORRECT$2,
    TIME_CORRECT_NEW: TIME_CORRECT_NEW,
    T_MAX_OK: T_MAX_OK$1,
    T_MAX_OVER: T_MAX_OVER$1,
    T_MIN_OK: T_MIN_OK$1,
    T_MIN_OVER: T_MIN_OVER,
    VENDOR_PAR_FAULT: VENDOR_PAR_FAULT,
    V_MAX_OK: V_MAX_OK,
    V_MAX_OVER: V_MAX_OVER,
    V_MIN_OK: V_MIN_OK,
    V_MIN_OVER: V_MIN_OVER,
    WD_RESTART: WD_RESTART$1,
    WINTER_SUMMER_BAD: WINTER_SUMMER_BAD$1,
    WINTER_TIME: WINTER_TIME$1
  });

  invertObject(events$1);

  var setDateTime$1 = function (buffer, dateTime) {
    buffer.setUint8(dateTime.isSummerTime ? 1 : 0);
    buffer.setUint8(dateTime.seconds);
    buffer.setUint8(dateTime.minutes);
    buffer.setUint8(dateTime.hours);
    buffer.setUint8(dateTime.day || 0);
    buffer.setUint8(dateTime.date);
    buffer.setUint8(dateTime.month);
    buffer.setUint8(dateTime.year);
  };
  var setDate = function (buffer, date) {
    buffer.setUint8(date.year);
    buffer.setUint8(date.month);
    buffer.setUint8(date.date);
  };

  var id$6 = setDateTime$2;
  var maxSize$2 = 8;
  var toBytes$7 = function (parameters) {
    var buffer = new BinaryBuffer(maxSize$2, false);
    setDateTime$1(buffer, parameters);
    return toBytes$d(id$6, buffer.data);
  };

  var MIN_COMMAND_SIZE$1 = 0;
  var MAX_COMMAND_SIZE$1 = 1;
  var id$5 = getEnergy$1;
  var toBytes$6 = function () {
    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var buffer = new BinaryBuffer(parameters?.energyType ? MAX_COMMAND_SIZE$1 : MIN_COMMAND_SIZE$1, false);
    if (parameters?.energyType) {
      buffer.setUint8(parameters.energyType);
    }
    return toBytes$d(id$5, buffer.data);
  };

  var id$4 = getHalfHourDemand$1;
  var maxSize$1 = 3;
  var toBytes$5 = function (parameters) {
    var buffer = new BinaryBuffer(maxSize$1, false);
    setDate(buffer, parameters.date);
    return toBytes$d(id$4, buffer.data);
  };

  var getEventStatus = 0x01;
  var getEnergyDayPrevious = 0x03;
  var getDeviceType = 0x04;
  var getDeviceId = 0x05;
  var getDateTime = 0x07;
  var setDateTime = 0x08;
  var setAccessKey = 0x09;
  var getCurrentValues = 0x0d;
  var getEnergy = 0x0f;
  var setDayProfile = 0x10;
  var setSeasonProfile = 0x11;
  var setSpecialDay = 0x12;
  var activateRatePlan = 0x13;
  var prepareRatePlan = 0x14;
  var getHalfHourDemand = 0x15;
  var getDayDemand = 0x16;
  var getMonthDemand = 0x17;
  var turnRelayOn = 0x18;
  var turnRelayOff = 0x19;
  var setCorrectTime = 0x1c;
  var getOperatorParameters = 0x1e;
  var setOperatorParameters = 0x1f;
  var getVersion = 0x28;
  var getSaldo = 0x29;
  var setSaldo = 0x2a;
  var getRatePlanInfo = 0x2c;
  var getSaldoParameters = 0x2e;
  var setSaldoParameters = 0x2f;
  var getDayMaxDemand = 0x31;
  var getMonthMaxDemand = 0x32;
  var getEvents = 0x33;
  var getEventsCounters = 0x34;
  var resetPowerMaxDay = 0x35;
  var resetPowerMaxMonth = 0x36;
  var getCurrentStatusMeter = 0x39;
  var getExtendedCurrentValues = 0x3a;
  var getDayProfile = 0x3b;
  var getSeasonProfile = 0x3c;
  var getSpecialDay = 0x3d;
  var getCorrectTime = 0x3e;
  var getOperatorParametersExtended = 0x3f;
  var setOperatorParametersExtended = 0x40;
  var setOperatorParametersExtended2 = 0x45;
  var runTariffPlan = 0x46;
  var getOperatorParametersExtended2 = 0x47;
  var getHalfHourDemandVari = 0x48;
  var getHalfHourDemandVare = 0x49;
  var getEnergyExport = 0x4e;
  var getDayDemandExport = 0x4f;
  var getEnergyExportDayPrevious = 0x50;
  var getMonthDemandExport = 0x52;
  var getHalfHourDemandExport = 0x53;
  var getHalfHourDemandVariExport = 0x54;
  var getHalfHourDemandVareExport = 0x55;
  var getCriticalEvent = 0x56;
  var getDayMaxDemandExport = 0x58;
  var getMonthMaxDemandExport = 0x59;
  var getHalfHourDemandChannel = 0x5a;
  var setCorrectDateTime = 0x5c;
  var setDisplayParam = 0x5d;
  var getDisplayParam = 0x5e;
  var setSpecialOperation = 0x64;
  var getMagneticFieldThreshold = 0x6d;
  var getHalfHourEnergies = 0x6f;
  var getBuildVersion = 0x70;
  var getOperatorParametersExtended3 = 0x71;
  var setOperatorParametersExtended3 = 0x72;
  var setOperatorParametersExtended4 = 0x74;
  var getOperatorParametersExtended4 = 0x75;
  var getDemand = 0x76;
  var getMeterInfo = 0x7a;

  var downlinkIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan,
    getBuildVersion: getBuildVersion,
    getCorrectTime: getCorrectTime,
    getCriticalEvent: getCriticalEvent,
    getCurrentStatusMeter: getCurrentStatusMeter,
    getCurrentValues: getCurrentValues,
    getDateTime: getDateTime,
    getDayDemand: getDayDemand,
    getDayDemandExport: getDayDemandExport,
    getDayMaxDemand: getDayMaxDemand,
    getDayMaxDemandExport: getDayMaxDemandExport,
    getDayProfile: getDayProfile,
    getDemand: getDemand,
    getDeviceId: getDeviceId,
    getDeviceType: getDeviceType,
    getDisplayParam: getDisplayParam,
    getEnergy: getEnergy,
    getEnergyDayPrevious: getEnergyDayPrevious,
    getEnergyExport: getEnergyExport,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious,
    getEventStatus: getEventStatus,
    getEvents: getEvents,
    getEventsCounters: getEventsCounters,
    getExtendedCurrentValues: getExtendedCurrentValues,
    getHalfHourDemand: getHalfHourDemand,
    getHalfHourDemandChannel: getHalfHourDemandChannel,
    getHalfHourDemandExport: getHalfHourDemandExport,
    getHalfHourDemandVare: getHalfHourDemandVare,
    getHalfHourDemandVareExport: getHalfHourDemandVareExport,
    getHalfHourDemandVari: getHalfHourDemandVari,
    getHalfHourDemandVariExport: getHalfHourDemandVariExport,
    getHalfHourEnergies: getHalfHourEnergies,
    getMagneticFieldThreshold: getMagneticFieldThreshold,
    getMeterInfo: getMeterInfo,
    getMonthDemand: getMonthDemand,
    getMonthDemandExport: getMonthDemandExport,
    getMonthMaxDemand: getMonthMaxDemand,
    getMonthMaxDemandExport: getMonthMaxDemandExport,
    getOperatorParameters: getOperatorParameters,
    getOperatorParametersExtended: getOperatorParametersExtended,
    getOperatorParametersExtended2: getOperatorParametersExtended2,
    getOperatorParametersExtended3: getOperatorParametersExtended3,
    getOperatorParametersExtended4: getOperatorParametersExtended4,
    getRatePlanInfo: getRatePlanInfo,
    getSaldo: getSaldo,
    getSaldoParameters: getSaldoParameters,
    getSeasonProfile: getSeasonProfile,
    getSpecialDay: getSpecialDay,
    getVersion: getVersion,
    prepareRatePlan: prepareRatePlan,
    resetPowerMaxDay: resetPowerMaxDay,
    resetPowerMaxMonth: resetPowerMaxMonth,
    runTariffPlan: runTariffPlan,
    setAccessKey: setAccessKey,
    setCorrectDateTime: setCorrectDateTime,
    setCorrectTime: setCorrectTime,
    setDateTime: setDateTime,
    setDayProfile: setDayProfile,
    setDisplayParam: setDisplayParam,
    setOperatorParameters: setOperatorParameters,
    setOperatorParametersExtended: setOperatorParametersExtended,
    setOperatorParametersExtended2: setOperatorParametersExtended2,
    setOperatorParametersExtended3: setOperatorParametersExtended3,
    setOperatorParametersExtended4: setOperatorParametersExtended4,
    setSaldo: setSaldo,
    setSaldoParameters: setSaldoParameters,
    setSeasonProfile: setSeasonProfile,
    setSpecialDay: setSpecialDay,
    setSpecialOperation: setSpecialOperation,
    turnRelayOff: turnRelayOff,
    turnRelayOn: turnRelayOn
  });

  invertObject(downlinkIds);

  var MIN_COMMAND_SIZE = 3;
  var MAX_COMMAND_SIZE = 4;
  var id$3 = getDayDemand;
  var toBytes$4 = function (parameters) {
    var buffer = new BinaryBuffer(parameters?.energyType ? MAX_COMMAND_SIZE : MIN_COMMAND_SIZE, false);
    setDate(buffer, parameters?.date);
    if (parameters?.energyType) {
      buffer.setUint8(parameters.energyType);
    }
    return toBytes$d(id$3, buffer.data);
  };

  var id$2 = getVersion$1;
  var toBytes$3 = function () {
    return toBytes$d(id$2);
  };

  var CASE_OPEN$1 = 0;
  var MAGNETIC_ON$1 = 1;
  var PARAMETERS_UPDATE_REMOTE = 2;
  var PARAMETERS_UPDATE_LOCAL = 3;
  var RESTART$1 = 4;
  var ERROR_ACCESS = 5;
  var TIME_SET = 6;
  var TIME_CORRECT$1 = 7;
  var DEVICE_FAILURE = 8;
  var CASE_TERMINAL_OPEN = 9;
  var CASE_MODULE_OPEN$1 = 10;
  var TARIFF_TABLE_SET = 11;
  var TARIFF_TABLE_GET = 12;
  var PROTECTION_RESET_EM = 13;
  var PROTECTION_RESET_MAGNETIC = 14;

  var criticalEvents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN$1,
    CASE_OPEN: CASE_OPEN$1,
    CASE_TERMINAL_OPEN: CASE_TERMINAL_OPEN,
    DEVICE_FAILURE: DEVICE_FAILURE,
    ERROR_ACCESS: ERROR_ACCESS,
    MAGNETIC_ON: MAGNETIC_ON$1,
    PARAMETERS_UPDATE_LOCAL: PARAMETERS_UPDATE_LOCAL,
    PARAMETERS_UPDATE_REMOTE: PARAMETERS_UPDATE_REMOTE,
    PROTECTION_RESET_EM: PROTECTION_RESET_EM,
    PROTECTION_RESET_MAGNETIC: PROTECTION_RESET_MAGNETIC,
    RESTART: RESTART$1,
    TARIFF_TABLE_GET: TARIFF_TABLE_GET,
    TARIFF_TABLE_SET: TARIFF_TABLE_SET,
    TIME_CORRECT: TIME_CORRECT$1,
    TIME_SET: TIME_SET
  });

  invertObject(criticalEvents);

  var id$1 = getCriticalEvent;
  var toBytes$2 = function (parameters) {
    return toBytes$d(id$1, [parameters.event, parameters.index]);
  };

  var OK = 0;
  var UNKNOWN_COMMAND = 0x80;
  var NOT_ALIGNED_DATA = 0x81;
  var DECRYPTION_FAILURE = 0x82;
  var UNKNOWN_PROTOCOL = 0x83;
  var BAD_MESSAGE = 0x84;
  var BAD_DATA_LENGTH = 0x85;
  var BAD_ARRAY_INDEX = 0x86;
  var NOT_PREPARED_RATE_PLAN = 0x87;
  var BAD_RATE_PLAN_ID = 0x88;
  var BAD_RATE_PLAN_SIZE = 0x89;
  var BAD_RESPONSE_LENGTH = 0x90;
  var NO_DATA_FOR_DATE = 0x91;
  var CALIBRATION_DISABLED = 0x92;
  var ACCESS_DENIED = 0x93;
  var BAD_SALDO_WRITE = 0x95;
  var BLOCKED_METER = 0x97;
  var UNENCRYPTED_COMMAND_DISABLED = 0x98;
  var TIME_CORRECTION_FAILURE = 0x99;
  var INVALID_CORRECTION_INTERVAL = 0x9a;
  var TIME_CORRECTION_OUT_HALF_HOUR_DISABLED = 0x9b;
  var BAD_BLOCK_NUMBER = 0x9c;
  var OUT_OFF_RANGE = 0x9f;
  var SET_METER_TYPE_FAILURE = 0xa0;
  var INTERNAL = 0xf0;

  var resultCodes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_DENIED: ACCESS_DENIED,
    BAD_ARRAY_INDEX: BAD_ARRAY_INDEX,
    BAD_BLOCK_NUMBER: BAD_BLOCK_NUMBER,
    BAD_DATA_LENGTH: BAD_DATA_LENGTH,
    BAD_MESSAGE: BAD_MESSAGE,
    BAD_RATE_PLAN_ID: BAD_RATE_PLAN_ID,
    BAD_RATE_PLAN_SIZE: BAD_RATE_PLAN_SIZE,
    BAD_RESPONSE_LENGTH: BAD_RESPONSE_LENGTH,
    BAD_SALDO_WRITE: BAD_SALDO_WRITE,
    BLOCKED_METER: BLOCKED_METER,
    CALIBRATION_DISABLED: CALIBRATION_DISABLED,
    DECRYPTION_FAILURE: DECRYPTION_FAILURE,
    INTERNAL: INTERNAL,
    INVALID_CORRECTION_INTERVAL: INVALID_CORRECTION_INTERVAL,
    NOT_ALIGNED_DATA: NOT_ALIGNED_DATA,
    NOT_PREPARED_RATE_PLAN: NOT_PREPARED_RATE_PLAN,
    NO_DATA_FOR_DATE: NO_DATA_FOR_DATE,
    OK: OK,
    OUT_OFF_RANGE: OUT_OFF_RANGE,
    SET_METER_TYPE_FAILURE: SET_METER_TYPE_FAILURE,
    TIME_CORRECTION_FAILURE: TIME_CORRECTION_FAILURE,
    TIME_CORRECTION_OUT_HALF_HOUR_DISABLED: TIME_CORRECTION_OUT_HALF_HOUR_DISABLED,
    UNENCRYPTED_COMMAND_DISABLED: UNENCRYPTED_COMMAND_DISABLED,
    UNKNOWN_COMMAND: UNKNOWN_COMMAND,
    UNKNOWN_PROTOCOL: UNKNOWN_PROTOCOL
  });

  invertObject(resultCodes);

  var SET_ALL_SEGMENT_DISPLAY$1 = 1;
  var SOFTWARE_VERSION$1 = 2;
  var TOTAL_ACTIVE_ENERGY$1 = 3;
  var ACTIVE_ENERGY_T1$1 = 4;
  var ACTIVE_ENERGY_T2$1 = 5;
  var ACTIVE_ENERGY_T3$1 = 6;
  var ACTIVE_ENERGY_T4$1 = 7;
  var ACTIVE_POWER_PER_PHASE = 8;
  var ACTIVE_POWER_IN_NEUTRAL = 9;
  var CURRENT_IN_PHASE = 10;
  var CURRENT_IN_NEUTRAL$1 = 11;
  var VOLTAGE = 12;
  var HOUR_MINUTE_SECOND$1 = 13;
  var DATE_MONTH_YEAR$1 = 14;
  var TOTAL_EXPORTED_ACTIVE_ENERGY$1 = 15;
  var EXPORTED_ACTIVE_ENERGY_T1$1 = 16;
  var EXPORTED_ACTIVE_ENERGY_T2$1 = 17;
  var EXPORTED_ACTIVE_ENERGY_T3$1 = 18;
  var EXPORTED_ACTIVE_ENERGY_T4$1 = 19;
  var POWER_FACTOR_PHASE_A$1 = 20;
  var POWER_FACTOR_PHASE_B$1 = 21;
  var BATTERY_VOLTAGE$1 = 22;
  var POWER_THRESHOLD_T1$1 = 23;
  var POWER_THRESHOLD_T2$1 = 24;
  var POWER_THRESHOLD_T3$1 = 25;
  var POWER_THRESHOLD_T4$1 = 26;
  var MAGNET_INDUCTION$1 = 28;
  var CURRENT_BALANCE$1 = 30;
  var OPTOPORT_SPEED$1 = 31;

  var screenIds$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACTIVE_ENERGY_T1: ACTIVE_ENERGY_T1$1,
    ACTIVE_ENERGY_T2: ACTIVE_ENERGY_T2$1,
    ACTIVE_ENERGY_T3: ACTIVE_ENERGY_T3$1,
    ACTIVE_ENERGY_T4: ACTIVE_ENERGY_T4$1,
    ACTIVE_POWER_IN_NEUTRAL: ACTIVE_POWER_IN_NEUTRAL,
    ACTIVE_POWER_PER_PHASE: ACTIVE_POWER_PER_PHASE,
    BATTERY_VOLTAGE: BATTERY_VOLTAGE$1,
    CURRENT_BALANCE: CURRENT_BALANCE$1,
    CURRENT_IN_NEUTRAL: CURRENT_IN_NEUTRAL$1,
    CURRENT_IN_PHASE: CURRENT_IN_PHASE,
    DATE_MONTH_YEAR: DATE_MONTH_YEAR$1,
    EXPORTED_ACTIVE_ENERGY_T1: EXPORTED_ACTIVE_ENERGY_T1$1,
    EXPORTED_ACTIVE_ENERGY_T2: EXPORTED_ACTIVE_ENERGY_T2$1,
    EXPORTED_ACTIVE_ENERGY_T3: EXPORTED_ACTIVE_ENERGY_T3$1,
    EXPORTED_ACTIVE_ENERGY_T4: EXPORTED_ACTIVE_ENERGY_T4$1,
    HOUR_MINUTE_SECOND: HOUR_MINUTE_SECOND$1,
    MAGNET_INDUCTION: MAGNET_INDUCTION$1,
    OPTOPORT_SPEED: OPTOPORT_SPEED$1,
    POWER_FACTOR_PHASE_A: POWER_FACTOR_PHASE_A$1,
    POWER_FACTOR_PHASE_B: POWER_FACTOR_PHASE_B$1,
    POWER_THRESHOLD_T1: POWER_THRESHOLD_T1$1,
    POWER_THRESHOLD_T2: POWER_THRESHOLD_T2$1,
    POWER_THRESHOLD_T3: POWER_THRESHOLD_T3$1,
    POWER_THRESHOLD_T4: POWER_THRESHOLD_T4$1,
    SET_ALL_SEGMENT_DISPLAY: SET_ALL_SEGMENT_DISPLAY$1,
    SOFTWARE_VERSION: SOFTWARE_VERSION$1,
    TOTAL_ACTIVE_ENERGY: TOTAL_ACTIVE_ENERGY$1,
    TOTAL_EXPORTED_ACTIVE_ENERGY: TOTAL_EXPORTED_ACTIVE_ENERGY$1,
    VOLTAGE: VOLTAGE
  });

  invertObject(screenIds$1);

  var getDayEnergies$1 = 0x78;
  var getDayMaxPower = 0x79;
  var errorResponse$1 = 0xfe;

  var uplinkIds$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan$1,
    errorResponse: errorResponse$1,
    getBuildVersion: getBuildVersion$1,
    getCorrectTime: getCorrectTime$1,
    getCriticalEvent: getCriticalEvent$1,
    getCurrentStatusMeter: getCurrentStatusMeter$1,
    getCurrentValues: getCurrentValues$1,
    getDateTime: getDateTime$1,
    getDayDemand: getDayDemand$1,
    getDayDemandExport: getDayDemandExport$1,
    getDayEnergies: getDayEnergies$1,
    getDayMaxDemand: getDayMaxDemand$1,
    getDayMaxDemandExport: getDayMaxDemandExport$1,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious,
    getDayMaxPower: getDayMaxPower,
    getDayProfile: getDayProfile$1,
    getDemand: getDemand$1,
    getDemandParameters: getDemandParameters,
    getDeviceId: getDeviceId$1,
    getDeviceType: getDeviceType$1,
    getDisplayParam: getDisplayParam$1,
    getEnergy: getEnergy$1,
    getEnergyDayPrevious: getEnergyDayPrevious$1,
    getEnergyExport: getEnergyExport$1,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious$1,
    getEventStatus: getEventStatus$1,
    getEvents: getEvents$1,
    getEventsCounters: getEventsCounters$1,
    getExtendedCurrentValues: getExtendedCurrentValues$1,
    getExtendedCurrentValues2: getExtendedCurrentValues2,
    getHalfHourDemand: getHalfHourDemand$1,
    getHalfHourDemandExport: getHalfHourDemandExport$1,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious,
    getHalfHourEnergies: getHalfHourEnergies$1,
    getMagneticFieldThreshold: getMagneticFieldThreshold$1,
    getMeterInfo: getMeterInfo$1,
    getMonthDemand: getMonthDemand$1,
    getMonthDemandExport: getMonthDemandExport$1,
    getMonthMaxDemand: getMonthMaxDemand$1,
    getMonthMaxDemandExport: getMonthMaxDemandExport$1,
    getOperatorParameters: getOperatorParameters$1,
    getOperatorParametersExtended3: getOperatorParametersExtended3$1,
    getRatePlanInfo: getRatePlanInfo$1,
    getSaldo: getSaldo$1,
    getSaldoParameters: getSaldoParameters$1,
    getSeasonProfile: getSeasonProfile$1,
    getSpecialDay: getSpecialDay$1,
    getVersion: getVersion$1,
    prepareRatePlan: prepareRatePlan$1,
    resetPowerMaxDay: resetPowerMaxDay$1,
    resetPowerMaxMonth: resetPowerMaxMonth$1,
    runTariffPlan: runTariffPlan$1,
    setAccessKey: setAccessKey$1,
    setCorrectDateTime: setCorrectDateTime$1,
    setCorrectTime: setCorrectTime$1,
    setDateTime: setDateTime$2,
    setDayProfile: setDayProfile$1,
    setDemandParameters: setDemandParameters,
    setDisplayParam: setDisplayParam$1,
    setOperatorParameters: setOperatorParameters$1,
    setOperatorParametersExtended3: setOperatorParametersExtended3$1,
    setSaldo: setSaldo$1,
    setSaldoParameters: setSaldoParameters$1,
    setSeasonProfile: setSeasonProfile$1,
    setSpecialDay: setSpecialDay$1,
    setSpecialOperation: setSpecialOperation$1,
    turnRelayOff: turnRelayOff$1,
    turnRelayOn: turnRelayOn$1
  });

  invertObject(uplinkIds$1);

  var ENERGY_T1_FAULT = 0x01;
  var ENERGY_T2_FAULT = 0x02;
  var ENERGY_T3_FAULT = 0x03;
  var ENERGY_T4_FAULT = 0x04;
  var ACCESS_LOCKED = 0x11;
  var ACCESS_UNLOCKED = 0x12;
  var ERR_ACCESS = 0x13;
  var CASE_OPEN = 0x14;
  var CASE_CLOSE = 0x15;
  var MAGNETIC_ON = 0x16;
  var MAGNETIC_OFF = 0x17;
  var CHANGE_ACCESS_KEY0 = 0x20;
  var CHANGE_ACCESS_KEY1 = 0x21;
  var CHANGE_ACCESS_KEY2 = 0x22;
  var CHANGE_ACCESS_KEY3 = 0x23;
  var CHANGE_PARAMETERS_LOCAL = 0x24;
  var CHANGE_PARAMETERS_REMOTE = 0x25;
  var CMD_CHANGE_TIME = 0x26;
  var CMD_RELAY_ON = 0x27;
  var CMD_RELAY_OFF = 0x28;
  var ENERGY_REGISTER_OVERFLOW = 0x31;
  var CHANGE_TARIFF_TABLE = 0x32;
  var SET_TARIFF_TABLE = 0x33;
  var SUMMER_TIME = 0x34;
  var WINTER_TIME = 0x35;
  var RELAY_ON = 0x36;
  var RELAY_OFF = 0x37;
  var RESTART = 0x38;
  var WD_RESTART = 0x39;
  var VA_MAX_OK = 0x40;
  var VA_MAX_OVER = 0x41;
  var VA_MIN_OK = 0x42;
  var VA_MIN_UNDER = 0x43;
  var VB_MAX_OK = 0x44;
  var VB_MAX_OVER = 0x45;
  var VB_MIN_OK = 0x46;
  var VB_MIN_UNDER = 0x47;
  var VC_MAX_OK = 0x48;
  var VC_MAX_OVER = 0x49;
  var VC_MIN_OK = 0x4A;
  var VC_MIN_UNDER = 0x4B;
  var F_MAX_OK = 0x4C;
  var F_MAX_OVER = 0x4D;
  var F_MIN_OK = 0x4E;
  var F_MIN_UNDER = 0x4F;
  var T_MAX_OK = 0x50;
  var T_MAX_OVER = 0x51;
  var T_MIN_OK = 0x52;
  var T_MIN_UNDER = 0x53;
  var IA_MAX_OK = 0x54;
  var IA_MAX_OVER = 0x55;
  var IB_MAX_OK = 0x56;
  var IB_MAX_OVER = 0x57;
  var IC_MAX_OK = 0x58;
  var IC_MAX_OVER = 0x59;
  var PA_MAX_OK = 0x5A;
  var PA_MAX_OVER = 0x5B;
  var PV_MAX_OK = 0x5C;
  var PV_MAX_OVER = 0x5D;
  var IDIFF_OK = 0x5E;
  var IDIFF_OVER = 0x5F;
  var CLOCK_OK = 0x60;
  var CLOCK_FAULT = 0x61;
  var POWER_C_ON = 0x62;
  var POWER_C_OFF = 0x63;
  var POWER_B_ON = 0x64;
  var POWER_B_OFF = 0x65;
  var POWER_A_ON = 0x66;
  var POWER_A_OFF = 0x67;
  var BATTERY_OK = 0x68;
  var BATTERY_FAULT = 0x69;
  var CALIBRATION_OK = 0x6A;
  var CALIBRATION_FAULT = 0x6B;
  var V_PARAMETERS_OK = 0x6C;
  var V_PARAMETERS_FAULT = 0x6D;
  var O_PARAMETERS_OK = 0x6E;
  var O_PARAMETERS_FAULT = 0x6F;
  var CHANGE_COR_TIME = 0x70;
  var CMD_RELAY_2_ON = 0x71;
  var CMD_RELAY_2_OFF = 0x72;
  var CROSS_ZERO_ENT1 = 0x73;
  var CROSS_ZERO_ENT2 = 0x74;
  var CROSS_ZERO_ENT3 = 0x75;
  var CROSS_ZERO_ENT4 = 0x76;
  var CROSS_ZERO_VARI1 = 0x77;
  var CROSS_ZERO_VARI2 = 0x78;
  var CROSS_ZERO_VARI3 = 0x79;
  var CROSS_ZERO_VARI4 = 0x7A;
  var CROSS_ZERO_VARE1 = 0x7B;
  var CROSS_ZERO_VARE2 = 0x7C;
  var CROSS_ZERO_VARE3 = 0x7D;
  var CROSS_ZERO_VARE4 = 0x7E;
  var CALIBRATION_FLAG_SET = 0x7F;
  var CALIBRATION_FLAG_RESET = 0x80;
  var BAD_TEST_EEPROM = 0x81;
  var BAD_TEST_FRAM = 0x82;
  var SET_NEW_SALDO = 0x83;
  var SALDO_PARAM_BAD = 0x84;
  var ACCUMULATION_PARAM_BAD = 0x85;
  var ACCUMULATION_PARAM_EXT_BAD = 0x86;
  var CALCULATION_PERIOD_BAD = 0x87;
  var BLOCK_TARIFF_BAD = 0x88;
  var CALIBRATION_PARAM_BAD = 0x89;
  var WINTER_SUMMER_BAD = 0x8A;
  var OP_PARAM_BAD = 0x8B;
  var OP_PARAM_EXT_BAD = 0x8C;
  var SALDO_ENERGY_BAD = 0x8D;
  var TIME_CORRECT = 0x8E;
  var COEFFICIENT_TRANSFORMATION_CHANGE = 0x8F;
  var RELAY_HARD_BAD_OFF = 0x90;
  var RELAY_HARD_ON = 0x91;
  var RELAY_HARD_BAD_ON = 0x93;
  var RELAY_HARD_OFF = 0x94;
  var METER_TROUBLE = 0x95;
  var CASE_KLEMA_OPEN = 0x96;
  var CASE_KLEMA_CLOSE = 0x97;
  var CHANGE_TARIFF_TABLE_2 = 0x98;
  var CHANGE_TARIFF_TABLE_3 = 0x99;
  var CASE_MODULE_OPEN = 0x9A;
  var CASE_MODULE_CLOSE = 0x9B;
  var SET_SALDO_PARAM = 0x9C;
  var POWER_OVER_RELAY_OFF = 0x9D;
  var CHANGE_PARAM_CHANNEL1 = 0x9E;
  var CHANGE_PARAM_CHANNEL2 = 0x9F;
  var CHANGE_PARAM_CHANNEL3 = 0xA0;
  var CHANGE_PARAM_CHANNEL4 = 0xA1;
  var CHANGE_PARAM_CHANNEL5 = 0xA2;
  var CHANGE_PARAM_CHANNEL6 = 0xA3;
  var CROSS_ZERO_EXPORT_ENT1 = 0xA4;
  var CROSS_ZERO_EXPORT_ENT2 = 0xA5;
  var CROSS_ZERO_EXPORT_ENT3 = 0xA6;
  var CROSS_ZERO_EXPORT_ENT4 = 0xA7;
  var CROSS_ZERO_EXPORT_VARI1 = 0xA8;
  var CROSS_ZERO_EXPORT_VARI2 = 0xA9;
  var CROSS_ZERO_EXPORT_VARI3 = 0xAA;
  var CROSS_ZERO_EXPORT_VARI4 = 0xAB;
  var CROSS_ZERO_EXPORT_VARE1 = 0xAC;
  var CROSS_ZERO_EXPORT_VARE2 = 0xAD;
  var CROSS_ZERO_EXPORT_VARE3 = 0xAE;
  var CROSS_ZERO_EXPORT_VARE4 = 0xAF;
  var EM_MAGNETIC_ON = 0xB0;
  var EM_MAGNETIC_OFF = 0xB1;
  var RESET_EM_FLAG = 0xB2;
  var RESET_MAGNETIC_FLAG = 0xB3;
  var SET_DEMAND_EN_1_MIN = 0xE0;
  var SET_DEMAND_EN_3_MIN = 0xE1;
  var SET_DEMAND_EN_5_MIN = 0xE2;
  var SET_DEMAND_EN_10_MIN = 0xE3;
  var SET_DEMAND_EN_15_MIN = 0xE4;
  var SET_DEMAND_EN_30_MIN = 0xE5;
  var SET_DEMAND_EN_60_MIN = 0xE6;
  var P_MAX_A_MINUS_OK = 0xE7;
  var P_MAX_A_MINUS_OVER = 0xE8;

  var events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_LOCKED: ACCESS_LOCKED,
    ACCESS_UNLOCKED: ACCESS_UNLOCKED,
    ACCUMULATION_PARAM_BAD: ACCUMULATION_PARAM_BAD,
    ACCUMULATION_PARAM_EXT_BAD: ACCUMULATION_PARAM_EXT_BAD,
    BAD_TEST_EEPROM: BAD_TEST_EEPROM,
    BAD_TEST_FRAM: BAD_TEST_FRAM,
    BATTERY_FAULT: BATTERY_FAULT,
    BATTERY_OK: BATTERY_OK,
    BLOCK_TARIFF_BAD: BLOCK_TARIFF_BAD,
    CALCULATION_PERIOD_BAD: CALCULATION_PERIOD_BAD,
    CALIBRATION_FAULT: CALIBRATION_FAULT,
    CALIBRATION_FLAG_RESET: CALIBRATION_FLAG_RESET,
    CALIBRATION_FLAG_SET: CALIBRATION_FLAG_SET,
    CALIBRATION_OK: CALIBRATION_OK,
    CALIBRATION_PARAM_BAD: CALIBRATION_PARAM_BAD,
    CASE_CLOSE: CASE_CLOSE,
    CASE_KLEMA_CLOSE: CASE_KLEMA_CLOSE,
    CASE_KLEMA_OPEN: CASE_KLEMA_OPEN,
    CASE_MODULE_CLOSE: CASE_MODULE_CLOSE,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN,
    CASE_OPEN: CASE_OPEN,
    CHANGE_ACCESS_KEY0: CHANGE_ACCESS_KEY0,
    CHANGE_ACCESS_KEY1: CHANGE_ACCESS_KEY1,
    CHANGE_ACCESS_KEY2: CHANGE_ACCESS_KEY2,
    CHANGE_ACCESS_KEY3: CHANGE_ACCESS_KEY3,
    CHANGE_COR_TIME: CHANGE_COR_TIME,
    CHANGE_PARAMETERS_LOCAL: CHANGE_PARAMETERS_LOCAL,
    CHANGE_PARAMETERS_REMOTE: CHANGE_PARAMETERS_REMOTE,
    CHANGE_PARAM_CHANNEL1: CHANGE_PARAM_CHANNEL1,
    CHANGE_PARAM_CHANNEL2: CHANGE_PARAM_CHANNEL2,
    CHANGE_PARAM_CHANNEL3: CHANGE_PARAM_CHANNEL3,
    CHANGE_PARAM_CHANNEL4: CHANGE_PARAM_CHANNEL4,
    CHANGE_PARAM_CHANNEL5: CHANGE_PARAM_CHANNEL5,
    CHANGE_PARAM_CHANNEL6: CHANGE_PARAM_CHANNEL6,
    CHANGE_TARIFF_TABLE: CHANGE_TARIFF_TABLE,
    CHANGE_TARIFF_TABLE_2: CHANGE_TARIFF_TABLE_2,
    CHANGE_TARIFF_TABLE_3: CHANGE_TARIFF_TABLE_3,
    CLOCK_FAULT: CLOCK_FAULT,
    CLOCK_OK: CLOCK_OK,
    CMD_CHANGE_TIME: CMD_CHANGE_TIME,
    CMD_RELAY_2_OFF: CMD_RELAY_2_OFF,
    CMD_RELAY_2_ON: CMD_RELAY_2_ON,
    CMD_RELAY_OFF: CMD_RELAY_OFF,
    CMD_RELAY_ON: CMD_RELAY_ON,
    COEFFICIENT_TRANSFORMATION_CHANGE: COEFFICIENT_TRANSFORMATION_CHANGE,
    CROSS_ZERO_ENT1: CROSS_ZERO_ENT1,
    CROSS_ZERO_ENT2: CROSS_ZERO_ENT2,
    CROSS_ZERO_ENT3: CROSS_ZERO_ENT3,
    CROSS_ZERO_ENT4: CROSS_ZERO_ENT4,
    CROSS_ZERO_EXPORT_ENT1: CROSS_ZERO_EXPORT_ENT1,
    CROSS_ZERO_EXPORT_ENT2: CROSS_ZERO_EXPORT_ENT2,
    CROSS_ZERO_EXPORT_ENT3: CROSS_ZERO_EXPORT_ENT3,
    CROSS_ZERO_EXPORT_ENT4: CROSS_ZERO_EXPORT_ENT4,
    CROSS_ZERO_EXPORT_VARE1: CROSS_ZERO_EXPORT_VARE1,
    CROSS_ZERO_EXPORT_VARE2: CROSS_ZERO_EXPORT_VARE2,
    CROSS_ZERO_EXPORT_VARE3: CROSS_ZERO_EXPORT_VARE3,
    CROSS_ZERO_EXPORT_VARE4: CROSS_ZERO_EXPORT_VARE4,
    CROSS_ZERO_EXPORT_VARI1: CROSS_ZERO_EXPORT_VARI1,
    CROSS_ZERO_EXPORT_VARI2: CROSS_ZERO_EXPORT_VARI2,
    CROSS_ZERO_EXPORT_VARI3: CROSS_ZERO_EXPORT_VARI3,
    CROSS_ZERO_EXPORT_VARI4: CROSS_ZERO_EXPORT_VARI4,
    CROSS_ZERO_VARE1: CROSS_ZERO_VARE1,
    CROSS_ZERO_VARE2: CROSS_ZERO_VARE2,
    CROSS_ZERO_VARE3: CROSS_ZERO_VARE3,
    CROSS_ZERO_VARE4: CROSS_ZERO_VARE4,
    CROSS_ZERO_VARI1: CROSS_ZERO_VARI1,
    CROSS_ZERO_VARI2: CROSS_ZERO_VARI2,
    CROSS_ZERO_VARI3: CROSS_ZERO_VARI3,
    CROSS_ZERO_VARI4: CROSS_ZERO_VARI4,
    EM_MAGNETIC_OFF: EM_MAGNETIC_OFF,
    EM_MAGNETIC_ON: EM_MAGNETIC_ON,
    ENERGY_REGISTER_OVERFLOW: ENERGY_REGISTER_OVERFLOW,
    ENERGY_T1_FAULT: ENERGY_T1_FAULT,
    ENERGY_T2_FAULT: ENERGY_T2_FAULT,
    ENERGY_T3_FAULT: ENERGY_T3_FAULT,
    ENERGY_T4_FAULT: ENERGY_T4_FAULT,
    ERR_ACCESS: ERR_ACCESS,
    F_MAX_OK: F_MAX_OK,
    F_MAX_OVER: F_MAX_OVER,
    F_MIN_OK: F_MIN_OK,
    F_MIN_UNDER: F_MIN_UNDER,
    IA_MAX_OK: IA_MAX_OK,
    IA_MAX_OVER: IA_MAX_OVER,
    IB_MAX_OK: IB_MAX_OK,
    IB_MAX_OVER: IB_MAX_OVER,
    IC_MAX_OK: IC_MAX_OK,
    IC_MAX_OVER: IC_MAX_OVER,
    IDIFF_OK: IDIFF_OK,
    IDIFF_OVER: IDIFF_OVER,
    MAGNETIC_OFF: MAGNETIC_OFF,
    MAGNETIC_ON: MAGNETIC_ON,
    METER_TROUBLE: METER_TROUBLE,
    OP_PARAM_BAD: OP_PARAM_BAD,
    OP_PARAM_EXT_BAD: OP_PARAM_EXT_BAD,
    O_PARAMETERS_FAULT: O_PARAMETERS_FAULT,
    O_PARAMETERS_OK: O_PARAMETERS_OK,
    PA_MAX_OK: PA_MAX_OK,
    PA_MAX_OVER: PA_MAX_OVER,
    POWER_A_OFF: POWER_A_OFF,
    POWER_A_ON: POWER_A_ON,
    POWER_B_OFF: POWER_B_OFF,
    POWER_B_ON: POWER_B_ON,
    POWER_C_OFF: POWER_C_OFF,
    POWER_C_ON: POWER_C_ON,
    POWER_OVER_RELAY_OFF: POWER_OVER_RELAY_OFF,
    PV_MAX_OK: PV_MAX_OK,
    PV_MAX_OVER: PV_MAX_OVER,
    P_MAX_A_MINUS_OK: P_MAX_A_MINUS_OK,
    P_MAX_A_MINUS_OVER: P_MAX_A_MINUS_OVER,
    RELAY_HARD_BAD_OFF: RELAY_HARD_BAD_OFF,
    RELAY_HARD_BAD_ON: RELAY_HARD_BAD_ON,
    RELAY_HARD_OFF: RELAY_HARD_OFF,
    RELAY_HARD_ON: RELAY_HARD_ON,
    RELAY_OFF: RELAY_OFF,
    RELAY_ON: RELAY_ON,
    RESET_EM_FLAG: RESET_EM_FLAG,
    RESET_MAGNETIC_FLAG: RESET_MAGNETIC_FLAG,
    RESTART: RESTART,
    SALDO_ENERGY_BAD: SALDO_ENERGY_BAD,
    SALDO_PARAM_BAD: SALDO_PARAM_BAD,
    SET_DEMAND_EN_10_MIN: SET_DEMAND_EN_10_MIN,
    SET_DEMAND_EN_15_MIN: SET_DEMAND_EN_15_MIN,
    SET_DEMAND_EN_1_MIN: SET_DEMAND_EN_1_MIN,
    SET_DEMAND_EN_30_MIN: SET_DEMAND_EN_30_MIN,
    SET_DEMAND_EN_3_MIN: SET_DEMAND_EN_3_MIN,
    SET_DEMAND_EN_5_MIN: SET_DEMAND_EN_5_MIN,
    SET_DEMAND_EN_60_MIN: SET_DEMAND_EN_60_MIN,
    SET_NEW_SALDO: SET_NEW_SALDO,
    SET_SALDO_PARAM: SET_SALDO_PARAM,
    SET_TARIFF_TABLE: SET_TARIFF_TABLE,
    SUMMER_TIME: SUMMER_TIME,
    TIME_CORRECT: TIME_CORRECT,
    T_MAX_OK: T_MAX_OK,
    T_MAX_OVER: T_MAX_OVER,
    T_MIN_OK: T_MIN_OK,
    T_MIN_UNDER: T_MIN_UNDER,
    VA_MAX_OK: VA_MAX_OK,
    VA_MAX_OVER: VA_MAX_OVER,
    VA_MIN_OK: VA_MIN_OK,
    VA_MIN_UNDER: VA_MIN_UNDER,
    VB_MAX_OK: VB_MAX_OK,
    VB_MAX_OVER: VB_MAX_OVER,
    VB_MIN_OK: VB_MIN_OK,
    VB_MIN_UNDER: VB_MIN_UNDER,
    VC_MAX_OK: VC_MAX_OK,
    VC_MAX_OVER: VC_MAX_OVER,
    VC_MIN_OK: VC_MIN_OK,
    VC_MIN_UNDER: VC_MIN_UNDER,
    V_PARAMETERS_FAULT: V_PARAMETERS_FAULT,
    V_PARAMETERS_OK: V_PARAMETERS_OK,
    WD_RESTART: WD_RESTART,
    WINTER_SUMMER_BAD: WINTER_SUMMER_BAD,
    WINTER_TIME: WINTER_TIME
  });

  invertObject(events);

  var SET_ALL_SEGMENT_DISPLAY = 1;
  var SOFTWARE_VERSION = 2;
  var TOTAL_ACTIVE_ENERGY = 3;
  var ACTIVE_ENERGY_T1 = 4;
  var ACTIVE_ENERGY_T2 = 5;
  var ACTIVE_ENERGY_T3 = 6;
  var ACTIVE_ENERGY_T4 = 7;
  var TOTAL_REACTIVE_ENERGY = 8;
  var REACTIVE_ENERGY_T1 = 9;
  var REACTIVE_ENERGY_T2 = 10;
  var REACTIVE_ENERGY_T3 = 11;
  var REACTIVE_ENERGY_T4 = 12;
  var TOTAL_NEGATIVE_REACTIVE_ENERGY = 13;
  var NEGATIVE_REACTIVE_ENERGY_T1 = 14;
  var NEGATIVE_REACTIVE_ENERGY_T2 = 15;
  var NEGATIVE_REACTIVE_ENERGY_T3 = 16;
  var NEGATIVE_REACTIVE_ENERGY_T4 = 17;
  var TOTAL_EXPORTED_ACTIVE_ENERGY = 18;
  var EXPORTED_ACTIVE_ENERGY_T1 = 19;
  var EXPORTED_ACTIVE_ENERGY_T2 = 20;
  var EXPORTED_ACTIVE_ENERGY_T3 = 21;
  var EXPORTED_ACTIVE_ENERGY_T4 = 22;
  var TOTAL_EXPORTED_REACTIVE_ENERGY = 23;
  var EXPORTED_REACTIVE_ENERGY_T1 = 24;
  var EXPORTED_REACTIVE_ENERGY_T2 = 25;
  var EXPORTED_REACTIVE_ENERGY_T3 = 26;
  var EXPORTED_REACTIVE_ENERGY_T4 = 27;
  var TOTAL_EXPORTED_NEGATIVE_REACTIVE_ENERGY = 28;
  var EXPORTED_NEGATIVE_REACTIVE_ENERGY_T1 = 29;
  var EXPORTED_NEGATIVE_REACTIVE_ENERGY_T2 = 30;
  var EXPORTED_NEGATIVE_REACTIVE_ENERGY_T3 = 31;
  var EXPORTED_NEGATIVE_REACTIVE_ENERGY_T4 = 32;
  var CURRENT_IN_PHASE_A = 33;
  var CURRENT_IN_PHASE_B = 34;
  var CURRENT_IN_PHASE_C = 35;
  var CURRENT_IN_NEUTRAL = 36;
  var VOLTAGE_IN_PHASE_A = 37;
  var VOLTAGE_IN_PHASE_B = 38;
  var VOLTAGE_IN_PHASE_C = 39;
  var BATTERY_VOLTAGE = 40;
  var SUPPLY_FREQUENCY = 41;
  var TOTAL_ACTIVE_POWER = 42;
  var ACTIVE_POWER_PHASE_A = 43;
  var ACTIVE_POWER_PHASE_B = 44;
  var ACTIVE_POWER_PHASE_C = 45;
  var TOTAL_REACTIVE_POWER_QPLUS = 46;
  var REACTIVE_POWER_QPLUS_PHASE_A = 47;
  var REACTIVE_POWER_QPLUS_PHASE_B = 48;
  var REACTIVE_POWER_QPLUS_PHASE_C = 49;
  var TOTAL_REACTIVE_POWER_QMINUS = 50;
  var REACTIVE_POWER_QMINUS_PHASE_A = 51;
  var REACTIVE_POWER_QMINUS_PHASE_B = 52;
  var REACTIVE_POWER_QMINUS_PHASE_C = 53;
  var TOTAL_POWER_FACTOR = 54;
  var POWER_FACTOR_PHASE_A = 55;
  var POWER_FACTOR_PHASE_B = 56;
  var POWER_FACTOR_PHASE_C = 57;
  var TOTAL_APPARENT_POWER_QPLUS = 58;
  var APPARENT_POWER_QPLUS_PHASE_A = 59;
  var APPARENT_POWER_QPLUS_PHASE_B = 60;
  var APPARENT_POWER_QPLUS_PHASE_C = 61;
  var TOTAL_APPARENT_POWER_QMINUS = 62;
  var APPARENT_POWER_QMINUS_PHASE_A = 63;
  var APPARENT_POWER_QMINUS_PHASE_B = 64;
  var APPARENT_POWER_QMINUS_PHASE_C = 65;
  var MAX_ACTIVE_POWER_DAY_T1 = 66;
  var MAX_ACTIVE_POWER_DAY_T2 = 67;
  var MAX_ACTIVE_POWER_DAY_T3 = 68;
  var MAX_ACTIVE_POWER_DAY_T4 = 69;
  var MAX_ACTIVE_POWER_MONTH_T1 = 70;
  var MAX_ACTIVE_POWER_MONTH_T2 = 71;
  var MAX_ACTIVE_POWER_MONTH_T3 = 72;
  var MAX_ACTIVE_POWER_MONTH_T4 = 73;
  var MAX_REACTIVE_POWER_DAY_T1 = 74;
  var MAX_REACTIVE_POWER_DAY_T2 = 75;
  var MAX_REACTIVE_POWER_DAY_T3 = 76;
  var MAX_REACTIVE_POWER_DAY_T4 = 77;
  var MAX_REACTIVE_POWER_MONTH_T1 = 78;
  var MAX_REACTIVE_POWER_MONTH_T2 = 79;
  var MAX_REACTIVE_POWER_MONTH_T3 = 80;
  var MAX_REACTIVE_POWER_MONTH_T4 = 81;
  var MAX_NEGATIVE_REACTIVE_POWER_DAY_T1 = 82;
  var MAX_NEGATIVE_REACTIVE_POWER_DAY_T2 = 83;
  var MAX_NEGATIVE_REACTIVE_POWER_DAY_T3 = 84;
  var MAX_NEGATIVE_REACTIVE_POWER_DAY_T4 = 85;
  var MAX_NEGATIVE_REACTIVE_POWER_MONTH_T1 = 86;
  var MAX_NEGATIVE_REACTIVE_POWER_MONTH_T2 = 87;
  var MAX_NEGATIVE_REACTIVE_POWER_MONTH_T3 = 88;
  var MAX_NEGATIVE_REACTIVE_POWER_MONTH_T4 = 89;
  var MAX_EXPORTED_ACTIVE_POWER_DAY_T1 = 90;
  var MAX_EXPORTED_ACTIVE_POWER_DAY_T2 = 91;
  var MAX_EXPORTED_ACTIVE_POWER_DAY_T3 = 92;
  var MAX_EXPORTED_ACTIVE_POWER_DAY_T4 = 93;
  var MAX_EXPORTED_ACTIVE_POWER_MONTH_T1 = 94;
  var MAX_EXPORTED_ACTIVE_POWER_MONTH_T2 = 95;
  var MAX_EXPORTED_ACTIVE_POWER_MONTH_T3 = 96;
  var MAX_EXPORTED_ACTIVE_POWER_MONTH_T4 = 97;
  var MAX_EXPORTED_REACTIVE_POWER_DAY_T1 = 98;
  var MAX_EXPORTED_REACTIVE_POWER_DAY_T2 = 99;
  var MAX_EXPORTED_REACTIVE_POWER_DAY_T3 = 100;
  var MAX_EXPORTED_REACTIVE_POWER_DAY_T4 = 101;
  var MAX_EXPORTED_REACTIVE_POWER_MONTH_T1 = 102;
  var MAX_EXPORTED_REACTIVE_POWER_MONTH_T2 = 103;
  var MAX_EXPORTED_REACTIVE_POWER_MONTH_T3 = 104;
  var MAX_EXPORTED_REACTIVE_POWER_MONTH_T4 = 105;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T1 = 106;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T2 = 107;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T3 = 108;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T4 = 109;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T1 = 110;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T2 = 111;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T3 = 112;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T4 = 113;
  var HOUR_MINUTE_SECOND = 114;
  var DATE_MONTH_YEAR = 115;
  var CURRENT_TRANSFORMATION_RATIO = 116;
  var VOLTAGE_TRANSFORMATION_RATIO = 117;
  var CURRENT_BALANCE = 118;
  var POWER_THRESHOLD_T1 = 119;
  var POWER_THRESHOLD_T2 = 120;
  var POWER_THRESHOLD_T3 = 121;
  var POWER_THRESHOLD_T4 = 122;
  var OPTOPORT_SPEED = 123;
  var MAGNET_INDUCTION = 124;

  var screenIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACTIVE_ENERGY_T1: ACTIVE_ENERGY_T1,
    ACTIVE_ENERGY_T2: ACTIVE_ENERGY_T2,
    ACTIVE_ENERGY_T3: ACTIVE_ENERGY_T3,
    ACTIVE_ENERGY_T4: ACTIVE_ENERGY_T4,
    ACTIVE_POWER_PHASE_A: ACTIVE_POWER_PHASE_A,
    ACTIVE_POWER_PHASE_B: ACTIVE_POWER_PHASE_B,
    ACTIVE_POWER_PHASE_C: ACTIVE_POWER_PHASE_C,
    APPARENT_POWER_QMINUS_PHASE_A: APPARENT_POWER_QMINUS_PHASE_A,
    APPARENT_POWER_QMINUS_PHASE_B: APPARENT_POWER_QMINUS_PHASE_B,
    APPARENT_POWER_QMINUS_PHASE_C: APPARENT_POWER_QMINUS_PHASE_C,
    APPARENT_POWER_QPLUS_PHASE_A: APPARENT_POWER_QPLUS_PHASE_A,
    APPARENT_POWER_QPLUS_PHASE_B: APPARENT_POWER_QPLUS_PHASE_B,
    APPARENT_POWER_QPLUS_PHASE_C: APPARENT_POWER_QPLUS_PHASE_C,
    BATTERY_VOLTAGE: BATTERY_VOLTAGE,
    CURRENT_BALANCE: CURRENT_BALANCE,
    CURRENT_IN_NEUTRAL: CURRENT_IN_NEUTRAL,
    CURRENT_IN_PHASE_A: CURRENT_IN_PHASE_A,
    CURRENT_IN_PHASE_B: CURRENT_IN_PHASE_B,
    CURRENT_IN_PHASE_C: CURRENT_IN_PHASE_C,
    CURRENT_TRANSFORMATION_RATIO: CURRENT_TRANSFORMATION_RATIO,
    DATE_MONTH_YEAR: DATE_MONTH_YEAR,
    EXPORTED_ACTIVE_ENERGY_T1: EXPORTED_ACTIVE_ENERGY_T1,
    EXPORTED_ACTIVE_ENERGY_T2: EXPORTED_ACTIVE_ENERGY_T2,
    EXPORTED_ACTIVE_ENERGY_T3: EXPORTED_ACTIVE_ENERGY_T3,
    EXPORTED_ACTIVE_ENERGY_T4: EXPORTED_ACTIVE_ENERGY_T4,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T1: EXPORTED_NEGATIVE_REACTIVE_ENERGY_T1,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T2: EXPORTED_NEGATIVE_REACTIVE_ENERGY_T2,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T3: EXPORTED_NEGATIVE_REACTIVE_ENERGY_T3,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T4: EXPORTED_NEGATIVE_REACTIVE_ENERGY_T4,
    EXPORTED_REACTIVE_ENERGY_T1: EXPORTED_REACTIVE_ENERGY_T1,
    EXPORTED_REACTIVE_ENERGY_T2: EXPORTED_REACTIVE_ENERGY_T2,
    EXPORTED_REACTIVE_ENERGY_T3: EXPORTED_REACTIVE_ENERGY_T3,
    EXPORTED_REACTIVE_ENERGY_T4: EXPORTED_REACTIVE_ENERGY_T4,
    HOUR_MINUTE_SECOND: HOUR_MINUTE_SECOND,
    MAGNET_INDUCTION: MAGNET_INDUCTION,
    MAX_ACTIVE_POWER_DAY_T1: MAX_ACTIVE_POWER_DAY_T1,
    MAX_ACTIVE_POWER_DAY_T2: MAX_ACTIVE_POWER_DAY_T2,
    MAX_ACTIVE_POWER_DAY_T3: MAX_ACTIVE_POWER_DAY_T3,
    MAX_ACTIVE_POWER_DAY_T4: MAX_ACTIVE_POWER_DAY_T4,
    MAX_ACTIVE_POWER_MONTH_T1: MAX_ACTIVE_POWER_MONTH_T1,
    MAX_ACTIVE_POWER_MONTH_T2: MAX_ACTIVE_POWER_MONTH_T2,
    MAX_ACTIVE_POWER_MONTH_T3: MAX_ACTIVE_POWER_MONTH_T3,
    MAX_ACTIVE_POWER_MONTH_T4: MAX_ACTIVE_POWER_MONTH_T4,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T1: MAX_EXPORTED_ACTIVE_POWER_DAY_T1,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T2: MAX_EXPORTED_ACTIVE_POWER_DAY_T2,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T3: MAX_EXPORTED_ACTIVE_POWER_DAY_T3,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T4: MAX_EXPORTED_ACTIVE_POWER_DAY_T4,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T1: MAX_EXPORTED_ACTIVE_POWER_MONTH_T1,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T2: MAX_EXPORTED_ACTIVE_POWER_MONTH_T2,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T3: MAX_EXPORTED_ACTIVE_POWER_MONTH_T3,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T4: MAX_EXPORTED_ACTIVE_POWER_MONTH_T4,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T1: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T1,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T2: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T2,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T3: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T3,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T4: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T4,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T1: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T1,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T2: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T2,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T3: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T3,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T4: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T4,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T1: MAX_EXPORTED_REACTIVE_POWER_DAY_T1,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T2: MAX_EXPORTED_REACTIVE_POWER_DAY_T2,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T3: MAX_EXPORTED_REACTIVE_POWER_DAY_T3,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T4: MAX_EXPORTED_REACTIVE_POWER_DAY_T4,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T1: MAX_EXPORTED_REACTIVE_POWER_MONTH_T1,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T2: MAX_EXPORTED_REACTIVE_POWER_MONTH_T2,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T3: MAX_EXPORTED_REACTIVE_POWER_MONTH_T3,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T4: MAX_EXPORTED_REACTIVE_POWER_MONTH_T4,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T1: MAX_NEGATIVE_REACTIVE_POWER_DAY_T1,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T2: MAX_NEGATIVE_REACTIVE_POWER_DAY_T2,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T3: MAX_NEGATIVE_REACTIVE_POWER_DAY_T3,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T4: MAX_NEGATIVE_REACTIVE_POWER_DAY_T4,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T1: MAX_NEGATIVE_REACTIVE_POWER_MONTH_T1,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T2: MAX_NEGATIVE_REACTIVE_POWER_MONTH_T2,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T3: MAX_NEGATIVE_REACTIVE_POWER_MONTH_T3,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T4: MAX_NEGATIVE_REACTIVE_POWER_MONTH_T4,
    MAX_REACTIVE_POWER_DAY_T1: MAX_REACTIVE_POWER_DAY_T1,
    MAX_REACTIVE_POWER_DAY_T2: MAX_REACTIVE_POWER_DAY_T2,
    MAX_REACTIVE_POWER_DAY_T3: MAX_REACTIVE_POWER_DAY_T3,
    MAX_REACTIVE_POWER_DAY_T4: MAX_REACTIVE_POWER_DAY_T4,
    MAX_REACTIVE_POWER_MONTH_T1: MAX_REACTIVE_POWER_MONTH_T1,
    MAX_REACTIVE_POWER_MONTH_T2: MAX_REACTIVE_POWER_MONTH_T2,
    MAX_REACTIVE_POWER_MONTH_T3: MAX_REACTIVE_POWER_MONTH_T3,
    MAX_REACTIVE_POWER_MONTH_T4: MAX_REACTIVE_POWER_MONTH_T4,
    NEGATIVE_REACTIVE_ENERGY_T1: NEGATIVE_REACTIVE_ENERGY_T1,
    NEGATIVE_REACTIVE_ENERGY_T2: NEGATIVE_REACTIVE_ENERGY_T2,
    NEGATIVE_REACTIVE_ENERGY_T3: NEGATIVE_REACTIVE_ENERGY_T3,
    NEGATIVE_REACTIVE_ENERGY_T4: NEGATIVE_REACTIVE_ENERGY_T4,
    OPTOPORT_SPEED: OPTOPORT_SPEED,
    POWER_FACTOR_PHASE_A: POWER_FACTOR_PHASE_A,
    POWER_FACTOR_PHASE_B: POWER_FACTOR_PHASE_B,
    POWER_FACTOR_PHASE_C: POWER_FACTOR_PHASE_C,
    POWER_THRESHOLD_T1: POWER_THRESHOLD_T1,
    POWER_THRESHOLD_T2: POWER_THRESHOLD_T2,
    POWER_THRESHOLD_T3: POWER_THRESHOLD_T3,
    POWER_THRESHOLD_T4: POWER_THRESHOLD_T4,
    REACTIVE_ENERGY_T1: REACTIVE_ENERGY_T1,
    REACTIVE_ENERGY_T2: REACTIVE_ENERGY_T2,
    REACTIVE_ENERGY_T3: REACTIVE_ENERGY_T3,
    REACTIVE_ENERGY_T4: REACTIVE_ENERGY_T4,
    REACTIVE_POWER_QMINUS_PHASE_A: REACTIVE_POWER_QMINUS_PHASE_A,
    REACTIVE_POWER_QMINUS_PHASE_B: REACTIVE_POWER_QMINUS_PHASE_B,
    REACTIVE_POWER_QMINUS_PHASE_C: REACTIVE_POWER_QMINUS_PHASE_C,
    REACTIVE_POWER_QPLUS_PHASE_A: REACTIVE_POWER_QPLUS_PHASE_A,
    REACTIVE_POWER_QPLUS_PHASE_B: REACTIVE_POWER_QPLUS_PHASE_B,
    REACTIVE_POWER_QPLUS_PHASE_C: REACTIVE_POWER_QPLUS_PHASE_C,
    SET_ALL_SEGMENT_DISPLAY: SET_ALL_SEGMENT_DISPLAY,
    SOFTWARE_VERSION: SOFTWARE_VERSION,
    SUPPLY_FREQUENCY: SUPPLY_FREQUENCY,
    TOTAL_ACTIVE_ENERGY: TOTAL_ACTIVE_ENERGY,
    TOTAL_ACTIVE_POWER: TOTAL_ACTIVE_POWER,
    TOTAL_APPARENT_POWER_QMINUS: TOTAL_APPARENT_POWER_QMINUS,
    TOTAL_APPARENT_POWER_QPLUS: TOTAL_APPARENT_POWER_QPLUS,
    TOTAL_EXPORTED_ACTIVE_ENERGY: TOTAL_EXPORTED_ACTIVE_ENERGY,
    TOTAL_EXPORTED_NEGATIVE_REACTIVE_ENERGY: TOTAL_EXPORTED_NEGATIVE_REACTIVE_ENERGY,
    TOTAL_EXPORTED_REACTIVE_ENERGY: TOTAL_EXPORTED_REACTIVE_ENERGY,
    TOTAL_NEGATIVE_REACTIVE_ENERGY: TOTAL_NEGATIVE_REACTIVE_ENERGY,
    TOTAL_POWER_FACTOR: TOTAL_POWER_FACTOR,
    TOTAL_REACTIVE_ENERGY: TOTAL_REACTIVE_ENERGY,
    TOTAL_REACTIVE_POWER_QMINUS: TOTAL_REACTIVE_POWER_QMINUS,
    TOTAL_REACTIVE_POWER_QPLUS: TOTAL_REACTIVE_POWER_QPLUS,
    VOLTAGE_IN_PHASE_A: VOLTAGE_IN_PHASE_A,
    VOLTAGE_IN_PHASE_B: VOLTAGE_IN_PHASE_B,
    VOLTAGE_IN_PHASE_C: VOLTAGE_IN_PHASE_C,
    VOLTAGE_TRANSFORMATION_RATIO: VOLTAGE_TRANSFORMATION_RATIO
  });

  invertObject(screenIds);

  var getDayEnergies = 0x78;
  var errorResponse = 0xfe;

  var uplinkIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan,
    errorResponse: errorResponse,
    getBuildVersion: getBuildVersion,
    getCorrectTime: getCorrectTime,
    getCriticalEvent: getCriticalEvent,
    getCurrentStatusMeter: getCurrentStatusMeter,
    getCurrentValues: getCurrentValues,
    getDateTime: getDateTime,
    getDayDemand: getDayDemand,
    getDayDemandExport: getDayDemandExport,
    getDayEnergies: getDayEnergies,
    getDayMaxDemand: getDayMaxDemand,
    getDayMaxDemandExport: getDayMaxDemandExport,
    getDayProfile: getDayProfile,
    getDemand: getDemand,
    getDeviceId: getDeviceId,
    getDeviceType: getDeviceType,
    getDisplayParam: getDisplayParam,
    getEnergy: getEnergy,
    getEnergyDayPrevious: getEnergyDayPrevious,
    getEnergyExport: getEnergyExport,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious,
    getEventStatus: getEventStatus,
    getEvents: getEvents,
    getEventsCounters: getEventsCounters,
    getExtendedCurrentValues: getExtendedCurrentValues,
    getHalfHourDemand: getHalfHourDemand,
    getHalfHourDemandChannel: getHalfHourDemandChannel,
    getHalfHourDemandExport: getHalfHourDemandExport,
    getHalfHourDemandVare: getHalfHourDemandVare,
    getHalfHourDemandVareExport: getHalfHourDemandVareExport,
    getHalfHourDemandVari: getHalfHourDemandVari,
    getHalfHourDemandVariExport: getHalfHourDemandVariExport,
    getHalfHourEnergies: getHalfHourEnergies,
    getMagneticFieldThreshold: getMagneticFieldThreshold,
    getMeterInfo: getMeterInfo,
    getMonthDemand: getMonthDemand,
    getMonthDemandExport: getMonthDemandExport,
    getMonthMaxDemand: getMonthMaxDemand,
    getMonthMaxDemandExport: getMonthMaxDemandExport,
    getOperatorParameters: getOperatorParameters,
    getOperatorParametersExtended: getOperatorParametersExtended,
    getOperatorParametersExtended2: getOperatorParametersExtended2,
    getOperatorParametersExtended3: getOperatorParametersExtended3,
    getOperatorParametersExtended4: getOperatorParametersExtended4,
    getRatePlanInfo: getRatePlanInfo,
    getSaldo: getSaldo,
    getSaldoParameters: getSaldoParameters,
    getSeasonProfile: getSeasonProfile,
    getSpecialDay: getSpecialDay,
    getVersion: getVersion,
    prepareRatePlan: prepareRatePlan,
    resetPowerMaxDay: resetPowerMaxDay,
    resetPowerMaxMonth: resetPowerMaxMonth,
    runTariffPlan: runTariffPlan,
    setAccessKey: setAccessKey,
    setCorrectDateTime: setCorrectDateTime,
    setCorrectTime: setCorrectTime,
    setDateTime: setDateTime,
    setDayProfile: setDayProfile,
    setDisplayParam: setDisplayParam,
    setOperatorParameters: setOperatorParameters,
    setOperatorParametersExtended: setOperatorParametersExtended,
    setOperatorParametersExtended2: setOperatorParametersExtended2,
    setOperatorParametersExtended3: setOperatorParametersExtended3,
    setOperatorParametersExtended4: setOperatorParametersExtended4,
    setSaldo: setSaldo,
    setSaldoParameters: setSaldoParameters,
    setSeasonProfile: setSeasonProfile,
    setSpecialDay: setSpecialDay,
    setSpecialOperation: setSpecialOperation,
    turnRelayOff: turnRelayOff,
    turnRelayOn: turnRelayOn
  });

  invertObject(uplinkIds);

  var RATE_2400 = 2400;
  var RATE_9600 = 9600;
  var valueToRate = {
    plc: {
      0: RATE_9600,
      2: RATE_2400,
      4: RATE_9600
    },
    optoport: {
      0: RATE_2400,
      2: RATE_2400,
      4: RATE_9600
    }
  };
  ({
    plc: invertObject(valueToRate.plc),
    optoport: invertObject(valueToRate.optoport)
  });

  var setDemand = function (buffer, parameters) {
    var date0 = parameters.date.year << 1 | parameters.date.month >> 3 & 0x01;
    var date1 = parameters.date.month << 5 & 0xe0 | parameters.date.date & 0x1f;
    buffer.setUint8(date0);
    buffer.setUint8(date1);
    buffer.setUint8(parameters.demandParam);
    buffer.setUint16(parameters.firstIndex);
    buffer.setUint8(parameters.count);
    buffer.setUint8(parameters.period);
  };

  var id = getDemand;
  var maxSize = 7;
  var toBytes$1 = function (parameters) {
    var buffer = new BinaryBuffer(maxSize, false);
    setDemand(buffer, parameters);
    return toBytes$d(id, buffer.data);
  };

  // 0b10010001 (segmentIndex: 1, segmentsNumber: 1, isLast: true)
  var SINGLE_SEGMENT_FLAG = 0x91;
  var DATA_SEGMENT_COMMAND_ID = 0x1e;
  var set = function (bytes) {
    var body = [DATA_SEGMENT_COMMAND_ID, bytes.length + 2, 0, SINGLE_SEGMENT_FLAG].concat(_toConsumableArray(bytes));
    return [].concat(_toConsumableArray(body), [calculateLrc(body)]);
  };

  var _toBytesMap;
  var toBytesMap = (_toBytesMap = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_toBytesMap, id$b, toBytes$c), id$a, toBytes$b), id$9, toBytes$a), id$8, toBytes$9), id$7, toBytes$8), id$6, toBytes$7), id$5, toBytes$6), id$4, toBytes$5), id$3, toBytes$4), id$2, toBytes$3), _defineProperty(_defineProperty(_toBytesMap, id$1, toBytes$2), id, toBytes$1));

  // partial command set
  toBytes = getToBytes(toBytesMap);
  getBase64FromBytes = getBase64FromBytes$1;
  setDataSegment = set;

})();
//#endregion


/*
  Incoming arguments:
    * msg - JSON message payload downlink message json
    * msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.
    * metadata - list of key-value pairs with additional data about the message
    * integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter

  Output must be an object with the following fields:
    * contentType - BINARY
    * data - payload in base64
*/

var bytes = toBytes(msg.commands);

// send nothing if not fit in a single data segment
if ( bytes.length > MAX_DATA_SEGMENT_SIZE ) {
    bytes = [];
} else {
    bytes = setDataSegment(bytes);
}

var result = {
    contentType: 'BINARY',
    data: getBase64FromBytes(bytes)
};

return result;
