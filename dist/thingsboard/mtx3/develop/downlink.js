// IMPORTANT!!!
// This example only for default downlink data converter.
// Data converters for other integrations use different input and result.
// Find example of uplink data converter for your integration and edit usage of payload and result
// Integrations list: https://thingsboard.io/docs/user-guide/integrations/

// encoded message should be less than this size
// to be able to send to a device
var MAX_DATA_SEGMENT_SIZE = 50;


//#region [autogenerated jooby-codec bundle from index.js]
var toBytes, setDataSegment, getBase64FromBytes;

(function () {
  'use strict';

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }

  var hexFormatOptions = {
    separator: ' ',
    prefix: ''
  };

  var INT8_SIZE = 1;
  var INT16_SIZE = 2;
  var INT24_SIZE = 3;
  var INT32_SIZE = 4;
  var log = Math.log,
    pow = Math.pow,
    LN2 = Math.LN2;
  var readFloat = function (buffer, offset, isLittleEndian, mLen, bytes) {
    var e,
      m,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLittleEndian ? bytes - 1 : 0,
      d = isLittleEndian ? -1 : 1,
      s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * pow(2, e - mLen);
  };
  var writeFloat = function (buffer, offset, value, isLittleEndian, mLen, bytes) {
    var e,
      m,
      c,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
      i = isLittleEndian ? 0 : bytes - 1,
      d = isLittleEndian ? 1 : -1,
      s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value < 0 && (value = -value);
    if (value !== value || value === Infinity) {
      m = value !== value ? 1 : 0;
      e = eMax;
    } else {
      e = log(value) / LN2 | 0;
      if (value * (c = pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 0x100, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 0x100, eLen -= 8);
    buffer[offset + i - d] |= s * 0x80;
  };
  var be2 = [1, 0];
  var be3 = [2, 1, 0];
  var be4 = [3, 2, 1, 0];
  var le2 = [0, 1];
  var le3 = [0, 1, 2];
  var le4 = [0, 1, 2, 3];
  var readUint8 = function (buffer, offset) {
    return buffer[offset];
  };
  var readUint16 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    return b0 | b1;
  };
  var readUint24 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le3 : be3;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    var b2 = buffer[offset + order[2]] << 16;
    return b0 | b1 | b2;
  };
  var readUint32 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    var b0 = buffer[offset + order[3]] * 0x1000000;
    var b1 = buffer[offset + order[2]] * 0x10000;
    var b2 = buffer[offset + order[1]] * 0x100;
    var b3 = buffer[offset + order[0]];
    return b0 + b1 + b2 + b3;
  };
  var writeUint8 = function (buffer, offset, value) {
    buffer[offset] = value & 0xff;
  };
  var writeUint16 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
  };
  var writeUint24 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le3 : be3;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
  };
  var writeUint32 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
    buffer[offset + order[3]] = value >>> 24 & 0xff;
  };
  function BinaryBuffer(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (typeof dataOrLength === 'number') {
      var bytes = new Array(dataOrLength).fill(0);
      this.data = bytes;
    } else {
      this.data = dataOrLength;
    }
    this.offset = 0;
    this.isLittleEndian = isLittleEndian;
  }
  BinaryBuffer.prototype = {
    toUint8Array: function () {
      return this.data;
    },
    seek: function (position) {
      if (position < 0 || position >= this.data.length) {
        throw new Error('Invalid position.');
      }
      this.offset = position;
    },
    setInt8: function (value) {
      writeUint8(this.data, this.offset, value < 0 ? value | 0x100 : value);
      this.offset += INT8_SIZE;
    },
    getInt8: function () {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result & 0x80 ? result ^ -256 : result;
    },
    setUint8: function (value) {
      writeUint8(this.data, this.offset, value);
      this.offset += INT8_SIZE;
    },
    getUint8: function () {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result;
    },
    setInt16: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value < 0 ? value | 0x10000 : value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getInt16: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result & 0x8000 ? result ^ -65536 : result;
    },
    setUint16: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getUint16: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result;
    },
    setInt24: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint24(this.data, this.offset, value < 0 ? value | 0x1000000 : value, isLittleEndian);
      this.offset += INT24_SIZE;
    },
    getInt24: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint24(this.data, this.offset, isLittleEndian);
      this.offset += INT24_SIZE;
      return result & 0x800000 ? result ^ -16777216 : result;
    },
    setUint24: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint24(this.data, this.offset, value, isLittleEndian);
      this.offset += INT24_SIZE;
    },
    getUint24: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint24(this.data, this.offset, isLittleEndian);
      this.offset += INT24_SIZE;
      return result;
    },
    setInt32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value < 0 ? value | 0x100000000 : value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getInt32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result & 0x80000000 ? result ^ -4294967296 : result;
    },
    setUint32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getUint32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result;
    },
    setFloat32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeFloat(this.data, this.offset, value, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
    },
    getFloat32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readFloat(this.data, this.offset, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
      return result;
    },
    setString: function (value) {
      this.setUint8(value.length);
      for (var index = 0; index < value.length; ++index) {
        this.setUint8(value.charCodeAt(index));
      }
    },
    getString: function () {
      var size = this.getUint8();
      var endIndex = this.offset + size;
      var chars = [];
      while (this.offset < endIndex) {
        chars.push(String.fromCharCode(this.getUint8()));
      }
      return chars.join('');
    },
    getBytesToOffset: function () {
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offset;
      return this.data.slice(0, offset);
    },
    getBytesLeft: function () {
      return this.getBytes(this.bytesLeft);
    },
    getBytes: function (length) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      this.offset = offset + length;
      return this.data.slice(offset, this.offset);
    },
    setBytes: function (data) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      var bytes = this.data;
      bytes.splice.apply(bytes, [offset, data.length].concat(_toConsumableArray(data)));
      this.data = bytes;
      this.offset = offset + data.length;
    }
  };
  Object.defineProperties(BinaryBuffer.prototype, {
    size: {
      get: function () {
        return this.data.length;
      }
    },
    isEmpty: {
      get: function () {
        if (this.offset > this.data.length) {
          throw new Error("current offset ".concat(this.offset, " is outside the bounds of the buffer"));
        }
        return this.data.length - this.offset === 0;
      }
    },
    bytesLeft: {
      get: function () {
        return this.data.length - this.offset;
      }
    },
    position: {
      get: function () {
        return this.offset;
      }
    }
  });

  var fromObject = function () {
    var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var booleanObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var result = 0;
    for (var name in booleanObject) {
      if (name in bitMask && booleanObject[name]) {
        result |= bitMask[name];
      }
    }
    return result;
  };
  var toObject = function () {
    var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var result = {};
    for (var name in bitMask) {
      result[name] = (value & bitMask[name]) !== 0;
    }
    return result;
  };
  var extractBits = function (value, bitsNumber, startIndex) {
    return (1 << bitsNumber) - 1 & value >> startIndex - 1;
  };
  var fillBits = function (value, bitsNumber, startIndex, valueToSet) {
    var mask = (1 << bitsNumber) - 1 << startIndex - 1;
    var newValueToSet = valueToSet;
    var result = value;
    result &= ~mask;
    newValueToSet <<= startIndex - 1;
    result |= newValueToSet;
    return result;
  };

  var getBytesFromHex = (function (hex) {
    var cleanHex = hex.trim();
    if (!cleanHex) {
      return [];
    }
    cleanHex = cleanHex.replace(/0x/g, '').split(/\s+/).map(function (byte) {
      return byte.padStart(2, '0');
    }).join('');
    if (cleanHex.length % 2 !== 0) {
      cleanHex = "0".concat(cleanHex);
    }
    var resultLength = cleanHex.length / 2;
    var bytes = new Array(resultLength);
    for (var index = 0; index < resultLength; index++) {
      bytes[index] = parseInt(cleanHex.substring(index * 2, index * 2 + 2), 16);
    }
    return bytes;
  });

  var DEVICE_TYPE_INVALID_CHAR = 'x';
  var nibbles1 = ['.', '1', '3', 'R', 'M'];
  var nibbles2 = ['.', 'A', 'G', 'R', 'T', 'D'];
  var nibbles3 = ['.', '0', '1', '2', '3', '4', '5'];
  var nibbles4 = ['.', 'A', 'B', 'C', 'D', 'E', 'F'];
  var nibbles5 = ['.', 'A', 'B', 'C', 'D', 'E', 'F', 'H', 'K', 'G'];
  var nibbles6 = ['.', '1', '2', '3', '4'];
  var nibbles7 = ['.', 'L', 'M', 'Z', 'K'];
  var nibbles8 = ['.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
  var nibbles9 = ['.', 'D', 'B', 'C', 'E', 'P', 'R', 'O', 'L', 'F', 'S', 'M', 'Y', 'G', 'N', 'U'];
  var nibbles10 = ['.', '0', '1', '2', '3', '4', '5', '6', 'P', 'R', 'L', 'E', 'G', '-', '/'];
  var nibbles11 = ['.', 'H', 'A', 'T', '0', '0', '0', '0', '0', '1', '2', '3', '4', '0', '0', '0'];
  var nibbles12 = ['.', '0', '1', '2', '3', '4', '5', '6', '7', '8', 'I', 'X', 'G', 'W', 'M', '-'];
  var mtx1DeviceTypeDescriptorMask = {
    typeMeterG: 1 << 0,
    downgradedToA: 1 << 4,
    supportMeterInfo: 1 << 6
  };
  var mtx3DeviceTypeDescriptorMask = {
    typeMeterTransformer: 1 << 0,
    downgradedToR: 1 << 3,
    typeMeterG: 1 << 4,
    supportMeterInfo: 1 << 6,
    reactiveByQuadrants: 1 << 7
  };
  var mtx3DeviceTypeDescriptorFromByte = function (byte) {
    var descriptor = toObject(mtx3DeviceTypeDescriptorMask, byte);
    return {
      meterType: 'mtx3',
      ...descriptor,
      typeMeterG: !descriptor.typeMeterG
    };
  };
  var mtx3DeviceTypeDescriptorToByte = function (descriptor) {
    return fromObject(mtx3DeviceTypeDescriptorMask, {
      ...descriptor,
      typeMeterG: !descriptor.typeMeterG
    });
  };
  var splitByte = function (byte) {
    return [byte >> 4, byte & 0x0F];
  };
  var splitToNibbles = function (data) {
    var result = new Array(data.length * 2).fill(0);
    data.forEach(function (byte, index) {
      var _splitByte = splitByte(byte),
        _splitByte2 = _slicedToArray(_splitByte, 2),
        high = _splitByte2[0],
        low = _splitByte2[1];
      result[index * 2] = high;
      result[index * 2 + 1] = low;
    });
    return result;
  };
  var joinNibbles = function (nibbles) {
    var hex = [];
    nibbles.forEach(function (nibble) {
      return hex.push(nibble.toString(16));
    });
    if (nibbles.length & 1) {
      hex.push('0');
    }
    return getBytesFromHex(hex.join(''));
  };
  var fromBytesMtx = function (nibbles) {
    if (nibbles.length !== 14 && nibbles.length !== 16) {
      throw new Error('Device type bytes wrong size');
    }
    var type = ['MTX '];
    type.push(nibbles1[nibbles[0]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles2[nibbles[1]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles3[nibbles[2]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles3[nibbles[3]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push('.');
    type.push(nibbles4[nibbles[4]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles5[nibbles[5]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push('.');
    type.push(nibbles6[nibbles[6]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles7[nibbles[7]] ?? DEVICE_TYPE_INVALID_CHAR);
    var revision = nibbles[8];
    type.push(nibbles8[nibbles[9]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push('-');
    var deviceProtocolIndex;
    if (nibbles.length < 14 || nibbles[12] === 0 && nibbles[13] === 0) {
      type.push(nibbles9[nibbles[10]] ?? DEVICE_TYPE_INVALID_CHAR);
      deviceProtocolIndex = 11;
    } else if (nibbles[13] === 0) {
      type.push(nibbles9[nibbles[10]] ?? DEVICE_TYPE_INVALID_CHAR);
      type.push(nibbles9[nibbles[11]] ?? DEVICE_TYPE_INVALID_CHAR);
      deviceProtocolIndex = 12;
    } else {
      type.push(nibbles9[nibbles[10]] ?? DEVICE_TYPE_INVALID_CHAR);
      type.push(nibbles9[nibbles[11]] ?? DEVICE_TYPE_INVALID_CHAR);
      type.push(nibbles9[nibbles[12]] ?? DEVICE_TYPE_INVALID_CHAR);
      deviceProtocolIndex = 13;
    }
    var deviceProtocolNibble = nibbles[deviceProtocolIndex];
    if (deviceProtocolNibble && deviceProtocolNibble !== 0) {
      type.push(nibbles11[deviceProtocolNibble] ?? DEVICE_TYPE_INVALID_CHAR);
    }
    return {
      type: type.join(''),
      revision: revision
    };
  };
  var toBytesMtx = function (type, prefix, revision) {
    var nibbles = [];
    if (type.length < 11) {
      throw new Error('Wrong format');
    }
    nibbles.push(nibbles1.indexOf(type[0]));
    nibbles.push(nibbles2.indexOf(type[1]));
    nibbles.push(nibbles3.indexOf(type[2]));
    nibbles.push(nibbles3.indexOf(type[3]));
    if (type[4] !== '.') {
      throw new Error('Wrong format');
    }
    nibbles.push(nibbles4.indexOf(type[5]));
    nibbles.push(nibbles5.indexOf(type[6]));
    if (type[7] !== '.') {
      throw new Error('Wrong format');
    }
    nibbles.push(nibbles6.indexOf(type[8]));
    nibbles.push(nibbles7.indexOf(type[9]));
    nibbles.push(revision ?? 0);
    nibbles.push(nibbles8.indexOf(type[10]));
    if (type[11] !== '-') {
      throw new Error('Wrong format');
    }
    var deviceProtocolIndex = type.length > 13 ? type.length - 1 : type.length;
    for (var index = 12; index < deviceProtocolIndex; index++) {
      nibbles.push(nibbles9.indexOf(type[index]));
    }
    if (deviceProtocolIndex < type.length) {
      nibbles.push(nibbles11.indexOf(type[deviceProtocolIndex]));
    }
    var bytes = joinNibbles(nibbles);
    var result = new Array(9).fill(0);
    result[0] = 0;
    for (var _index = 0; _index < bytes.length; _index++) {
      result[_index + (bytes.length < 8 ? 1 : 0)] = bytes[_index];
    }
    return result;
  };
  var fromBytesMtx2 = function (nibbles) {
    if (nibbles.length < 14) {
      throw new Error('The buffer is too small');
    }
    var type = ['MTX '];
    var separator = nibbles[1] === 5 ? '-' : ' ';
    type.push(nibbles1[nibbles[0]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles2[nibbles[1]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(separator);
    for (var index = 2; index < nibbles.length; index++) {
      if (nibbles[index] !== 0) {
        type.push(nibbles10[nibbles[index]] ?? DEVICE_TYPE_INVALID_CHAR);
      }
    }
    return {
      type: type.join('')
    };
  };
  var toBytesMtx2 = function (type) {
    if (type.length < 3) {
      throw new Error('Wrong format');
    }
    var nibbles = [];
    nibbles.push(nibbles1.indexOf(type[0]));
    nibbles.push(nibbles2.indexOf(type[1]));
    for (var index = 3; index < type.length; index++) {
      nibbles.push(nibbles10.indexOf(type[index]));
    }
    var bytes = joinNibbles(nibbles);
    if (bytes.length === 8) {
      return bytes;
    }
    if (bytes.length > 8) {
      throw new Error('Wrong format');
    }
    var result = new Array(8).fill(0);
    for (var _index2 = 0; _index2 < bytes.length; _index2++) {
      result[_index2] = bytes[_index2];
    }
    return result;
  };
  var fromBytesM = function (nibbles) {
    if (nibbles.length < 14) {
      throw new Error('The buffer is too small');
    }
    var type = [];
    type.push(nibbles1[nibbles[0]] ?? DEVICE_TYPE_INVALID_CHAR);
    for (var index = 1; index < nibbles.length; index++) {
      if (nibbles[index] !== 0) {
        type.push(nibbles12[nibbles[index]] ?? DEVICE_TYPE_INVALID_CHAR);
      }
    }
    return {
      type: type.join('')
    };
  };
  var toBytesM = function (type) {
    if (type.length < 1) {
      throw new Error('Wrong format');
    }
    var nibbles = [];
    nibbles.push(nibbles1.indexOf(type[0]));
    for (var index = 1; index < type.length; index++) {
      nibbles.push(nibbles12.indexOf(type[index]));
    }
    var bytes = joinNibbles(nibbles);
    var result = new Array(8).fill(0);
    for (var _index3 = 0; _index3 < bytes.length && _index3 < 8; _index3++) {
      result[_index3] = bytes[_index3];
    }
    return result;
  };
  var fromBytes = function (bytes) {
    if (bytes.length !== 9) {
      throw new Error('The buffer is too small');
    }
    var result;
    var reserve = [0x00, 0x05, 0x06, 0x07, 0x09, 0x7f, 0xef];
    var position = reserve.indexOf(bytes[0]) !== -1 ? 2 : 0;
    var nibbles = splitToNibbles(bytes.slice(0, 8));
    var deviceTypeNibble = nibbles[position];
    var deviceType = nibbles1[deviceTypeNibble];
    if (deviceType === '1' || deviceType === '3') {
      result = {
        ...fromBytesMtx(nibbles.slice(position)),
        descriptor: deviceType === '3' ? mtx3DeviceTypeDescriptorFromByte(bytes[8]) : {
          meterType: 'mtx1',
          ...toObject(mtx1DeviceTypeDescriptorMask, bytes[8])
        }
      };
    } else {
      result = deviceType === 'M' ? fromBytesM(nibbles) : fromBytesMtx2(nibbles);
    }
    return result;
  };
  var toBytes$1a = function (_ref, prefix) {
    var type = _ref.type,
      revision = _ref.revision,
      descriptor = _ref.descriptor;
    if (!type.startsWith('MTX ')) {
      throw new Error('Wrong format');
    }
    var result;
    var content = type.substring(4);
    var deviceTypeSymbol = type[4];
    if (deviceTypeSymbol === '1' || deviceTypeSymbol === '3') {
      result = toBytesMtx(content, prefix, revision);
    } else {
      result = deviceTypeSymbol === 'M' ? toBytesM(content) : toBytesMtx2(content);
    }
    if (descriptor?.meterType) {
      result[8] = descriptor.meterType === 'mtx1' ? fromObject(mtx1DeviceTypeDescriptorMask, descriptor) : mtx3DeviceTypeDescriptorToByte(descriptor);
    } else {
      result[8] = 0;
    }
    return result;
  };

  var getHexFromBytes = (function (bytes) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _Object$assign = Object.assign({}, hexFormatOptions, options),
      separator = _Object$assign.separator,
      prefix = _Object$assign.prefix;
    return bytes.map(function (byte) {
      return "".concat(prefix).concat(byte.toString(16).padStart(2, '0'));
    }).join(separator);
  });

  var DATA_REQUEST = 0x50;
  var DATA_RESPONSE = 0x51;
  var IDENT_REQUEST = 0x52;
  var IDENT_RESPONSE = 0x53;
  var L2_SET_ADDRESS_REQUEST = 0x54;
  var L2_SET_ADDRESS_RESPONSE = 0x55;
  var L2_CHECK_ADDRESS_REQUEST = 0x56;
  var L2_CHECK_ADDRESS_RESPONSE = 0x57;
  var L2_RM_ADDRESS_REQUEST = 0x58;
  var L2_RM_ADDRESS_RESPONSE = 0x59;
  var FRAGMENT_REQUEST = 0x5A;
  var FRAGMENT_RESPONSE = 0x5B;
  var INVALID = 0xFF;

  var frameTypes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DATA_REQUEST: DATA_REQUEST,
    DATA_RESPONSE: DATA_RESPONSE,
    FRAGMENT_REQUEST: FRAGMENT_REQUEST,
    FRAGMENT_RESPONSE: FRAGMENT_RESPONSE,
    IDENT_REQUEST: IDENT_REQUEST,
    IDENT_RESPONSE: IDENT_RESPONSE,
    INVALID: INVALID,
    L2_CHECK_ADDRESS_REQUEST: L2_CHECK_ADDRESS_REQUEST,
    L2_CHECK_ADDRESS_RESPONSE: L2_CHECK_ADDRESS_RESPONSE,
    L2_RM_ADDRESS_REQUEST: L2_RM_ADDRESS_REQUEST,
    L2_RM_ADDRESS_RESPONSE: L2_RM_ADDRESS_RESPONSE,
    L2_SET_ADDRESS_REQUEST: L2_SET_ADDRESS_REQUEST,
    L2_SET_ADDRESS_RESPONSE: L2_SET_ADDRESS_RESPONSE
  });

  var invertObject = (function (source) {
    var target = {};
    for (var property in source) {
      var value = source[property];
      target[value] = property;
    }
    return target;
  });

  var frameNames = invertObject(frameTypes);

  var ENERGY_REGISTER_FAULT = 0x01;
  var VENDOR_PAR_FAULT = 0x02;
  var OP_PAR_FAULT = 0x03;
  var ACCESS_LOCKED$1 = 0x10;
  var ERR_ACCESS$1 = 0x11;
  var CASE_OPEN$2 = 0x12;
  var CASE_CLOSE$1 = 0x13;
  var MAGNETIC_ON$2 = 0x14;
  var MAGNETIC_OFF$1 = 0x15;
  var CHANGE_ACCESS_KEY0$1 = 0x20;
  var CHANGE_ACCESS_KEY1$1 = 0x21;
  var CHANGE_ACCESS_KEY2$1 = 0x22;
  var CHANGE_ACCESS_KEY3$1 = 0x23;
  var CHANGE_PAR_LOCAL = 0x24;
  var CHANGE_PAR_REMOTE = 0x25;
  var CMD_CHANGE_TIME$1 = 0x26;
  var CMD_RELAY_ON$1 = 0x27;
  var CMD_RELAY_OFF$1 = 0x28;
  var CHANGE_COR_TIME$1 = 0x29;
  var ENERGY_REGISTER_OVERFLOW$1 = 0x31;
  var CHANGE_TARIFF_TABLE$1 = 0x32;
  var SET_TARIFF_TABLE$1 = 0x33;
  var SUMMER_TIME$1 = 0x34;
  var WINTER_TIME$1 = 0x35;
  var RELAY_ON$1 = 0x36;
  var RELAY_OFF$1 = 0x37;
  var RESTART$2 = 0x38;
  var WD_RESTART$1 = 0x39;
  var POWER_B_ON$1 = 0x3c;
  var POWER_B_OFF$1 = 0x3d;
  var POWER_C_ON$1 = 0x3e;
  var POWER_C_OFF$1 = 0x3f;
  var V_MAX_OK = 0x40;
  var V_MAX_OVER = 0x41;
  var V_MIN_OK = 0x42;
  var V_MIN_OVER = 0x43;
  var T_MAX_OK$1 = 0x44;
  var T_MAX_OVER$1 = 0x45;
  var T_MIN_OK$1 = 0x46;
  var T_MIN_OVER = 0x47;
  var F_MAX_OK$1 = 0x48;
  var F_MAX_OVER$1 = 0x49;
  var F_MIN_OK$1 = 0x4a;
  var F_MIN_OVER = 0x4b;
  var I_MAX_OK = 0x4c;
  var I_MAX_OVER = 0x4d;
  var P_MAX_OK = 0x4e;
  var P_MAX_OVER = 0x4f;
  var POWER_SALDO_OK = 0x50;
  var POWER_SALDO_OVER = 0x51;
  var BATTERY_OK$1 = 0x52;
  var BATTERY_FAULT$1 = 0x53;
  var CALIBRATION_OK$1 = 0x54;
  var CALIBRATION_FAULT$1 = 0x55;
  var CLOCK_OK$1 = 0x56;
  var CLOCK_FAULT$1 = 0x57;
  var POWER_A_OFF$1 = 0x58;
  var POWER_A_ON$1 = 0x59;
  var CMD_RELAY_2_ON$1 = 0x60;
  var CMD_RELAY_2_OFF$1 = 0x61;
  var CROSS_ZERO_ENT0 = 0x62;
  var CROSS_ZERO_ENT1$1 = 0x63;
  var CROSS_ZERO_ENT2$1 = 0x64;
  var CROSS_ZERO_ENT3$1 = 0x65;
  var CALIBRATION_FLAG_SET$1 = 0x66;
  var CALIBRATION_FLAG_RESET$1 = 0x67;
  var BAD_TEST_EEPROM$1 = 0x68;
  var BAD_TEST_FRAM$1 = 0x69;
  var SET_NEW_SALDO$1 = 0x70;
  var SALDO_PARAM_BAD$1 = 0x71;
  var ACC_PARAM_BAD = 0x72;
  var ACC_PARAM_EXT_BAD = 0x73;
  var CALC_PERIOD_BAD = 0x74;
  var BLOCK_TARIFF_BAD$1 = 0x75;
  var CALIBRATION_PARAM_BAD$1 = 0x76;
  var WINTER_SUMMER_BAD$1 = 0x77;
  var SALDO_EN_BAD = 0x78;
  var TIME_CORRECT$2 = 0x79;
  var CASE_KLEMA_OPEN$1 = 0x7a;
  var CASE_KLEMA_CLOSE$1 = 0x7b;
  var CASE_MODULE_OPEN$2 = 0x7c;
  var CASE_MODULE_CLOSE$1 = 0x7d;
  var POWER_GOOD_DIO = 0x7e;
  var RELAY_HARD_BAD_OFF$1 = 0x90;
  var RELAY_HARD_ON$1 = 0x91;
  var RELAY_HARD_BAD_ON$1 = 0x93;
  var RELAY_HARD_OFF$1 = 0x94;
  var CHANGE_TARIFF_TBL_2 = 0x98;
  var SET_SALDO_PARAM$1 = 0x9c;
  var POWER_OVER_RELAY_OFF$1 = 0x9d;
  var CROSS_ZERO_EXPORT_ENT0 = 0x9e;
  var CROSS_ZERO_EXPORT_ENT1$1 = 0x9f;
  var CROSS_ZERO_EXPORT_ENT2$1 = 0xa0;
  var CROSS_ZERO_EXPORT_ENT3$1 = 0xa1;
  var TIME_CORRECT_NEW = 0xa2;
  var EM_MAGNETIC_ON$1 = 0xb0;
  var EM_MAGNETIC_OFF$1 = 0xb1;
  var CURRENT_UNEQUAL_FAULT = 0xb2;
  var CURRENT_UNEQUAL_OK = 0xb3;
  var BIPOLAR_POWER_FAULT = 0xb4;
  var BIPOLAR_POWER_OK = 0xb5;
  var RESET_EM_FLAG$1 = 0xB6;
  var RESET_MAGNET_FLAG = 0xB7;
  var CHANGE_PARAM_CANAL = 0xB9;
  var RELAY_OFF_BAD_SALDO = 0xBA;
  var SET_DEMAND_EN_1MIN = 0xE0;
  var SET_DEMAND_EN_3MIN = 0xE1;
  var SET_DEMAND_EN_5MIN = 0xE2;
  var SET_DEMAND_EN_10MIN = 0xE3;
  var SET_DEMAND_EN_15MIN = 0xE4;
  var SET_DEMAND_EN_30MIN = 0xE5;
  var SET_DEMAND_EN_60MIN = 0xE6;
  var P_MAX_A_MINUS_OK$1 = 0xE7;
  var P_MAX_A_MINUS_OVER$1 = 0xE8;

  var events$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_LOCKED: ACCESS_LOCKED$1,
    ACC_PARAM_BAD: ACC_PARAM_BAD,
    ACC_PARAM_EXT_BAD: ACC_PARAM_EXT_BAD,
    BAD_TEST_EEPROM: BAD_TEST_EEPROM$1,
    BAD_TEST_FRAM: BAD_TEST_FRAM$1,
    BATTERY_FAULT: BATTERY_FAULT$1,
    BATTERY_OK: BATTERY_OK$1,
    BIPOLAR_POWER_FAULT: BIPOLAR_POWER_FAULT,
    BIPOLAR_POWER_OK: BIPOLAR_POWER_OK,
    BLOCK_TARIFF_BAD: BLOCK_TARIFF_BAD$1,
    CALC_PERIOD_BAD: CALC_PERIOD_BAD,
    CALIBRATION_FAULT: CALIBRATION_FAULT$1,
    CALIBRATION_FLAG_RESET: CALIBRATION_FLAG_RESET$1,
    CALIBRATION_FLAG_SET: CALIBRATION_FLAG_SET$1,
    CALIBRATION_OK: CALIBRATION_OK$1,
    CALIBRATION_PARAM_BAD: CALIBRATION_PARAM_BAD$1,
    CASE_CLOSE: CASE_CLOSE$1,
    CASE_KLEMA_CLOSE: CASE_KLEMA_CLOSE$1,
    CASE_KLEMA_OPEN: CASE_KLEMA_OPEN$1,
    CASE_MODULE_CLOSE: CASE_MODULE_CLOSE$1,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN$2,
    CASE_OPEN: CASE_OPEN$2,
    CHANGE_ACCESS_KEY0: CHANGE_ACCESS_KEY0$1,
    CHANGE_ACCESS_KEY1: CHANGE_ACCESS_KEY1$1,
    CHANGE_ACCESS_KEY2: CHANGE_ACCESS_KEY2$1,
    CHANGE_ACCESS_KEY3: CHANGE_ACCESS_KEY3$1,
    CHANGE_COR_TIME: CHANGE_COR_TIME$1,
    CHANGE_PARAM_CANAL: CHANGE_PARAM_CANAL,
    CHANGE_PAR_LOCAL: CHANGE_PAR_LOCAL,
    CHANGE_PAR_REMOTE: CHANGE_PAR_REMOTE,
    CHANGE_TARIFF_TABLE: CHANGE_TARIFF_TABLE$1,
    CHANGE_TARIFF_TBL_2: CHANGE_TARIFF_TBL_2,
    CLOCK_FAULT: CLOCK_FAULT$1,
    CLOCK_OK: CLOCK_OK$1,
    CMD_CHANGE_TIME: CMD_CHANGE_TIME$1,
    CMD_RELAY_2_OFF: CMD_RELAY_2_OFF$1,
    CMD_RELAY_2_ON: CMD_RELAY_2_ON$1,
    CMD_RELAY_OFF: CMD_RELAY_OFF$1,
    CMD_RELAY_ON: CMD_RELAY_ON$1,
    CROSS_ZERO_ENT0: CROSS_ZERO_ENT0,
    CROSS_ZERO_ENT1: CROSS_ZERO_ENT1$1,
    CROSS_ZERO_ENT2: CROSS_ZERO_ENT2$1,
    CROSS_ZERO_ENT3: CROSS_ZERO_ENT3$1,
    CROSS_ZERO_EXPORT_ENT0: CROSS_ZERO_EXPORT_ENT0,
    CROSS_ZERO_EXPORT_ENT1: CROSS_ZERO_EXPORT_ENT1$1,
    CROSS_ZERO_EXPORT_ENT2: CROSS_ZERO_EXPORT_ENT2$1,
    CROSS_ZERO_EXPORT_ENT3: CROSS_ZERO_EXPORT_ENT3$1,
    CURRENT_UNEQUAL_FAULT: CURRENT_UNEQUAL_FAULT,
    CURRENT_UNEQUAL_OK: CURRENT_UNEQUAL_OK,
    EM_MAGNETIC_OFF: EM_MAGNETIC_OFF$1,
    EM_MAGNETIC_ON: EM_MAGNETIC_ON$1,
    ENERGY_REGISTER_FAULT: ENERGY_REGISTER_FAULT,
    ENERGY_REGISTER_OVERFLOW: ENERGY_REGISTER_OVERFLOW$1,
    ERR_ACCESS: ERR_ACCESS$1,
    F_MAX_OK: F_MAX_OK$1,
    F_MAX_OVER: F_MAX_OVER$1,
    F_MIN_OK: F_MIN_OK$1,
    F_MIN_OVER: F_MIN_OVER,
    I_MAX_OK: I_MAX_OK,
    I_MAX_OVER: I_MAX_OVER,
    MAGNETIC_OFF: MAGNETIC_OFF$1,
    MAGNETIC_ON: MAGNETIC_ON$2,
    OP_PAR_FAULT: OP_PAR_FAULT,
    POWER_A_OFF: POWER_A_OFF$1,
    POWER_A_ON: POWER_A_ON$1,
    POWER_B_OFF: POWER_B_OFF$1,
    POWER_B_ON: POWER_B_ON$1,
    POWER_C_OFF: POWER_C_OFF$1,
    POWER_C_ON: POWER_C_ON$1,
    POWER_GOOD_DIO: POWER_GOOD_DIO,
    POWER_OVER_RELAY_OFF: POWER_OVER_RELAY_OFF$1,
    POWER_SALDO_OK: POWER_SALDO_OK,
    POWER_SALDO_OVER: POWER_SALDO_OVER,
    P_MAX_A_MINUS_OK: P_MAX_A_MINUS_OK$1,
    P_MAX_A_MINUS_OVER: P_MAX_A_MINUS_OVER$1,
    P_MAX_OK: P_MAX_OK,
    P_MAX_OVER: P_MAX_OVER,
    RELAY_HARD_BAD_OFF: RELAY_HARD_BAD_OFF$1,
    RELAY_HARD_BAD_ON: RELAY_HARD_BAD_ON$1,
    RELAY_HARD_OFF: RELAY_HARD_OFF$1,
    RELAY_HARD_ON: RELAY_HARD_ON$1,
    RELAY_OFF: RELAY_OFF$1,
    RELAY_OFF_BAD_SALDO: RELAY_OFF_BAD_SALDO,
    RELAY_ON: RELAY_ON$1,
    RESET_EM_FLAG: RESET_EM_FLAG$1,
    RESET_MAGNET_FLAG: RESET_MAGNET_FLAG,
    RESTART: RESTART$2,
    SALDO_EN_BAD: SALDO_EN_BAD,
    SALDO_PARAM_BAD: SALDO_PARAM_BAD$1,
    SET_DEMAND_EN_10MIN: SET_DEMAND_EN_10MIN,
    SET_DEMAND_EN_15MIN: SET_DEMAND_EN_15MIN,
    SET_DEMAND_EN_1MIN: SET_DEMAND_EN_1MIN,
    SET_DEMAND_EN_30MIN: SET_DEMAND_EN_30MIN,
    SET_DEMAND_EN_3MIN: SET_DEMAND_EN_3MIN,
    SET_DEMAND_EN_5MIN: SET_DEMAND_EN_5MIN,
    SET_DEMAND_EN_60MIN: SET_DEMAND_EN_60MIN,
    SET_NEW_SALDO: SET_NEW_SALDO$1,
    SET_SALDO_PARAM: SET_SALDO_PARAM$1,
    SET_TARIFF_TABLE: SET_TARIFF_TABLE$1,
    SUMMER_TIME: SUMMER_TIME$1,
    TIME_CORRECT: TIME_CORRECT$2,
    TIME_CORRECT_NEW: TIME_CORRECT_NEW,
    T_MAX_OK: T_MAX_OK$1,
    T_MAX_OVER: T_MAX_OVER$1,
    T_MIN_OK: T_MIN_OK$1,
    T_MIN_OVER: T_MIN_OVER,
    VENDOR_PAR_FAULT: VENDOR_PAR_FAULT,
    V_MAX_OK: V_MAX_OK,
    V_MAX_OVER: V_MAX_OVER,
    V_MIN_OK: V_MIN_OK,
    V_MIN_OVER: V_MIN_OVER,
    WD_RESTART: WD_RESTART$1,
    WINTER_SUMMER_BAD: WINTER_SUMMER_BAD$1,
    WINTER_TIME: WINTER_TIME$1
  });

  var eventNames$1 = invertObject(events$1);

  var defaultFrameHeader = {
    type: DATA_REQUEST,
    destination: 0xffff,
    source: 0xfffe
  };
  var TARIFF_PLAN_SIZE = 11;
  var SEASON_PROFILE_DAYS_NUMBER = 7;
  var SEASON_PROFILE_SIZE = 2 + SEASON_PROFILE_DAYS_NUMBER;
  var TARIFF_NUMBER$1 = 4;
  var baseDisplaySetMask = {
    SET_ALL_SEGMENT_DISPLAY: 0x0001,
    SOFTWARE_VERSION: 0x0002,
    TOTAL_ACTIVE_ENERGY: 0x0004,
    ACTIVE_ENERGY_T1: 0x0008,
    ACTIVE_ENERGY_T2: 0x0010,
    ACTIVE_ENERGY_T3: 0x0020,
    ACTIVE_ENERGY_T4: 0x0040,
    ACTIVE_POWER_PER_PHASE: 0x0080,
    ACTIVE_POWER_IN_NEUTRAL: 0x0100,
    CURRENT_IN_PHASE: 0x0200,
    CURRENT_IN_NEUTRAL: 0x0400,
    VOLTAGE: 0x0800,
    HOUR_MINUTE_SECOND: 0x1000,
    DATE_MONTH_YEAR: 0x2000,
    TOTAL_EXPORTED_ACTIVE_ENERGY: 0x4000,
    EXPORTED_ACTIVE_ENERGY_T1: 0x8000,
    EXPORTED_ACTIVE_ENERGY_T2: 0x00010000,
    EXPORTED_ACTIVE_ENERGY_T3: 0x00020000,
    EXPORTED_ACTIVE_ENERGY_T4: 0x00040000,
    POWER_FACTOR_PHASE_A: 0x00080000,
    POWER_FACTOR_PHASE_B: 0x00100000,
    BATTERY_VOLTAGE: 0x00200000,
    POWER_THRESHOLD_T1: 0x00400000,
    POWER_THRESHOLD_T2: 0x00800000,
    POWER_THRESHOLD_T3: 0x01000000,
    POWER_THRESHOLD_T4: 0x02000000,
    CURRENT_BALANCE: 0x20000000
  };
  var displaySetMask = {
    ...baseDisplaySetMask,
    AUTO_SCREEN_SCROLLING: 0x80000000
  };
  var displaySetExtMask = {
    ...baseDisplaySetMask,
    MAGNET_INDUCTION: 0x08000000,
    OPTOPORT_SPEED: 0x40000000,
    SORT_DISPLAY_SCREENS: 0x80000000
  };
  var relaySet1Mask = {
    RELAY_ON_Y: 0x01,
    RELAY_ON_CENTER: 0x02,
    RELAY_ON_PB: 0x04,
    RELAY_ON_TARIFF_1: 0x08,
    RELAY_ON_TARIFF_2: 0x10,
    RELAY_ON_TARIFF_3: 0x20,
    RELAY_ON_TARIFF_4: 0x40,
    RELAY_ON_V_GOOD: 0x80
  };
  var relaySet2Mask = {
    RELAY_OFF_Y: 0x01,
    RELAY_OFF_CENTER: 0x02,
    RELAY_OFF_TARIFF_1: 0x04,
    RELAY_OFF_TARIFF_2: 0x08,
    RELAY_OFF_TARIFF_3: 0x10,
    RELAY_OFF_TARIFF_4: 0x20,
    RELAY_OFF_I_LIMIT: 0x40,
    RELAY_OFF_V_BAD: 0x80
  };
  var relaySet3Mask = {
    RELAY_OFF_LIM_TARIFF_1: 0x02,
    RELAY_OFF_LIM_TARIFF_2: 0x04,
    RELAY_OFF_LIM_TARIFF_3: 0x08,
    RELAY_OFF_LIM_TARIFF_4: 0x10,
    RELAY_OFF_PF_MIN: 0x20
  };
  var relaySet4Mask = {
    RELAY_ON_TIMEOUT: 0x01,
    RELAY_ON_SALDO: 0x02,
    RELAY_OFF_SALDO: 0x04,
    RELAY_OFF_SALDO_SOFT: 0x08,
    RELAY_OFF_MAGNET: 0x10,
    RELAY_ON_MAGNET_TIMEOUT: 0x20,
    RELAY_ON_MAGNET_AUTO: 0x40
  };
  var relaySet5Mask = {
    RELAY_OFF_UNEQUAL_CURRENT: 0x01,
    RELAY_ON_UNEQUAL_CURRENT: 0x02,
    RELAY_OFF_BIPOLAR_POWER: 0x04,
    RELAY_ON_BIPOLAR_POWER: 0x08
  };
  var define1Mask$1 = {
    BLOCK_KEY_OPTOPORT: 0x02,
    MAGNET_SCREEN_CONST: 0x20
  };
  var eventStatusMask = {
    CASE_OPEN: 2 ** 0,
    MAGNETIC_ON: 2 ** 1,
    PARAMETERS_UPDATE_REMOTE: 2 ** 2,
    PARAMETERS_UPDATE_LOCAL: 2 ** 3,
    RESTART: 2 ** 4,
    ERROR_ACCESS: 2 ** 5,
    TIME_SET: 2 ** 6,
    TIME_CORRECT: 2 ** 7,
    DEVICE_FAILURE: 2 ** 8,
    CASE_TERMINAL_OPEN: 2 ** 9,
    CASE_MODULE_OPEN: 2 ** 10,
    TARIFF_TABLE_SET: 2 ** 11,
    TARIFF_TABLE_GET: 2 ** 12,
    PROTECTION_RESET_EM: 2 ** 13,
    PROTECTION_RESET_MAGNETIC: 2 ** 14
  };
  var extendedCurrentValues2RelayStatusMask = {
    RELAY_STATE: 2 ** 0,
    RELAY_UBAD: 2 ** 1,
    RELAY_UNEQ_CURRENT: 2 ** 4,
    RELAY_OFF_CENTER: 2 ** 5,
    RELAY_IMAX: 2 ** 6,
    RELAY_PMAX: 2 ** 7
  };
  var extendedCurrentValues2RelayStatus2Mask = {
    RELAY_COSFI: 2 ** 0,
    RELAY_SALDO_OFF_FLAG: 2 ** 1,
    RELAY_UNEQUIL_CURRENT_OFF: 2 ** 2,
    RELAY_BIPOLAR_POWER_OFF: 2 ** 3,
    RELAY_SALDO_OFF_ON_MAX_POWER: 2 ** 4,
    RELAY_HARD_ST1: 2 ** 5
  };
  var extendedCurrentValues2Status1Mask = {
    MAXVA: 2 ** 0,
    MINVA: 2 ** 1,
    MAXT: 2 ** 2,
    MINT: 2 ** 3,
    MAXF: 2 ** 4,
    MINF: 2 ** 5,
    MAXIA: 2 ** 6,
    MAXP: 2 ** 7
  };
  var extendedCurrentValues2Status2Mask = {
    MAX_POWER_SALDO: 2 ** 0,
    BATTERY_VBAT_BAD: 2 ** 1,
    CLOCK_UNSET: 2 ** 3,
    MIN_COS_FI: 2 ** 5
  };
  var extendedCurrentValues2Status3Mask = {
    UNEQUIL_CURRENT: 2 ** 0,
    BIPOLAR_POWER: 2 ** 1,
    POWER_A_NEGATIVE: 2 ** 6,
    POWER_B_NEGATIVE: 2 ** 7
  };
  var operatorParametersExtended3RelaySetMask = {
    RELAY_OFF_LIMIT_P_MINUS_T1: 0x08,
    RELAY_OFF_LIMIT_P_MINUS_T2: 0x10,
    RELAY_OFF_LIMIT_P_MINUS_T3: 0x20,
    RELAY_OFF_LIMIT_P_MINUS_T4: 0x40
  };
  function getPackedEnergies$1(buffer, energyType, tariffMapByte) {
    var byte = tariffMapByte >> TARIFF_NUMBER$1;
    var energies = new Array(TARIFF_NUMBER$1).fill(0);
    energies.forEach(function (energy, index) {
      var isTariffExists = !!extractBits(byte, 1, index + 1);
      if (isTariffExists) {
        energies[index] = buffer.getUint32();
      } else {
        energies[index] = null;
      }
    });
    return energies;
  }
  function setPackedEnergyType(buffer, energyType, energies) {
    var indexShift = 1 + TARIFF_NUMBER$1;
    var tariffsByte = energyType;
    energies.forEach(function (energy, index) {
      tariffsByte = fillBits(tariffsByte, 1, index + indexShift, Number(!!energy));
    });
    buffer.setUint8(tariffsByte);
  }
  function getEnergyPeriod(period) {
    if (period === 0xffff) {
      return {
        tariff: undefined,
        energy: undefined
      };
    }
    return {
      tariff: period >> 14 & 0x03,
      energy: period & 0x3fff
    };
  }
  function setEnergyPeriod(buffer, _ref) {
    var tariff = _ref.tariff,
      energy = _ref.energy;
    if (tariff !== undefined && energy !== undefined) {
      buffer.setUint16(tariff << 14 | energy & 0x3fff);
    } else {
      buffer.setUint16(0xffff);
    }
  }
  function CommandBinaryBuffer$2(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    BinaryBuffer.call(this, dataOrLength, isLittleEndian);
  }
  CommandBinaryBuffer$2.prototype = Object.create(BinaryBuffer.prototype);
  CommandBinaryBuffer$2.prototype.constructor = CommandBinaryBuffer$2;
  CommandBinaryBuffer$2.getDayProfileFromByte = function (value) {
    return {
      tariff: extractBits(value, 2, 1),
      isFirstHalfHour: !extractBits(value, 1, 3),
      hour: extractBits(value, 5, 4)
    };
  };
  CommandBinaryBuffer$2.getByteFromDayProfile = function (dayProfile) {
    var value = 0;
    value = fillBits(value, 2, 1, dayProfile.tariff);
    value = fillBits(value, 1, 3, +!dayProfile.isFirstHalfHour);
    value = fillBits(value, 5, 4, dayProfile.hour);
    return value;
  };
  CommandBinaryBuffer$2.getDefaultSeasonProfile = function () {
    return {
      month: 1,
      date: 1,
      dayIndexes: [0, 0, 0, 0, 0, 0, 0]
    };
  };
  CommandBinaryBuffer$2.getDefaultOperatorParameters = function () {
    return {
      vpThreshold: 265000,
      vThreshold: 156000,
      ipThreshold: 120000,
      pmaxThreshold0: 31800,
      pmaxThreshold1: 31800,
      pmaxThreshold2: 31800,
      pmaxThreshold3: 31800,
      speedOptoPort: 0,
      tint: 30,
      calcPeriodDate: 1,
      timeoutDisplay: 127,
      timeoutScreen: 7,
      displaySet: toObject(displaySetMask, 0x80003184),
      relaySet4: toObject(relaySet4Mask, 0),
      relaySet3: toObject(relaySet3Mask, 0),
      relaySet2: toObject(relaySet2Mask, 3),
      relaySet1: toObject(relaySet1Mask, 3),
      displayType: 0,
      ten: 0,
      timeoutRefresh: 240,
      deltaCorMin: 15,
      timeoutMagnetOff: 5,
      timeoutMagnetOn: 5,
      define1: toObject(define1Mask$1, 0),
      timeoutRelayOn: 1,
      timeoutRelayKey: 0,
      timeoutRelayAuto: 5,
      timeoutBadVAVB: 5,
      freqMax: 55,
      freqMin: 45,
      phMin: 0,
      year: 0,
      month: 0,
      date: 0,
      energyDecimalPoint: 2,
      typeMeter: 0,
      timeoutIMax: 5,
      timeoutPMax: 5,
      timeoutCos: 5,
      pMaxDef: 1,
      displaySetExt: toObject(displaySetExtMask, 0x8383fff),
      timeoutUneqCurrent: 5,
      timeoutBipolarPower: 5,
      relaySet5: toObject(relaySet5Mask, 0),
      timeCorrectPeriod: 24,
      timeCorrectPassHalfhour: false
    };
  };
  CommandBinaryBuffer$2.getDefaultOperatorParametersExtended3 = function () {
    return {
      pmaxMinusThreshold0: 0,
      pmaxMinusThreshold1: 0,
      pmaxMinusThreshold2: 0,
      pmaxMinusThreshold3: 0,
      relaySet: toObject(operatorParametersExtended3RelaySetMask, 0)
    };
  };
  CommandBinaryBuffer$2.prototype.getFrameHeader = function () {
    var type = this.getUint8();
    var typeName = frameNames[type];
    var destination = this.getUint16();
    var source = this.getUint16();
    return {
      type: type,
      typeName: typeName,
      destination: destination,
      source: source
    };
  };
  CommandBinaryBuffer$2.prototype.setFrameHeader = function (_ref2) {
    var _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? defaultFrameHeader.type : _ref2$type,
      _ref2$destination = _ref2.destination,
      destination = _ref2$destination === void 0 ? defaultFrameHeader.destination : _ref2$destination,
      _ref2$source = _ref2.source,
      source = _ref2$source === void 0 ? defaultFrameHeader.source : _ref2$source;
    this.setUint8(type);
    this.setUint16(destination);
    this.setUint16(source);
  };
  CommandBinaryBuffer$2.prototype.getDeviceId = function () {
    var manufacturer = getHexFromBytes(this.getBytes(3), {
      separator: ''
    });
    var type = this.getUint8();
    var year = this.getUint8();
    var serial = getHexFromBytes(this.getBytes(3), {
      separator: ''
    });
    return {
      manufacturer: manufacturer,
      type: type,
      year: year,
      serial: serial
    };
  };
  CommandBinaryBuffer$2.prototype.setDeviceId = function (_ref3) {
    var manufacturer = _ref3.manufacturer,
      type = _ref3.type,
      year = _ref3.year,
      serial = _ref3.serial;
    this.setBytes(getBytesFromHex(manufacturer));
    this.setUint8(type);
    this.setUint8(year);
    this.setBytes(getBytesFromHex(serial));
  };
  CommandBinaryBuffer$2.prototype.getDateTime = function () {
    return {
      isSummerTime: !!this.getUint8(),
      seconds: this.getUint8(),
      minutes: this.getUint8(),
      hours: this.getUint8(),
      day: this.getUint8(),
      date: this.getUint8(),
      month: this.getUint8(),
      year: this.getUint8()
    };
  };
  CommandBinaryBuffer$2.prototype.setDateTime = function (dateTime) {
    this.setUint8(dateTime.isSummerTime ? 1 : 0);
    this.setUint8(dateTime.seconds);
    this.setUint8(dateTime.minutes);
    this.setUint8(dateTime.hours);
    this.setUint8(dateTime.day || 0);
    this.setUint8(dateTime.date);
    this.setUint8(dateTime.month);
    this.setUint8(dateTime.year);
  };
  CommandBinaryBuffer$2.prototype.getTariffPlan = function () {
    return {
      id: this.getUint32(),
      tariffSet: this.getUint8(),
      activateYear: this.getUint8(),
      activateMonth: this.getUint8(),
      activateDay: this.getUint8(),
      specialProfilesArraySize: this.getUint8(),
      seasonProfilesArraySize: this.getUint8(),
      dayProfilesArraySize: this.getUint8()
    };
  };
  CommandBinaryBuffer$2.prototype.setTariffPlan = function (tariffPlan) {
    this.setUint32(tariffPlan.id);
    this.setUint8(tariffPlan.tariffSet);
    this.setUint8(tariffPlan.activateYear);
    this.setUint8(tariffPlan.activateMonth);
    this.setUint8(tariffPlan.activateDay);
    this.setUint8(tariffPlan.specialProfilesArraySize);
    this.setUint8(tariffPlan.seasonProfilesArraySize);
    this.setUint8(tariffPlan.dayProfilesArraySize);
  };
  CommandBinaryBuffer$2.prototype.getTimeCorrectionParameters = function () {
    return {
      monthTransitionSummer: this.getUint8(),
      dateTransitionSummer: this.getUint8(),
      hoursTransitionSummer: this.getUint8(),
      hoursCorrectSummer: this.getUint8(),
      monthTransitionWinter: this.getUint8(),
      dateTransitionWinter: this.getUint8(),
      hoursTransitionWinter: this.getUint8(),
      hoursCorrectWinter: this.getUint8(),
      isCorrectionNeeded: this.getUint8() === 1
    };
  };
  CommandBinaryBuffer$2.prototype.setTimeCorrectionParameters = function (parameters) {
    this.setUint8(parameters.monthTransitionSummer);
    this.setUint8(parameters.dateTransitionSummer);
    this.setUint8(parameters.hoursTransitionSummer);
    this.setUint8(parameters.hoursCorrectSummer);
    this.setUint8(parameters.monthTransitionWinter);
    this.setUint8(parameters.dateTransitionWinter);
    this.setUint8(parameters.hoursTransitionWinter);
    this.setUint8(parameters.hoursCorrectWinter);
    this.setUint8(+parameters.isCorrectionNeeded);
  };
  CommandBinaryBuffer$2.prototype.getDayProfile = function () {
    return CommandBinaryBuffer$2.getDayProfileFromByte(this.getUint8());
  };
  CommandBinaryBuffer$2.prototype.setDayProfile = function (dayProfile) {
    this.setUint8(CommandBinaryBuffer$2.getByteFromDayProfile(dayProfile));
  };
  CommandBinaryBuffer$2.prototype.getSeasonProfile = function () {
    var _this = this;
    return {
      month: this.getUint8(),
      date: this.getUint8(),
      dayIndexes: new Array(SEASON_PROFILE_DAYS_NUMBER).fill(0).map(function () {
        return _this.getUint8();
      })
    };
  };
  CommandBinaryBuffer$2.prototype.setSeasonProfile = function (seasonProfile) {
    var _this2 = this;
    this.setUint8(seasonProfile.month);
    this.setUint8(seasonProfile.date);
    seasonProfile.dayIndexes.forEach(function (value) {
      return _this2.setUint8(value);
    });
  };
  CommandBinaryBuffer$2.prototype.getSpecialDay = function () {
    return {
      month: this.getUint8(),
      date: this.getUint8(),
      dayIndex: this.getUint8(),
      isPeriodic: this.getUint8() === 0
    };
  };
  CommandBinaryBuffer$2.prototype.setSpecialDay = function (specialDay) {
    this.setUint8(specialDay.month);
    this.setUint8(specialDay.date);
    this.setUint8(specialDay.dayIndex);
    this.setUint8(+!specialDay.isPeriodic);
  };
  CommandBinaryBuffer$2.prototype.getDeviceType = function () {
    return fromBytes(this.getBytes(9));
  };
  CommandBinaryBuffer$2.prototype.setDeviceType = function (deviceType) {
    this.setBytes(toBytes$1a(deviceType));
  };
  CommandBinaryBuffer$2.prototype.getOperatorParameters = function () {
    var operatorParameters = {
      vpThreshold: this.getUint32(),
      vThreshold: this.getUint32(),
      ipThreshold: this.getUint32(),
      pmaxThreshold0: this.getUint32(),
      pmaxThreshold1: this.getUint32(),
      pmaxThreshold2: this.getUint32(),
      pmaxThreshold3: this.getUint32(),
      speedOptoPort: this.getUint8(),
      tint: this.getUint8(),
      calcPeriodDate: this.getUint8(),
      timeoutDisplay: this.getUint8(),
      timeoutScreen: this.getUint8(),
      displaySet: toObject(displaySetMask, this.getUint32()),
      relaySet4: toObject(relaySet4Mask, this.getUint8()),
      relaySet3: toObject(relaySet3Mask, this.getUint8()),
      relaySet2: toObject(relaySet2Mask, this.getUint8()),
      relaySet1: toObject(relaySet1Mask, this.getUint8()),
      displayType: this.getUint8(),
      ten: this.getUint8(),
      timeoutRefresh: this.getUint16(),
      deltaCorMin: this.getUint8(),
      timeoutMagnetOff: this.getUint8(),
      timeoutMagnetOn: this.getUint8(),
      define1: toObject(define1Mask$1, this.getUint8()),
      timeoutRelayOn: this.getUint8(),
      timeoutRelayKey: this.getUint8(),
      timeoutRelayAuto: this.getUint8(),
      timeoutBadVAVB: this.getUint8(),
      freqMax: this.getUint8(),
      freqMin: this.getUint8(),
      phMin: this.getUint16(),
      year: this.getUint8(),
      month: this.getUint8(),
      date: this.getUint8(),
      energyDecimalPoint: this.getUint8(),
      typeMeter: this.getUint8(),
      timeoutIMax: this.getUint8(),
      timeoutPMax: this.getUint8(),
      timeoutCos: this.getUint8(),
      pMaxDef: this.getUint8(),
      displaySetExt: toObject(displaySetExtMask, this.getUint32()),
      timeoutUneqCurrent: this.getUint8(),
      timeoutBipolarPower: this.getUint8(),
      relaySet5: toObject(relaySet5Mask, this.getUint8()),
      timeCorrectPeriod: 0,
      timeCorrectPassHalfhour: false
    };
    var timeCorrectPeriod = this.getUint8();
    operatorParameters.timeCorrectPeriod = timeCorrectPeriod & 0x7f;
    operatorParameters.timeCorrectPassHalfhour = !!(timeCorrectPeriod & 0x80);
    return operatorParameters;
  };
  CommandBinaryBuffer$2.prototype.setOperatorParameters = function (operatorParameters) {
    var timeCorrectPeriod = operatorParameters.timeCorrectPeriod | (operatorParameters.timeCorrectPassHalfhour ? 0x80 : 0);
    this.setUint32(operatorParameters.vpThreshold);
    this.setUint32(operatorParameters.vThreshold);
    this.setUint32(operatorParameters.ipThreshold);
    this.setUint32(operatorParameters.pmaxThreshold0);
    this.setUint32(operatorParameters.pmaxThreshold1);
    this.setUint32(operatorParameters.pmaxThreshold2);
    this.setUint32(operatorParameters.pmaxThreshold3);
    this.setUint8(operatorParameters.speedOptoPort);
    this.setUint8(operatorParameters.tint);
    this.setUint8(operatorParameters.calcPeriodDate);
    this.setUint8(operatorParameters.timeoutDisplay);
    this.setUint8(operatorParameters.timeoutScreen);
    this.setUint32(fromObject(displaySetMask, operatorParameters.displaySet));
    this.setUint8(fromObject(relaySet4Mask, operatorParameters.relaySet4));
    this.setUint8(fromObject(relaySet3Mask, operatorParameters.relaySet3));
    this.setUint8(fromObject(relaySet2Mask, operatorParameters.relaySet2));
    this.setUint8(fromObject(relaySet1Mask, operatorParameters.relaySet1));
    this.setUint8(operatorParameters.displayType);
    this.setUint8(operatorParameters.ten);
    this.setUint16(operatorParameters.timeoutRefresh);
    this.setUint8(operatorParameters.deltaCorMin);
    this.setUint8(operatorParameters.timeoutMagnetOff);
    this.setUint8(operatorParameters.timeoutMagnetOn);
    this.setUint8(fromObject(define1Mask$1, operatorParameters.define1));
    this.setUint8(operatorParameters.timeoutRelayOn);
    this.setUint8(operatorParameters.timeoutRelayKey);
    this.setUint8(operatorParameters.timeoutRelayAuto);
    this.setUint8(operatorParameters.timeoutBadVAVB);
    this.setUint8(operatorParameters.freqMax);
    this.setUint8(operatorParameters.freqMin);
    this.setUint16(operatorParameters.phMin);
    this.setUint8(operatorParameters.year);
    this.setUint8(operatorParameters.month);
    this.setUint8(operatorParameters.date);
    this.setUint8(operatorParameters.energyDecimalPoint);
    this.setUint8(operatorParameters.typeMeter);
    this.setUint8(operatorParameters.timeoutIMax);
    this.setUint8(operatorParameters.timeoutPMax);
    this.setUint8(operatorParameters.timeoutCos);
    this.setUint8(operatorParameters.pMaxDef);
    this.setUint32(fromObject(displaySetExtMask, operatorParameters.displaySetExt));
    this.setUint8(operatorParameters.timeoutUneqCurrent);
    this.setUint8(operatorParameters.timeoutBipolarPower);
    this.setUint8(fromObject(relaySet5Mask, operatorParameters.relaySet5));
    this.setUint8(timeCorrectPeriod);
  };
  CommandBinaryBuffer$2.prototype.getPackedEnergyWithType = function () {
    var byte = this.getUint8();
    var energyType = extractBits(byte, TARIFF_NUMBER$1, 1);
    var energies = getPackedEnergies$1(this, energyType, byte);
    return {
      energyType: energyType,
      energies: energies
    };
  };
  CommandBinaryBuffer$2.prototype.setPackedEnergyWithType = function (_ref4) {
    var _this3 = this;
    var energyType = _ref4.energyType,
      energies = _ref4.energies;
    if (energyType) {
      setPackedEnergyType(this, energyType, energies);
    }
    energies.forEach(function (energy) {
      if (energy !== null) {
        _this3.setUint32(energy);
      }
    });
  };
  CommandBinaryBuffer$2.prototype.getEnergies = function () {
    var _this4 = this;
    return new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return _this4.getInt32();
    });
  };
  CommandBinaryBuffer$2.prototype.setEnergies = function (energies) {
    var _this5 = this;
    energies.forEach(function (value) {
      return _this5.setUint32(value);
    });
  };
  CommandBinaryBuffer$2.prototype.getDate = function () {
    return {
      year: this.getUint8(),
      month: this.getUint8(),
      date: this.getUint8()
    };
  };
  CommandBinaryBuffer$2.prototype.setDate = function (date) {
    this.setUint8(date.year);
    this.setUint8(date.month);
    this.setUint8(date.date);
  };
  CommandBinaryBuffer$2.prototype.getSaldoParameters = function () {
    var _this6 = this;
    return {
      coefficients: new Array(4).fill(0).map(function () {
        return _this6.getUint32();
      }),
      decimalPointTariff: this.getUint8(),
      indicationThreshold: this.getInt32(),
      relayThreshold: this.getInt32(),
      mode: this.getUint8(),
      saldoOffTimeBegin: this.getUint8(),
      saldoOffTimeEnd: this.getUint8(),
      decimalPointIndication: this.getUint8(),
      powerThreshold: this.getUint32(),
      creditThreshold: this.getInt32()
    };
  };
  CommandBinaryBuffer$2.prototype.setSaldoParameters = function (saldoParameters) {
    var _this7 = this;
    saldoParameters.coefficients.forEach(function (value) {
      return _this7.setUint32(value);
    });
    this.setUint8(saldoParameters.decimalPointTariff);
    this.setInt32(saldoParameters.indicationThreshold);
    this.setInt32(saldoParameters.relayThreshold);
    this.setUint8(saldoParameters.mode);
    this.setUint8(saldoParameters.saldoOffTimeBegin);
    this.setUint8(saldoParameters.saldoOffTimeEnd);
    this.setUint8(saldoParameters.decimalPointIndication);
    this.setUint32(saldoParameters.powerThreshold);
    this.setInt32(saldoParameters.creditThreshold);
  };
  CommandBinaryBuffer$2.prototype.getEnergyPeriods = function (periodsNumber) {
    var _this8 = this;
    var periods = new Array(periodsNumber).fill(0).map(function () {
      return _this8.getUint16();
    });
    return periods.map(function (period) {
      return getEnergyPeriod(period);
    });
  };
  CommandBinaryBuffer$2.prototype.setEnergyPeriods = function (periods) {
    var _this9 = this;
    periods.forEach(function (period) {
      return setEnergyPeriod(_this9, period);
    });
  };
  CommandBinaryBuffer$2.prototype.getEventStatus = function () {
    var eventStatus = this.getUint16();
    return toObject(eventStatusMask, eventStatus);
  };
  CommandBinaryBuffer$2.prototype.setEventStatus = function (parameters) {
    this.setUint16(fromObject(eventStatusMask, parameters));
  };
  CommandBinaryBuffer$2.prototype.getExtendedCurrentValues2 = function () {
    var uBattery = this.getUint16();
    var relayStatus = toObject(extendedCurrentValues2RelayStatusMask, this.getUint8());
    var relayStatus2 = toObject(extendedCurrentValues2RelayStatus2Mask, this.getUint8());
    var status1 = toObject(extendedCurrentValues2Status1Mask, this.getUint8());
    var status2 = toObject(extendedCurrentValues2Status2Mask, this.getUint8());
    var status3 = toObject(extendedCurrentValues2Status3Mask, this.getUint8());
    return {
      uBattery: uBattery,
      relayStatus: relayStatus,
      relayStatus2: relayStatus2,
      status1: status1,
      status2: status2,
      status3: status3
    };
  };
  CommandBinaryBuffer$2.prototype.setExtendedCurrentValues2 = function (parameters) {
    var uBattery = parameters.uBattery,
      relayStatus = parameters.relayStatus,
      relayStatus2 = parameters.relayStatus2,
      status1 = parameters.status1,
      status2 = parameters.status2,
      status3 = parameters.status3;
    this.setUint16(uBattery);
    this.setUint8(fromObject(extendedCurrentValues2RelayStatusMask, relayStatus));
    this.setUint8(fromObject(extendedCurrentValues2RelayStatus2Mask, relayStatus2));
    this.setUint8(fromObject(extendedCurrentValues2Status1Mask, status1));
    this.setUint8(fromObject(extendedCurrentValues2Status2Mask, status2));
    this.setUint8(fromObject(extendedCurrentValues2Status3Mask, status3));
  };
  CommandBinaryBuffer$2.prototype.getEvent = function () {
    var data = {
      hours: this.getUint8(),
      minutes: this.getUint8(),
      seconds: this.getUint8(),
      event: this.getUint8()
    };
    var event = data.event;
    var bytesLeft = this.bytesLeft;
    data.eventName = eventNames$1[event];
    switch (event) {
      case POWER_OVER_RELAY_OFF$1:
        if (bytesLeft < 4) {
          return data;
        }
        data.power = [this.getUint8(), this.getUint8(), this.getUint8(), this.getUint8()];
        break;
      case CMD_CHANGE_TIME$1:
      case TIME_CORRECT$2:
        if (bytesLeft < 8) {
          return data;
        }
        data.newDate = this.getDateTime();
        break;
    }
    return data;
  };
  CommandBinaryBuffer$2.prototype.setEvent = function (event) {
    this.setUint8(event.hours);
    this.setUint8(event.minutes);
    this.setUint8(event.seconds);
    this.setUint8(event.event);
    switch (event.event) {
      case POWER_OVER_RELAY_OFF$1:
        for (var item of event.power) {
          this.setUint8(item);
        }
        break;
      case CMD_CHANGE_TIME$1:
      case TIME_CORRECT$2:
        this.setDateTime(event.newDate);
        break;
    }
  };
  CommandBinaryBuffer$2.prototype.getDemand = function () {
    var date0 = this.getUint8();
    var date1 = this.getUint8();
    return {
      date: {
        year: date0 >> 1,
        month: date0 << 3 & 0x0f | date1 >> 5,
        date: date1 & 0x1f
      },
      energyType: this.getUint8(),
      firstIndex: this.getUint16(),
      count: this.getUint8(),
      period: this.getUint8()
    };
  };
  CommandBinaryBuffer$2.prototype.setDemand = function (parameters) {
    var date0 = parameters.date.year << 1 | parameters.date.month >> 3 & 0x01;
    var date1 = parameters.date.month << 5 & 0xe0 | parameters.date.date & 0x1f;
    this.setUint8(date0);
    this.setUint8(date1);
    this.setUint8(parameters.energyType);
    this.setUint16(parameters.firstIndex);
    this.setUint8(parameters.count);
    this.setUint8(parameters.period);
  };
  CommandBinaryBuffer$2.prototype.getDayMaxDemandResponse = function () {
    var _this0 = this;
    var date = this.getDate();
    var power = new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return {
        hours: _this0.getUint8(),
        minutes: _this0.getUint8(),
        power: _this0.getUint32()
      };
    });
    return {
      date: date,
      power: power
    };
  };
  CommandBinaryBuffer$2.prototype.setDayMaxDemandResponse = function (parameters) {
    var _this1 = this;
    this.setDate(parameters.date);
    parameters.power.forEach(function (value) {
      _this1.setUint8(value.hours);
      _this1.setUint8(value.minutes);
      _this1.setUint32(value.power);
    });
  };
  CommandBinaryBuffer$2.prototype.getOperatorParametersExtended3 = function () {
    return {
      pmaxMinusThreshold0: this.getUint32(),
      pmaxMinusThreshold1: this.getUint32(),
      pmaxMinusThreshold2: this.getUint32(),
      pmaxMinusThreshold3: this.getUint32(),
      relaySet: toObject(operatorParametersExtended3RelaySetMask, this.getUint8())
    };
  };
  CommandBinaryBuffer$2.prototype.setOperatorParametersExtended3 = function (parameters) {
    var pmaxMinusThreshold0 = parameters.pmaxMinusThreshold0,
      pmaxMinusThreshold1 = parameters.pmaxMinusThreshold1,
      pmaxMinusThreshold2 = parameters.pmaxMinusThreshold2,
      pmaxMinusThreshold3 = parameters.pmaxMinusThreshold3,
      relaySet = parameters.relaySet;
    this.setUint32(pmaxMinusThreshold0);
    this.setUint32(pmaxMinusThreshold1);
    this.setUint32(pmaxMinusThreshold2);
    this.setUint32(pmaxMinusThreshold3);
    this.setUint8(fromObject(operatorParametersExtended3RelaySetMask, relaySet));
  };
  CommandBinaryBuffer$2.prototype.getMonthMaxPowerByTariffs = function () {
    var _this10 = this;
    return new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return {
        date: _this10.getUint8(),
        hours: _this10.getUint8(),
        minutes: _this10.getUint8(),
        power: _this10.getUint32()
      };
    });
  };
  CommandBinaryBuffer$2.prototype.setMonthMaxPowerByTariffs = function (tariffs) {
    var _this11 = this;
    tariffs.forEach(function (tariff) {
      _this11.setUint8(tariff.date);
      _this11.setUint8(tariff.hours);
      _this11.setUint8(tariff.minutes);
      _this11.setUint32(tariff.power);
    });
  };

  var getBase64FromBytes$1 = (function (bytes) {
    return btoa(bytes.map(function (byte) {
      return String.fromCharCode(byte);
    }).join(''));
  });

  var toBytes$19 = function (commandId) {
    var commandBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return [commandId, commandBytes.length].concat(_toConsumableArray(commandBytes));
  };

  var UNENCRYPTED = 0x00;
  var READ_ONLY = 0x03;

  var getEventStatus$1 = 0x01;
  var getEnergyDayPrevious$1 = 0x03;
  var getDeviceType$1 = 0x04;
  var getDeviceId$1 = 0x05;
  var getDateTime$1 = 0x07;
  var setDateTime$1 = 0x08;
  var setAccessKey$1 = 0x09;
  var getCurrentValues$1 = 0x0d;
  var getEnergy$1 = 0x0f;
  var setDayProfile$1 = 0x10;
  var setSeasonProfile$1 = 0x11;
  var setSpecialDay$1 = 0x12;
  var activateRatePlan$1 = 0x13;
  var prepareRatePlan$1 = 0x14;
  var getHalfHourDemand$1 = 0x15;
  var getDayDemand$1 = 0x16;
  var getMonthDemand$1 = 0x17;
  var turnRelayOn$1 = 0x18;
  var turnRelayOff$1 = 0x19;
  var setCorrectTime$1 = 0x1c;
  var getOperatorParameters$1 = 0x1e;
  var setOperatorParameters$1 = 0x1f;
  var getVersion$1 = 0x28;
  var getSaldo$1 = 0x29;
  var setSaldo$1 = 0x2a;
  var getRatePlanInfo$1 = 0x2c;
  var getExtendedCurrentValues2 = 0x2d;
  var getSaldoParameters$1 = 0x2e;
  var setSaldoParameters$1 = 0x2f;
  var getDayMaxDemand$1 = 0x31;
  var getMonthMaxDemand$1 = 0x32;
  var getEvents$1 = 0x33;
  var getEventsCounters$1 = 0x34;
  var resetPowerMaxDay$1 = 0x35;
  var resetPowerMaxMonth$1 = 0x36;
  var getCurrentStatusMeter$1 = 0x39;
  var getExtendedCurrentValues$1 = 0x3a;
  var getDayProfile$1 = 0x3b;
  var getSeasonProfile$1 = 0x3c;
  var getSpecialDay$1 = 0x3d;
  var getCorrectTime$1 = 0x3e;
  var getCriticalEvent$1 = 0x41;
  var runTariffPlan$1 = 0x46;
  var getDayMaxDemandPrevious = 0x4a;
  var getHalfHourDemandPrevious = 0x4b;
  var getDayDemandExport$1 = 0x4f;
  var getEnergyExportDayPrevious$1 = 0x50;
  var getMonthDemandExport$1 = 0x52;
  var getHalfHourDemandExport$1 = 0x53;
  var getDayMaxDemandExport$1 = 0x58;
  var getMonthMaxDemandExport$1 = 0x59;
  var getEnergyExport$1 = 0x5b;
  var setCorrectDateTime$1 = 0x5c;
  var setDisplayParam$1 = 0x5d;
  var getDisplayParam$1 = 0x5e;
  var setSpecialOperation$1 = 0x64;
  var getMagneticFieldThreshold$1 = 0x6d;
  var getHalfHourEnergies$1 = 0x6f;
  var getBuildVersion$1 = 0x70;
  var getOperatorParametersExtended3$1 = 0x71;
  var setOperatorParametersExtended3$1 = 0x72;
  var getDemand$1 = 0x76;
  var getMeterInfo$1 = 0x7a;

  var downlinkIds$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan$1,
    getBuildVersion: getBuildVersion$1,
    getCorrectTime: getCorrectTime$1,
    getCriticalEvent: getCriticalEvent$1,
    getCurrentStatusMeter: getCurrentStatusMeter$1,
    getCurrentValues: getCurrentValues$1,
    getDateTime: getDateTime$1,
    getDayDemand: getDayDemand$1,
    getDayDemandExport: getDayDemandExport$1,
    getDayMaxDemand: getDayMaxDemand$1,
    getDayMaxDemandExport: getDayMaxDemandExport$1,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious,
    getDayProfile: getDayProfile$1,
    getDemand: getDemand$1,
    getDeviceId: getDeviceId$1,
    getDeviceType: getDeviceType$1,
    getDisplayParam: getDisplayParam$1,
    getEnergy: getEnergy$1,
    getEnergyDayPrevious: getEnergyDayPrevious$1,
    getEnergyExport: getEnergyExport$1,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious$1,
    getEventStatus: getEventStatus$1,
    getEvents: getEvents$1,
    getEventsCounters: getEventsCounters$1,
    getExtendedCurrentValues: getExtendedCurrentValues$1,
    getExtendedCurrentValues2: getExtendedCurrentValues2,
    getHalfHourDemand: getHalfHourDemand$1,
    getHalfHourDemandExport: getHalfHourDemandExport$1,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious,
    getHalfHourEnergies: getHalfHourEnergies$1,
    getMagneticFieldThreshold: getMagneticFieldThreshold$1,
    getMeterInfo: getMeterInfo$1,
    getMonthDemand: getMonthDemand$1,
    getMonthDemandExport: getMonthDemandExport$1,
    getMonthMaxDemand: getMonthMaxDemand$1,
    getMonthMaxDemandExport: getMonthMaxDemandExport$1,
    getOperatorParameters: getOperatorParameters$1,
    getOperatorParametersExtended3: getOperatorParametersExtended3$1,
    getRatePlanInfo: getRatePlanInfo$1,
    getSaldo: getSaldo$1,
    getSaldoParameters: getSaldoParameters$1,
    getSeasonProfile: getSeasonProfile$1,
    getSpecialDay: getSpecialDay$1,
    getVersion: getVersion$1,
    prepareRatePlan: prepareRatePlan$1,
    resetPowerMaxDay: resetPowerMaxDay$1,
    resetPowerMaxMonth: resetPowerMaxMonth$1,
    runTariffPlan: runTariffPlan$1,
    setAccessKey: setAccessKey$1,
    setCorrectDateTime: setCorrectDateTime$1,
    setCorrectTime: setCorrectTime$1,
    setDateTime: setDateTime$1,
    setDayProfile: setDayProfile$1,
    setDisplayParam: setDisplayParam$1,
    setOperatorParameters: setOperatorParameters$1,
    setOperatorParametersExtended3: setOperatorParametersExtended3$1,
    setSaldo: setSaldo$1,
    setSaldoParameters: setSaldoParameters$1,
    setSeasonProfile: setSeasonProfile$1,
    setSpecialDay: setSpecialDay$1,
    setSpecialOperation: setSpecialOperation$1,
    turnRelayOff: turnRelayOff$1,
    turnRelayOn: turnRelayOn$1
  });

  invertObject(downlinkIds$1);

  var id$16 = activateRatePlan$1;
  var maxSize$y = 1 + TARIFF_PLAN_SIZE;
  var toBytes$18 = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$y);
    buffer.setUint8(parameters.tariffTable);
    buffer.setTariffPlan(parameters.tariffPlan);
    return toBytes$19(id$16, buffer.data);
  };

  var id$15 = getBuildVersion$1;
  var toBytes$17 = function () {
    return toBytes$19(id$15);
  };

  var id$14 = getCorrectTime$1;
  var toBytes$16 = function () {
    return toBytes$19(id$14);
  };

  var CASE_OPEN$1 = 0;
  var MAGNETIC_ON$1 = 1;
  var PARAMETERS_UPDATE_REMOTE = 2;
  var PARAMETERS_UPDATE_LOCAL = 3;
  var RESTART$1 = 4;
  var ERROR_ACCESS = 5;
  var TIME_SET = 6;
  var TIME_CORRECT$1 = 7;
  var DEVICE_FAILURE = 8;
  var CASE_TERMINAL_OPEN = 9;
  var CASE_MODULE_OPEN$1 = 10;
  var TARIFF_TABLE_SET = 11;
  var TARIFF_TABLE_GET = 12;
  var PROTECTION_RESET_EM = 13;
  var PROTECTION_RESET_MAGNETIC = 14;

  var criticalEvents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN$1,
    CASE_OPEN: CASE_OPEN$1,
    CASE_TERMINAL_OPEN: CASE_TERMINAL_OPEN,
    DEVICE_FAILURE: DEVICE_FAILURE,
    ERROR_ACCESS: ERROR_ACCESS,
    MAGNETIC_ON: MAGNETIC_ON$1,
    PARAMETERS_UPDATE_LOCAL: PARAMETERS_UPDATE_LOCAL,
    PARAMETERS_UPDATE_REMOTE: PARAMETERS_UPDATE_REMOTE,
    PROTECTION_RESET_EM: PROTECTION_RESET_EM,
    PROTECTION_RESET_MAGNETIC: PROTECTION_RESET_MAGNETIC,
    RESTART: RESTART$1,
    TARIFF_TABLE_GET: TARIFF_TABLE_GET,
    TARIFF_TABLE_SET: TARIFF_TABLE_SET,
    TIME_CORRECT: TIME_CORRECT$1,
    TIME_SET: TIME_SET
  });

  invertObject(criticalEvents);

  var id$13 = getCurrentStatusMeter$1;
  var toBytes$15 = function () {
    return toBytes$19(id$13);
  };

  var id$12 = getCurrentValues$1;
  var toBytes$14 = function () {
    return toBytes$19(id$12);
  };

  var id$11 = getDateTime$1;
  var toBytes$13 = function () {
    return toBytes$19(id$11);
  };

  var id$10 = getDayMaxDemand$1;
  var maxSize$x = 3;
  var toBytes$12 = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$x);
    buffer.setDate(parameters.date);
    return toBytes$19(id$10, buffer.data);
  };

  var id$ = getDayMaxDemandExport$1;
  var maxSize$w = 3;
  var toBytes$11 = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$w);
    buffer.setDate(parameters.date);
    return toBytes$19(id$, buffer.data);
  };

  var id$_ = getDayProfile$1;
  var maxSize$v = 3;
  var toBytes$10 = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$v);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    buffer.setUint8(parameters.isActive ? 0 : 1);
    return toBytes$19(id$_, buffer.data);
  };

  var id$Z = getDeviceId$1;
  var toBytes$ = function () {
    return toBytes$19(id$Z);
  };

  var id$Y = getDeviceType$1;
  var toBytes$_ = function () {
    return toBytes$19(id$Y);
  };

  var OK = 0;
  var UNKNOWN_COMMAND = 0x80;
  var NOT_ALIGNED_DATA = 0x81;
  var DECRYPTION_FAILURE = 0x82;
  var UNKNOWN_PROTOCOL = 0x83;
  var BAD_MESSAGE = 0x84;
  var BAD_DATA_LENGTH = 0x85;
  var BAD_ARRAY_INDEX = 0x86;
  var NOT_PREPARED_RATE_PLAN = 0x87;
  var BAD_RATE_PLAN_ID = 0x88;
  var BAD_RATE_PLAN_SIZE = 0x89;
  var BAD_RESPONSE_LENGTH = 0x90;
  var NO_DATA_FOR_DATE = 0x91;
  var CALIBRATION_DISABLED = 0x92;
  var ACCESS_DENIED = 0x93;
  var BAD_SALDO_WRITE = 0x95;
  var BLOCKED_METER = 0x97;
  var UNENCRYPTED_COMMAND_DISABLED = 0x98;
  var TIME_CORRECTION_FAILURE = 0x99;
  var INVALID_CORRECTION_INTERVAL = 0x9a;
  var TIME_CORRECTION_OUT_HALF_HOUR_DISABLED = 0x9b;
  var BAD_BLOCK_NUMBER = 0x9c;
  var OUT_OFF_RANGE = 0x9f;
  var SET_METER_TYPE_FAILURE = 0xa0;
  var INTERNAL = 0xf0;

  var resultCodes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_DENIED: ACCESS_DENIED,
    BAD_ARRAY_INDEX: BAD_ARRAY_INDEX,
    BAD_BLOCK_NUMBER: BAD_BLOCK_NUMBER,
    BAD_DATA_LENGTH: BAD_DATA_LENGTH,
    BAD_MESSAGE: BAD_MESSAGE,
    BAD_RATE_PLAN_ID: BAD_RATE_PLAN_ID,
    BAD_RATE_PLAN_SIZE: BAD_RATE_PLAN_SIZE,
    BAD_RESPONSE_LENGTH: BAD_RESPONSE_LENGTH,
    BAD_SALDO_WRITE: BAD_SALDO_WRITE,
    BLOCKED_METER: BLOCKED_METER,
    CALIBRATION_DISABLED: CALIBRATION_DISABLED,
    DECRYPTION_FAILURE: DECRYPTION_FAILURE,
    INTERNAL: INTERNAL,
    INVALID_CORRECTION_INTERVAL: INVALID_CORRECTION_INTERVAL,
    NOT_ALIGNED_DATA: NOT_ALIGNED_DATA,
    NOT_PREPARED_RATE_PLAN: NOT_PREPARED_RATE_PLAN,
    NO_DATA_FOR_DATE: NO_DATA_FOR_DATE,
    OK: OK,
    OUT_OFF_RANGE: OUT_OFF_RANGE,
    SET_METER_TYPE_FAILURE: SET_METER_TYPE_FAILURE,
    TIME_CORRECTION_FAILURE: TIME_CORRECTION_FAILURE,
    TIME_CORRECTION_OUT_HALF_HOUR_DISABLED: TIME_CORRECTION_OUT_HALF_HOUR_DISABLED,
    UNENCRYPTED_COMMAND_DISABLED: UNENCRYPTED_COMMAND_DISABLED,
    UNKNOWN_COMMAND: UNKNOWN_COMMAND,
    UNKNOWN_PROTOCOL: UNKNOWN_PROTOCOL
  });

  invertObject(resultCodes);

  var SET_ALL_SEGMENT_DISPLAY$1 = 1;
  var SOFTWARE_VERSION$1 = 2;
  var TOTAL_ACTIVE_ENERGY$1 = 3;
  var ACTIVE_ENERGY_T1$1 = 4;
  var ACTIVE_ENERGY_T2$1 = 5;
  var ACTIVE_ENERGY_T3$1 = 6;
  var ACTIVE_ENERGY_T4$1 = 7;
  var ACTIVE_POWER_PER_PHASE = 8;
  var ACTIVE_POWER_IN_NEUTRAL = 9;
  var CURRENT_IN_PHASE = 10;
  var CURRENT_IN_NEUTRAL$1 = 11;
  var VOLTAGE = 12;
  var HOUR_MINUTE_SECOND$1 = 13;
  var DATE_MONTH_YEAR$1 = 14;
  var TOTAL_EXPORTED_ACTIVE_ENERGY$1 = 15;
  var EXPORTED_ACTIVE_ENERGY_T1$1 = 16;
  var EXPORTED_ACTIVE_ENERGY_T2$1 = 17;
  var EXPORTED_ACTIVE_ENERGY_T3$1 = 18;
  var EXPORTED_ACTIVE_ENERGY_T4$1 = 19;
  var POWER_FACTOR_PHASE_A$1 = 20;
  var POWER_FACTOR_PHASE_B$1 = 21;
  var BATTERY_VOLTAGE$1 = 22;
  var POWER_THRESHOLD_T1$1 = 23;
  var POWER_THRESHOLD_T2$1 = 24;
  var POWER_THRESHOLD_T3$1 = 25;
  var POWER_THRESHOLD_T4$1 = 26;
  var MAGNET_INDUCTION$1 = 28;
  var CURRENT_BALANCE$1 = 30;
  var OPTOPORT_SPEED$1 = 31;

  var screenIds$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACTIVE_ENERGY_T1: ACTIVE_ENERGY_T1$1,
    ACTIVE_ENERGY_T2: ACTIVE_ENERGY_T2$1,
    ACTIVE_ENERGY_T3: ACTIVE_ENERGY_T3$1,
    ACTIVE_ENERGY_T4: ACTIVE_ENERGY_T4$1,
    ACTIVE_POWER_IN_NEUTRAL: ACTIVE_POWER_IN_NEUTRAL,
    ACTIVE_POWER_PER_PHASE: ACTIVE_POWER_PER_PHASE,
    BATTERY_VOLTAGE: BATTERY_VOLTAGE$1,
    CURRENT_BALANCE: CURRENT_BALANCE$1,
    CURRENT_IN_NEUTRAL: CURRENT_IN_NEUTRAL$1,
    CURRENT_IN_PHASE: CURRENT_IN_PHASE,
    DATE_MONTH_YEAR: DATE_MONTH_YEAR$1,
    EXPORTED_ACTIVE_ENERGY_T1: EXPORTED_ACTIVE_ENERGY_T1$1,
    EXPORTED_ACTIVE_ENERGY_T2: EXPORTED_ACTIVE_ENERGY_T2$1,
    EXPORTED_ACTIVE_ENERGY_T3: EXPORTED_ACTIVE_ENERGY_T3$1,
    EXPORTED_ACTIVE_ENERGY_T4: EXPORTED_ACTIVE_ENERGY_T4$1,
    HOUR_MINUTE_SECOND: HOUR_MINUTE_SECOND$1,
    MAGNET_INDUCTION: MAGNET_INDUCTION$1,
    OPTOPORT_SPEED: OPTOPORT_SPEED$1,
    POWER_FACTOR_PHASE_A: POWER_FACTOR_PHASE_A$1,
    POWER_FACTOR_PHASE_B: POWER_FACTOR_PHASE_B$1,
    POWER_THRESHOLD_T1: POWER_THRESHOLD_T1$1,
    POWER_THRESHOLD_T2: POWER_THRESHOLD_T2$1,
    POWER_THRESHOLD_T3: POWER_THRESHOLD_T3$1,
    POWER_THRESHOLD_T4: POWER_THRESHOLD_T4$1,
    SET_ALL_SEGMENT_DISPLAY: SET_ALL_SEGMENT_DISPLAY$1,
    SOFTWARE_VERSION: SOFTWARE_VERSION$1,
    TOTAL_ACTIVE_ENERGY: TOTAL_ACTIVE_ENERGY$1,
    TOTAL_EXPORTED_ACTIVE_ENERGY: TOTAL_EXPORTED_ACTIVE_ENERGY$1,
    VOLTAGE: VOLTAGE
  });

  invertObject(screenIds$1);

  var getDayEnergies = 0x78;
  var getDayMaxPower = 0x79;
  var errorResponse$1 = 0xfe;

  var uplinkIds$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan$1,
    errorResponse: errorResponse$1,
    getBuildVersion: getBuildVersion$1,
    getCorrectTime: getCorrectTime$1,
    getCriticalEvent: getCriticalEvent$1,
    getCurrentStatusMeter: getCurrentStatusMeter$1,
    getCurrentValues: getCurrentValues$1,
    getDateTime: getDateTime$1,
    getDayDemand: getDayDemand$1,
    getDayDemandExport: getDayDemandExport$1,
    getDayEnergies: getDayEnergies,
    getDayMaxDemand: getDayMaxDemand$1,
    getDayMaxDemandExport: getDayMaxDemandExport$1,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious,
    getDayMaxPower: getDayMaxPower,
    getDayProfile: getDayProfile$1,
    getDemand: getDemand$1,
    getDeviceId: getDeviceId$1,
    getDeviceType: getDeviceType$1,
    getDisplayParam: getDisplayParam$1,
    getEnergy: getEnergy$1,
    getEnergyDayPrevious: getEnergyDayPrevious$1,
    getEnergyExport: getEnergyExport$1,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious$1,
    getEventStatus: getEventStatus$1,
    getEvents: getEvents$1,
    getEventsCounters: getEventsCounters$1,
    getExtendedCurrentValues: getExtendedCurrentValues$1,
    getExtendedCurrentValues2: getExtendedCurrentValues2,
    getHalfHourDemand: getHalfHourDemand$1,
    getHalfHourDemandExport: getHalfHourDemandExport$1,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious,
    getHalfHourEnergies: getHalfHourEnergies$1,
    getMagneticFieldThreshold: getMagneticFieldThreshold$1,
    getMeterInfo: getMeterInfo$1,
    getMonthDemand: getMonthDemand$1,
    getMonthDemandExport: getMonthDemandExport$1,
    getMonthMaxDemand: getMonthMaxDemand$1,
    getMonthMaxDemandExport: getMonthMaxDemandExport$1,
    getOperatorParameters: getOperatorParameters$1,
    getOperatorParametersExtended3: getOperatorParametersExtended3$1,
    getRatePlanInfo: getRatePlanInfo$1,
    getSaldo: getSaldo$1,
    getSaldoParameters: getSaldoParameters$1,
    getSeasonProfile: getSeasonProfile$1,
    getSpecialDay: getSpecialDay$1,
    getVersion: getVersion$1,
    prepareRatePlan: prepareRatePlan$1,
    resetPowerMaxDay: resetPowerMaxDay$1,
    resetPowerMaxMonth: resetPowerMaxMonth$1,
    runTariffPlan: runTariffPlan$1,
    setAccessKey: setAccessKey$1,
    setCorrectDateTime: setCorrectDateTime$1,
    setCorrectTime: setCorrectTime$1,
    setDateTime: setDateTime$1,
    setDayProfile: setDayProfile$1,
    setDisplayParam: setDisplayParam$1,
    setOperatorParameters: setOperatorParameters$1,
    setOperatorParametersExtended3: setOperatorParametersExtended3$1,
    setSaldo: setSaldo$1,
    setSaldoParameters: setSaldoParameters$1,
    setSeasonProfile: setSeasonProfile$1,
    setSpecialDay: setSpecialDay$1,
    setSpecialOperation: setSpecialOperation$1,
    turnRelayOff: turnRelayOff$1,
    turnRelayOn: turnRelayOn$1
  });

  invertObject(uplinkIds$1);

  var id$X = getEvents$1;
  var maxSize$u = 4;
  var toBytes$Z = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$u);
    buffer.setDate(parameters.date);
    buffer.setUint8(parameters.offset);
    return toBytes$19(id$X, buffer.data);
  };

  var id$W = getEventsCounters$1;
  var toBytes$Y = function () {
    return toBytes$19(id$W);
  };

  var id$V = getEventStatus$1;
  var toBytes$X = function () {
    return toBytes$19(id$V);
  };

  var id$U = getExtendedCurrentValues$1;
  var toBytes$W = function () {
    return toBytes$19(id$U);
  };

  var id$T = getHalfHourDemand$1;
  var maxSize$t = 3;
  var toBytes$V = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$t);
    buffer.setDate(parameters.date);
    return toBytes$19(id$T, buffer.data);
  };

  var id$S = getHalfHourDemandExport$1;
  var maxSize$s = 3;
  var toBytes$U = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$s);
    buffer.setDate(parameters.date);
    return toBytes$19(id$S, buffer.data);
  };

  var TARIFF_NUMBER = 4;
  var ENERGY_NAMES = ['A+', 'A+R+', 'A+R-', 'A-', 'A-R+', 'A-R-'];
  var UNDEFINED_ENERGY_VALUE = 0xffffffff;
  var energiesMask = {
    'A+': 0x01,
    'A+R+': 0x02,
    'A+R-': 0x04,
    'A-': 0x08,
    'A-R+': 0x10,
    'A-R-': 0x20
  };
  var getEnergiesFlags = function (energies) {
    var booleanObject = {};
    Object.keys(energies).forEach(function (name) {
      booleanObject[name] = !!energies[name];
    });
    return fromObject(energiesMask, booleanObject);
  };
  var getAPlusTariffBit = function (tariff) {
    return tariff < TARIFF_NUMBER ? 1 << tariff : 0;
  };
  var getAMinusTariffBit = function (tariff) {
    return tariff < TARIFF_NUMBER ? 1 << tariff << 4 : 0;
  };
  var getTariffEnergiesFlag = function (tariff, energies) {
    var flag = 0;
    if (tariff < TARIFF_NUMBER) {
      if (energies['A+'] || energies['A+R+'] || energies['A+R-']) {
        flag |= getAPlusTariffBit(tariff);
      }
      if (energies['A-'] || energies['A-R+'] || energies['A-R-']) {
        flag |= getAMinusTariffBit(tariff);
      }
    }
    return flag;
  };
  function CommandBinaryBuffer$1(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    BinaryBuffer.call(this, dataOrLength, isLittleEndian);
  }
  CommandBinaryBuffer$1.prototype = Object.create(BinaryBuffer.prototype);
  CommandBinaryBuffer$1.prototype.constructor = CommandBinaryBuffer$1;
  CommandBinaryBuffer$1.prototype.getDate = function () {
    var date0 = this.getUint8();
    var date1 = this.getUint8();
    return {
      year: date0 >> 1,
      month: date0 << 3 & 0x0f | date1 >> 5,
      date: date1 & 0x1f
    };
  };
  CommandBinaryBuffer$1.prototype.setDate = function (_ref) {
    var year = _ref.year,
      month = _ref.month,
      date = _ref.date;
    var date0 = year << 1 | month >> 3 & 0x01;
    var date1 = month << 5 & 0xe0 | date & 0x1f;
    this.setUint8(date0);
    this.setUint8(date1);
  };
  CommandBinaryBuffer$1.prototype.getEnergiesFlags = function () {
    var byte = this.getUint8();
    return toObject(energiesMask, byte);
  };
  CommandBinaryBuffer$1.prototype.setEnergiesFlags = function (energies) {
    this.setUint8(getEnergiesFlags(energies));
  };
  CommandBinaryBuffer$1.prototype.getHalfHourEnergy1 = function (halfhoursNumber) {
    var halfhours = [];
    for (var index = 0; index < halfhoursNumber; index++) {
      var value = this.getUint16();
      var tariff = value >> 14 & 0b11;
      var energy = value & 16383;
      halfhours.push(value === UNDEFINED_ENERGY_VALUE ? undefined : {
        tariff: tariff,
        energy: energy
      });
    }
    return halfhours;
  };
  CommandBinaryBuffer$1.prototype.setHalfHourEnergy1 = function (halfhours) {
    if (halfhours) {
      for (var index = 0; index < halfhours.length; index++) {
        var _halfhours$index = halfhours[index],
          tariff = _halfhours$index.tariff,
          energy = _halfhours$index.energy;
        var value = tariff << 14 | energy;
        this.setUint16(value === undefined ? UNDEFINED_ENERGY_VALUE : value);
      }
    }
  };
  CommandBinaryBuffer$1.prototype.getHalfHourEnergy3 = function (halfhoursNumber) {
    var halfhours = [];
    for (var index = 0; index < halfhoursNumber; index++) {
      var value = this.getUint16();
      halfhours.push(value === UNDEFINED_ENERGY_VALUE ? undefined : value);
    }
    return halfhours;
  };
  CommandBinaryBuffer$1.prototype.setHalfHourEnergy3 = function (halfhours) {
    if (halfhours) {
      for (var index = 0; index < halfhours.length; index++) {
        var value = halfhours[index];
        this.setUint16(value === undefined ? UNDEFINED_ENERGY_VALUE : value);
      }
    }
  };
  CommandBinaryBuffer$1.prototype.getHalfHourEnergies1 = function (energiesFlags, halfhoursNumber) {
    var _this = this;
    var energies = {};
    ENERGY_NAMES.forEach(function (energyName) {
      if (energiesFlags[energyName]) {
        energies[energyName] = _this.getHalfHourEnergy1(halfhoursNumber);
      }
    });
    return energies;
  };
  CommandBinaryBuffer$1.prototype.getHalfHourEnergies3 = function (energiesFlags, halfhoursNumber) {
    var _this2 = this;
    var energies = {};
    ENERGY_NAMES.forEach(function (energyName) {
      if (energiesFlags[energyName]) {
        energies[energyName] = _this2.getHalfHourEnergy3(halfhoursNumber);
      }
    });
    return energies;
  };
  CommandBinaryBuffer$1.prototype.setHalfHourEnergies1 = function (energies) {
    var _this3 = this;
    ENERGY_NAMES.forEach(function (energyName) {
      _this3.setHalfHourEnergy1(energies[energyName]);
    });
  };
  CommandBinaryBuffer$1.prototype.setHalfHourEnergies3 = function (energies) {
    var _this4 = this;
    ENERGY_NAMES.forEach(function (energyName) {
      _this4.setHalfHourEnergy3(energies[energyName]);
    });
  };
  CommandBinaryBuffer$1.prototype.getAPlusTariffEnergies = function (energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A+']) {
      energies['A+'] = this.getUint32();
    }
    if (energyFlags & energiesMask['A+R+']) {
      energies['A+R+'] = this.getUint32();
    }
    if (energyFlags & energiesMask['A+R-']) {
      energies['A+R-'] = this.getUint32();
    }
    return energies;
  };
  CommandBinaryBuffer$1.prototype.setAPlusTariffEnergies = function (energies) {
    if (energies) {
      if (energies['A+']) {
        this.setUint32(energies['A+']);
      }
      if (energies['A+R+']) {
        this.setUint32(energies['A+R+']);
      }
      if (energies['A+R-']) {
        this.setUint32(energies['A+R-']);
      }
    }
  };
  CommandBinaryBuffer$1.prototype.getAMinusTariffEnergies = function (energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A-']) {
      energies['A-'] = this.getUint32();
    }
    if (energyFlags & energiesMask['A-R+']) {
      energies['A-R+'] = this.getUint32();
    }
    if (energyFlags & energiesMask['A-R-']) {
      energies['A-R-'] = this.getUint32();
    }
    return energies;
  };
  CommandBinaryBuffer$1.prototype.setAMinusTariffEnergies = function (energies) {
    if (energies) {
      if (energies['A-']) {
        this.setUint32(energies['A-']);
      }
      if (energies['A-R+']) {
        this.setUint32(energies['A-R+']);
      }
      if (energies['A-R-']) {
        this.setUint32(energies['A-R-']);
      }
    }
  };
  CommandBinaryBuffer$1.prototype.getTariffsEnergies = function () {
    var energyFlags = this.getUint8();
    var tariffFlags = this.getUint8();
    var tariffs = new Array(TARIFF_NUMBER).fill(null);
    for (var index = 0; index < TARIFF_NUMBER; index++) {
      if (tariffFlags & getAPlusTariffBit(index)) {
        tariffs[index] = this.getAPlusTariffEnergies(energyFlags);
      }
    }
    for (var _index = 0; _index < TARIFF_NUMBER; _index++) {
      if (tariffFlags & getAMinusTariffBit(_index)) {
        tariffs[_index] = {
          ...tariffs[_index],
          ...this.getAMinusTariffEnergies(energyFlags)
        };
      }
    }
    return tariffs;
  };
  CommandBinaryBuffer$1.prototype.setTariffsEnergies = function (tariffs) {
    var _this5 = this;
    var energiesFlags = 0;
    var tariffsFlags = 0;
    tariffs.forEach(function (tariff, index) {
      if (tariff) {
        energiesFlags |= getEnergiesFlags(tariff);
        tariffsFlags |= getTariffEnergiesFlag(index, tariff);
      }
    });
    this.setUint8(energiesFlags);
    this.setUint8(tariffsFlags);
    tariffs.forEach(function (tariff) {
      return _this5.setAPlusTariffEnergies(tariff);
    });
    tariffs.forEach(function (tariff) {
      return _this5.setAMinusTariffEnergies(tariff);
    });
  };
  CommandBinaryBuffer$1.prototype.getPowerMax = function () {
    return {
      hours: this.getUint8(),
      minutes: this.getUint8(),
      power: this.getUint32()
    };
  };
  CommandBinaryBuffer$1.prototype.setPowerMax = function (value) {
    if (value) {
      var hours = value.hours,
        minutes = value.minutes,
        power = value.power;
      this.setUint8(hours);
      this.setUint8(minutes);
      this.setUint32(power);
    }
  };
  CommandBinaryBuffer$1.prototype.getAPlusTariffPowerMax = function (energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A+']) {
      energies['A+'] = this.getPowerMax();
    }
    if (energyFlags & energiesMask['A+R+']) {
      energies['A+R+'] = this.getPowerMax();
    }
    if (energyFlags & energiesMask['A+R-']) {
      energies['A+R-'] = this.getPowerMax();
    }
    return energies;
  };
  CommandBinaryBuffer$1.prototype.setAPlusTariffPowerMax = function (energies) {
    if (energies) {
      this.setPowerMax(energies['A+']);
      this.setPowerMax(energies['A+R+']);
      this.setPowerMax(energies['A+R+']);
    }
  };
  CommandBinaryBuffer$1.prototype.getAMinusTariffPowerMax = function (energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A-']) {
      energies['A-'] = this.getPowerMax();
    }
    if (energyFlags & energiesMask['A-R+']) {
      energies['A-R+'] = this.getPowerMax();
    }
    if (energyFlags & energiesMask['A-R-']) {
      energies['A-R-'] = this.getPowerMax();
    }
    return energies;
  };
  CommandBinaryBuffer$1.prototype.setAMinusTariffPowerMax = function (energies) {
    if (energies) {
      this.setPowerMax(energies['A-']);
      this.setPowerMax(energies['A-R+']);
      this.setPowerMax(energies['A-R-']);
    }
  };
  CommandBinaryBuffer$1.prototype.getTariffsPowerMax = function () {
    var energyFlags = this.getUint8();
    var tariffFlags = this.getUint8();
    var tariffs = new Array(TARIFF_NUMBER).fill(null);
    for (var index = 0; index < TARIFF_NUMBER; index++) {
      if (tariffFlags & getAPlusTariffBit(index)) {
        tariffs[index] = this.getAPlusTariffPowerMax(energyFlags);
      }
    }
    for (var _index2 = 0; _index2 < TARIFF_NUMBER; _index2++) {
      if (tariffFlags & getAMinusTariffBit(_index2)) {
        tariffs[_index2] = {
          ...tariffs[_index2],
          ...this.getAMinusTariffPowerMax(energyFlags)
        };
      }
    }
    return tariffs;
  };
  CommandBinaryBuffer$1.prototype.setTariffsPowerMax = function (tariffs) {
    var _this6 = this;
    var energiesFlags = 0;
    var tariffsFlags = 0;
    tariffs.forEach(function (tariff, index) {
      if (tariff) {
        energiesFlags |= getEnergiesFlags(tariff);
        tariffsFlags |= getTariffEnergiesFlag(index, tariff);
      }
    });
    this.setUint8(energiesFlags);
    this.setUint8(tariffsFlags);
    tariffs.forEach(function (tariff) {
      return _this6.setAPlusTariffPowerMax(tariff);
    });
    tariffs.forEach(function (tariff) {
      return _this6.setAMinusTariffPowerMax(tariff);
    });
  };

  var id$R = getHalfHourEnergies$1;
  var maxSize$r = 5;
  var toBytes$T = function (parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$r);
    buffer.setDate(parameters.date);
    buffer.setEnergiesFlags(parameters.energies);
    buffer.setUint8(parameters.firstHalfhour);
    buffer.setUint8(parameters.halfhoursNumber);
    return toBytes$19(id$R, buffer.data);
  };

  var id$Q = getMagneticFieldThreshold$1;
  var toBytes$S = function () {
    return toBytes$19(id$Q);
  };

  var id$P = getMeterInfo$1;
  var toBytes$R = function () {
    return toBytes$19(id$P);
  };

  var id$O = getMonthDemand$1;
  var maxSize$q = 2;
  var toBytes$Q = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$q);
    buffer.setUint8(parameters.year);
    buffer.setUint8(parameters.month);
    return toBytes$19(id$O, buffer.data);
  };

  var id$N = getMonthDemandExport$1;
  var maxSize$p = 2;
  var toBytes$P = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$p);
    buffer.setUint8(parameters.year);
    buffer.setUint8(parameters.month);
    return toBytes$19(id$N, buffer.data);
  };

  var id$M = getMonthMaxDemand$1;
  var toBytes$O = function (_ref) {
    var year = _ref.year,
      month = _ref.month;
    return toBytes$19(id$M, [year, month]);
  };

  var id$L = getMonthMaxDemandExport$1;
  var toBytes$N = function (_ref) {
    var year = _ref.year,
      month = _ref.month;
    return toBytes$19(id$L, [year, month]);
  };

  var id$K = getOperatorParametersExtended3$1;
  var toBytes$M = function () {
    return toBytes$19(id$K);
  };

  var id$J = getOperatorParameters$1;
  var toBytes$L = function () {
    return toBytes$19(id$J);
  };

  var id$I = getRatePlanInfo$1;
  var toBytes$K = function (parameters) {
    return toBytes$19(id$I, [parameters.tariffTable]);
  };

  var id$H = getSaldo$1;
  var toBytes$J = function () {
    return toBytes$19(id$H);
  };

  var id$G = getSaldoParameters$1;
  var toBytes$I = function () {
    return toBytes$19(id$G);
  };

  var id$F = getSeasonProfile$1;
  var maxSize$o = 3;
  var toBytes$H = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$o);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    buffer.setUint8(parameters.isActive ? 0 : 1);
    return toBytes$19(id$F, buffer.data);
  };

  var id$E = getSpecialDay$1;
  var maxSize$n = 3;
  var toBytes$G = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$n);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    buffer.setUint8(parameters.isActive ? 0 : 1);
    return toBytes$19(id$E, buffer.data);
  };

  var id$D = getVersion$1;
  var toBytes$F = function () {
    return toBytes$19(id$D);
  };

  var id$C = prepareRatePlan$1;
  var maxSize$m = 5;
  var toBytes$E = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$m);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint32(parameters.id);
    return toBytes$19(id$C, buffer.data);
  };

  var id$B = resetPowerMaxDay$1;
  var toBytes$D = function () {
    return toBytes$19(id$B);
  };

  var id$A = resetPowerMaxMonth$1;
  var toBytes$C = function () {
    return toBytes$19(id$A);
  };

  var id$z = runTariffPlan$1;
  var toBytes$B = function (parameters) {
    return toBytes$19(id$z, [parameters.tariffTable]);
  };

  var KEY_SIZE = 16;
  var id$y = setAccessKey$1;
  var maxSize$l = 1 + KEY_SIZE;
  var toBytes$A = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$l);
    buffer.setUint8(parameters.accessLevel);
    buffer.setBytes(parameters.key);
    return toBytes$19(id$y, buffer.data);
  };

  var id$x = setCorrectDateTime$1;
  var maxSize$k = 2;
  var toBytes$z = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$k);
    buffer.setInt16(parameters.seconds);
    return toBytes$19(id$x, buffer.data);
  };

  var id$w = setCorrectTime$1;
  var maxSize$j = 9;
  var toBytes$y = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$j);
    buffer.setTimeCorrectionParameters(parameters);
    return toBytes$19(id$w, buffer.data);
  };

  var id$v = setDateTime$1;
  var maxSize$i = 8;
  var toBytes$x = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$i);
    buffer.setDateTime(parameters);
    return toBytes$19(id$v, buffer.data);
  };

  var MAX_PERIODS_NUMBER = 8;
  var PERIODS_FINAL_BYTE = 0xff;
  var id$u = setDayProfile$1;
  var toBytes$w = function (parameters) {
    var hasPeriodsFinalByte = parameters.periods.length < MAX_PERIODS_NUMBER;
    var size = 2 + parameters.periods.length + +hasPeriodsFinalByte;
    var buffer = new CommandBinaryBuffer$2(size);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    parameters.periods.forEach(function (period) {
      buffer.setDayProfile(period);
    });
    if (hasPeriodsFinalByte) {
      buffer.setUint8(PERIODS_FINAL_BYTE);
    }
    return toBytes$19(id$u, buffer.data);
  };

  var id$t = setOperatorParametersExtended3$1;
  var maxSize$h = 17;
  var toBytes$v = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$h);
    buffer.setOperatorParametersExtended3(parameters);
    return toBytes$19(id$t, buffer.data);
  };

  var id$s = setSaldo$1;
  var maxSize$g = 12;
  var toBytes$u = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$g);
    buffer.setUint8(parameters.date.month);
    buffer.setUint8(parameters.date.date);
    buffer.setUint8(parameters.date.hours);
    buffer.setUint8(parameters.date.minutes);
    buffer.setInt32(parameters.saldoNew);
    buffer.setInt32(parameters.saldoOld);
    return toBytes$19(id$s, buffer.data);
  };

  var id$r = setSaldoParameters$1;
  var maxSize$f = 37;
  var toBytes$t = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$f);
    buffer.setSaldoParameters(parameters);
    return toBytes$19(id$r, buffer.data);
  };

  var id$q = setSeasonProfile$1;
  var maxSize$e = SEASON_PROFILE_SIZE;
  var toBytes$s = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$e);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    buffer.setSeasonProfile(parameters);
    return toBytes$19(id$q, buffer.data);
  };

  var id$p = setSpecialDay$1;
  var maxSize$d = 6;
  var toBytes$r = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$d);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    buffer.setSpecialDay(parameters);
    return toBytes$19(id$p, buffer.data);
  };

  var id$o = setSpecialOperation$1;
  var maxSize$c = 2;
  var toBytes$q = function (parameters) {
    var buffer = new CommandBinaryBuffer$2(maxSize$c);
    var flags = 0;
    if (parameters.readScreensInfo) {
      flags |= 0x80;
    }
    if (parameters.resetElectroMagneticIndication) {
      flags |= 1;
    }
    if (parameters.resetMagneticIndication) {
      flags |= 2;
    }
    buffer.setUint8(parameters.type);
    buffer.setUint8(flags);
    return toBytes$19(id$o, buffer.data);
  };

  var id$n = turnRelayOff$1;
  var toBytes$p = function () {
    return toBytes$19(id$n);
  };

  var id$m = turnRelayOn$1;
  var toBytes$o = function () {
    return toBytes$19(id$m);
  };

  // this is required to shadow crypto-js implementation
  var aes = {
    encrypt: function () {},
    decrypt: function () {}
  };

  var calculateLrc = (function (data) {
    var initialLrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0x55;
    var lrc = initialLrc;
    data.forEach(function (item) {
      lrc ^= item;
    });
    return lrc;
  });

  var BLOCK_SIZE = 16;
  var COMMANDS_END_MARK = [0];
  var getToBytes = function (toBytesMap) {
    return function (commands, _ref) {
      var _ref2;
      var _ref$messageId = _ref.messageId,
        messageId = _ref$messageId === void 0 ? 1 : _ref$messageId,
        _ref$accessLevel = _ref.accessLevel,
        accessLevel = _ref$accessLevel === void 0 ? READ_ONLY : _ref$accessLevel,
        aesKey = _ref.aesKey;
      var commandBytes = commands.map(function (command) {
        if ('id' in command) {
          return toBytesMap[command.id](command.parameters || {});
        }
        if ('command' in command) {
          return command.command.bytes;
        }
        throw new Error('wrong command format');
      });
      var maskedAccessLevel = accessLevel | 0x10;
      var header = [messageId, maskedAccessLevel];
      var body = (_ref2 = []).concat.apply(_ref2, [maskedAccessLevel].concat(_toConsumableArray(commandBytes), [COMMANDS_END_MARK]));
      if (accessLevel !== UNENCRYPTED) {
        var padding = (body.length + 1) % BLOCK_SIZE;
        if (padding) {
          body = body.concat(new Array(BLOCK_SIZE - padding).fill(0));
        }
      }
      body = body.concat(calculateLrc(body));
      if (aesKey && accessLevel !== UNENCRYPTED) {
        body = _toConsumableArray(aes.encrypt(aesKey, body));
      }
      return header.concat(body);
    };
  };

  var getEventStatus = 0x01;
  var getEnergyDayPrevious = 0x03;
  var getDeviceType = 0x04;
  var getDeviceId = 0x05;
  var getDateTime = 0x07;
  var setDateTime = 0x08;
  var setAccessKey = 0x09;
  var getCurrentValues = 0x0d;
  var getEnergy = 0x0f;
  var setDayProfile = 0x10;
  var setSeasonProfile = 0x11;
  var setSpecialDay = 0x12;
  var activateRatePlan = 0x13;
  var prepareRatePlan = 0x14;
  var getHalfHourDemand = 0x15;
  var getDayDemand = 0x16;
  var getMonthDemand = 0x17;
  var turnRelayOn = 0x18;
  var turnRelayOff = 0x19;
  var setCorrectTime = 0x1c;
  var getOperatorParameters = 0x1e;
  var setOperatorParameters = 0x1f;
  var getVersion = 0x28;
  var getSaldo = 0x29;
  var setSaldo = 0x2a;
  var getRatePlanInfo = 0x2c;
  var getSaldoParameters = 0x2e;
  var setSaldoParameters = 0x2f;
  var getDayMaxDemand = 0x31;
  var getMonthMaxDemand = 0x32;
  var getEvents = 0x33;
  var getEventsCounters = 0x34;
  var resetPowerMaxDay = 0x35;
  var resetPowerMaxMonth = 0x36;
  var getCurrentStatusMeter = 0x39;
  var getExtendedCurrentValues = 0x3a;
  var getDayProfile = 0x3b;
  var getSeasonProfile = 0x3c;
  var getSpecialDay = 0x3d;
  var getCorrectTime = 0x3e;
  var getOperatorParametersExtended = 0x3f;
  var setOperatorParametersExtended = 0x40;
  var setOperatorParametersExtended2 = 0x45;
  var runTariffPlan = 0x46;
  var getOperatorParametersExtended2 = 0x47;
  var getHalfHourDemandVari = 0x48;
  var getHalfHourDemandVare = 0x49;
  var getEnergyExport = 0x4e;
  var getDayDemandExport = 0x4f;
  var getEnergyExportDayPrevious = 0x50;
  var getMonthDemandExport = 0x52;
  var getHalfHourDemandExport = 0x53;
  var getHalfHourDemandVariExport = 0x54;
  var getHalfHourDemandVareExport = 0x55;
  var getCriticalEvent = 0x56;
  var getDayMaxDemandExport = 0x58;
  var getMonthMaxDemandExport = 0x59;
  var getHalfHourDemandChannel = 0x5a;
  var setCorrectDateTime = 0x5c;
  var setDisplayParam = 0x5d;
  var getDisplayParam = 0x5e;
  var setSpecialOperation = 0x64;
  var getMagneticFieldThreshold = 0x6d;
  var getHalfHourEnergies = 0x6f;
  var getBuildVersion = 0x70;
  var getOperatorParametersExtended3 = 0x71;
  var setOperatorParametersExtended3 = 0x72;
  var setOperatorParametersExtended4 = 0x74;
  var getOperatorParametersExtended4 = 0x75;
  var getDemand = 0x76;
  var getMeterInfo = 0x7a;

  var downlinkIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan,
    getBuildVersion: getBuildVersion,
    getCorrectTime: getCorrectTime,
    getCriticalEvent: getCriticalEvent,
    getCurrentStatusMeter: getCurrentStatusMeter,
    getCurrentValues: getCurrentValues,
    getDateTime: getDateTime,
    getDayDemand: getDayDemand,
    getDayDemandExport: getDayDemandExport,
    getDayMaxDemand: getDayMaxDemand,
    getDayMaxDemandExport: getDayMaxDemandExport,
    getDayProfile: getDayProfile,
    getDemand: getDemand,
    getDeviceId: getDeviceId,
    getDeviceType: getDeviceType,
    getDisplayParam: getDisplayParam,
    getEnergy: getEnergy,
    getEnergyDayPrevious: getEnergyDayPrevious,
    getEnergyExport: getEnergyExport,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious,
    getEventStatus: getEventStatus,
    getEvents: getEvents,
    getEventsCounters: getEventsCounters,
    getExtendedCurrentValues: getExtendedCurrentValues,
    getHalfHourDemand: getHalfHourDemand,
    getHalfHourDemandChannel: getHalfHourDemandChannel,
    getHalfHourDemandExport: getHalfHourDemandExport,
    getHalfHourDemandVare: getHalfHourDemandVare,
    getHalfHourDemandVareExport: getHalfHourDemandVareExport,
    getHalfHourDemandVari: getHalfHourDemandVari,
    getHalfHourDemandVariExport: getHalfHourDemandVariExport,
    getHalfHourEnergies: getHalfHourEnergies,
    getMagneticFieldThreshold: getMagneticFieldThreshold,
    getMeterInfo: getMeterInfo,
    getMonthDemand: getMonthDemand,
    getMonthDemandExport: getMonthDemandExport,
    getMonthMaxDemand: getMonthMaxDemand,
    getMonthMaxDemandExport: getMonthMaxDemandExport,
    getOperatorParameters: getOperatorParameters,
    getOperatorParametersExtended: getOperatorParametersExtended,
    getOperatorParametersExtended2: getOperatorParametersExtended2,
    getOperatorParametersExtended3: getOperatorParametersExtended3,
    getOperatorParametersExtended4: getOperatorParametersExtended4,
    getRatePlanInfo: getRatePlanInfo,
    getSaldo: getSaldo,
    getSaldoParameters: getSaldoParameters,
    getSeasonProfile: getSeasonProfile,
    getSpecialDay: getSpecialDay,
    getVersion: getVersion,
    prepareRatePlan: prepareRatePlan,
    resetPowerMaxDay: resetPowerMaxDay,
    resetPowerMaxMonth: resetPowerMaxMonth,
    runTariffPlan: runTariffPlan,
    setAccessKey: setAccessKey,
    setCorrectDateTime: setCorrectDateTime,
    setCorrectTime: setCorrectTime,
    setDateTime: setDateTime,
    setDayProfile: setDayProfile,
    setDisplayParam: setDisplayParam,
    setOperatorParameters: setOperatorParameters,
    setOperatorParametersExtended: setOperatorParametersExtended,
    setOperatorParametersExtended2: setOperatorParametersExtended2,
    setOperatorParametersExtended3: setOperatorParametersExtended3,
    setOperatorParametersExtended4: setOperatorParametersExtended4,
    setSaldo: setSaldo,
    setSaldoParameters: setSaldoParameters,
    setSeasonProfile: setSeasonProfile,
    setSpecialDay: setSpecialDay,
    setSpecialOperation: setSpecialOperation,
    turnRelayOff: turnRelayOff,
    turnRelayOn: turnRelayOn
  });

  invertObject(downlinkIds);

  var id$l = getCriticalEvent;
  var toBytes$n = function (parameters) {
    return toBytes$19(id$l, [parameters.event, parameters.index]);
  };

  var ENERGY_T1_FAULT = 0x01;
  var ENERGY_T2_FAULT = 0x02;
  var ENERGY_T3_FAULT = 0x03;
  var ENERGY_T4_FAULT = 0x04;
  var ACCESS_LOCKED = 0x11;
  var ACCESS_UNLOCKED = 0x12;
  var ERR_ACCESS = 0x13;
  var CASE_OPEN = 0x14;
  var CASE_CLOSE = 0x15;
  var MAGNETIC_ON = 0x16;
  var MAGNETIC_OFF = 0x17;
  var CHANGE_ACCESS_KEY0 = 0x20;
  var CHANGE_ACCESS_KEY1 = 0x21;
  var CHANGE_ACCESS_KEY2 = 0x22;
  var CHANGE_ACCESS_KEY3 = 0x23;
  var CHANGE_PARAMETERS_LOCAL = 0x24;
  var CHANGE_PARAMETERS_REMOTE = 0x25;
  var CMD_CHANGE_TIME = 0x26;
  var CMD_RELAY_ON = 0x27;
  var CMD_RELAY_OFF = 0x28;
  var ENERGY_REGISTER_OVERFLOW = 0x31;
  var CHANGE_TARIFF_TABLE = 0x32;
  var SET_TARIFF_TABLE = 0x33;
  var SUMMER_TIME = 0x34;
  var WINTER_TIME = 0x35;
  var RELAY_ON = 0x36;
  var RELAY_OFF = 0x37;
  var RESTART = 0x38;
  var WD_RESTART = 0x39;
  var VA_MAX_OK = 0x40;
  var VA_MAX_OVER = 0x41;
  var VA_MIN_OK = 0x42;
  var VA_MIN_UNDER = 0x43;
  var VB_MAX_OK = 0x44;
  var VB_MAX_OVER = 0x45;
  var VB_MIN_OK = 0x46;
  var VB_MIN_UNDER = 0x47;
  var VC_MAX_OK = 0x48;
  var VC_MAX_OVER = 0x49;
  var VC_MIN_OK = 0x4A;
  var VC_MIN_UNDER = 0x4B;
  var F_MAX_OK = 0x4C;
  var F_MAX_OVER = 0x4D;
  var F_MIN_OK = 0x4E;
  var F_MIN_UNDER = 0x4F;
  var T_MAX_OK = 0x50;
  var T_MAX_OVER = 0x51;
  var T_MIN_OK = 0x52;
  var T_MIN_UNDER = 0x53;
  var IA_MAX_OK = 0x54;
  var IA_MAX_OVER = 0x55;
  var IB_MAX_OK = 0x56;
  var IB_MAX_OVER = 0x57;
  var IC_MAX_OK = 0x58;
  var IC_MAX_OVER = 0x59;
  var PA_MAX_OK = 0x5A;
  var PA_MAX_OVER = 0x5B;
  var PV_MAX_OK = 0x5C;
  var PV_MAX_OVER = 0x5D;
  var IDIFF_OK = 0x5E;
  var IDIFF_OVER = 0x5F;
  var CLOCK_OK = 0x60;
  var CLOCK_FAULT = 0x61;
  var POWER_C_ON = 0x62;
  var POWER_C_OFF = 0x63;
  var POWER_B_ON = 0x64;
  var POWER_B_OFF = 0x65;
  var POWER_A_ON = 0x66;
  var POWER_A_OFF = 0x67;
  var BATTERY_OK = 0x68;
  var BATTERY_FAULT = 0x69;
  var CALIBRATION_OK = 0x6A;
  var CALIBRATION_FAULT = 0x6B;
  var V_PARAMETERS_OK = 0x6C;
  var V_PARAMETERS_FAULT = 0x6D;
  var O_PARAMETERS_OK = 0x6E;
  var O_PARAMETERS_FAULT = 0x6F;
  var CHANGE_COR_TIME = 0x70;
  var CMD_RELAY_2_ON = 0x71;
  var CMD_RELAY_2_OFF = 0x72;
  var CROSS_ZERO_ENT1 = 0x73;
  var CROSS_ZERO_ENT2 = 0x74;
  var CROSS_ZERO_ENT3 = 0x75;
  var CROSS_ZERO_ENT4 = 0x76;
  var CROSS_ZERO_VARI1 = 0x77;
  var CROSS_ZERO_VARI2 = 0x78;
  var CROSS_ZERO_VARI3 = 0x79;
  var CROSS_ZERO_VARI4 = 0x7A;
  var CROSS_ZERO_VARE1 = 0x7B;
  var CROSS_ZERO_VARE2 = 0x7C;
  var CROSS_ZERO_VARE3 = 0x7D;
  var CROSS_ZERO_VARE4 = 0x7E;
  var CALIBRATION_FLAG_SET = 0x7F;
  var CALIBRATION_FLAG_RESET = 0x80;
  var BAD_TEST_EEPROM = 0x81;
  var BAD_TEST_FRAM = 0x82;
  var SET_NEW_SALDO = 0x83;
  var SALDO_PARAM_BAD = 0x84;
  var ACCUMULATION_PARAM_BAD = 0x85;
  var ACCUMULATION_PARAM_EXT_BAD = 0x86;
  var CALCULATION_PERIOD_BAD = 0x87;
  var BLOCK_TARIFF_BAD = 0x88;
  var CALIBRATION_PARAM_BAD = 0x89;
  var WINTER_SUMMER_BAD = 0x8A;
  var OP_PARAM_BAD = 0x8B;
  var OP_PARAM_EXT_BAD = 0x8C;
  var SALDO_ENERGY_BAD = 0x8D;
  var TIME_CORRECT = 0x8E;
  var COEFFICIENT_TRANSFORMATION_CHANGE = 0x8F;
  var RELAY_HARD_BAD_OFF = 0x90;
  var RELAY_HARD_ON = 0x91;
  var RELAY_HARD_BAD_ON = 0x93;
  var RELAY_HARD_OFF = 0x94;
  var METER_TROUBLE = 0x95;
  var CASE_KLEMA_OPEN = 0x96;
  var CASE_KLEMA_CLOSE = 0x97;
  var CHANGE_TARIFF_TABLE_2 = 0x98;
  var CHANGE_TARIFF_TABLE_3 = 0x99;
  var CASE_MODULE_OPEN = 0x9A;
  var CASE_MODULE_CLOSE = 0x9B;
  var SET_SALDO_PARAM = 0x9C;
  var POWER_OVER_RELAY_OFF = 0x9D;
  var CHANGE_PARAM_CHANNEL1 = 0x9E;
  var CHANGE_PARAM_CHANNEL2 = 0x9F;
  var CHANGE_PARAM_CHANNEL3 = 0xA0;
  var CHANGE_PARAM_CHANNEL4 = 0xA1;
  var CHANGE_PARAM_CHANNEL5 = 0xA2;
  var CHANGE_PARAM_CHANNEL6 = 0xA3;
  var CROSS_ZERO_EXPORT_ENT1 = 0xA4;
  var CROSS_ZERO_EXPORT_ENT2 = 0xA5;
  var CROSS_ZERO_EXPORT_ENT3 = 0xA6;
  var CROSS_ZERO_EXPORT_ENT4 = 0xA7;
  var CROSS_ZERO_EXPORT_VARI1 = 0xA8;
  var CROSS_ZERO_EXPORT_VARI2 = 0xA9;
  var CROSS_ZERO_EXPORT_VARI3 = 0xAA;
  var CROSS_ZERO_EXPORT_VARI4 = 0xAB;
  var CROSS_ZERO_EXPORT_VARE1 = 0xAC;
  var CROSS_ZERO_EXPORT_VARE2 = 0xAD;
  var CROSS_ZERO_EXPORT_VARE3 = 0xAE;
  var CROSS_ZERO_EXPORT_VARE4 = 0xAF;
  var EM_MAGNETIC_ON = 0xB0;
  var EM_MAGNETIC_OFF = 0xB1;
  var RESET_EM_FLAG = 0xB2;
  var RESET_MAGNETIC_FLAG = 0xB3;
  var SET_DEMAND_EN_1_MIN = 0xE0;
  var SET_DEMAND_EN_3_MIN = 0xE1;
  var SET_DEMAND_EN_5_MIN = 0xE2;
  var SET_DEMAND_EN_10_MIN = 0xE3;
  var SET_DEMAND_EN_15_MIN = 0xE4;
  var SET_DEMAND_EN_30_MIN = 0xE5;
  var SET_DEMAND_EN_60_MIN = 0xE6;
  var P_MAX_A_MINUS_OK = 0xE7;
  var P_MAX_A_MINUS_OVER = 0xE8;

  var events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_LOCKED: ACCESS_LOCKED,
    ACCESS_UNLOCKED: ACCESS_UNLOCKED,
    ACCUMULATION_PARAM_BAD: ACCUMULATION_PARAM_BAD,
    ACCUMULATION_PARAM_EXT_BAD: ACCUMULATION_PARAM_EXT_BAD,
    BAD_TEST_EEPROM: BAD_TEST_EEPROM,
    BAD_TEST_FRAM: BAD_TEST_FRAM,
    BATTERY_FAULT: BATTERY_FAULT,
    BATTERY_OK: BATTERY_OK,
    BLOCK_TARIFF_BAD: BLOCK_TARIFF_BAD,
    CALCULATION_PERIOD_BAD: CALCULATION_PERIOD_BAD,
    CALIBRATION_FAULT: CALIBRATION_FAULT,
    CALIBRATION_FLAG_RESET: CALIBRATION_FLAG_RESET,
    CALIBRATION_FLAG_SET: CALIBRATION_FLAG_SET,
    CALIBRATION_OK: CALIBRATION_OK,
    CALIBRATION_PARAM_BAD: CALIBRATION_PARAM_BAD,
    CASE_CLOSE: CASE_CLOSE,
    CASE_KLEMA_CLOSE: CASE_KLEMA_CLOSE,
    CASE_KLEMA_OPEN: CASE_KLEMA_OPEN,
    CASE_MODULE_CLOSE: CASE_MODULE_CLOSE,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN,
    CASE_OPEN: CASE_OPEN,
    CHANGE_ACCESS_KEY0: CHANGE_ACCESS_KEY0,
    CHANGE_ACCESS_KEY1: CHANGE_ACCESS_KEY1,
    CHANGE_ACCESS_KEY2: CHANGE_ACCESS_KEY2,
    CHANGE_ACCESS_KEY3: CHANGE_ACCESS_KEY3,
    CHANGE_COR_TIME: CHANGE_COR_TIME,
    CHANGE_PARAMETERS_LOCAL: CHANGE_PARAMETERS_LOCAL,
    CHANGE_PARAMETERS_REMOTE: CHANGE_PARAMETERS_REMOTE,
    CHANGE_PARAM_CHANNEL1: CHANGE_PARAM_CHANNEL1,
    CHANGE_PARAM_CHANNEL2: CHANGE_PARAM_CHANNEL2,
    CHANGE_PARAM_CHANNEL3: CHANGE_PARAM_CHANNEL3,
    CHANGE_PARAM_CHANNEL4: CHANGE_PARAM_CHANNEL4,
    CHANGE_PARAM_CHANNEL5: CHANGE_PARAM_CHANNEL5,
    CHANGE_PARAM_CHANNEL6: CHANGE_PARAM_CHANNEL6,
    CHANGE_TARIFF_TABLE: CHANGE_TARIFF_TABLE,
    CHANGE_TARIFF_TABLE_2: CHANGE_TARIFF_TABLE_2,
    CHANGE_TARIFF_TABLE_3: CHANGE_TARIFF_TABLE_3,
    CLOCK_FAULT: CLOCK_FAULT,
    CLOCK_OK: CLOCK_OK,
    CMD_CHANGE_TIME: CMD_CHANGE_TIME,
    CMD_RELAY_2_OFF: CMD_RELAY_2_OFF,
    CMD_RELAY_2_ON: CMD_RELAY_2_ON,
    CMD_RELAY_OFF: CMD_RELAY_OFF,
    CMD_RELAY_ON: CMD_RELAY_ON,
    COEFFICIENT_TRANSFORMATION_CHANGE: COEFFICIENT_TRANSFORMATION_CHANGE,
    CROSS_ZERO_ENT1: CROSS_ZERO_ENT1,
    CROSS_ZERO_ENT2: CROSS_ZERO_ENT2,
    CROSS_ZERO_ENT3: CROSS_ZERO_ENT3,
    CROSS_ZERO_ENT4: CROSS_ZERO_ENT4,
    CROSS_ZERO_EXPORT_ENT1: CROSS_ZERO_EXPORT_ENT1,
    CROSS_ZERO_EXPORT_ENT2: CROSS_ZERO_EXPORT_ENT2,
    CROSS_ZERO_EXPORT_ENT3: CROSS_ZERO_EXPORT_ENT3,
    CROSS_ZERO_EXPORT_ENT4: CROSS_ZERO_EXPORT_ENT4,
    CROSS_ZERO_EXPORT_VARE1: CROSS_ZERO_EXPORT_VARE1,
    CROSS_ZERO_EXPORT_VARE2: CROSS_ZERO_EXPORT_VARE2,
    CROSS_ZERO_EXPORT_VARE3: CROSS_ZERO_EXPORT_VARE3,
    CROSS_ZERO_EXPORT_VARE4: CROSS_ZERO_EXPORT_VARE4,
    CROSS_ZERO_EXPORT_VARI1: CROSS_ZERO_EXPORT_VARI1,
    CROSS_ZERO_EXPORT_VARI2: CROSS_ZERO_EXPORT_VARI2,
    CROSS_ZERO_EXPORT_VARI3: CROSS_ZERO_EXPORT_VARI3,
    CROSS_ZERO_EXPORT_VARI4: CROSS_ZERO_EXPORT_VARI4,
    CROSS_ZERO_VARE1: CROSS_ZERO_VARE1,
    CROSS_ZERO_VARE2: CROSS_ZERO_VARE2,
    CROSS_ZERO_VARE3: CROSS_ZERO_VARE3,
    CROSS_ZERO_VARE4: CROSS_ZERO_VARE4,
    CROSS_ZERO_VARI1: CROSS_ZERO_VARI1,
    CROSS_ZERO_VARI2: CROSS_ZERO_VARI2,
    CROSS_ZERO_VARI3: CROSS_ZERO_VARI3,
    CROSS_ZERO_VARI4: CROSS_ZERO_VARI4,
    EM_MAGNETIC_OFF: EM_MAGNETIC_OFF,
    EM_MAGNETIC_ON: EM_MAGNETIC_ON,
    ENERGY_REGISTER_OVERFLOW: ENERGY_REGISTER_OVERFLOW,
    ENERGY_T1_FAULT: ENERGY_T1_FAULT,
    ENERGY_T2_FAULT: ENERGY_T2_FAULT,
    ENERGY_T3_FAULT: ENERGY_T3_FAULT,
    ENERGY_T4_FAULT: ENERGY_T4_FAULT,
    ERR_ACCESS: ERR_ACCESS,
    F_MAX_OK: F_MAX_OK,
    F_MAX_OVER: F_MAX_OVER,
    F_MIN_OK: F_MIN_OK,
    F_MIN_UNDER: F_MIN_UNDER,
    IA_MAX_OK: IA_MAX_OK,
    IA_MAX_OVER: IA_MAX_OVER,
    IB_MAX_OK: IB_MAX_OK,
    IB_MAX_OVER: IB_MAX_OVER,
    IC_MAX_OK: IC_MAX_OK,
    IC_MAX_OVER: IC_MAX_OVER,
    IDIFF_OK: IDIFF_OK,
    IDIFF_OVER: IDIFF_OVER,
    MAGNETIC_OFF: MAGNETIC_OFF,
    MAGNETIC_ON: MAGNETIC_ON,
    METER_TROUBLE: METER_TROUBLE,
    OP_PARAM_BAD: OP_PARAM_BAD,
    OP_PARAM_EXT_BAD: OP_PARAM_EXT_BAD,
    O_PARAMETERS_FAULT: O_PARAMETERS_FAULT,
    O_PARAMETERS_OK: O_PARAMETERS_OK,
    PA_MAX_OK: PA_MAX_OK,
    PA_MAX_OVER: PA_MAX_OVER,
    POWER_A_OFF: POWER_A_OFF,
    POWER_A_ON: POWER_A_ON,
    POWER_B_OFF: POWER_B_OFF,
    POWER_B_ON: POWER_B_ON,
    POWER_C_OFF: POWER_C_OFF,
    POWER_C_ON: POWER_C_ON,
    POWER_OVER_RELAY_OFF: POWER_OVER_RELAY_OFF,
    PV_MAX_OK: PV_MAX_OK,
    PV_MAX_OVER: PV_MAX_OVER,
    P_MAX_A_MINUS_OK: P_MAX_A_MINUS_OK,
    P_MAX_A_MINUS_OVER: P_MAX_A_MINUS_OVER,
    RELAY_HARD_BAD_OFF: RELAY_HARD_BAD_OFF,
    RELAY_HARD_BAD_ON: RELAY_HARD_BAD_ON,
    RELAY_HARD_OFF: RELAY_HARD_OFF,
    RELAY_HARD_ON: RELAY_HARD_ON,
    RELAY_OFF: RELAY_OFF,
    RELAY_ON: RELAY_ON,
    RESET_EM_FLAG: RESET_EM_FLAG,
    RESET_MAGNETIC_FLAG: RESET_MAGNETIC_FLAG,
    RESTART: RESTART,
    SALDO_ENERGY_BAD: SALDO_ENERGY_BAD,
    SALDO_PARAM_BAD: SALDO_PARAM_BAD,
    SET_DEMAND_EN_10_MIN: SET_DEMAND_EN_10_MIN,
    SET_DEMAND_EN_15_MIN: SET_DEMAND_EN_15_MIN,
    SET_DEMAND_EN_1_MIN: SET_DEMAND_EN_1_MIN,
    SET_DEMAND_EN_30_MIN: SET_DEMAND_EN_30_MIN,
    SET_DEMAND_EN_3_MIN: SET_DEMAND_EN_3_MIN,
    SET_DEMAND_EN_5_MIN: SET_DEMAND_EN_5_MIN,
    SET_DEMAND_EN_60_MIN: SET_DEMAND_EN_60_MIN,
    SET_NEW_SALDO: SET_NEW_SALDO,
    SET_SALDO_PARAM: SET_SALDO_PARAM,
    SET_TARIFF_TABLE: SET_TARIFF_TABLE,
    SUMMER_TIME: SUMMER_TIME,
    TIME_CORRECT: TIME_CORRECT,
    T_MAX_OK: T_MAX_OK,
    T_MAX_OVER: T_MAX_OVER,
    T_MIN_OK: T_MIN_OK,
    T_MIN_UNDER: T_MIN_UNDER,
    VA_MAX_OK: VA_MAX_OK,
    VA_MAX_OVER: VA_MAX_OVER,
    VA_MIN_OK: VA_MIN_OK,
    VA_MIN_UNDER: VA_MIN_UNDER,
    VB_MAX_OK: VB_MAX_OK,
    VB_MAX_OVER: VB_MAX_OVER,
    VB_MIN_OK: VB_MIN_OK,
    VB_MIN_UNDER: VB_MIN_UNDER,
    VC_MAX_OK: VC_MAX_OK,
    VC_MAX_OVER: VC_MAX_OVER,
    VC_MIN_OK: VC_MIN_OK,
    VC_MIN_UNDER: VC_MIN_UNDER,
    V_PARAMETERS_FAULT: V_PARAMETERS_FAULT,
    V_PARAMETERS_OK: V_PARAMETERS_OK,
    WD_RESTART: WD_RESTART,
    WINTER_SUMMER_BAD: WINTER_SUMMER_BAD,
    WINTER_TIME: WINTER_TIME
  });

  var eventNames = invertObject(events);

  var SET_ALL_SEGMENT_DISPLAY = 1;
  var SOFTWARE_VERSION = 2;
  var TOTAL_ACTIVE_ENERGY = 3;
  var ACTIVE_ENERGY_T1 = 4;
  var ACTIVE_ENERGY_T2 = 5;
  var ACTIVE_ENERGY_T3 = 6;
  var ACTIVE_ENERGY_T4 = 7;
  var TOTAL_REACTIVE_ENERGY = 8;
  var REACTIVE_ENERGY_T1 = 9;
  var REACTIVE_ENERGY_T2 = 10;
  var REACTIVE_ENERGY_T3 = 11;
  var REACTIVE_ENERGY_T4 = 12;
  var TOTAL_NEGATIVE_REACTIVE_ENERGY = 13;
  var NEGATIVE_REACTIVE_ENERGY_T1 = 14;
  var NEGATIVE_REACTIVE_ENERGY_T2 = 15;
  var NEGATIVE_REACTIVE_ENERGY_T3 = 16;
  var NEGATIVE_REACTIVE_ENERGY_T4 = 17;
  var TOTAL_EXPORTED_ACTIVE_ENERGY = 18;
  var EXPORTED_ACTIVE_ENERGY_T1 = 19;
  var EXPORTED_ACTIVE_ENERGY_T2 = 20;
  var EXPORTED_ACTIVE_ENERGY_T3 = 21;
  var EXPORTED_ACTIVE_ENERGY_T4 = 22;
  var TOTAL_EXPORTED_REACTIVE_ENERGY = 23;
  var EXPORTED_REACTIVE_ENERGY_T1 = 24;
  var EXPORTED_REACTIVE_ENERGY_T2 = 25;
  var EXPORTED_REACTIVE_ENERGY_T3 = 26;
  var EXPORTED_REACTIVE_ENERGY_T4 = 27;
  var TOTAL_EXPORTED_NEGATIVE_REACTIVE_ENERGY = 28;
  var EXPORTED_NEGATIVE_REACTIVE_ENERGY_T1 = 29;
  var EXPORTED_NEGATIVE_REACTIVE_ENERGY_T2 = 30;
  var EXPORTED_NEGATIVE_REACTIVE_ENERGY_T3 = 31;
  var EXPORTED_NEGATIVE_REACTIVE_ENERGY_T4 = 32;
  var CURRENT_IN_PHASE_A = 33;
  var CURRENT_IN_PHASE_B = 34;
  var CURRENT_IN_PHASE_C = 35;
  var CURRENT_IN_NEUTRAL = 36;
  var VOLTAGE_IN_PHASE_A = 37;
  var VOLTAGE_IN_PHASE_B = 38;
  var VOLTAGE_IN_PHASE_C = 39;
  var BATTERY_VOLTAGE = 40;
  var SUPPLY_FREQUENCY = 41;
  var TOTAL_ACTIVE_POWER = 42;
  var ACTIVE_POWER_PHASE_A = 43;
  var ACTIVE_POWER_PHASE_B = 44;
  var ACTIVE_POWER_PHASE_C = 45;
  var TOTAL_REACTIVE_POWER_QPLUS = 46;
  var REACTIVE_POWER_QPLUS_PHASE_A = 47;
  var REACTIVE_POWER_QPLUS_PHASE_B = 48;
  var REACTIVE_POWER_QPLUS_PHASE_C = 49;
  var TOTAL_REACTIVE_POWER_QMINUS = 50;
  var REACTIVE_POWER_QMINUS_PHASE_A = 51;
  var REACTIVE_POWER_QMINUS_PHASE_B = 52;
  var REACTIVE_POWER_QMINUS_PHASE_C = 53;
  var TOTAL_POWER_FACTOR = 54;
  var POWER_FACTOR_PHASE_A = 55;
  var POWER_FACTOR_PHASE_B = 56;
  var POWER_FACTOR_PHASE_C = 57;
  var TOTAL_APPARENT_POWER_QPLUS = 58;
  var APPARENT_POWER_QPLUS_PHASE_A = 59;
  var APPARENT_POWER_QPLUS_PHASE_B = 60;
  var APPARENT_POWER_QPLUS_PHASE_C = 61;
  var TOTAL_APPARENT_POWER_QMINUS = 62;
  var APPARENT_POWER_QMINUS_PHASE_A = 63;
  var APPARENT_POWER_QMINUS_PHASE_B = 64;
  var APPARENT_POWER_QMINUS_PHASE_C = 65;
  var MAX_ACTIVE_POWER_DAY_T1 = 66;
  var MAX_ACTIVE_POWER_DAY_T2 = 67;
  var MAX_ACTIVE_POWER_DAY_T3 = 68;
  var MAX_ACTIVE_POWER_DAY_T4 = 69;
  var MAX_ACTIVE_POWER_MONTH_T1 = 70;
  var MAX_ACTIVE_POWER_MONTH_T2 = 71;
  var MAX_ACTIVE_POWER_MONTH_T3 = 72;
  var MAX_ACTIVE_POWER_MONTH_T4 = 73;
  var MAX_REACTIVE_POWER_DAY_T1 = 74;
  var MAX_REACTIVE_POWER_DAY_T2 = 75;
  var MAX_REACTIVE_POWER_DAY_T3 = 76;
  var MAX_REACTIVE_POWER_DAY_T4 = 77;
  var MAX_REACTIVE_POWER_MONTH_T1 = 78;
  var MAX_REACTIVE_POWER_MONTH_T2 = 79;
  var MAX_REACTIVE_POWER_MONTH_T3 = 80;
  var MAX_REACTIVE_POWER_MONTH_T4 = 81;
  var MAX_NEGATIVE_REACTIVE_POWER_DAY_T1 = 82;
  var MAX_NEGATIVE_REACTIVE_POWER_DAY_T2 = 83;
  var MAX_NEGATIVE_REACTIVE_POWER_DAY_T3 = 84;
  var MAX_NEGATIVE_REACTIVE_POWER_DAY_T4 = 85;
  var MAX_NEGATIVE_REACTIVE_POWER_MONTH_T1 = 86;
  var MAX_NEGATIVE_REACTIVE_POWER_MONTH_T2 = 87;
  var MAX_NEGATIVE_REACTIVE_POWER_MONTH_T3 = 88;
  var MAX_NEGATIVE_REACTIVE_POWER_MONTH_T4 = 89;
  var MAX_EXPORTED_ACTIVE_POWER_DAY_T1 = 90;
  var MAX_EXPORTED_ACTIVE_POWER_DAY_T2 = 91;
  var MAX_EXPORTED_ACTIVE_POWER_DAY_T3 = 92;
  var MAX_EXPORTED_ACTIVE_POWER_DAY_T4 = 93;
  var MAX_EXPORTED_ACTIVE_POWER_MONTH_T1 = 94;
  var MAX_EXPORTED_ACTIVE_POWER_MONTH_T2 = 95;
  var MAX_EXPORTED_ACTIVE_POWER_MONTH_T3 = 96;
  var MAX_EXPORTED_ACTIVE_POWER_MONTH_T4 = 97;
  var MAX_EXPORTED_REACTIVE_POWER_DAY_T1 = 98;
  var MAX_EXPORTED_REACTIVE_POWER_DAY_T2 = 99;
  var MAX_EXPORTED_REACTIVE_POWER_DAY_T3 = 100;
  var MAX_EXPORTED_REACTIVE_POWER_DAY_T4 = 101;
  var MAX_EXPORTED_REACTIVE_POWER_MONTH_T1 = 102;
  var MAX_EXPORTED_REACTIVE_POWER_MONTH_T2 = 103;
  var MAX_EXPORTED_REACTIVE_POWER_MONTH_T3 = 104;
  var MAX_EXPORTED_REACTIVE_POWER_MONTH_T4 = 105;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T1 = 106;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T2 = 107;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T3 = 108;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T4 = 109;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T1 = 110;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T2 = 111;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T3 = 112;
  var MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T4 = 113;
  var HOUR_MINUTE_SECOND = 114;
  var DATE_MONTH_YEAR = 115;
  var CURRENT_TRANSFORMATION_RATIO = 116;
  var VOLTAGE_TRANSFORMATION_RATIO = 117;
  var CURRENT_BALANCE = 118;
  var POWER_THRESHOLD_T1 = 119;
  var POWER_THRESHOLD_T2 = 120;
  var POWER_THRESHOLD_T3 = 121;
  var POWER_THRESHOLD_T4 = 122;
  var OPTOPORT_SPEED = 123;
  var MAGNET_INDUCTION = 124;

  var screenIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACTIVE_ENERGY_T1: ACTIVE_ENERGY_T1,
    ACTIVE_ENERGY_T2: ACTIVE_ENERGY_T2,
    ACTIVE_ENERGY_T3: ACTIVE_ENERGY_T3,
    ACTIVE_ENERGY_T4: ACTIVE_ENERGY_T4,
    ACTIVE_POWER_PHASE_A: ACTIVE_POWER_PHASE_A,
    ACTIVE_POWER_PHASE_B: ACTIVE_POWER_PHASE_B,
    ACTIVE_POWER_PHASE_C: ACTIVE_POWER_PHASE_C,
    APPARENT_POWER_QMINUS_PHASE_A: APPARENT_POWER_QMINUS_PHASE_A,
    APPARENT_POWER_QMINUS_PHASE_B: APPARENT_POWER_QMINUS_PHASE_B,
    APPARENT_POWER_QMINUS_PHASE_C: APPARENT_POWER_QMINUS_PHASE_C,
    APPARENT_POWER_QPLUS_PHASE_A: APPARENT_POWER_QPLUS_PHASE_A,
    APPARENT_POWER_QPLUS_PHASE_B: APPARENT_POWER_QPLUS_PHASE_B,
    APPARENT_POWER_QPLUS_PHASE_C: APPARENT_POWER_QPLUS_PHASE_C,
    BATTERY_VOLTAGE: BATTERY_VOLTAGE,
    CURRENT_BALANCE: CURRENT_BALANCE,
    CURRENT_IN_NEUTRAL: CURRENT_IN_NEUTRAL,
    CURRENT_IN_PHASE_A: CURRENT_IN_PHASE_A,
    CURRENT_IN_PHASE_B: CURRENT_IN_PHASE_B,
    CURRENT_IN_PHASE_C: CURRENT_IN_PHASE_C,
    CURRENT_TRANSFORMATION_RATIO: CURRENT_TRANSFORMATION_RATIO,
    DATE_MONTH_YEAR: DATE_MONTH_YEAR,
    EXPORTED_ACTIVE_ENERGY_T1: EXPORTED_ACTIVE_ENERGY_T1,
    EXPORTED_ACTIVE_ENERGY_T2: EXPORTED_ACTIVE_ENERGY_T2,
    EXPORTED_ACTIVE_ENERGY_T3: EXPORTED_ACTIVE_ENERGY_T3,
    EXPORTED_ACTIVE_ENERGY_T4: EXPORTED_ACTIVE_ENERGY_T4,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T1: EXPORTED_NEGATIVE_REACTIVE_ENERGY_T1,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T2: EXPORTED_NEGATIVE_REACTIVE_ENERGY_T2,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T3: EXPORTED_NEGATIVE_REACTIVE_ENERGY_T3,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T4: EXPORTED_NEGATIVE_REACTIVE_ENERGY_T4,
    EXPORTED_REACTIVE_ENERGY_T1: EXPORTED_REACTIVE_ENERGY_T1,
    EXPORTED_REACTIVE_ENERGY_T2: EXPORTED_REACTIVE_ENERGY_T2,
    EXPORTED_REACTIVE_ENERGY_T3: EXPORTED_REACTIVE_ENERGY_T3,
    EXPORTED_REACTIVE_ENERGY_T4: EXPORTED_REACTIVE_ENERGY_T4,
    HOUR_MINUTE_SECOND: HOUR_MINUTE_SECOND,
    MAGNET_INDUCTION: MAGNET_INDUCTION,
    MAX_ACTIVE_POWER_DAY_T1: MAX_ACTIVE_POWER_DAY_T1,
    MAX_ACTIVE_POWER_DAY_T2: MAX_ACTIVE_POWER_DAY_T2,
    MAX_ACTIVE_POWER_DAY_T3: MAX_ACTIVE_POWER_DAY_T3,
    MAX_ACTIVE_POWER_DAY_T4: MAX_ACTIVE_POWER_DAY_T4,
    MAX_ACTIVE_POWER_MONTH_T1: MAX_ACTIVE_POWER_MONTH_T1,
    MAX_ACTIVE_POWER_MONTH_T2: MAX_ACTIVE_POWER_MONTH_T2,
    MAX_ACTIVE_POWER_MONTH_T3: MAX_ACTIVE_POWER_MONTH_T3,
    MAX_ACTIVE_POWER_MONTH_T4: MAX_ACTIVE_POWER_MONTH_T4,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T1: MAX_EXPORTED_ACTIVE_POWER_DAY_T1,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T2: MAX_EXPORTED_ACTIVE_POWER_DAY_T2,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T3: MAX_EXPORTED_ACTIVE_POWER_DAY_T3,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T4: MAX_EXPORTED_ACTIVE_POWER_DAY_T4,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T1: MAX_EXPORTED_ACTIVE_POWER_MONTH_T1,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T2: MAX_EXPORTED_ACTIVE_POWER_MONTH_T2,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T3: MAX_EXPORTED_ACTIVE_POWER_MONTH_T3,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T4: MAX_EXPORTED_ACTIVE_POWER_MONTH_T4,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T1: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T1,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T2: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T2,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T3: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T3,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T4: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T4,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T1: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T1,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T2: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T2,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T3: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T3,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T4: MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T4,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T1: MAX_EXPORTED_REACTIVE_POWER_DAY_T1,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T2: MAX_EXPORTED_REACTIVE_POWER_DAY_T2,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T3: MAX_EXPORTED_REACTIVE_POWER_DAY_T3,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T4: MAX_EXPORTED_REACTIVE_POWER_DAY_T4,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T1: MAX_EXPORTED_REACTIVE_POWER_MONTH_T1,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T2: MAX_EXPORTED_REACTIVE_POWER_MONTH_T2,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T3: MAX_EXPORTED_REACTIVE_POWER_MONTH_T3,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T4: MAX_EXPORTED_REACTIVE_POWER_MONTH_T4,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T1: MAX_NEGATIVE_REACTIVE_POWER_DAY_T1,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T2: MAX_NEGATIVE_REACTIVE_POWER_DAY_T2,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T3: MAX_NEGATIVE_REACTIVE_POWER_DAY_T3,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T4: MAX_NEGATIVE_REACTIVE_POWER_DAY_T4,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T1: MAX_NEGATIVE_REACTIVE_POWER_MONTH_T1,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T2: MAX_NEGATIVE_REACTIVE_POWER_MONTH_T2,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T3: MAX_NEGATIVE_REACTIVE_POWER_MONTH_T3,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T4: MAX_NEGATIVE_REACTIVE_POWER_MONTH_T4,
    MAX_REACTIVE_POWER_DAY_T1: MAX_REACTIVE_POWER_DAY_T1,
    MAX_REACTIVE_POWER_DAY_T2: MAX_REACTIVE_POWER_DAY_T2,
    MAX_REACTIVE_POWER_DAY_T3: MAX_REACTIVE_POWER_DAY_T3,
    MAX_REACTIVE_POWER_DAY_T4: MAX_REACTIVE_POWER_DAY_T4,
    MAX_REACTIVE_POWER_MONTH_T1: MAX_REACTIVE_POWER_MONTH_T1,
    MAX_REACTIVE_POWER_MONTH_T2: MAX_REACTIVE_POWER_MONTH_T2,
    MAX_REACTIVE_POWER_MONTH_T3: MAX_REACTIVE_POWER_MONTH_T3,
    MAX_REACTIVE_POWER_MONTH_T4: MAX_REACTIVE_POWER_MONTH_T4,
    NEGATIVE_REACTIVE_ENERGY_T1: NEGATIVE_REACTIVE_ENERGY_T1,
    NEGATIVE_REACTIVE_ENERGY_T2: NEGATIVE_REACTIVE_ENERGY_T2,
    NEGATIVE_REACTIVE_ENERGY_T3: NEGATIVE_REACTIVE_ENERGY_T3,
    NEGATIVE_REACTIVE_ENERGY_T4: NEGATIVE_REACTIVE_ENERGY_T4,
    OPTOPORT_SPEED: OPTOPORT_SPEED,
    POWER_FACTOR_PHASE_A: POWER_FACTOR_PHASE_A,
    POWER_FACTOR_PHASE_B: POWER_FACTOR_PHASE_B,
    POWER_FACTOR_PHASE_C: POWER_FACTOR_PHASE_C,
    POWER_THRESHOLD_T1: POWER_THRESHOLD_T1,
    POWER_THRESHOLD_T2: POWER_THRESHOLD_T2,
    POWER_THRESHOLD_T3: POWER_THRESHOLD_T3,
    POWER_THRESHOLD_T4: POWER_THRESHOLD_T4,
    REACTIVE_ENERGY_T1: REACTIVE_ENERGY_T1,
    REACTIVE_ENERGY_T2: REACTIVE_ENERGY_T2,
    REACTIVE_ENERGY_T3: REACTIVE_ENERGY_T3,
    REACTIVE_ENERGY_T4: REACTIVE_ENERGY_T4,
    REACTIVE_POWER_QMINUS_PHASE_A: REACTIVE_POWER_QMINUS_PHASE_A,
    REACTIVE_POWER_QMINUS_PHASE_B: REACTIVE_POWER_QMINUS_PHASE_B,
    REACTIVE_POWER_QMINUS_PHASE_C: REACTIVE_POWER_QMINUS_PHASE_C,
    REACTIVE_POWER_QPLUS_PHASE_A: REACTIVE_POWER_QPLUS_PHASE_A,
    REACTIVE_POWER_QPLUS_PHASE_B: REACTIVE_POWER_QPLUS_PHASE_B,
    REACTIVE_POWER_QPLUS_PHASE_C: REACTIVE_POWER_QPLUS_PHASE_C,
    SET_ALL_SEGMENT_DISPLAY: SET_ALL_SEGMENT_DISPLAY,
    SOFTWARE_VERSION: SOFTWARE_VERSION,
    SUPPLY_FREQUENCY: SUPPLY_FREQUENCY,
    TOTAL_ACTIVE_ENERGY: TOTAL_ACTIVE_ENERGY,
    TOTAL_ACTIVE_POWER: TOTAL_ACTIVE_POWER,
    TOTAL_APPARENT_POWER_QMINUS: TOTAL_APPARENT_POWER_QMINUS,
    TOTAL_APPARENT_POWER_QPLUS: TOTAL_APPARENT_POWER_QPLUS,
    TOTAL_EXPORTED_ACTIVE_ENERGY: TOTAL_EXPORTED_ACTIVE_ENERGY,
    TOTAL_EXPORTED_NEGATIVE_REACTIVE_ENERGY: TOTAL_EXPORTED_NEGATIVE_REACTIVE_ENERGY,
    TOTAL_EXPORTED_REACTIVE_ENERGY: TOTAL_EXPORTED_REACTIVE_ENERGY,
    TOTAL_NEGATIVE_REACTIVE_ENERGY: TOTAL_NEGATIVE_REACTIVE_ENERGY,
    TOTAL_POWER_FACTOR: TOTAL_POWER_FACTOR,
    TOTAL_REACTIVE_ENERGY: TOTAL_REACTIVE_ENERGY,
    TOTAL_REACTIVE_POWER_QMINUS: TOTAL_REACTIVE_POWER_QMINUS,
    TOTAL_REACTIVE_POWER_QPLUS: TOTAL_REACTIVE_POWER_QPLUS,
    VOLTAGE_IN_PHASE_A: VOLTAGE_IN_PHASE_A,
    VOLTAGE_IN_PHASE_B: VOLTAGE_IN_PHASE_B,
    VOLTAGE_IN_PHASE_C: VOLTAGE_IN_PHASE_C,
    VOLTAGE_TRANSFORMATION_RATIO: VOLTAGE_TRANSFORMATION_RATIO
  });

  invertObject(screenIds);

  var errorResponse = 0xfe;

  var uplinkIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan,
    errorResponse: errorResponse,
    getBuildVersion: getBuildVersion,
    getCorrectTime: getCorrectTime,
    getCriticalEvent: getCriticalEvent,
    getCurrentStatusMeter: getCurrentStatusMeter,
    getCurrentValues: getCurrentValues,
    getDateTime: getDateTime,
    getDayDemand: getDayDemand,
    getDayDemandExport: getDayDemandExport,
    getDayMaxDemand: getDayMaxDemand,
    getDayMaxDemandExport: getDayMaxDemandExport,
    getDayProfile: getDayProfile,
    getDemand: getDemand,
    getDeviceId: getDeviceId,
    getDeviceType: getDeviceType,
    getDisplayParam: getDisplayParam,
    getEnergy: getEnergy,
    getEnergyDayPrevious: getEnergyDayPrevious,
    getEnergyExport: getEnergyExport,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious,
    getEventStatus: getEventStatus,
    getEvents: getEvents,
    getEventsCounters: getEventsCounters,
    getExtendedCurrentValues: getExtendedCurrentValues,
    getHalfHourDemand: getHalfHourDemand,
    getHalfHourDemandChannel: getHalfHourDemandChannel,
    getHalfHourDemandExport: getHalfHourDemandExport,
    getHalfHourDemandVare: getHalfHourDemandVare,
    getHalfHourDemandVareExport: getHalfHourDemandVareExport,
    getHalfHourDemandVari: getHalfHourDemandVari,
    getHalfHourDemandVariExport: getHalfHourDemandVariExport,
    getHalfHourEnergies: getHalfHourEnergies,
    getMagneticFieldThreshold: getMagneticFieldThreshold,
    getMeterInfo: getMeterInfo,
    getMonthDemand: getMonthDemand,
    getMonthDemandExport: getMonthDemandExport,
    getMonthMaxDemand: getMonthMaxDemand,
    getMonthMaxDemandExport: getMonthMaxDemandExport,
    getOperatorParameters: getOperatorParameters,
    getOperatorParametersExtended: getOperatorParametersExtended,
    getOperatorParametersExtended2: getOperatorParametersExtended2,
    getOperatorParametersExtended3: getOperatorParametersExtended3,
    getOperatorParametersExtended4: getOperatorParametersExtended4,
    getRatePlanInfo: getRatePlanInfo,
    getSaldo: getSaldo,
    getSaldoParameters: getSaldoParameters,
    getSeasonProfile: getSeasonProfile,
    getSpecialDay: getSpecialDay,
    getVersion: getVersion,
    prepareRatePlan: prepareRatePlan,
    resetPowerMaxDay: resetPowerMaxDay,
    resetPowerMaxMonth: resetPowerMaxMonth,
    runTariffPlan: runTariffPlan,
    setAccessKey: setAccessKey,
    setCorrectDateTime: setCorrectDateTime,
    setCorrectTime: setCorrectTime,
    setDateTime: setDateTime,
    setDayProfile: setDayProfile,
    setDisplayParam: setDisplayParam,
    setOperatorParameters: setOperatorParameters,
    setOperatorParametersExtended: setOperatorParametersExtended,
    setOperatorParametersExtended2: setOperatorParametersExtended2,
    setOperatorParametersExtended3: setOperatorParametersExtended3,
    setOperatorParametersExtended4: setOperatorParametersExtended4,
    setSaldo: setSaldo,
    setSaldoParameters: setSaldoParameters,
    setSeasonProfile: setSeasonProfile,
    setSpecialDay: setSpecialDay,
    setSpecialOperation: setSpecialOperation,
    turnRelayOff: turnRelayOff,
    turnRelayOn: turnRelayOn
  });

  invertObject(uplinkIds);

  var RATE_2400 = 2400;
  var RATE_9600 = 9600;
  var valueToRate = {
    plc: {
      0: RATE_9600,
      2: RATE_2400,
      4: RATE_9600
    },
    optoport: {
      0: RATE_2400,
      2: RATE_2400,
      4: RATE_9600
    }
  };
  var rateToValue = {
    plc: invertObject(valueToRate.plc),
    optoport: invertObject(valueToRate.optoport)
  };

  var OPERATOR_PARAMETERS_SIZE = 95;
  var OPERATOR_PARAMETERS_EXTENDED_SIZE = 9;
  var OPERATOR_PARAMETERS_EXTENDED2_SIZE = 28;
  var OPERATOR_PARAMETERS_EXTENDED4_SIZE = 28;
  var ENERGY_TYPE_BITS = 4;
  var displaySet1Mask = {
    SET_ALL_SEGMENT_DISPLAY: 1 << 0,
    SOFTWARE_VERSION: 1 << 1,
    TOTAL_ACTIVE_ENERGY: 1 << 2,
    ACTIVE_ENERGY_T1: 1 << 3,
    ACTIVE_ENERGY_T2: 1 << 4,
    ACTIVE_ENERGY_T3: 1 << 5,
    ACTIVE_ENERGY_T4: 1 << 6,
    TOTAL_REACTIVE_ENERGY: 1 << 7,
    REACTIVE_ENERGY_T1: 1 << 8,
    REACTIVE_ENERGY_T2: 1 << 9,
    REACTIVE_ENERGY_T3: 1 << 10,
    REACTIVE_ENERGY_T4: 1 << 11,
    TOTAL_NEGATIVE_REACTIVE_ENERGY: 1 << 12,
    NEGATIVE_REACTIVE_ENERGY_T1: 1 << 13,
    NEGATIVE_REACTIVE_ENERGY_T2: 1 << 14,
    NEGATIVE_REACTIVE_ENERGY_T3: 1 << 15,
    NEGATIVE_REACTIVE_ENERGY_T4: 1 << 16,
    TOTAL_EXPORTED_ACTIVE_ENERGY: 1 << 17,
    EXPORTED_ACTIVE_ENERGY_T1: 1 << 18,
    EXPORTED_ACTIVE_ENERGY_T2: 1 << 19,
    EXPORTED_ACTIVE_ENERGY_T3: 1 << 20,
    EXPORTED_ACTIVE_ENERGY_T4: 1 << 21,
    TOTAL_EXPORTED_REACTIVE_ENERGY: 1 << 22,
    EXPORTED_REACTIVE_ENERGY_T1: 1 << 23,
    EXPORTED_REACTIVE_ENERGY_T2: 1 << 24,
    EXPORTED_REACTIVE_ENERGY_T3: 1 << 25,
    EXPORTED_REACTIVE_ENERGY_T4: 1 << 26,
    TOTAL_EXPORTED_NEGATIVE_REACTIVE_ENERGY: 1 << 27,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T1: 1 << 28,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T2: 1 << 29,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T3: 1 << 30,
    EXPORTED_NEGATIVE_REACTIVE_ENERGY_T4: 1 << 31
  };
  var displaySet2Mask = {
    CURRENT_IN_PHASE_A: 1 << 0,
    CURRENT_IN_PHASE_B: 1 << 1,
    CURRENT_IN_PHASE_C: 1 << 2,
    CURRENT_IN_NEUTRAL: 1 << 3,
    VOLTAGE_IN_PHASE_A: 1 << 4,
    VOLTAGE_IN_PHASE_B: 1 << 5,
    VOLTAGE_IN_PHASE_C: 1 << 6,
    BATTERY_VOLTAGE: 1 << 7,
    SUPPLY_FREQUENCY: 1 << 8,
    TOTAL_ACTIVE_POWER: 1 << 9,
    ACTIVE_POWER_PHASE_A: 1 << 10,
    ACTIVE_POWER_PHASE_B: 1 << 11,
    ACTIVE_POWER_PHASE_C: 1 << 12,
    TOTAL_REACTIVE_POWER_QPLUS: 1 << 13,
    REACTIVE_POWER_QPLUS_PHASE_A: 1 << 14,
    REACTIVE_POWER_QPLUS_PHASE_B: 1 << 15,
    REACTIVE_POWER_QPLUS_PHASE_C: 1 << 16,
    TOTAL_REACTIVE_POWER_QMINUS: 1 << 17,
    REACTIVE_POWER_QMINUS_PHASE_A: 1 << 18,
    REACTIVE_POWER_QMINUS_PHASE_B: 1 << 19,
    REACTIVE_POWER_QMINUS_PHASE_C: 1 << 20,
    TOTAL_POWER_FACTOR: 1 << 21,
    POWER_FACTOR_PHASE_A: 1 << 22,
    POWER_FACTOR_PHASE_B: 1 << 23,
    POWER_FACTOR_PHASE_C: 1 << 24,
    TOTAL_APPARENT_POWER_QPLUS: 1 << 25,
    APPARENT_POWER_QPLUS_PHASE_A: 1 << 26,
    APPARENT_POWER_QPLUS_PHASE_B: 1 << 27,
    APPARENT_POWER_QPLUS_PHASE_C: 1 << 28,
    TOTAL_APPARENT_POWER_QMINUS: 1 << 29,
    APPARENT_POWER_QMINUS_PHASE_A: 1 << 30,
    APPARENT_POWER_QMINUS_PHASE_B: 1 << 31
  };
  var displaySet3Mask = {
    APPARENT_POWER_QMINUS_PHASE_C: 1 << 0,
    MAX_ACTIVE_POWER_DAY_T1: 1 << 1,
    MAX_ACTIVE_POWER_DAY_T2: 1 << 2,
    MAX_ACTIVE_POWER_DAY_T3: 1 << 3,
    MAX_ACTIVE_POWER_DAY_T4: 1 << 4,
    MAX_ACTIVE_POWER_MONTH_T1: 1 << 5,
    MAX_ACTIVE_POWER_MONTH_T2: 1 << 6,
    MAX_ACTIVE_POWER_MONTH_T3: 1 << 7,
    MAX_ACTIVE_POWER_MONTH_T4: 1 << 8,
    MAX_REACTIVE_POWER_DAY_T1: 1 << 9,
    MAX_REACTIVE_POWER_DAY_T2: 1 << 10,
    MAX_REACTIVE_POWER_DAY_T3: 1 << 11,
    MAX_REACTIVE_POWER_DAY_T4: 1 << 12,
    MAX_REACTIVE_POWER_MONTH_T1: 1 << 13,
    MAX_REACTIVE_POWER_MONTH_T2: 1 << 14,
    MAX_REACTIVE_POWER_MONTH_T3: 1 << 15,
    MAX_REACTIVE_POWER_MONTH_T4: 1 << 16,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T1: 1 << 17,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T2: 1 << 18,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T3: 1 << 19,
    MAX_NEGATIVE_REACTIVE_POWER_DAY_T4: 1 << 20,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T1: 1 << 21,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T2: 1 << 22,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T3: 1 << 23,
    MAX_NEGATIVE_REACTIVE_POWER_MONTH_T4: 1 << 24,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T1: 1 << 25,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T2: 1 << 26,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T3: 1 << 27,
    MAX_EXPORTED_ACTIVE_POWER_DAY_T4: 1 << 28,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T1: 1 << 29,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T2: 1 << 30,
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T3: 1 << 31
  };
  var displaySet4BaseMask = {
    MAX_EXPORTED_ACTIVE_POWER_MONTH_T4: 1 << 0,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T1: 1 << 1,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T2: 1 << 2,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T3: 1 << 3,
    MAX_EXPORTED_REACTIVE_POWER_DAY_T4: 1 << 4,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T1: 1 << 5,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T2: 1 << 6,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T3: 1 << 7,
    MAX_EXPORTED_REACTIVE_POWER_MONTH_T4: 1 << 8,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T1: 1 << 9,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T2: 1 << 10,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T3: 1 << 11,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_DAY_T4: 1 << 12,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T1: 1 << 13,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T2: 1 << 14,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T3: 1 << 15,
    MAX_EXPORTED_NEGATIVE_REACTIVE_POWER_MONTH_T4: 1 << 16,
    HOUR_MINUTE_SECOND: 1 << 17,
    DATE_MONTH_YEAR: 1 << 18,
    CURRENT_TRANSFORMATION_RATIO: 1 << 19,
    VOLTAGE_TRANSFORMATION_RATIO: 1 << 20,
    CURRENT_BALANCE: 1 << 21,
    POWER_THRESHOLD_T1: 1 << 22,
    POWER_THRESHOLD_T2: 1 << 23,
    POWER_THRESHOLD_T3: 1 << 24,
    POWER_THRESHOLD_T4: 1 << 25
  };
  var displaySet4Mask = {
    ...displaySet4BaseMask,
    SORT_DISPLAY_SCREENS: 1 << 29,
    AUTO_SCREEN_SCROLLING: 1 << 31
  };
  var displaySet5Mask = {
    EVENT: 1 << 0,
    PROFILE_P01: 1 << 1,
    PROFILE_P02: 1 << 2,
    PROFILE_P03: 1 << 3,
    PROFILE_P04: 1 << 4,
    PROFILE_P05: 1 << 5,
    PROFILE_P06: 1 << 6
  };
  var relaySetMask = {
    RELAY_ON_Y: 1 << 0,
    RELAY_ON_CENTER: 1 << 1,
    RELAY_ON_PB: 1 << 2,
    RELAY_ON_TARIFF_1: 1 << 3,
    RELAY_ON_TARIFF_2: 1 << 4,
    RELAY_ON_TARIFF_3: 1 << 5,
    RELAY_ON_TARIFF_4: 1 << 6,
    RELAY_ON_V_GOOD: 1 << 7,
    RELAY_OFF_Y: 1 << 8,
    RELAY_OFF_CENTER: 1 << 9,
    RELAY_OFF_TARIFF_1: 1 << 10,
    RELAY_OFF_TARIFF_2: 1 << 11,
    RELAY_OFF_TARIFF_3: 1 << 12,
    RELAY_OFF_TARIFF_4: 1 << 13,
    RELAY_OFF_I_LIMIT: 1 << 14,
    RELAY_OFF_V_BAD: 1 << 15,
    RELAY_OFF_DIFF_CURRENT_BAD: 1 << 16,
    RELAY_OFF_LIM_TARIFF_1: 1 << 17,
    RELAY_OFF_LIM_TARIFF_2: 1 << 18,
    RELAY_OFF_LIM_TARIFF_3: 1 << 19,
    RELAY_OFF_LIM_TARIFF_4: 1 << 20,
    RELAY_OFF_LIM_VAR_TARIFF_1: 1 << 21,
    RELAY_OFF_LIM_VAR_TARIFF_2: 1 << 22,
    RELAY_OFF_LIM_VAR_TARIFF_3: 1 << 23,
    RELAY_OFF_LIM_VAR_TARIFF_4: 1 << 24,
    RELAY_ON_PF_MIN: 1 << 25,
    RELAY_OFF_PF_MIN: 1 << 26,
    RELAY_ON_TIMEOUT: 1 << 27,
    RELAY_ON_SALDO: 1 << 28,
    RELAY_OFF_SALDO: 1 << 29,
    RELAY_OFF_SALDO_SOFT: 1 << 30
  };
  var typeMeterMask = {
    TRANSFORMATION_RATIO: 1 << 0,
    METER_TYPE_R: 1 << 4,
    ACCUMULATE_BY_R_PLUS_MINUS: 1 << 7
  };
  var define1Mask = {
    RESET_DAY_MAX_POWER_KEY: 1 << 0,
    RESET_MONTH_MAX_POWER_KEY: 1 << 1,
    BLOCK_KEY_OPTOPORT: 1 << 2,
    MAGNET_SCREEN_CONST: 1 << 5,
    ALLOW_BROWNOUT_INDICATION: 1 << 7
  };
  var displaySet24Mask = {
    ...displaySet4BaseMask,
    OPTOPORT_SPEED: 1 << 26,
    MAGNET_INDUCTION: 1 << 27
  };
  var relaySetExtMask = {
    RELAY_OFF_MAGNET: 1 << 0,
    RELAY_ON_MAGNET_TIMEOUT: 1 << 1,
    RELAY_ON_MAGNET_AUTO: 1 << 2
  };
  var getSpeedOptoPort = function (value) {
    return {
      plc: valueToRate.plc[extractBits(value, 4, 1)],
      optoport: valueToRate.optoport[extractBits(value, 4, 5)]
    };
  };
  var setSpeedOptoPort = function (speedOptoPort) {
    var result = 0;
    result = fillBits(result, 4, 1, Number(rateToValue.plc[speedOptoPort.plc]));
    result = fillBits(result, 4, 5, Number(rateToValue.optoport[speedOptoPort.optoport]));
    return result;
  };
  function getPackedEnergies(buffer, energyType, tariffMapByte) {
    var byte = tariffMapByte >> ENERGY_TYPE_BITS;
    var wh = [];
    var vari = [];
    var vare = [];
    for (var index = 0; index < TARIFF_NUMBER$1; index++) {
      var isTariffExists = !!extractBits(byte, 1, index + 1);
      if (isTariffExists) {
        wh.push(buffer.getInt32());
        vari.push(buffer.getInt32());
        vare.push(buffer.getInt32());
      } else {
        wh.push(null);
        vari.push(null);
        vare.push(null);
      }
    }
    return {
      wh: wh,
      vari: vari,
      vare: vare
    };
  }
  function getPackedEnergyType(energyType, energies) {
    var wh = energies.wh,
      vari = energies.vari,
      vare = energies.vare;
    var indexShift = 1 + ENERGY_TYPE_BITS;
    var tariffsByte = energyType;
    for (var index = 0; index < TARIFF_NUMBER$1; index++) {
      tariffsByte = fillBits(tariffsByte, 1, index + indexShift, Number(!!wh[index] && !!vari[index] && !!vare[index]));
    }
    return tariffsByte;
  }
  function CommandBinaryBuffer(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    CommandBinaryBuffer$2.call(this, dataOrLength, isLittleEndian);
  }
  CommandBinaryBuffer.prototype = Object.create(CommandBinaryBuffer$2.prototype);
  CommandBinaryBuffer.prototype.constructor = CommandBinaryBuffer;
  CommandBinaryBuffer.getDefaultOperatorParameters = function () {
    return {
      vpThreshold: 265000,
      vThreshold: 156000,
      ipThreshold: 120000,
      pmaxThreshold0: 31800,
      pmaxThreshold1: 31800,
      pmaxThreshold2: 31800,
      pmaxThreshold3: 31800,
      rmaxThreshold0: 31800,
      rmaxThreshold1: 31800,
      rmaxThreshold2: 31800,
      rmaxThreshold3: 31800,
      tint: 30,
      calcPeriodDate: 1,
      timeoutDisplay: 127,
      timeoutScreen: 7,
      displaySet1: toObject(displaySet1Mask, 4229),
      displaySet2: toObject(displaySet2Mask, 139776),
      displaySet3: toObject(displaySet3Mask, 0),
      relaySet: toObject(relaySetMask, 771),
      speedOptoPort: getSpeedOptoPort(64),
      ten: 30,
      tu: 30,
      timeIntervalPowerOff: 3,
      reserved: 0,
      timeoutBadVAVB: 5,
      freqMax: 55,
      freqMin: 45,
      year: 0,
      month: 0,
      date: 0,
      energyDecimalPoint: 2,
      voltageTransformationRatioNumerator: 1,
      voltageTransformationRatioDenominator: 1,
      currentTransformationRatioNumerator: 1,
      currentTransformationRatioDenominator: 1,
      typeMeter: toObject(typeMeterMask, 0),
      phMin: 0,
      timeoutIMax: 5,
      timeoutPMax: 5,
      timeoutCos: 5,
      pMaxDef: 1,
      displaySet4: toObject(displaySet4Mask, 2147876864)
    };
  };
  CommandBinaryBuffer.getDefaultOperatorParametersExtended = function () {
    return {
      timeoutRelayOn: 1,
      define1: toObject(define1Mask, 0),
      timeoutRelayKey: 0,
      timeoutRelayAuto: 5
    };
  };
  CommandBinaryBuffer.getDefaultOperatorParametersExtended2 = function () {
    return {
      deltaCorMin: 0,
      timeoutMagnetOff: 5,
      relaySetExt: toObject(relaySetExtMask, 0),
      timeoutMagnetOn: 5,
      defaultPlcPhase: 3,
      displaySet21: toObject(displaySet1Mask, 4231),
      displaySet22: toObject(displaySet2Mask, 31597303),
      displaySet23: toObject(displaySet3Mask, 0),
      displaySet24: toObject(displaySet24Mask, 393216),
      channel1: 0,
      channel2: 0,
      channel3: 0,
      channel4: 0,
      channel5: 0,
      channel6: 0,
      timeCorrectPeriod: 24,
      timeCorrectPassHalfhour: false
    };
  };
  CommandBinaryBuffer.getDefaultOperatorParametersExtended3 = CommandBinaryBuffer$2.getDefaultOperatorParametersExtended3;
  CommandBinaryBuffer.prototype.getOperatorParameters = function () {
    return {
      vpThreshold: this.getUint32(),
      vThreshold: this.getUint32(),
      ipThreshold: this.getUint32(),
      pmaxThreshold0: this.getUint32(),
      pmaxThreshold1: this.getUint32(),
      pmaxThreshold2: this.getUint32(),
      pmaxThreshold3: this.getUint32(),
      rmaxThreshold0: this.getUint32(),
      rmaxThreshold1: this.getUint32(),
      rmaxThreshold2: this.getUint32(),
      rmaxThreshold3: this.getUint32(),
      tint: this.getUint8(),
      calcPeriodDate: this.getUint8(),
      timeoutDisplay: this.getUint8(),
      timeoutScreen: this.getUint8(),
      displaySet1: toObject(displaySet1Mask, this.getUint32()),
      displaySet2: toObject(displaySet2Mask, this.getUint32()),
      displaySet3: toObject(displaySet3Mask, this.getUint32()),
      relaySet: toObject(relaySetMask, this.getUint32()),
      speedOptoPort: getSpeedOptoPort(this.getUint8()),
      ten: this.getUint8(),
      tu: this.getUint8(),
      timeIntervalPowerOff: this.getUint8(),
      reserved: this.getUint8(),
      timeoutBadVAVB: this.getUint8(),
      freqMax: this.getUint8(),
      freqMin: this.getUint8(),
      year: this.getUint8(),
      month: this.getUint8(),
      date: this.getUint8(),
      energyDecimalPoint: this.getUint8(),
      voltageTransformationRatioNumerator: this.getUint16(),
      voltageTransformationRatioDenominator: this.getUint16(),
      currentTransformationRatioNumerator: this.getUint16(),
      currentTransformationRatioDenominator: this.getUint16(),
      typeMeter: toObject(typeMeterMask, this.getUint8()),
      phMin: this.getUint16(),
      timeoutIMax: this.getUint8(),
      timeoutPMax: this.getUint8(),
      timeoutCos: this.getUint8(),
      pMaxDef: this.getUint8(),
      displaySet4: toObject(displaySet4Mask, this.getUint32())
    };
  };
  CommandBinaryBuffer.prototype.setOperatorParameters = function (operatorParameters) {
    this.setUint32(operatorParameters.vpThreshold);
    this.setUint32(operatorParameters.vThreshold);
    this.setUint32(operatorParameters.ipThreshold);
    this.setUint32(operatorParameters.pmaxThreshold0);
    this.setUint32(operatorParameters.pmaxThreshold1);
    this.setUint32(operatorParameters.pmaxThreshold2);
    this.setUint32(operatorParameters.pmaxThreshold3);
    this.setUint32(operatorParameters.rmaxThreshold0);
    this.setUint32(operatorParameters.rmaxThreshold1);
    this.setUint32(operatorParameters.rmaxThreshold2);
    this.setUint32(operatorParameters.rmaxThreshold3);
    this.setUint8(operatorParameters.tint);
    this.setUint8(operatorParameters.calcPeriodDate);
    this.setUint8(operatorParameters.timeoutDisplay);
    this.setUint8(operatorParameters.timeoutScreen);
    this.setUint32(fromObject(displaySet1Mask, operatorParameters.displaySet1));
    this.setUint32(fromObject(displaySet2Mask, operatorParameters.displaySet2));
    this.setUint32(fromObject(displaySet3Mask, operatorParameters.displaySet3));
    this.setUint32(fromObject(relaySetMask, operatorParameters.relaySet));
    this.setUint8(setSpeedOptoPort(operatorParameters.speedOptoPort));
    this.setUint8(operatorParameters.ten);
    this.setUint8(operatorParameters.tu);
    this.setUint8(operatorParameters.timeIntervalPowerOff);
    this.setUint8(operatorParameters.reserved);
    this.setUint8(operatorParameters.timeoutBadVAVB);
    this.setUint8(operatorParameters.freqMax);
    this.setUint8(operatorParameters.freqMin);
    this.setUint8(operatorParameters.year);
    this.setUint8(operatorParameters.month);
    this.setUint8(operatorParameters.date);
    this.setUint8(operatorParameters.energyDecimalPoint);
    this.setUint16(operatorParameters.voltageTransformationRatioNumerator);
    this.setUint16(operatorParameters.voltageTransformationRatioDenominator);
    this.setUint16(operatorParameters.currentTransformationRatioNumerator);
    this.setUint16(operatorParameters.currentTransformationRatioDenominator);
    this.setUint8(fromObject(typeMeterMask, operatorParameters.typeMeter));
    this.setUint16(operatorParameters.phMin);
    this.setUint8(operatorParameters.timeoutIMax);
    this.setUint8(operatorParameters.timeoutPMax);
    this.setUint8(operatorParameters.timeoutCos);
    this.setUint8(operatorParameters.pMaxDef);
    this.setUint32(fromObject(displaySet4Mask, operatorParameters.displaySet4));
  };
  CommandBinaryBuffer.prototype.getOperatorParametersExtended = function () {
    return {
      timeoutRelayOn: this.getUint8(),
      define1: toObject(define1Mask, this.getUint8()),
      timeoutRelayKey: this.getUint8(),
      timeoutRelayAuto: this.getUint8()
    };
  };
  CommandBinaryBuffer.prototype.setOperatorParametersExtended = function (operatorParametersExtended) {
    this.setUint8(operatorParametersExtended.timeoutRelayOn);
    this.setUint8(fromObject(define1Mask, operatorParametersExtended.define1));
    this.setUint8(operatorParametersExtended.timeoutRelayKey);
    this.setUint8(operatorParametersExtended.timeoutRelayAuto);
    this.setUint32(0);
    this.setUint8(0);
  };
  CommandBinaryBuffer.prototype.getEnergies = function () {
    var wh = [];
    var vari = [];
    var vare = [];
    for (var index = 0; index < TARIFF_NUMBER$1; index++) {
      wh.push(this.getInt32());
      vari.push(this.getInt32());
      vare.push(this.getInt32());
    }
    return {
      wh: wh,
      vari: vari,
      vare: vare
    };
  };
  CommandBinaryBuffer.prototype.setEnergies = function (parameters) {
    for (var index = 0; index < TARIFF_NUMBER$1; index++) {
      this.setInt32(parameters.wh[index]);
      this.setInt32(parameters.vari[index]);
      this.setInt32(parameters.vare[index]);
    }
  };
  CommandBinaryBuffer.prototype.getPackedEnergyWithType = function () {
    var byte = this.getUint8();
    var energyType = extractBits(byte, ENERGY_TYPE_BITS, 1);
    var energies = getPackedEnergies(this, energyType, byte);
    return {
      energyType: energyType,
      energies: energies
    };
  };
  CommandBinaryBuffer.prototype.setPackedEnergyWithType = function (_ref) {
    var energyType = _ref.energyType,
      energies = _ref.energies;
    if (energyType) {
      var energyTypeByte = getPackedEnergyType(energyType, energies);
      var tariffsByte = energyTypeByte >> ENERGY_TYPE_BITS;
      this.setUint8(energyTypeByte);
      for (var index = 0; index < TARIFF_NUMBER$1; index++) {
        var isTariffExists = !!extractBits(tariffsByte, 1, index + 1);
        if (isTariffExists) {
          this.setInt32(energies.wh[index]);
          this.setInt32(energies.vari[index]);
          this.setInt32(energies.vare[index]);
        }
      }
      return;
    }
    for (var _index = 0; _index < TARIFF_NUMBER$1; _index++) {
      this.setInt32(energies.wh[_index]);
      this.setInt32(energies.vari[_index]);
      this.setInt32(energies.vare[_index]);
    }
  };
  CommandBinaryBuffer.prototype.getEnergyPeriods = function (energiesNumber) {
    var _this = this;
    return new Array(energiesNumber).fill(0).map(function () {
      var energy = _this.getUint16();
      return energy === 0xffff ? undefined : energy;
    });
  };
  CommandBinaryBuffer.prototype.setEnergyPeriods = function (energies) {
    var _this2 = this;
    energies.forEach(function (energy) {
      return _this2.setUint16(energy === undefined ? 0xffff : energy);
    });
  };
  CommandBinaryBuffer.prototype.getMaxDemand = function () {
    return {
      hourPmax: this.getUint8(),
      minPmax: this.getUint8(),
      pmax: this.getInt32(),
      hourVariMax: this.getUint8(),
      minVariMax: this.getUint8(),
      variMax: this.getInt32(),
      hourVareMax: this.getUint8(),
      minVareMax: this.getUint8(),
      vareMax: this.getInt32()
    };
  };
  CommandBinaryBuffer.prototype.setMaxDemand = function (maxDemand) {
    this.setUint8(maxDemand.hourPmax);
    this.setUint8(maxDemand.minPmax);
    this.setInt32(maxDemand.pmax);
    this.setUint8(maxDemand.hourVariMax);
    this.setUint8(maxDemand.minVariMax);
    this.setInt32(maxDemand.variMax);
    this.setUint8(maxDemand.hourVareMax);
    this.setUint8(maxDemand.minVareMax);
    this.setInt32(maxDemand.vareMax);
  };
  CommandBinaryBuffer.prototype.getDayMaxDemandResponse = function () {
    var _this3 = this;
    var date = this.getDate();
    var maxDemands = new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return _this3.getMaxDemand();
    });
    return {
      date: date,
      maxDemands: maxDemands
    };
  };
  CommandBinaryBuffer.prototype.setDayMaxDemandResponse = function (parameters) {
    var _this4 = this;
    this.setDate(parameters.date);
    parameters.maxDemands.forEach(function (value) {
      return _this4.setMaxDemand(value);
    });
  };
  CommandBinaryBuffer.prototype.getMonthMaxDemandResponse = function () {
    var _this5 = this;
    var date = {
      year: this.getUint8(),
      month: this.getUint8()
    };
    var maxDemands = new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return _this5.getMaxDemand();
    });
    return {
      date: date,
      maxDemands: maxDemands
    };
  };
  CommandBinaryBuffer.prototype.setMonthMaxDemandResponse = function (parameters) {
    var _this6 = this;
    this.setUint8(parameters.date.year);
    this.setUint8(parameters.date.month);
    parameters.maxDemands.forEach(function (value) {
      return _this6.setMaxDemand(value);
    });
  };
  CommandBinaryBuffer.prototype.getEvent = function () {
    var data = {
      hours: this.getUint8(),
      minutes: this.getUint8(),
      seconds: this.getUint8(),
      event: this.getUint8()
    };
    var event = data.event;
    var bytesLeft = this.bytesLeft;
    data.eventName = eventNames[event];
    switch (event) {
      case POWER_OVER_RELAY_OFF:
        if (bytesLeft < 4) {
          return data;
        }
        data.power = [this.getUint8(), this.getUint8(), this.getUint8(), this.getUint8()];
        break;
      case CMD_CHANGE_TIME:
      case TIME_CORRECT:
        if (bytesLeft < 8) {
          return data;
        }
        data.newDate = this.getDateTime();
        break;
    }
    return data;
  };
  CommandBinaryBuffer.prototype.setEvent = function (event) {
    this.setUint8(event.hours);
    this.setUint8(event.minutes);
    this.setUint8(event.seconds);
    this.setUint8(event.event);
    switch (event.event) {
      case POWER_OVER_RELAY_OFF:
        for (var item of event.power) {
          this.setUint8(item);
        }
        break;
      case CMD_CHANGE_TIME:
      case TIME_CORRECT:
        this.setDateTime(event.newDate);
        break;
    }
  };
  CommandBinaryBuffer.prototype.getDemand = function () {
    var date0 = this.getUint8();
    var date1 = this.getUint8();
    return {
      date: {
        year: date0 >> 1,
        month: date0 << 3 & 0x0f | date1 >> 5,
        date: date1 & 0x1f
      },
      demandParam: this.getUint8(),
      firstIndex: this.getUint16(),
      count: this.getUint8(),
      period: this.getUint8()
    };
  };
  CommandBinaryBuffer.prototype.setDemand = function (parameters) {
    var date0 = parameters.date.year << 1 | parameters.date.month >> 3 & 0x01;
    var date1 = parameters.date.month << 5 & 0xe0 | parameters.date.date & 0x1f;
    this.setUint8(date0);
    this.setUint8(date1);
    this.setUint8(parameters.demandParam);
    this.setUint16(parameters.firstIndex);
    this.setUint8(parameters.count);
    this.setUint8(parameters.period);
  };
  CommandBinaryBuffer.prototype.getOperatorParametersExtended2 = function () {
    var operatorParametersExtended2 = {
      deltaCorMin: this.getUint8(),
      timeoutMagnetOff: this.getUint8(),
      relaySetExt: toObject(relaySetExtMask, this.getUint8()),
      timeoutMagnetOn: this.getUint8(),
      defaultPlcPhase: this.getUint8(),
      displaySet21: toObject(displaySet1Mask, this.getUint32()),
      displaySet22: toObject(displaySet2Mask, this.getUint32()),
      displaySet23: toObject(displaySet3Mask, this.getUint32()),
      displaySet24: toObject(displaySet24Mask, this.getUint32()),
      channel1: this.getUint8(),
      channel2: this.getUint8(),
      channel3: this.getUint8(),
      channel4: this.getUint8(),
      channel5: this.getUint8(),
      channel6: this.getUint8(),
      timeCorrectPeriod: 0,
      timeCorrectPassHalfhour: false
    };
    var timeCorrectPeriod = this.getUint8();
    operatorParametersExtended2.timeCorrectPeriod = timeCorrectPeriod & 0x7f;
    operatorParametersExtended2.timeCorrectPassHalfhour = !!(timeCorrectPeriod & 0x80);
    return operatorParametersExtended2;
  };
  CommandBinaryBuffer.prototype.setOperatorParametersExtended2 = function (operatorParametersExtended2) {
    var timeCorrectPeriod = operatorParametersExtended2.timeCorrectPeriod | (operatorParametersExtended2.timeCorrectPassHalfhour ? 0x80 : 0);
    this.setUint8(operatorParametersExtended2.deltaCorMin);
    this.setUint8(operatorParametersExtended2.timeoutMagnetOff);
    this.setUint8(fromObject(relaySetExtMask, operatorParametersExtended2.relaySetExt));
    this.setUint8(operatorParametersExtended2.timeoutMagnetOn);
    this.setUint8(operatorParametersExtended2.defaultPlcPhase);
    this.setUint32(fromObject(displaySet1Mask, operatorParametersExtended2.displaySet21));
    this.setUint32(fromObject(displaySet2Mask, operatorParametersExtended2.displaySet22));
    this.setUint32(fromObject(displaySet3Mask, operatorParametersExtended2.displaySet23));
    this.setUint32(fromObject(displaySet24Mask, operatorParametersExtended2.displaySet24));
    this.setUint8(operatorParametersExtended2.channel1);
    this.setUint8(operatorParametersExtended2.channel2);
    this.setUint8(operatorParametersExtended2.channel3);
    this.setUint8(operatorParametersExtended2.channel4);
    this.setUint8(operatorParametersExtended2.channel5);
    this.setUint8(operatorParametersExtended2.channel6);
    this.setUint8(timeCorrectPeriod);
  };
  CommandBinaryBuffer.prototype.getOperatorParametersExtended4 = function () {
    return {
      displaySet5: toObject(displaySet5Mask, this.getUint32()),
      displaySet25: toObject(displaySet5Mask, this.getUint32()),
      displaySet31: toObject(displaySet1Mask, this.getUint32()),
      displaySet32: toObject(displaySet2Mask, this.getUint32()),
      displaySet33: toObject(displaySet3Mask, this.getUint32()),
      displaySet34: toObject(displaySet4Mask, this.getUint32()),
      displaySet35: toObject(displaySet5Mask, this.getUint32())
    };
  };
  CommandBinaryBuffer.prototype.setOperatorParametersExtended4 = function (operatorParametersExtended) {
    this.setUint32(fromObject(displaySet5Mask, operatorParametersExtended.displaySet5));
    this.setUint32(fromObject(displaySet5Mask, operatorParametersExtended.displaySet25));
    this.setUint32(fromObject(displaySet1Mask, operatorParametersExtended.displaySet31));
    this.setUint32(fromObject(displaySet2Mask, operatorParametersExtended.displaySet32));
    this.setUint32(fromObject(displaySet3Mask, operatorParametersExtended.displaySet33));
    this.setUint32(fromObject(displaySet4Mask, operatorParametersExtended.displaySet34));
    this.setUint32(fromObject(displaySet5Mask, operatorParametersExtended.displaySet35));
  };

  var MIN_COMMAND_SIZE = 3;
  var MAX_COMMAND_SIZE = 4;
  var id$k = getDayDemand;
  var toBytes$m = function (parameters) {
    var buffer = new CommandBinaryBuffer(parameters?.energyType ? MAX_COMMAND_SIZE : MIN_COMMAND_SIZE);
    buffer.setDate(parameters?.date);
    if (parameters?.energyType) {
      buffer.setUint8(parameters.energyType);
    }
    return toBytes$19(id$k, buffer.data);
  };

  var id$j = getDayDemandExport;
  var maxSize$b = 3;
  var toBytes$l = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$b);
    buffer.setDate(parameters.date);
    return toBytes$19(id$j, buffer.data);
  };

  var id$i = getDemand;
  var maxSize$a = 7;
  var toBytes$k = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$a);
    buffer.setDemand(parameters);
    return toBytes$19(id$i, buffer.data);
  };

  var id$h = getDisplayParam;
  var maxSize$9 = 1;
  var toBytes$j = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$9);
    buffer.setUint8(parameters.displayMode);
    return toBytes$19(id$h, buffer.data);
  };

  var id$g = getEnergy;
  var toBytes$i = function () {
    return toBytes$19(id$g);
  };

  var id$f = getEnergyDayPrevious;
  var toBytes$h = function (parameters) {
    if (parameters.energyType) {
      return toBytes$19(id$f, [parameters.energyType]);
    }
    return toBytes$19(id$f);
  };

  var id$e = getEnergyExport;
  var toBytes$g = function () {
    return toBytes$19(id$e);
  };

  var id$d = getEnergyExportDayPrevious;
  var toBytes$f = function () {
    return toBytes$19(id$d);
  };

  var id$c = getHalfHourDemandChannel;
  var maxSize$8 = 5;
  var toBytes$e = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$8);
    buffer.setUint8(parameters.channel);
    buffer.setUint8(parameters.loadProfile);
    buffer.setDate(parameters.date);
    return toBytes$19(id$c, buffer.data);
  };

  var id$b = getHalfHourDemandVare;
  var maxSize$7 = 3;
  var toBytes$d = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$7);
    buffer.setDate(parameters.date);
    return toBytes$19(id$b, buffer.data);
  };

  var id$a = getHalfHourDemandVareExport;
  var maxSize$6 = 3;
  var toBytes$c = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$6);
    buffer.setDate(parameters.date);
    return toBytes$19(id$a, buffer.data);
  };

  var id$9 = getHalfHourDemandVari;
  var maxSize$5 = 3;
  var toBytes$b = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$5);
    buffer.setDate(parameters.date);
    return toBytes$19(id$9, buffer.data);
  };

  var id$8 = getHalfHourDemandVariExport;
  var maxSize$4 = 3;
  var toBytes$a = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$4);
    buffer.setDate(parameters.date);
    return toBytes$19(id$8, buffer.data);
  };

  var id$7 = getOperatorParametersExtended;
  var toBytes$9 = function () {
    return toBytes$19(id$7);
  };

  var id$6 = getOperatorParametersExtended2;
  var toBytes$8 = function () {
    return toBytes$19(id$6);
  };

  var id$5 = getOperatorParametersExtended4;
  var toBytes$7 = function () {
    return toBytes$19(id$5);
  };

  var id$4 = setDisplayParam;
  var toBytes$6 = function (parameters) {
    return toBytes$19(id$4, [parameters.displayMode].concat(_toConsumableArray(parameters.order)));
  };

  var id$3 = setOperatorParameters;
  var maxSize$3 = OPERATOR_PARAMETERS_SIZE;
  var toBytes$5 = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$3);
    buffer.setOperatorParameters(parameters);
    return toBytes$19(id$3, buffer.data);
  };

  var id$2 = setOperatorParametersExtended;
  var maxSize$2 = OPERATOR_PARAMETERS_EXTENDED_SIZE;
  var toBytes$4 = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$2);
    buffer.setOperatorParametersExtended(parameters);
    return toBytes$19(id$2, buffer.data);
  };

  var id$1 = setOperatorParametersExtended2;
  var maxSize$1 = OPERATOR_PARAMETERS_EXTENDED2_SIZE;
  var toBytes$3 = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$1);
    buffer.setOperatorParametersExtended2(parameters);
    return toBytes$19(id$1, buffer.data);
  };

  var id = setOperatorParametersExtended4;
  var maxSize = OPERATOR_PARAMETERS_EXTENDED4_SIZE;
  var toBytes$2 = function (parameters) {
    var buffer = new CommandBinaryBuffer(maxSize);
    buffer.setOperatorParametersExtended4(parameters);
    return toBytes$19(id, buffer.data);
  };

  var toBytesMap = {};
  var toBytes$1 = getToBytes(toBytesMap);
  toBytesMap[id$16] = toBytes$18;
  toBytesMap[id$15] = toBytes$17;
  toBytesMap[id$14] = toBytes$16;
  toBytesMap[id$13] = toBytes$15;
  toBytesMap[id$12] = toBytes$14;
  toBytesMap[id$11] = toBytes$13;
  toBytesMap[id$11] = toBytes$13;
  toBytesMap[id$10] = toBytes$12;
  toBytesMap[id$] = toBytes$11;
  toBytesMap[id$_] = toBytes$10;
  toBytesMap[id$Z] = toBytes$;
  toBytesMap[id$Y] = toBytes$_;
  toBytesMap[id$X] = toBytes$Z;
  toBytesMap[id$W] = toBytes$Y;
  toBytesMap[id$V] = toBytes$X;
  toBytesMap[id$U] = toBytes$W;
  toBytesMap[id$T] = toBytes$V;
  toBytesMap[id$S] = toBytes$U;
  toBytesMap[id$R] = toBytes$T;
  toBytesMap[id$Q] = toBytes$S;
  toBytesMap[id$P] = toBytes$R;
  toBytesMap[id$O] = toBytes$Q;
  toBytesMap[id$N] = toBytes$P;
  toBytesMap[id$M] = toBytes$O;
  toBytesMap[id$L] = toBytes$N;
  toBytesMap[id$J] = toBytes$L;
  toBytesMap[id$K] = toBytes$M;
  toBytesMap[id$I] = toBytes$K;
  toBytesMap[id$H] = toBytes$J;
  toBytesMap[id$G] = toBytes$I;
  toBytesMap[id$F] = toBytes$H;
  toBytesMap[id$E] = toBytes$G;
  toBytesMap[id$D] = toBytes$F;
  toBytesMap[id$C] = toBytes$E;
  toBytesMap[id$B] = toBytes$D;
  toBytesMap[id$A] = toBytes$C;
  toBytesMap[id$z] = toBytes$B;
  toBytesMap[id$y] = toBytes$A;
  toBytesMap[id$x] = toBytes$z;
  toBytesMap[id$w] = toBytes$y;
  toBytesMap[id$v] = toBytes$x;
  toBytesMap[id$u] = toBytes$w;
  toBytesMap[id$t] = toBytes$v;
  toBytesMap[id$s] = toBytes$u;
  toBytesMap[id$r] = toBytes$t;
  toBytesMap[id$q] = toBytes$s;
  toBytesMap[id$p] = toBytes$r;
  toBytesMap[id$o] = toBytes$q;
  toBytesMap[id$n] = toBytes$p;
  toBytesMap[id$m] = toBytes$o;
  toBytesMap[id$l] = toBytes$n;
  toBytesMap[id$k] = toBytes$m;
  toBytesMap[id$j] = toBytes$l;
  toBytesMap[id$i] = toBytes$k;
  toBytesMap[id$h] = toBytes$j;
  toBytesMap[id$g] = toBytes$i;
  toBytesMap[id$f] = toBytes$h;
  toBytesMap[id$e] = toBytes$g;
  toBytesMap[id$d] = toBytes$f;
  toBytesMap[id$c] = toBytes$e;
  toBytesMap[id$b] = toBytes$d;
  toBytesMap[id$a] = toBytes$c;
  toBytesMap[id$9] = toBytes$b;
  toBytesMap[id$8] = toBytes$a;
  toBytesMap[id$7] = toBytes$9;
  toBytesMap[id$6] = toBytes$8;
  toBytesMap[id$5] = toBytes$7;
  toBytesMap[id$4] = toBytes$6;
  toBytesMap[id$3] = toBytes$5;
  toBytesMap[id$2] = toBytes$4;
  toBytesMap[id$1] = toBytes$3;
  toBytesMap[id] = toBytes$2;

  // 0b10010001 (segmentIndex: 1, segmentsNumber: 1, isLast: true)
  var SINGLE_SEGMENT_FLAG = 0x91;
  var DATA_SEGMENT_COMMAND_ID = 0x1e;
  var set = function (bytes) {
    var body = [DATA_SEGMENT_COMMAND_ID, bytes.length + 2, 0, SINGLE_SEGMENT_FLAG].concat(_toConsumableArray(bytes));
    return [].concat(_toConsumableArray(body), [calculateLrc(body)]);
  };

  // export
  getBase64FromBytes = getBase64FromBytes$1;
  toBytes = toBytes$1;
  setDataSegment = set;

})();
//#endregion


/*
  Incoming arguments:
    * msg - JSON message payload downlink message json
    * msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.
    * metadata - list of key-value pairs with additional data about the message
    * integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter

  Output must be an object with the following fields:
    * contentType - BINARY
    * data - payload in base64
*/

var bytes = toBytes(msg.commands);

// send nothing if not fit in a single data segment
if ( bytes.length > MAX_DATA_SEGMENT_SIZE ) {
    bytes = [];
} else {
    bytes = setDataSegment(bytes);
}

var result = {
    contentType: 'BINARY',
    data: getBase64FromBytes(bytes)
};

return result;
