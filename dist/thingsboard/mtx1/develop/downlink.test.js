// this is for testing only!

var logs = '';


//#region [autogenerated jooby-codec bundle from index.js]
(function () {
  'use strict';

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _createForOfIteratorHelper(r, e) {
    var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (!t) {
      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
        t && (r = t);
        var n = 0,
          F = function () {};
        return {
          s: F,
          n: function () {
            return n >= r.length ? {
              done: true
            } : {
              done: false,
              value: r[n++]
            };
          },
          e: function (r) {
            throw r;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o,
      a = true,
      u = false;
    return {
      s: function () {
        t = t.call(r);
      },
      n: function () {
        var r = t.next();
        return a = r.done, r;
      },
      e: function (r) {
        u = true, o = r;
      },
      f: function () {
        try {
          a || null == t.return || t.return();
        } finally {
          if (u) throw o;
        }
      }
    };
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function (r) {
        return Object.getOwnPropertyDescriptor(e, r).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), true).forEach(function (r) {
        _defineProperty(e, r, t[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
      });
    }
    return e;
  }
  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  }
  function _toArray(r) {
    return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest();
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (undefined !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : undefined;
    }
  }

  var hexFormatOptions = {
    separator: ' ',
    prefix: ''
  };

  var INT8_SIZE = 1;
  var INT16_SIZE = 2;
  var INT24_SIZE = 3;
  var INT32_SIZE = 4;
  var log = Math.log,
    pow = Math.pow,
    LN2 = Math.LN2;
  var readFloat = function readFloat(buffer, offset, isLittleEndian, mLen, bytes) {
    var e,
      m,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLittleEndian ? bytes - 1 : 0,
      d = isLittleEndian ? -1 : 1,
      s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * pow(2, e - mLen);
  };
  var writeFloat = function writeFloat(buffer, offset, value, isLittleEndian, mLen, bytes) {
    var e,
      m,
      c,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
      i = isLittleEndian ? 0 : bytes - 1,
      d = isLittleEndian ? 1 : -1,
      s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value < 0 && (value = -value);
    if (value !== value || value === Infinity) {
      m = value !== value ? 1 : 0;
      e = eMax;
    } else {
      e = log(value) / LN2 | 0;
      if (value * (c = pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 0x100, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 0x100, eLen -= 8);
    buffer[offset + i - d] |= s * 0x80;
  };
  var be2 = [1, 0];
  var be3 = [2, 1, 0];
  var be4 = [3, 2, 1, 0];
  var le2 = [0, 1];
  var le3 = [0, 1, 2];
  var le4 = [0, 1, 2, 3];
  var readUint8 = function readUint8(buffer, offset) {
    return buffer[offset];
  };
  var readUint16 = function readUint16(buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    return b0 | b1;
  };
  var readUint24 = function readUint24(buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le3 : be3;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    var b2 = buffer[offset + order[2]] << 16;
    return b0 | b1 | b2;
  };
  var readUint32 = function readUint32(buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    var b0 = buffer[offset + order[3]] * 0x1000000;
    var b1 = buffer[offset + order[2]] * 0x10000;
    var b2 = buffer[offset + order[1]] * 0x100;
    var b3 = buffer[offset + order[0]];
    return b0 + b1 + b2 + b3;
  };
  var writeUint8 = function writeUint8(buffer, offset, value) {
    buffer[offset] = value & 0xff;
  };
  var writeUint16 = function writeUint16(buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
  };
  var writeUint24 = function writeUint24(buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le3 : be3;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
  };
  var writeUint32 = function writeUint32(buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
    buffer[offset + order[3]] = value >>> 24 & 0xff;
  };
  function BinaryBuffer(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (typeof dataOrLength === 'number') {
      var bytes = new Array(dataOrLength).fill(0);
      this.data = bytes;
    } else {
      this.data = dataOrLength;
    }
    this.offset = 0;
    this.isLittleEndian = isLittleEndian;
  }
  BinaryBuffer.prototype = {
    toUint8Array: function toUint8Array() {
      return this.data;
    },
    seek: function seek(position) {
      if (position < 0 || position >= this.data.length) {
        throw new Error('Invalid position.');
      }
      this.offset = position;
    },
    setInt8: function setInt8(value) {
      writeUint8(this.data, this.offset, value < 0 ? value | 0x100 : value);
      this.offset += INT8_SIZE;
    },
    getInt8: function getInt8() {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result & 0x80 ? result ^ -256 : result;
    },
    setUint8: function setUint8(value) {
      writeUint8(this.data, this.offset, value);
      this.offset += INT8_SIZE;
    },
    getUint8: function getUint8() {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result;
    },
    setInt16: function setInt16(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value < 0 ? value | 0x10000 : value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getInt16: function getInt16() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result & 0x8000 ? result ^ -65536 : result;
    },
    setUint16: function setUint16(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getUint16: function getUint16() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result;
    },
    setInt24: function setInt24(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint24(this.data, this.offset, value < 0 ? value | 0x1000000 : value, isLittleEndian);
      this.offset += INT24_SIZE;
    },
    getInt24: function getInt24() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint24(this.data, this.offset, isLittleEndian);
      this.offset += INT24_SIZE;
      return result & 0x800000 ? result ^ -16777216 : result;
    },
    setUint24: function setUint24(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint24(this.data, this.offset, value, isLittleEndian);
      this.offset += INT24_SIZE;
    },
    getUint24: function getUint24() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint24(this.data, this.offset, isLittleEndian);
      this.offset += INT24_SIZE;
      return result;
    },
    setInt32: function setInt32(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value < 0 ? value | 0x100000000 : value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getInt32: function getInt32() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result & 0x80000000 ? result ^ -4294967296 : result;
    },
    setUint32: function setUint32(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getUint32: function getUint32() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result;
    },
    setFloat32: function setFloat32(value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeFloat(this.data, this.offset, value, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
    },
    getFloat32: function getFloat32() {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readFloat(this.data, this.offset, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
      return result;
    },
    setString: function setString(value) {
      this.setUint8(value.length);
      for (var index = 0; index < value.length; ++index) {
        this.setUint8(value.charCodeAt(index));
      }
    },
    getString: function getString() {
      var size = this.getUint8();
      var endIndex = this.offset + size;
      var chars = [];
      while (this.offset < endIndex) {
        chars.push(String.fromCharCode(this.getUint8()));
      }
      return chars.join('');
    },
    getBytesToOffset: function getBytesToOffset() {
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offset;
      return this.data.slice(0, offset);
    },
    getBytesLeft: function getBytesLeft() {
      return this.getBytes(this.bytesLeft);
    },
    getBytes: function getBytes(length) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      this.offset = offset + length;
      return this.data.slice(offset, this.offset);
    },
    setBytes: function setBytes(data) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      var bytes = this.data;
      bytes.splice.apply(bytes, [offset, data.length].concat(_toConsumableArray(data)));
      this.data = bytes;
      this.offset = offset + data.length;
    }
  };
  Object.defineProperties(BinaryBuffer.prototype, {
    size: {
      get: function get() {
        return this.data.length;
      }
    },
    isEmpty: {
      get: function get() {
        if (this.offset > this.data.length) {
          throw new Error("current offset ".concat(this.offset, " is outside the bounds of the buffer"));
        }
        return this.data.length - this.offset === 0;
      }
    },
    bytesLeft: {
      get: function get() {
        return this.data.length - this.offset;
      }
    },
    position: {
      get: function get() {
        return this.offset;
      }
    }
  });

  var fromObject = function fromObject() {
    var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var booleanObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var result = 0;
    for (var name in booleanObject) {
      if (name in bitMask && booleanObject[name]) {
        result |= bitMask[name];
      }
    }
    return result;
  };
  var toObject = function toObject() {
    var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var result = {};
    for (var name in bitMask) {
      result[name] = (value & bitMask[name]) !== 0;
    }
    return result;
  };
  var extractBits = function extractBits(value, bitsNumber, startIndex) {
    return (1 << bitsNumber) - 1 & value >> startIndex - 1;
  };
  var fillBits = function fillBits(value, bitsNumber, startIndex, valueToSet) {
    var mask = (1 << bitsNumber) - 1 << startIndex - 1;
    var newValueToSet = valueToSet;
    var result = value;
    result &= ~mask;
    newValueToSet <<= startIndex - 1;
    result |= newValueToSet;
    return result;
  };

  var getBytesFromHex = (function (hex) {
    var cleanHex = hex.trim();
    if (!cleanHex) {
      return [];
    }
    cleanHex = cleanHex.replace(/0x/g, '').split(/\s+/).map(function (_byte) {
      return _byte.padStart(2, '0');
    }).join('');
    if (cleanHex.length % 2 !== 0) {
      cleanHex = "0".concat(cleanHex);
    }
    var resultLength = cleanHex.length / 2;
    var bytes = new Array(resultLength);
    for (var index = 0; index < resultLength; index++) {
      bytes[index] = parseInt(cleanHex.substring(index * 2, index * 2 + 2), 16);
    }
    return bytes;
  });

  var DEVICE_TYPE_INVALID_CHAR = 'x';
  var nibbles1 = ['.', '1', '3', 'R', 'M'];
  var nibbles2 = ['.', 'A', 'G', 'R', 'T', 'D'];
  var nibbles3 = ['.', '0', '1', '2', '3', '4', '5'];
  var nibbles4 = ['.', 'A', 'B', 'C', 'D', 'E', 'F'];
  var nibbles5 = ['.', 'A', 'B', 'C', 'D', 'E', 'F', 'H', 'K', 'G'];
  var nibbles6 = ['.', '1', '2', '3', '4'];
  var nibbles7 = ['.', 'L', 'M', 'Z', 'K'];
  var nibbles8 = ['.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
  var nibbles9 = ['.', 'D', 'B', 'C', 'E', 'P', 'R', 'O', 'L', 'F', 'S', 'M', 'Y', 'G', 'N', 'U'];
  var nibbles10 = ['.', '0', '1', '2', '3', '4', '5', '6', 'P', 'R', 'L', 'E', 'G', '-', '/'];
  var nibbles11 = ['.', 'H', 'A', 'T', '0', '0', '0', '0', '0', '1', '2', '3', '4', '0', '0', '0'];
  var nibbles12 = ['.', '0', '1', '2', '3', '4', '5', '6', '7', '8', 'I', 'X', 'G', 'W', 'M', '-'];
  var splitByte = function splitByte(_byte) {
    return [_byte >> 4, _byte & 0x0F];
  };
  var splitToNibbles = function splitToNibbles(data) {
    var result = new Array(data.length * 2).fill(0);
    data.forEach(function (_byte2, index) {
      var _splitByte = splitByte(_byte2),
        _splitByte2 = _slicedToArray(_splitByte, 2),
        high = _splitByte2[0],
        low = _splitByte2[1];
      result[index * 2] = high;
      result[index * 2 + 1] = low;
    });
    return result;
  };
  var joinNibbles = function joinNibbles(nibbles) {
    var hex = [];
    nibbles.forEach(function (nibble) {
      return hex.push(nibble.toString(16));
    });
    if (nibbles.length & 1) {
      hex.push('0');
    }
    return getBytesFromHex(hex.join(''));
  };
  var fromBytesMtx = function fromBytesMtx(nibbles) {
    var _nibbles1$nibbles$, _nibbles2$nibbles$, _nibbles3$nibbles$, _nibbles3$nibbles$2, _nibbles4$nibbles$, _nibbles5$nibbles$, _nibbles6$nibbles$, _nibbles7$nibbles$, _nibbles8$nibbles$;
    if (nibbles.length !== 14 && nibbles.length !== 16) {
      throw new Error('Device type bytes wrong size');
    }
    var type = ['MTX '];
    type.push((_nibbles1$nibbles$ = nibbles1[nibbles[0]]) !== null && _nibbles1$nibbles$ !== undefined ? _nibbles1$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
    type.push((_nibbles2$nibbles$ = nibbles2[nibbles[1]]) !== null && _nibbles2$nibbles$ !== undefined ? _nibbles2$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
    type.push((_nibbles3$nibbles$ = nibbles3[nibbles[2]]) !== null && _nibbles3$nibbles$ !== undefined ? _nibbles3$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
    type.push((_nibbles3$nibbles$2 = nibbles3[nibbles[3]]) !== null && _nibbles3$nibbles$2 !== undefined ? _nibbles3$nibbles$2 : DEVICE_TYPE_INVALID_CHAR);
    type.push('.');
    type.push((_nibbles4$nibbles$ = nibbles4[nibbles[4]]) !== null && _nibbles4$nibbles$ !== undefined ? _nibbles4$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
    type.push((_nibbles5$nibbles$ = nibbles5[nibbles[5]]) !== null && _nibbles5$nibbles$ !== undefined ? _nibbles5$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
    type.push('.');
    type.push((_nibbles6$nibbles$ = nibbles6[nibbles[6]]) !== null && _nibbles6$nibbles$ !== undefined ? _nibbles6$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
    type.push((_nibbles7$nibbles$ = nibbles7[nibbles[7]]) !== null && _nibbles7$nibbles$ !== undefined ? _nibbles7$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
    var revision = nibbles[8];
    type.push((_nibbles8$nibbles$ = nibbles8[nibbles[9]]) !== null && _nibbles8$nibbles$ !== undefined ? _nibbles8$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
    type.push('-');
    var deviceProtocolIndex;
    if (nibbles.length < 14 || nibbles[12] === 0 && nibbles[13] === 0) {
      var _nibbles9$nibbles$;
      type.push((_nibbles9$nibbles$ = nibbles9[nibbles[10]]) !== null && _nibbles9$nibbles$ !== undefined ? _nibbles9$nibbles$ : DEVICE_TYPE_INVALID_CHAR);
      deviceProtocolIndex = 11;
    } else if (nibbles[13] === 0) {
      var _nibbles9$nibbles$2, _nibbles9$nibbles$3;
      type.push((_nibbles9$nibbles$2 = nibbles9[nibbles[10]]) !== null && _nibbles9$nibbles$2 !== undefined ? _nibbles9$nibbles$2 : DEVICE_TYPE_INVALID_CHAR);
      type.push((_nibbles9$nibbles$3 = nibbles9[nibbles[11]]) !== null && _nibbles9$nibbles$3 !== undefined ? _nibbles9$nibbles$3 : DEVICE_TYPE_INVALID_CHAR);
      deviceProtocolIndex = 12;
    } else {
      var _nibbles9$nibbles$4, _nibbles9$nibbles$5, _nibbles9$nibbles$6;
      type.push((_nibbles9$nibbles$4 = nibbles9[nibbles[10]]) !== null && _nibbles9$nibbles$4 !== undefined ? _nibbles9$nibbles$4 : DEVICE_TYPE_INVALID_CHAR);
      type.push((_nibbles9$nibbles$5 = nibbles9[nibbles[11]]) !== null && _nibbles9$nibbles$5 !== undefined ? _nibbles9$nibbles$5 : DEVICE_TYPE_INVALID_CHAR);
      type.push((_nibbles9$nibbles$6 = nibbles9[nibbles[12]]) !== null && _nibbles9$nibbles$6 !== undefined ? _nibbles9$nibbles$6 : DEVICE_TYPE_INVALID_CHAR);
      deviceProtocolIndex = 13;
    }
    var deviceProtocolNibble = nibbles[deviceProtocolIndex];
    if (deviceProtocolNibble && deviceProtocolNibble !== 0) {
      var _nibbles11$deviceProt;
      type.push((_nibbles11$deviceProt = nibbles11[deviceProtocolNibble]) !== null && _nibbles11$deviceProt !== undefined ? _nibbles11$deviceProt : DEVICE_TYPE_INVALID_CHAR);
    }
    return {
      type: type.join(''),
      revision: revision,
      meterType: 0
    };
  };
  var toBytesMtx = function toBytesMtx(type, prefix, revision) {
    var nibbles = [];
    if (type.length < 11) {
      throw new Error('Wrong format');
    }
    nibbles.push(nibbles1.indexOf(type[0]));
    nibbles.push(nibbles2.indexOf(type[1]));
    nibbles.push(nibbles3.indexOf(type[2]));
    nibbles.push(nibbles3.indexOf(type[3]));
    if (type[4] !== '.') {
      throw new Error('Wrong format');
    }
    nibbles.push(nibbles4.indexOf(type[5]));
    nibbles.push(nibbles5.indexOf(type[6]));
    if (type[7] !== '.') {
      throw new Error('Wrong format');
    }
    nibbles.push(nibbles6.indexOf(type[8]));
    nibbles.push(nibbles7.indexOf(type[9]));
    nibbles.push(revision !== null && revision !== undefined ? revision : 0);
    nibbles.push(nibbles8.indexOf(type[10]));
    if (type[11] !== '-') {
      throw new Error('Wrong format');
    }
    var deviceProtocolIndex = type.length > 13 ? type.length - 1 : type.length;
    for (var index = 12; index < deviceProtocolIndex; index++) {
      nibbles.push(nibbles9.indexOf(type[index]));
    }
    if (deviceProtocolIndex < type.length) {
      nibbles.push(nibbles11.indexOf(type[deviceProtocolIndex]));
    }
    var bytes = joinNibbles(nibbles);
    var result = new Array(9).fill(0);
    result[0] = 0;
    for (var _index = 0; _index < bytes.length; _index++) {
      result[_index + (bytes.length < 8 ? 1 : 0)] = bytes[_index];
    }
    return result;
  };
  var fromBytesMtx2 = function fromBytesMtx2(nibbles) {
    var _nibbles1$nibbles$2, _nibbles2$nibbles$2;
    if (nibbles.length < 14) {
      throw new Error('The buffer is too small');
    }
    var type = ['MTX '];
    var separator = nibbles[1] === 5 ? '-' : ' ';
    type.push((_nibbles1$nibbles$2 = nibbles1[nibbles[0]]) !== null && _nibbles1$nibbles$2 !== undefined ? _nibbles1$nibbles$2 : DEVICE_TYPE_INVALID_CHAR);
    type.push((_nibbles2$nibbles$2 = nibbles2[nibbles[1]]) !== null && _nibbles2$nibbles$2 !== undefined ? _nibbles2$nibbles$2 : DEVICE_TYPE_INVALID_CHAR);
    type.push(separator);
    for (var index = 2; index < nibbles.length; index++) {
      if (nibbles[index] !== 0) {
        var _nibbles10$nibbles$in;
        type.push((_nibbles10$nibbles$in = nibbles10[nibbles[index]]) !== null && _nibbles10$nibbles$in !== undefined ? _nibbles10$nibbles$in : DEVICE_TYPE_INVALID_CHAR);
      }
    }
    return {
      type: type.join(''),
      meterType: 0
    };
  };
  var toBytesMtx2 = function toBytesMtx2(type) {
    if (type.length < 3) {
      throw new Error('Wrong format');
    }
    var nibbles = [];
    nibbles.push(nibbles1.indexOf(type[0]));
    nibbles.push(nibbles2.indexOf(type[1]));
    for (var index = 3; index < type.length; index++) {
      nibbles.push(nibbles10.indexOf(type[index]));
    }
    var bytes = joinNibbles(nibbles);
    if (bytes.length === 8) {
      return bytes;
    }
    if (bytes.length > 8) {
      throw new Error('Wrong format');
    }
    var result = new Array(8).fill(0);
    for (var _index2 = 0; _index2 < bytes.length; _index2++) {
      result[_index2] = bytes[_index2];
    }
    return result;
  };
  var fromBytesM = function fromBytesM(nibbles) {
    var _nibbles1$nibbles$3;
    if (nibbles.length < 14) {
      throw new Error('The buffer is too small');
    }
    var type = [];
    type.push((_nibbles1$nibbles$3 = nibbles1[nibbles[0]]) !== null && _nibbles1$nibbles$3 !== undefined ? _nibbles1$nibbles$3 : DEVICE_TYPE_INVALID_CHAR);
    for (var index = 1; index < nibbles.length; index++) {
      if (nibbles[index] !== 0) {
        var _nibbles12$nibbles$in;
        type.push((_nibbles12$nibbles$in = nibbles12[nibbles[index]]) !== null && _nibbles12$nibbles$in !== undefined ? _nibbles12$nibbles$in : DEVICE_TYPE_INVALID_CHAR);
      }
    }
    return {
      type: type.join(''),
      meterType: 0
    };
  };
  var toBytesM = function toBytesM(type) {
    if (type.length < 1) {
      throw new Error('Wrong format');
    }
    var nibbles = [];
    nibbles.push(nibbles1.indexOf(type[0]));
    for (var index = 1; index < type.length; index++) {
      nibbles.push(nibbles12.indexOf(type[index]));
    }
    var bytes = joinNibbles(nibbles);
    var result = new Array(8).fill(0);
    for (var _index3 = 0; _index3 < bytes.length && _index3 < 8; _index3++) {
      result[_index3] = bytes[_index3];
    }
    return result;
  };
  var fromBytes$ = function fromBytes(bytes) {
    if (bytes.length !== 9) {
      throw new Error('The buffer is too small');
    }
    var result;
    var reserve = [0x00, 0x05, 0x06, 0x07, 0x09, 0x7f, 0xef];
    var position = reserve.indexOf(bytes[0]) !== -1 ? 2 : 0;
    var nibbles = splitToNibbles(bytes.slice(0, 8));
    var deviceTypeNibble = nibbles[position];
    var deviceType = nibbles1[deviceTypeNibble];
    if (deviceType === '1' || deviceType === '3') {
      result = fromBytesMtx(nibbles.slice(position));
    } else {
      result = deviceType === 'M' ? fromBytesM(nibbles) : fromBytesMtx2(nibbles);
    }
    result.meterType = bytes[8];
    return result;
  };
  var toBytes$10 = function toBytes(_ref, prefix) {
    var type = _ref.type,
      revision = _ref.revision,
      meterType = _ref.meterType;
    if (!type.startsWith('MTX ')) {
      throw new Error('Wrong format');
    }
    var result;
    var content = type.substring(4);
    var deviceTypeSymbol = type[4];
    if (deviceTypeSymbol === '1' || deviceTypeSymbol === '3') {
      result = toBytesMtx(content, prefix, revision);
    } else {
      result = deviceTypeSymbol === 'M' ? toBytesM(content) : toBytesMtx2(content);
    }
    result[8] = meterType;
    return result;
  };

  var getHexFromBytes = (function (bytes) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _Object$assign = Object.assign({}, hexFormatOptions, options),
      separator = _Object$assign.separator,
      prefix = _Object$assign.prefix;
    return bytes.map(function (_byte) {
      return "".concat(prefix).concat(_byte.toString(16).padStart(2, '0'));
    }).join(separator);
  });

  var DATA_REQUEST = 0x50;
  var DATA_RESPONSE = 0x51;
  var IDENT_REQUEST = 0x52;
  var IDENT_RESPONSE = 0x53;
  var L2_SET_ADDRESS_REQUEST = 0x54;
  var L2_SET_ADDRESS_RESPONSE = 0x55;
  var L2_CHECK_ADDRESS_REQUEST = 0x56;
  var L2_CHECK_ADDRESS_RESPONSE = 0x57;
  var L2_RM_ADDRESS_REQUEST = 0x58;
  var L2_RM_ADDRESS_RESPONSE = 0x59;
  var FRAGMENT_REQUEST = 0x5A;
  var FRAGMENT_RESPONSE = 0x5B;
  var INVALID = 0xFF;

  var frameTypes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DATA_REQUEST: DATA_REQUEST,
    DATA_RESPONSE: DATA_RESPONSE,
    FRAGMENT_REQUEST: FRAGMENT_REQUEST,
    FRAGMENT_RESPONSE: FRAGMENT_RESPONSE,
    IDENT_REQUEST: IDENT_REQUEST,
    IDENT_RESPONSE: IDENT_RESPONSE,
    INVALID: INVALID,
    L2_CHECK_ADDRESS_REQUEST: L2_CHECK_ADDRESS_REQUEST,
    L2_CHECK_ADDRESS_RESPONSE: L2_CHECK_ADDRESS_RESPONSE,
    L2_RM_ADDRESS_REQUEST: L2_RM_ADDRESS_REQUEST,
    L2_RM_ADDRESS_RESPONSE: L2_RM_ADDRESS_RESPONSE,
    L2_SET_ADDRESS_REQUEST: L2_SET_ADDRESS_REQUEST,
    L2_SET_ADDRESS_RESPONSE: L2_SET_ADDRESS_RESPONSE
  });

  var invertObject = (function (source) {
    var target = {};
    for (var property in source) {
      var value = source[property];
      target[value] = property;
    }
    return target;
  });

  var frameNames = invertObject(frameTypes);

  var ENERGY_REG_FAULT = 0x01;
  var VENDOR_PAR_FAULT = 0x02;
  var OP_PAR_FAULT = 0x03;
  var ACCESS_CLOSED = 0x10;
  var ERR_ACCESS = 0x11;
  var CASE_OPEN$1 = 0x12;
  var CASE_CLOSE = 0x13;
  var MAGNETIC_ON$1 = 0x14;
  var MAGNETIC_OFF = 0x15;
  var CHANGE_ACCESS_KEY0 = 0x20;
  var CHANGE_ACCESS_KEY1 = 0x21;
  var CHANGE_ACCESS_KEY2 = 0x22;
  var CHANGE_ACCESS_KEY3 = 0x23;
  var CHANGE_PAR_LOCAL = 0x24;
  var CHANGE_PAR_REMOTE = 0x25;
  var CMD_CHANGE_TIME = 0x26;
  var CMD_RELAY_ON = 0x27;
  var CMD_RELAY_OFF = 0x28;
  var CHANGE_COR_TIME = 0x29;
  var ENERGY_REG_OVERFLOW = 0x31;
  var CHANGE_TARIFF_TBL = 0x32;
  var SET_TARIFF_TBL = 0x33;
  var SUMMER_TIME = 0x34;
  var WINTER_TIME = 0x35;
  var RELAY_ON = 0x36;
  var RELAY_OFF = 0x37;
  var RESTART$1 = 0x38;
  var WD_RESTART = 0x39;
  var V_MAX_OK = 0x40;
  var V_MAX_OVER = 0x41;
  var V_MIN_OK = 0x42;
  var V_MIN_OVER = 0x43;
  var T_MAX_OK = 0x44;
  var T_MAX_OVER = 0x45;
  var T_MIN_OK = 0x46;
  var T_MIN_OVER = 0x47;
  var F_MAX_OK = 0x48;
  var F_MAX_OVER = 0x49;
  var F_MIN_OK = 0x4A;
  var F_MIN_OVER = 0x4B;
  var I_MAX_OK = 0x4C;
  var I_MAX_OVER = 0x4D;
  var P_MAX_OK = 0x4E;
  var P_MAX_OVER = 0x4F;
  var POWERSALDO_OK = 0x50;
  var POWERSALDO_OVER = 0x51;
  var BAT_OK = 0x52;
  var BAT_FAULT = 0x53;
  var CAL_OK = 0x54;
  var CAL_FAULT = 0x55;
  var CLOCK_OK = 0x56;
  var CLOCK_FAULT = 0x57;
  var POWER_A_OFF = 0x58;
  var POWER_A_ON = 0x59;
  var CMD_RELAY_2_ON = 0x60;
  var CMD_RELAY_2_OFF = 0x61;
  var CROSSZERO_ENT0 = 0x62;
  var CROSSZERO_ENT1 = 0x63;
  var CROSSZERO_ENT2 = 0x64;
  var CROSSZERO_ENT3 = 0x65;
  var CALFLAG_SET = 0x66;
  var CALFLAG_RESET = 0x67;
  var BAD_TEST_EEPROM = 0x68;
  var BAD_TEST_FRAM = 0x69;
  var SET_NEW_SALDO = 0x70;
  var SALDO_PARAM_BAD = 0x71;
  var ACCPARAM_BAD = 0x72;
  var ACCPARAM_EXT_BAD = 0x73;
  var CALC_PERIOD_BAD = 0x74;
  var BLOCK_TARIFF_BAD = 0x75;
  var CALIBR_PARAM_BAD = 0x76;
  var WINTER_SUMMER_BAD = 0x77;
  var SALDO_EN_BAD = 0x78;
  var TIME_CORRECT$1 = 0x79;
  var CASE_TERMINAL_OPEN$1 = 0x7A;
  var CASE_TERMINAL_CLOSE = 0x7B;
  var CASE_MODULE_OPEN$1 = 0x7C;
  var CASE_MODULE_CLOSE = 0x7D;
  var RELAY_HARD_BAD_OFF = 0x90;
  var RELAY_HARD_ON = 0x91;
  var RELAY_HARD_BAD_ON = 0x93;
  var RELAY_HARD_OFF = 0x94;
  var SET_SALDO_PARAM = 0x9C;
  var POWER_OVER_RELAY_OFF = 0x9D;
  var CROSSZERO_EXP_ENT0 = 0x9E;
  var CROSSZERO_EXP_ENT1 = 0x9F;
  var CROSSZERO_EXP_ENT2 = 0xA0;
  var CROSSZERO_EXP_ENT3 = 0xA1;
  var TIME_CORRECT_NEW = 0xA2;
  var EM_MAGNETIC_ON = 0xB0;
  var EM_MAGNETIC_OFF = 0xB1;
  var CURRENT_UNEQUIL_FAULT = 0xB2;
  var CURRENT_UNEQUIL_OK = 0xB3;
  var BIPOLAR_POWER_FAULT = 0xB4;
  var BIPOLAR_POWER_OK = 0xB5;
  var RESET_EM_FLAG = 0xB6;
  var RESET_MAGN_FLAG = 0xB7;
  var NVRAM_FAULT = 0xD0;
  var SET_DEMAND_EN_1MIN = 0xE0;
  var SET_DEMAND_EN_3MIN = 0xE1;
  var SET_DEMAND_EN_5MIN = 0xE2;
  var SET_DEMAND_EN_10MIN = 0xE3;
  var SET_DEMAND_EN_15MIN = 0xE4;
  var SET_DEMAND_EN_30MIN = 0xE5;
  var SET_DEMAND_EN_60MIN = 0xE6;

  var events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_CLOSED: ACCESS_CLOSED,
    ACCPARAM_BAD: ACCPARAM_BAD,
    ACCPARAM_EXT_BAD: ACCPARAM_EXT_BAD,
    BAD_TEST_EEPROM: BAD_TEST_EEPROM,
    BAD_TEST_FRAM: BAD_TEST_FRAM,
    BAT_FAULT: BAT_FAULT,
    BAT_OK: BAT_OK,
    BIPOLAR_POWER_FAULT: BIPOLAR_POWER_FAULT,
    BIPOLAR_POWER_OK: BIPOLAR_POWER_OK,
    BLOCK_TARIFF_BAD: BLOCK_TARIFF_BAD,
    CALC_PERIOD_BAD: CALC_PERIOD_BAD,
    CALFLAG_RESET: CALFLAG_RESET,
    CALFLAG_SET: CALFLAG_SET,
    CALIBR_PARAM_BAD: CALIBR_PARAM_BAD,
    CAL_FAULT: CAL_FAULT,
    CAL_OK: CAL_OK,
    CASE_CLOSE: CASE_CLOSE,
    CASE_MODULE_CLOSE: CASE_MODULE_CLOSE,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN$1,
    CASE_OPEN: CASE_OPEN$1,
    CASE_TERMINAL_CLOSE: CASE_TERMINAL_CLOSE,
    CASE_TERMINAL_OPEN: CASE_TERMINAL_OPEN$1,
    CHANGE_ACCESS_KEY0: CHANGE_ACCESS_KEY0,
    CHANGE_ACCESS_KEY1: CHANGE_ACCESS_KEY1,
    CHANGE_ACCESS_KEY2: CHANGE_ACCESS_KEY2,
    CHANGE_ACCESS_KEY3: CHANGE_ACCESS_KEY3,
    CHANGE_COR_TIME: CHANGE_COR_TIME,
    CHANGE_PAR_LOCAL: CHANGE_PAR_LOCAL,
    CHANGE_PAR_REMOTE: CHANGE_PAR_REMOTE,
    CHANGE_TARIFF_TBL: CHANGE_TARIFF_TBL,
    CLOCK_FAULT: CLOCK_FAULT,
    CLOCK_OK: CLOCK_OK,
    CMD_CHANGE_TIME: CMD_CHANGE_TIME,
    CMD_RELAY_2_OFF: CMD_RELAY_2_OFF,
    CMD_RELAY_2_ON: CMD_RELAY_2_ON,
    CMD_RELAY_OFF: CMD_RELAY_OFF,
    CMD_RELAY_ON: CMD_RELAY_ON,
    CROSSZERO_ENT0: CROSSZERO_ENT0,
    CROSSZERO_ENT1: CROSSZERO_ENT1,
    CROSSZERO_ENT2: CROSSZERO_ENT2,
    CROSSZERO_ENT3: CROSSZERO_ENT3,
    CROSSZERO_EXP_ENT0: CROSSZERO_EXP_ENT0,
    CROSSZERO_EXP_ENT1: CROSSZERO_EXP_ENT1,
    CROSSZERO_EXP_ENT2: CROSSZERO_EXP_ENT2,
    CROSSZERO_EXP_ENT3: CROSSZERO_EXP_ENT3,
    CURRENT_UNEQUIL_FAULT: CURRENT_UNEQUIL_FAULT,
    CURRENT_UNEQUIL_OK: CURRENT_UNEQUIL_OK,
    EM_MAGNETIC_OFF: EM_MAGNETIC_OFF,
    EM_MAGNETIC_ON: EM_MAGNETIC_ON,
    ENERGY_REG_FAULT: ENERGY_REG_FAULT,
    ENERGY_REG_OVERFLOW: ENERGY_REG_OVERFLOW,
    ERR_ACCESS: ERR_ACCESS,
    F_MAX_OK: F_MAX_OK,
    F_MAX_OVER: F_MAX_OVER,
    F_MIN_OK: F_MIN_OK,
    F_MIN_OVER: F_MIN_OVER,
    I_MAX_OK: I_MAX_OK,
    I_MAX_OVER: I_MAX_OVER,
    MAGNETIC_OFF: MAGNETIC_OFF,
    MAGNETIC_ON: MAGNETIC_ON$1,
    NVRAM_FAULT: NVRAM_FAULT,
    OP_PAR_FAULT: OP_PAR_FAULT,
    POWERSALDO_OK: POWERSALDO_OK,
    POWERSALDO_OVER: POWERSALDO_OVER,
    POWER_A_OFF: POWER_A_OFF,
    POWER_A_ON: POWER_A_ON,
    POWER_OVER_RELAY_OFF: POWER_OVER_RELAY_OFF,
    P_MAX_OK: P_MAX_OK,
    P_MAX_OVER: P_MAX_OVER,
    RELAY_HARD_BAD_OFF: RELAY_HARD_BAD_OFF,
    RELAY_HARD_BAD_ON: RELAY_HARD_BAD_ON,
    RELAY_HARD_OFF: RELAY_HARD_OFF,
    RELAY_HARD_ON: RELAY_HARD_ON,
    RELAY_OFF: RELAY_OFF,
    RELAY_ON: RELAY_ON,
    RESET_EM_FLAG: RESET_EM_FLAG,
    RESET_MAGN_FLAG: RESET_MAGN_FLAG,
    RESTART: RESTART$1,
    SALDO_EN_BAD: SALDO_EN_BAD,
    SALDO_PARAM_BAD: SALDO_PARAM_BAD,
    SET_DEMAND_EN_10MIN: SET_DEMAND_EN_10MIN,
    SET_DEMAND_EN_15MIN: SET_DEMAND_EN_15MIN,
    SET_DEMAND_EN_1MIN: SET_DEMAND_EN_1MIN,
    SET_DEMAND_EN_30MIN: SET_DEMAND_EN_30MIN,
    SET_DEMAND_EN_3MIN: SET_DEMAND_EN_3MIN,
    SET_DEMAND_EN_5MIN: SET_DEMAND_EN_5MIN,
    SET_DEMAND_EN_60MIN: SET_DEMAND_EN_60MIN,
    SET_NEW_SALDO: SET_NEW_SALDO,
    SET_SALDO_PARAM: SET_SALDO_PARAM,
    SET_TARIFF_TBL: SET_TARIFF_TBL,
    SUMMER_TIME: SUMMER_TIME,
    TIME_CORRECT: TIME_CORRECT$1,
    TIME_CORRECT_NEW: TIME_CORRECT_NEW,
    T_MAX_OK: T_MAX_OK,
    T_MAX_OVER: T_MAX_OVER,
    T_MIN_OK: T_MIN_OK,
    T_MIN_OVER: T_MIN_OVER,
    VENDOR_PAR_FAULT: VENDOR_PAR_FAULT,
    V_MAX_OK: V_MAX_OK,
    V_MAX_OVER: V_MAX_OVER,
    V_MIN_OK: V_MIN_OK,
    V_MIN_OVER: V_MIN_OVER,
    WD_RESTART: WD_RESTART,
    WINTER_SUMMER_BAD: WINTER_SUMMER_BAD,
    WINTER_TIME: WINTER_TIME
  });

  var eventNames = invertObject(events);

  var defaultFrameHeader = {
    type: DATA_REQUEST,
    destination: 0xffff,
    source: 0xfffe
  };
  var TARIFF_PLAN_SIZE = 11;
  var OPERATOR_PARAMETERS_SIZE = 74;
  var SEASON_PROFILE_DAYS_NUMBER = 7;
  var SEASON_PROFILE_SIZE = 2 + SEASON_PROFILE_DAYS_NUMBER;
  var TARIFF_NUMBER$1 = 4;
  var baseDisplaySetMask = {
    SET_ALL_SEGMENT_DISPLAY: 0x0001,
    SOFTWARE_VERSION: 0x0002,
    TOTAL_ACTIVE_ENERGY: 0x0004,
    ACTIVE_ENERGY_T1: 0x0008,
    ACTIVE_ENERGY_T2: 0x0010,
    ACTIVE_ENERGY_T3: 0x0020,
    ACTIVE_ENERGY_T4: 0x0040,
    ACTIVE_POWER_PER_PHASE: 0x0080,
    ACTIVE_POWER_IN_NEUTRAL: 0x0100,
    CURRENT_IN_PHASE: 0x0200,
    CURRENT_IN_NEUTRAL: 0x0400,
    VOLTAGE: 0x0800,
    HOUR_MINUTE_SECOND: 0x1000,
    DATE_MONTH_YEAR: 0x2000,
    TOTAL_EXPORTED_ACTIVE_ENERGY: 0x4000,
    EXPORTED_ACTIVE_ENERGY_T1: 0x8000,
    EXPORTED_ACTIVE_ENERGY_T2: 0x00010000,
    EXPORTED_ACTIVE_ENERGY_T3: 0x00020000,
    EXPORTED_ACTIVE_ENERGY_T4: 0x00040000,
    POWER_COEFFICIENT_PHASE_A: 0x00080000,
    POWER_COEFFICIENT_PHASE_B: 0x00100000,
    BATTERY_VOLTAGE: 0x00200000,
    POWER_THRESHOLD_T1: 0x00400000,
    POWER_THRESHOLD_T2: 0x00800000,
    POWER_THRESHOLD_T3: 0x01000000,
    POWER_THRESHOLD_T4: 0x02000000,
    CURRENT_BALANCE: 0x20000000
  };
  var displaySetMask = _objectSpread2(_objectSpread2({}, baseDisplaySetMask), {}, {
    AUTO_SCREEN_SCROLLING: 0x80000000
  });
  var displaySetExtMask = _objectSpread2(_objectSpread2({}, baseDisplaySetMask), {}, {
    MAGNET_INDUCTION: 0x08000000,
    OPTOPORT_SPEED: 0x40000000,
    SORT_DISPLAY_SCREENS: 0x80000000
  });
  var relaySet1Mask = {
    RELAY_ON_Y: 0x01,
    RELAY_ON_CENTER: 0x02,
    RELAY_ON_PB: 0x04,
    RELAY_ON_TARIFF_0: 0x08,
    RELAY_ON_TARIFF_1: 0x10,
    RELAY_ON_TARIFF_2: 0x20,
    RELAY_ON_TARIFF_3: 0x40,
    RELAY_ON_V_GOOD: 0x80
  };
  var relaySet2Mask = {
    RELAY_OFF_Y: 0x01,
    RELAY_OFF_CENTER: 0x02,
    RELAY_OFF_TARIFF_0: 0x04,
    RELAY_OFF_TARIFF_1: 0x08,
    RELAY_OFF_TARIFF_2: 0x10,
    RELAY_OFF_TARIFF_3: 0x20,
    RELAY_OFF_I_LIMIT: 0x40,
    RELAY_OFF_V_BAD: 0x80
  };
  var relaySet3Mask = {
    RELAY_OFF_LIM_TARIFF_0: 0x02,
    RELAY_OFF_LIM_TARIFF_1: 0x04,
    RELAY_OFF_LIM_TARIFF_2: 0x08,
    RELAY_OFF_LIM_TARIFF_3: 0x10,
    RELAY_OFF_PF_MIN: 0x20
  };
  var relaySet4Mask = {
    RELAY_ON_TIMEOUT: 0x01,
    RELAY_ON_SALDO: 0x02,
    RELAY_OFF_SALDO: 0x04,
    RELAY_OFF_SALDO_SOFT: 0x08,
    RELAY_OFF_MAGNET: 0x10,
    RELAY_ON_MAGNET_TIMEOUT: 0x20,
    RELAY_ON_MAGNET_AUTO: 0x40
  };
  var relaySet5Mask = {
    RELAY_OFF_UNEQUAL_CURRENT: 0x01,
    RELAY_ON_UNEQUAL_CURRENT: 0x02,
    RELAY_OFF_BIPOLAR_POWER: 0x04,
    RELAY_ON_BIPOLAR_POWER: 0x08
  };
  var define1Mask = {
    BLOCK_KEY_OPTOPORT: 0x02,
    MAGNET_SCREEN_CONST: 0x20
  };
  var eventStatusMask = {
    CASE_OPEN: Math.pow(2, 0),
    MAGNETIC_ON: Math.pow(2, 1),
    PARAMETERS_UPDATE_REMOTE: Math.pow(2, 2),
    PARAMETERS_UPDATE_LOCAL: Math.pow(2, 3),
    RESTART: Math.pow(2, 4),
    ERROR_ACCESS: Math.pow(2, 5),
    TIME_SET: Math.pow(2, 6),
    TIME_CORRECT: Math.pow(2, 7),
    DEVICE_FAILURE: Math.pow(2, 8),
    CASE_TERMINAL_OPEN: Math.pow(2, 9),
    CASE_MODULE_OPEN: Math.pow(2, 10),
    TARIFF_TABLE_SET: Math.pow(2, 11),
    TARIFF_TABLE_GET: Math.pow(2, 12),
    PROTECTION_RESET_EM: Math.pow(2, 13),
    PROTECTION_RESET_MAGNETIC: Math.pow(2, 14)
  };
  var extendedCurrentValues2RelayStatusMask = {
    RELAY_STATE: Math.pow(2, 0),
    RELAY_UBAD: Math.pow(2, 1),
    RELAY_UNEQ_CURRENT: Math.pow(2, 4),
    RELAY_OFF_CENTER: Math.pow(2, 5),
    RELAY_IMAX: Math.pow(2, 6),
    RELAY_PMAX: Math.pow(2, 7)
  };
  var extendedCurrentValues2RelayStatus2Mask = {
    RELAY_COSFI: Math.pow(2, 0),
    RELAY_SALDO_OFF_FLAG: Math.pow(2, 1),
    RELAY_UNEQUIL_CURRENT_OFF: Math.pow(2, 2),
    RELAY_BIPOLAR_POWER_OFF: Math.pow(2, 3),
    RELAY_SALDO_OFF_ON_MAX_POWER: Math.pow(2, 4),
    RELAY_HARD_ST1: Math.pow(2, 5)
  };
  var extendedCurrentValues2Status1Mask = {
    MAXVA: Math.pow(2, 0),
    MINVA: Math.pow(2, 1),
    MAXT: Math.pow(2, 2),
    MINT: Math.pow(2, 3),
    MAXF: Math.pow(2, 4),
    MINF: Math.pow(2, 5),
    MAXIA: Math.pow(2, 6),
    MAXP: Math.pow(2, 7)
  };
  var extendedCurrentValues2Status2Mask = {
    MAX_POWER_SALDO: Math.pow(2, 0),
    BATTERY_VBAT_BAD: Math.pow(2, 1),
    CLOCK_UNSET: Math.pow(2, 3),
    MIN_COS_FI: Math.pow(2, 5)
  };
  var extendedCurrentValues2Status3Mask = {
    UNEQUIL_CURRENT: Math.pow(2, 0),
    BIPOLAR_POWER: Math.pow(2, 1),
    POWER_A_NEGATIVE: Math.pow(2, 6),
    POWER_B_NEGATIVE: Math.pow(2, 7)
  };
  var operatorParametersExtended3RelaySetMask = {
    RELAY_OFF_LIMIT_P_MINUS_T1: 0x04,
    RELAY_OFF_LIMIT_P_MINUS_T2: 0x08,
    RELAY_OFF_LIMIT_P_MINUS_T3: 0x10,
    RELAY_OFF_LIMIT_P_MINUS_T4: 0x20
  };
  function getPackedEnergies(buffer, energyType, tariffMapByte) {
    var _byte = tariffMapByte >> TARIFF_NUMBER$1;
    var energies = new Array(TARIFF_NUMBER$1).fill(0);
    energies.forEach(function (energy, index) {
      var isTariffExists = !!extractBits(_byte, 1, index + 1);
      if (isTariffExists) {
        energies[index] = buffer.getUint32();
      } else {
        energies[index] = null;
      }
    });
    return energies;
  }
  function setPackedEnergyType(buffer, energyType, energies) {
    var indexShift = 1 + TARIFF_NUMBER$1;
    var tariffsByte = energyType;
    energies.forEach(function (energy, index) {
      tariffsByte = fillBits(tariffsByte, 1, index + indexShift, Number(!!energy));
    });
    buffer.setUint8(tariffsByte);
  }
  function getEnergyPeriod(period) {
    if (period === 0xffff) {
      return {
        tariff: undefined,
        energy: undefined
      };
    }
    return {
      tariff: period >> 14 & 0x03,
      energy: period & 0x3fff
    };
  }
  function setEnergyPeriod(buffer, _ref) {
    var tariff = _ref.tariff,
      energy = _ref.energy;
    if (tariff !== undefined && energy !== undefined) {
      buffer.setUint16(tariff << 14 | energy & 0x3fff);
    } else {
      buffer.setUint16(0xffff);
    }
  }
  function CommandBinaryBuffer$1(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    BinaryBuffer.call(this, dataOrLength, isLittleEndian);
  }
  CommandBinaryBuffer$1.prototype = Object.create(BinaryBuffer.prototype);
  CommandBinaryBuffer$1.prototype.constructor = CommandBinaryBuffer$1;
  CommandBinaryBuffer$1.getDayProfileFromByte = function (value) {
    return {
      tariff: extractBits(value, 2, 1),
      isFirstHalfHour: !extractBits(value, 1, 3),
      hour: extractBits(value, 5, 4)
    };
  };
  CommandBinaryBuffer$1.getByteFromDayProfile = function (dayProfile) {
    var value = 0;
    value = fillBits(value, 2, 1, dayProfile.tariff);
    value = fillBits(value, 1, 3, +!dayProfile.isFirstHalfHour);
    value = fillBits(value, 5, 4, dayProfile.hour);
    return value;
  };
  CommandBinaryBuffer$1.getDefaultSeasonProfile = function () {
    return {
      month: 1,
      date: 1,
      dayIndexes: [0, 0, 0, 0, 0, 0, 0]
    };
  };
  CommandBinaryBuffer$1.getDefaultOperatorParameters = function () {
    return {
      vpThreshold: 265000,
      vThreshold: 156000,
      ipThreshold: 120000,
      pmaxThreshold0: 31800,
      pmaxThreshold1: 31800,
      pmaxThreshold2: 31800,
      pmaxThreshold3: 31800,
      speedOptoPort: 0,
      tint: 30,
      calcPeriodDate: 1,
      timeoutDisplay: 127,
      timeoutScreen: 7,
      displaySet: toObject(displaySetMask, 0x80003184),
      relaySet4: toObject(relaySet4Mask, 0),
      relaySet3: toObject(relaySet3Mask, 0),
      relaySet2: toObject(relaySet2Mask, 3),
      relaySet1: toObject(relaySet1Mask, 3),
      displayType: 0,
      ten: 0,
      timeoutRefresh: 240,
      deltaCorMin: 15,
      timeoutMagnetOff: 5,
      timeoutMagnetOn: 5,
      define1: toObject(define1Mask, 0),
      timeoutRelayOn: 1,
      timeoutRelayKey: 0,
      timeoutRelayAuto: 5,
      timeoutBadVAVB: 5,
      freqMax: 55,
      freqMin: 45,
      phMin: 0,
      year: 0,
      month: 0,
      date: 0,
      energyDecimalPoint: 2,
      typeMeter: 0,
      timeoutIMax: 5,
      timeoutPMax: 5,
      timeoutCos: 5,
      pMaxDef: 1,
      displaySetExt: toObject(displaySetExtMask, 0x8383fff),
      timeoutUneqCurrent: 5,
      timeoutBipolarPower: 5,
      relaySet5: toObject(relaySet5Mask, 0),
      timeCorrectPeriod: 24,
      timeCorrectPassHalfhour: false
    };
  };
  CommandBinaryBuffer$1.prototype.getFrameHeader = function () {
    var type = this.getUint8();
    var typeName = frameNames[type];
    var destination = this.getUint16();
    var source = this.getUint16();
    return {
      type: type,
      typeName: typeName,
      destination: destination,
      source: source
    };
  };
  CommandBinaryBuffer$1.prototype.setFrameHeader = function (_ref2) {
    var _ref2$type = _ref2.type,
      type = _ref2$type === undefined ? defaultFrameHeader.type : _ref2$type,
      _ref2$destination = _ref2.destination,
      destination = _ref2$destination === undefined ? defaultFrameHeader.destination : _ref2$destination,
      _ref2$source = _ref2.source,
      source = _ref2$source === undefined ? defaultFrameHeader.source : _ref2$source;
    this.setUint8(type);
    this.setUint16(destination);
    this.setUint16(source);
  };
  CommandBinaryBuffer$1.prototype.getDeviceId = function () {
    var manufacturer = getHexFromBytes(this.getBytes(3), {
      separator: ''
    });
    var type = this.getUint8();
    var year = this.getUint8();
    var serial = getHexFromBytes(this.getBytes(3), {
      separator: ''
    });
    return {
      manufacturer: manufacturer,
      type: type,
      year: year,
      serial: serial
    };
  };
  CommandBinaryBuffer$1.prototype.setDeviceId = function (_ref3) {
    var manufacturer = _ref3.manufacturer,
      type = _ref3.type,
      year = _ref3.year,
      serial = _ref3.serial;
    this.setBytes(getBytesFromHex(manufacturer));
    this.setUint8(type);
    this.setUint8(year);
    this.setBytes(getBytesFromHex(serial));
  };
  CommandBinaryBuffer$1.prototype.getDateTime = function () {
    return {
      isSummerTime: !!this.getUint8(),
      seconds: this.getUint8(),
      minutes: this.getUint8(),
      hours: this.getUint8(),
      day: this.getUint8(),
      date: this.getUint8(),
      month: this.getUint8(),
      year: this.getUint8()
    };
  };
  CommandBinaryBuffer$1.prototype.setDateTime = function (dateTime) {
    this.setUint8(dateTime.isSummerTime ? 1 : 0);
    this.setUint8(dateTime.seconds);
    this.setUint8(dateTime.minutes);
    this.setUint8(dateTime.hours);
    this.setUint8(dateTime.day || 0);
    this.setUint8(dateTime.date);
    this.setUint8(dateTime.month);
    this.setUint8(dateTime.year);
  };
  CommandBinaryBuffer$1.prototype.getTariffPlan = function () {
    return {
      id: this.getUint32(),
      tariffSet: this.getUint8(),
      activateYear: this.getUint8(),
      activateMonth: this.getUint8(),
      activateDay: this.getUint8(),
      specialProfilesArraySize: this.getUint8(),
      seasonProfilesArraySize: this.getUint8(),
      dayProfilesArraySize: this.getUint8()
    };
  };
  CommandBinaryBuffer$1.prototype.setTariffPlan = function (tariffPlan) {
    this.setUint32(tariffPlan.id);
    this.setUint8(tariffPlan.tariffSet);
    this.setUint8(tariffPlan.activateYear);
    this.setUint8(tariffPlan.activateMonth);
    this.setUint8(tariffPlan.activateDay);
    this.setUint8(tariffPlan.specialProfilesArraySize);
    this.setUint8(tariffPlan.seasonProfilesArraySize);
    this.setUint8(tariffPlan.dayProfilesArraySize);
  };
  CommandBinaryBuffer$1.prototype.getTimeCorrectionParameters = function () {
    return {
      monthTransitionSummer: this.getUint8(),
      dateTransitionSummer: this.getUint8(),
      hoursTransitionSummer: this.getUint8(),
      hoursCorrectSummer: this.getUint8(),
      monthTransitionWinter: this.getUint8(),
      dateTransitionWinter: this.getUint8(),
      hoursTransitionWinter: this.getUint8(),
      hoursCorrectWinter: this.getUint8(),
      isCorrectionNeeded: this.getUint8() === 1
    };
  };
  CommandBinaryBuffer$1.prototype.setTimeCorrectionParameters = function (parameters) {
    this.setUint8(parameters.monthTransitionSummer);
    this.setUint8(parameters.dateTransitionSummer);
    this.setUint8(parameters.hoursTransitionSummer);
    this.setUint8(parameters.hoursCorrectSummer);
    this.setUint8(parameters.monthTransitionWinter);
    this.setUint8(parameters.dateTransitionWinter);
    this.setUint8(parameters.hoursTransitionWinter);
    this.setUint8(parameters.hoursCorrectWinter);
    this.setUint8(+parameters.isCorrectionNeeded);
  };
  CommandBinaryBuffer$1.prototype.getDayProfile = function () {
    return CommandBinaryBuffer$1.getDayProfileFromByte(this.getUint8());
  };
  CommandBinaryBuffer$1.prototype.setDayProfile = function (dayProfile) {
    this.setUint8(CommandBinaryBuffer$1.getByteFromDayProfile(dayProfile));
  };
  CommandBinaryBuffer$1.prototype.getSeasonProfile = function () {
    var _this = this;
    return {
      month: this.getUint8(),
      date: this.getUint8(),
      dayIndexes: new Array(SEASON_PROFILE_DAYS_NUMBER).fill(0).map(function () {
        return _this.getUint8();
      })
    };
  };
  CommandBinaryBuffer$1.prototype.setSeasonProfile = function (seasonProfile) {
    var _this2 = this;
    this.setUint8(seasonProfile.month);
    this.setUint8(seasonProfile.date);
    seasonProfile.dayIndexes.forEach(function (value) {
      return _this2.setUint8(value);
    });
  };
  CommandBinaryBuffer$1.prototype.getSpecialDay = function () {
    return {
      month: this.getUint8(),
      date: this.getUint8(),
      dayIndex: this.getUint8(),
      isPeriodic: this.getUint8() === 0
    };
  };
  CommandBinaryBuffer$1.prototype.setSpecialDay = function (specialDay) {
    this.setUint8(specialDay.month);
    this.setUint8(specialDay.date);
    this.setUint8(specialDay.dayIndex);
    this.setUint8(+!specialDay.isPeriodic);
  };
  CommandBinaryBuffer$1.prototype.getDeviceType = function () {
    return fromBytes$(this.getBytes(9));
  };
  CommandBinaryBuffer$1.prototype.setDeviceType = function (deviceType) {
    this.setBytes(toBytes$10(deviceType));
  };
  CommandBinaryBuffer$1.prototype.getOperatorParameters = function () {
    var operatorParameters = {
      vpThreshold: this.getUint32(),
      vThreshold: this.getUint32(),
      ipThreshold: this.getUint32(),
      pmaxThreshold0: this.getUint32(),
      pmaxThreshold1: this.getUint32(),
      pmaxThreshold2: this.getUint32(),
      pmaxThreshold3: this.getUint32(),
      speedOptoPort: this.getUint8(),
      tint: this.getUint8(),
      calcPeriodDate: this.getUint8(),
      timeoutDisplay: this.getUint8(),
      timeoutScreen: this.getUint8(),
      displaySet: toObject(displaySetMask, this.getUint32()),
      relaySet4: toObject(relaySet4Mask, this.getUint8()),
      relaySet3: toObject(relaySet3Mask, this.getUint8()),
      relaySet2: toObject(relaySet2Mask, this.getUint8()),
      relaySet1: toObject(relaySet1Mask, this.getUint8()),
      displayType: this.getUint8(),
      ten: this.getUint8(),
      timeoutRefresh: this.getUint16(),
      deltaCorMin: this.getUint8(),
      timeoutMagnetOff: this.getUint8(),
      timeoutMagnetOn: this.getUint8(),
      define1: toObject(define1Mask, this.getUint8()),
      timeoutRelayOn: this.getUint8(),
      timeoutRelayKey: this.getUint8(),
      timeoutRelayAuto: this.getUint8(),
      timeoutBadVAVB: this.getUint8(),
      freqMax: this.getUint8(),
      freqMin: this.getUint8(),
      phMin: this.getUint16(),
      year: this.getUint8(),
      month: this.getUint8(),
      date: this.getUint8(),
      energyDecimalPoint: this.getUint8(),
      typeMeter: this.getUint8(),
      timeoutIMax: this.getUint8(),
      timeoutPMax: this.getUint8(),
      timeoutCos: this.getUint8(),
      pMaxDef: this.getUint8(),
      displaySetExt: toObject(displaySetExtMask, this.getUint32()),
      timeoutUneqCurrent: this.getUint8(),
      timeoutBipolarPower: this.getUint8(),
      relaySet5: toObject(relaySet5Mask, this.getUint8()),
      timeCorrectPeriod: 0,
      timeCorrectPassHalfhour: false
    };
    var timeCorrectPeriod = this.getUint8();
    operatorParameters.timeCorrectPeriod = timeCorrectPeriod & 0x7f;
    operatorParameters.timeCorrectPassHalfhour = !!(timeCorrectPeriod & 0x80);
    return operatorParameters;
  };
  CommandBinaryBuffer$1.prototype.setOperatorParameters = function (operatorParameters) {
    var timeCorrectPeriod = operatorParameters.timeCorrectPeriod | (operatorParameters.timeCorrectPassHalfhour ? 0x80 : 0);
    this.setUint32(operatorParameters.vpThreshold);
    this.setUint32(operatorParameters.vThreshold);
    this.setUint32(operatorParameters.ipThreshold);
    this.setUint32(operatorParameters.pmaxThreshold0);
    this.setUint32(operatorParameters.pmaxThreshold1);
    this.setUint32(operatorParameters.pmaxThreshold2);
    this.setUint32(operatorParameters.pmaxThreshold3);
    this.setUint8(operatorParameters.speedOptoPort);
    this.setUint8(operatorParameters.tint);
    this.setUint8(operatorParameters.calcPeriodDate);
    this.setUint8(operatorParameters.timeoutDisplay);
    this.setUint8(operatorParameters.timeoutScreen);
    this.setUint32(fromObject(displaySetMask, operatorParameters.displaySet));
    this.setUint8(fromObject(relaySet4Mask, operatorParameters.relaySet4));
    this.setUint8(fromObject(relaySet3Mask, operatorParameters.relaySet3));
    this.setUint8(fromObject(relaySet2Mask, operatorParameters.relaySet2));
    this.setUint8(fromObject(relaySet1Mask, operatorParameters.relaySet1));
    this.setUint8(operatorParameters.displayType);
    this.setUint8(operatorParameters.ten);
    this.setUint16(operatorParameters.timeoutRefresh);
    this.setUint8(operatorParameters.deltaCorMin);
    this.setUint8(operatorParameters.timeoutMagnetOff);
    this.setUint8(operatorParameters.timeoutMagnetOn);
    this.setUint8(fromObject(define1Mask, operatorParameters.define1));
    this.setUint8(operatorParameters.timeoutRelayOn);
    this.setUint8(operatorParameters.timeoutRelayKey);
    this.setUint8(operatorParameters.timeoutRelayAuto);
    this.setUint8(operatorParameters.timeoutBadVAVB);
    this.setUint8(operatorParameters.freqMax);
    this.setUint8(operatorParameters.freqMin);
    this.setUint16(operatorParameters.phMin);
    this.setUint8(operatorParameters.year);
    this.setUint8(operatorParameters.month);
    this.setUint8(operatorParameters.date);
    this.setUint8(operatorParameters.energyDecimalPoint);
    this.setUint8(operatorParameters.typeMeter);
    this.setUint8(operatorParameters.timeoutIMax);
    this.setUint8(operatorParameters.timeoutPMax);
    this.setUint8(operatorParameters.timeoutCos);
    this.setUint8(operatorParameters.pMaxDef);
    this.setUint32(fromObject(displaySetExtMask, operatorParameters.displaySetExt));
    this.setUint8(operatorParameters.timeoutUneqCurrent);
    this.setUint8(operatorParameters.timeoutBipolarPower);
    this.setUint8(fromObject(relaySet5Mask, operatorParameters.relaySet5));
    this.setUint8(timeCorrectPeriod);
  };
  CommandBinaryBuffer$1.prototype.getPackedEnergyWithType = function () {
    var _byte2 = this.getUint8();
    var energyType = extractBits(_byte2, TARIFF_NUMBER$1, 1);
    var energies = getPackedEnergies(this, energyType, _byte2);
    return {
      energyType: energyType,
      energies: energies
    };
  };
  CommandBinaryBuffer$1.prototype.setPackedEnergyWithType = function (_ref4) {
    var _this3 = this;
    var energyType = _ref4.energyType,
      energies = _ref4.energies;
    if (energyType) {
      setPackedEnergyType(this, energyType, energies);
    }
    energies.forEach(function (energy) {
      if (energy !== null) {
        _this3.setUint32(energy);
      }
    });
  };
  CommandBinaryBuffer$1.prototype.getEnergies = function () {
    var _this4 = this;
    return new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return _this4.getInt32();
    });
  };
  CommandBinaryBuffer$1.prototype.setEnergies = function (energies) {
    var _this5 = this;
    energies.forEach(function (value) {
      return _this5.setUint32(value);
    });
  };
  CommandBinaryBuffer$1.prototype.getDate = function () {
    return {
      year: this.getUint8(),
      month: this.getUint8(),
      date: this.getUint8()
    };
  };
  CommandBinaryBuffer$1.prototype.setDate = function (date) {
    this.setUint8(date.year);
    this.setUint8(date.month);
    this.setUint8(date.date);
  };
  CommandBinaryBuffer$1.prototype.getSaldoParameters = function () {
    var _this6 = this;
    return {
      coefficients: new Array(4).fill(0).map(function () {
        return _this6.getUint32();
      }),
      decimalPointTariff: this.getUint8(),
      indicationThreshold: this.getInt32(),
      relayThreshold: this.getInt32(),
      mode: this.getUint8(),
      saldoOffTimeBegin: this.getUint8(),
      saldoOffTimeEnd: this.getUint8(),
      decimalPointIndication: this.getUint8(),
      powerThreshold: this.getUint32(),
      creditThreshold: this.getInt32()
    };
  };
  CommandBinaryBuffer$1.prototype.setSaldoParameters = function (saldoParameters) {
    var _this7 = this;
    saldoParameters.coefficients.forEach(function (value) {
      return _this7.setUint32(value);
    });
    this.setUint8(saldoParameters.decimalPointTariff);
    this.setInt32(saldoParameters.indicationThreshold);
    this.setInt32(saldoParameters.relayThreshold);
    this.setUint8(saldoParameters.mode);
    this.setUint8(saldoParameters.saldoOffTimeBegin);
    this.setUint8(saldoParameters.saldoOffTimeEnd);
    this.setUint8(saldoParameters.decimalPointIndication);
    this.setUint32(saldoParameters.powerThreshold);
    this.setInt32(saldoParameters.creditThreshold);
  };
  CommandBinaryBuffer$1.prototype.getEnergyPeriods = function (periodsNumber) {
    var _this8 = this;
    var periods = new Array(periodsNumber).fill(0).map(function () {
      return _this8.getUint16();
    });
    return periods.map(function (period) {
      return getEnergyPeriod(period);
    });
  };
  CommandBinaryBuffer$1.prototype.setEnergyPeriods = function (periods) {
    var _this9 = this;
    periods.forEach(function (period) {
      return setEnergyPeriod(_this9, period);
    });
  };
  CommandBinaryBuffer$1.prototype.getEventStatus = function () {
    var eventStatus = this.getUint16();
    return toObject(eventStatusMask, eventStatus);
  };
  CommandBinaryBuffer$1.prototype.setEventStatus = function (parameters) {
    this.setUint16(fromObject(eventStatusMask, parameters));
  };
  CommandBinaryBuffer$1.prototype.getExtendedCurrentValues2 = function () {
    var uBattery = this.getUint16();
    var relayStatus = toObject(extendedCurrentValues2RelayStatusMask, this.getUint8());
    var relayStatus2 = toObject(extendedCurrentValues2RelayStatus2Mask, this.getUint8());
    var status1 = toObject(extendedCurrentValues2Status1Mask, this.getUint8());
    var status2 = toObject(extendedCurrentValues2Status2Mask, this.getUint8());
    var status3 = toObject(extendedCurrentValues2Status3Mask, this.getUint8());
    return {
      uBattery: uBattery,
      relayStatus: relayStatus,
      relayStatus2: relayStatus2,
      status1: status1,
      status2: status2,
      status3: status3
    };
  };
  CommandBinaryBuffer$1.prototype.setExtendedCurrentValues2 = function (parameters) {
    var uBattery = parameters.uBattery,
      relayStatus = parameters.relayStatus,
      relayStatus2 = parameters.relayStatus2,
      status1 = parameters.status1,
      status2 = parameters.status2,
      status3 = parameters.status3;
    this.setUint16(uBattery);
    this.setUint8(fromObject(extendedCurrentValues2RelayStatusMask, relayStatus));
    this.setUint8(fromObject(extendedCurrentValues2RelayStatus2Mask, relayStatus2));
    this.setUint8(fromObject(extendedCurrentValues2Status1Mask, status1));
    this.setUint8(fromObject(extendedCurrentValues2Status2Mask, status2));
    this.setUint8(fromObject(extendedCurrentValues2Status3Mask, status3));
  };
  CommandBinaryBuffer$1.prototype.getEvent = function () {
    var data = {
      hours: this.getUint8(),
      minutes: this.getUint8(),
      seconds: this.getUint8(),
      event: this.getUint8()
    };
    var event = data.event;
    var bytesLeft = this.bytesLeft;
    data.eventName = eventNames[event];
    switch (event) {
      case POWER_OVER_RELAY_OFF:
        if (bytesLeft < 4) {
          return data;
        }
        data.power = [this.getUint8(), this.getUint8(), this.getUint8(), this.getUint8()];
        break;
      case CMD_CHANGE_TIME:
      case TIME_CORRECT$1:
        if (bytesLeft < 8) {
          return data;
        }
        data.newDate = this.getDateTime();
        break;
    }
    return data;
  };
  CommandBinaryBuffer$1.prototype.setEvent = function (event) {
    this.setUint8(event.hours);
    this.setUint8(event.minutes);
    this.setUint8(event.seconds);
    this.setUint8(event.event);
    switch (event.event) {
      case POWER_OVER_RELAY_OFF:
        var _iterator = _createForOfIteratorHelper(event.power),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;
            this.setUint8(item);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        break;
      case CMD_CHANGE_TIME:
      case TIME_CORRECT$1:
        this.setDateTime(event.newDate);
        break;
    }
  };
  CommandBinaryBuffer$1.prototype.getDemand = function () {
    var date0 = this.getUint8();
    var date1 = this.getUint8();
    return {
      date: {
        year: date0 >> 1,
        month: date0 << 3 & 0x0f | date1 >> 5,
        date: date1 & 0x1f
      },
      energyType: this.getUint8(),
      firstIndex: this.getUint16(),
      count: this.getUint8(),
      period: this.getUint8()
    };
  };
  CommandBinaryBuffer$1.prototype.setDemand = function (parameters) {
    var date0 = parameters.date.year << 1 | parameters.date.month >> 3 & 0x01;
    var date1 = parameters.date.month << 5 & 0xe0 | parameters.date.date & 0x1f;
    this.setUint8(date0);
    this.setUint8(date1);
    this.setUint8(parameters.energyType);
    this.setUint16(parameters.firstIndex);
    this.setUint8(parameters.count);
    this.setUint8(parameters.period);
  };
  CommandBinaryBuffer$1.prototype.getDayMaxDemandResponse = function () {
    var _this10 = this;
    var date = this.getDate();
    var power = new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return {
        hours: _this10.getUint8(),
        minutes: _this10.getUint8(),
        power: _this10.getUint32()
      };
    });
    return {
      date: date,
      power: power
    };
  };
  CommandBinaryBuffer$1.prototype.setDayMaxDemandResponse = function (parameters) {
    var _this11 = this;
    this.setDate(parameters.date);
    parameters.power.forEach(function (value) {
      _this11.setUint8(value.hours);
      _this11.setUint8(value.minutes);
      _this11.setUint32(value.power);
    });
  };
  CommandBinaryBuffer$1.prototype.getOperatorParametersExtended3 = function () {
    return {
      pmaxMinusThreshold0: this.getUint32(),
      pmaxMinusThreshold1: this.getUint32(),
      pmaxMinusThreshold2: this.getUint32(),
      pmaxMinusThreshold3: this.getUint32(),
      relaySet: toObject(operatorParametersExtended3RelaySetMask, this.getUint8())
    };
  };
  CommandBinaryBuffer$1.prototype.setOperatorParametersExtended3 = function (parameters) {
    var pmaxMinusThreshold0 = parameters.pmaxMinusThreshold0,
      pmaxMinusThreshold1 = parameters.pmaxMinusThreshold1,
      pmaxMinusThreshold2 = parameters.pmaxMinusThreshold2,
      pmaxMinusThreshold3 = parameters.pmaxMinusThreshold3,
      relaySet = parameters.relaySet;
    this.setUint32(pmaxMinusThreshold0);
    this.setUint32(pmaxMinusThreshold1);
    this.setUint32(pmaxMinusThreshold2);
    this.setUint32(pmaxMinusThreshold3);
    this.setUint8(fromObject(operatorParametersExtended3RelaySetMask, relaySet));
  };
  CommandBinaryBuffer$1.prototype.getMonthMaxPowerByTariffs = function () {
    var _this12 = this;
    return new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return {
        date: _this12.getUint8(),
        hours: _this12.getUint8(),
        minutes: _this12.getUint8(),
        power: _this12.getUint32()
      };
    });
  };
  CommandBinaryBuffer$1.prototype.setMonthMaxPowerByTariffs = function (tariffs) {
    var _this13 = this;
    tariffs.forEach(function (tariff) {
      _this13.setUint8(tariff.date);
      _this13.setUint8(tariff.hours);
      _this13.setUint8(tariff.minutes);
      _this13.setUint32(tariff.power);
    });
  };

  var HEX = 1;

  var defaultFormatOptions = {
    bytesConversionFormat: HEX,
    bytesConversionFormatOptions: {}
  };

  _objectSpread2(_objectSpread2({}, defaultFormatOptions), {}, {
    dlms: false
  });
  var toBytes$ = function toBytes(commandId) {
    var commandBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return [commandId, commandBytes.length].concat(_toConsumableArray(commandBytes));
  };

  var UNENCRYPTED = 0x00;
  var READ_WRITE = 0x02;
  var READ_ONLY = 0x03;

  var getEventStatus$1 = 0x01;
  var getEnergyDayPrevious$1 = 0x03;
  var getDeviceType$1 = 0x04;
  var getDeviceId$1 = 0x05;
  var getDateTime$1 = 0x07;
  var setDateTime$1 = 0x08;
  var setAccessKey$1 = 0x09;
  var getCurrentValues$1 = 0x0d;
  var getEnergy$1 = 0x0f;
  var setDayProfile$1 = 0x10;
  var setSeasonProfile$1 = 0x11;
  var setSpecialDay$1 = 0x12;
  var activateRatePlan$1 = 0x13;
  var prepareRatePlan$1 = 0x14;
  var getHalfHourDemand$1 = 0x15;
  var getDayDemand$1 = 0x16;
  var getMonthDemand$1 = 0x17;
  var turnRelayOn$1 = 0x18;
  var turnRelayOff$1 = 0x19;
  var setCorrectTime$1 = 0x1c;
  var getOperatorParameters$1 = 0x1e;
  var setOperatorParameters$1 = 0x1f;
  var getVersion$1 = 0x28;
  var getSaldo$1 = 0x29;
  var setSaldo$1 = 0x2a;
  var getRatePlanInfo$1 = 0x2c;
  var getExtendedCurrentValues2$1 = 0x2d;
  var getSaldoParameters$1 = 0x2e;
  var setSaldoParameters$1 = 0x2f;
  var getDayMaxDemand$1 = 0x31;
  var getMonthMaxDemand$1 = 0x32;
  var getEvents$1 = 0x33;
  var getEventsCounters$1 = 0x34;
  var resetPowerMaxDay$1 = 0x35;
  var resetPowerMaxMonth$1 = 0x36;
  var getCurrentStatusMeter$1 = 0x39;
  var getExtendedCurrentValues$1 = 0x3a;
  var getDayProfile$1 = 0x3b;
  var getSeasonProfile$1 = 0x3c;
  var getSpecialDay$1 = 0x3d;
  var getCorrectTime$1 = 0x3e;
  var getCriticalEvent$1 = 0x41;
  var runTariffPlan$1 = 0x46;
  var getDayMaxDemandPrevious$1 = 0x4a;
  var getHalfHourDemandPrevious$1 = 0x4b;
  var getDayDemandExport$1 = 0x4f;
  var getEnergyExportDayPrevious$1 = 0x50;
  var getMonthDemandExport$1 = 0x52;
  var getHalfHourDemandExport$1 = 0x53;
  var getDayMaxDemandExport$1 = 0x58;
  var getMonthMaxDemandExport$1 = 0x59;
  var getEnergyExport$1 = 0x5b;
  var setCorrectDateTime$1 = 0x5c;
  var setDisplayParam$1 = 0x5d;
  var getDisplayParam$1 = 0x5e;
  var setSpecialOperation$1 = 0x64;
  var getMagneticFieldThreshold$1 = 0x6d;
  var getHalfhoursEnergies$1 = 0x6f;
  var getBuildVersion$1 = 0x70;
  var getOperatorParametersExtended3$1 = 0x71;
  var setOperatorParametersExtended3$1 = 0x72;
  var getDemand$1 = 0x76;
  var getMeterInfo$1 = 0x7a;

  var downlinkIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan$1,
    getBuildVersion: getBuildVersion$1,
    getCorrectTime: getCorrectTime$1,
    getCriticalEvent: getCriticalEvent$1,
    getCurrentStatusMeter: getCurrentStatusMeter$1,
    getCurrentValues: getCurrentValues$1,
    getDateTime: getDateTime$1,
    getDayDemand: getDayDemand$1,
    getDayDemandExport: getDayDemandExport$1,
    getDayMaxDemand: getDayMaxDemand$1,
    getDayMaxDemandExport: getDayMaxDemandExport$1,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious$1,
    getDayProfile: getDayProfile$1,
    getDemand: getDemand$1,
    getDeviceId: getDeviceId$1,
    getDeviceType: getDeviceType$1,
    getDisplayParam: getDisplayParam$1,
    getEnergy: getEnergy$1,
    getEnergyDayPrevious: getEnergyDayPrevious$1,
    getEnergyExport: getEnergyExport$1,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious$1,
    getEventStatus: getEventStatus$1,
    getEvents: getEvents$1,
    getEventsCounters: getEventsCounters$1,
    getExtendedCurrentValues: getExtendedCurrentValues$1,
    getExtendedCurrentValues2: getExtendedCurrentValues2$1,
    getHalfHourDemand: getHalfHourDemand$1,
    getHalfHourDemandExport: getHalfHourDemandExport$1,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious$1,
    getHalfhoursEnergies: getHalfhoursEnergies$1,
    getMagneticFieldThreshold: getMagneticFieldThreshold$1,
    getMeterInfo: getMeterInfo$1,
    getMonthDemand: getMonthDemand$1,
    getMonthDemandExport: getMonthDemandExport$1,
    getMonthMaxDemand: getMonthMaxDemand$1,
    getMonthMaxDemandExport: getMonthMaxDemandExport$1,
    getOperatorParameters: getOperatorParameters$1,
    getOperatorParametersExtended3: getOperatorParametersExtended3$1,
    getRatePlanInfo: getRatePlanInfo$1,
    getSaldo: getSaldo$1,
    getSaldoParameters: getSaldoParameters$1,
    getSeasonProfile: getSeasonProfile$1,
    getSpecialDay: getSpecialDay$1,
    getVersion: getVersion$1,
    prepareRatePlan: prepareRatePlan$1,
    resetPowerMaxDay: resetPowerMaxDay$1,
    resetPowerMaxMonth: resetPowerMaxMonth$1,
    runTariffPlan: runTariffPlan$1,
    setAccessKey: setAccessKey$1,
    setCorrectDateTime: setCorrectDateTime$1,
    setCorrectTime: setCorrectTime$1,
    setDateTime: setDateTime$1,
    setDayProfile: setDayProfile$1,
    setDisplayParam: setDisplayParam$1,
    setOperatorParameters: setOperatorParameters$1,
    setOperatorParametersExtended3: setOperatorParametersExtended3$1,
    setSaldo: setSaldo$1,
    setSaldoParameters: setSaldoParameters$1,
    setSeasonProfile: setSeasonProfile$1,
    setSpecialDay: setSpecialDay$1,
    setSpecialOperation: setSpecialOperation$1,
    turnRelayOff: turnRelayOff$1,
    turnRelayOn: turnRelayOn$1
  });

  var commandNames = invertObject(downlinkIds);

  var id$_ = activateRatePlan$1;
  var name$_ = commandNames[activateRatePlan$1];
  var headerSize$_ = 2;
  var maxSize$_ = 1 + TARIFF_PLAN_SIZE;
  var accessLevel$_ = READ_WRITE;
  var isLoraOnly$_ = false;
  var examples$_ = {
    'set rate plan request': {
      id: id$_,
      name: name$_,
      headerSize: headerSize$_,
      maxSize: maxSize$_,
      accessLevel: accessLevel$_,
      parameters: {
        tariffTable: 0,
        tariffPlan: {
          id: 1,
          tariffSet: 2,
          activateYear: 3,
          activateMonth: 4,
          activateDay: 5,
          specialProfilesArraySize: 6,
          seasonProfilesArraySize: 7,
          dayProfilesArraySize: 8
        }
      },
      bytes: [0x13, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]
    }
  };
  var fromBytes$_ = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      tariffTable: buffer.getUint8(),
      tariffPlan: buffer.getTariffPlan()
    };
  };
  var toBytes$_ = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$_);
    buffer.setUint8(parameters.tariffTable);
    buffer.setTariffPlan(parameters.tariffPlan);
    return toBytes$(id$_, buffer.data);
  };

  var activateRatePlan = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$_,
    examples: examples$_,
    fromBytes: fromBytes$_,
    headerSize: headerSize$_,
    id: id$_,
    isLoraOnly: isLoraOnly$_,
    maxSize: maxSize$_,
    name: name$_,
    toBytes: toBytes$_
  });

  var id$Z = getBuildVersion$1;
  var name$Z = commandNames[getBuildVersion$1];
  var headerSize$Z = 2;
  var accessLevel$Z = READ_ONLY;
  var maxSize$Z = 0;
  var isLoraOnly$Z = false;
  var examples$Z = {
    'simple request': {
      id: id$Z,
      name: name$Z,
      headerSize: headerSize$Z,
      maxSize: maxSize$Z,
      accessLevel: accessLevel$Z,
      parameters: {},
      bytes: [0x70, 0x00]
    }
  };
  var fromBytes$Z = function fromBytes(bytes) {
    if (bytes.length !== maxSize$Z) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$Z = function toBytes() {
    return toBytes$(id$Z);
  };

  var getBuildVersion = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$Z,
    examples: examples$Z,
    fromBytes: fromBytes$Z,
    headerSize: headerSize$Z,
    id: id$Z,
    isLoraOnly: isLoraOnly$Z,
    maxSize: maxSize$Z,
    name: name$Z,
    toBytes: toBytes$Z
  });

  var id$Y = getCorrectTime$1;
  var name$Y = commandNames[getCorrectTime$1];
  var headerSize$Y = 2;
  var maxSize$Y = 0;
  var accessLevel$Y = READ_ONLY;
  var isLoraOnly$Y = false;
  var examples$Y = {
    'simple request': {
      id: id$Y,
      name: name$Y,
      headerSize: headerSize$Y,
      maxSize: maxSize$Y,
      accessLevel: accessLevel$Y,
      parameters: {},
      bytes: [0x3e, 0x00]
    }
  };
  var fromBytes$Y = function fromBytes(bytes) {
    if (bytes.length !== maxSize$Y) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$Y = function toBytes() {
    return toBytes$(id$Y);
  };

  var getCorrectTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$Y,
    examples: examples$Y,
    fromBytes: fromBytes$Y,
    headerSize: headerSize$Y,
    id: id$Y,
    isLoraOnly: isLoraOnly$Y,
    maxSize: maxSize$Y,
    name: name$Y,
    toBytes: toBytes$Y
  });

  var CASE_OPEN = 0;
  var MAGNETIC_ON = 1;
  var PARAMETERS_UPDATE_REMOTE = 2;
  var PARAMETERS_UPDATE_LOCAL = 3;
  var RESTART = 4;
  var ERROR_ACCESS = 5;
  var TIME_SET = 6;
  var TIME_CORRECT = 7;
  var DEVICE_FAILURE = 8;
  var CASE_TERMINAL_OPEN = 9;
  var CASE_MODULE_OPEN = 10;
  var TARIFF_TABLE_SET = 11;
  var TARIFF_TABLE_GET = 12;
  var PROTECTION_RESET_EM = 13;
  var PROTECTION_RESET_MAGNETIC = 14;

  var criticalEvents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN,
    CASE_OPEN: CASE_OPEN,
    CASE_TERMINAL_OPEN: CASE_TERMINAL_OPEN,
    DEVICE_FAILURE: DEVICE_FAILURE,
    ERROR_ACCESS: ERROR_ACCESS,
    MAGNETIC_ON: MAGNETIC_ON,
    PARAMETERS_UPDATE_LOCAL: PARAMETERS_UPDATE_LOCAL,
    PARAMETERS_UPDATE_REMOTE: PARAMETERS_UPDATE_REMOTE,
    PROTECTION_RESET_EM: PROTECTION_RESET_EM,
    PROTECTION_RESET_MAGNETIC: PROTECTION_RESET_MAGNETIC,
    RESTART: RESTART,
    TARIFF_TABLE_GET: TARIFF_TABLE_GET,
    TARIFF_TABLE_SET: TARIFF_TABLE_SET,
    TIME_CORRECT: TIME_CORRECT,
    TIME_SET: TIME_SET
  });

  var criticalEventNames = invertObject(criticalEvents);

  var id$X = getCriticalEvent$1;
  var name$X = commandNames[getCriticalEvent$1];
  var headerSize$X = 2;
  var accessLevel$X = READ_ONLY;
  var maxSize$X = 2;
  var isLoraOnly$X = false;
  var examples$X = {
    'simple request': {
      id: id$X,
      name: name$X,
      headerSize: headerSize$X,
      accessLevel: accessLevel$X,
      maxSize: maxSize$X,
      parameters: {
        event: 1,
        name: 'MAGNETIC_ON',
        index: 22
      },
      bytes: [0x41, 0x02, 0x01, 0x16]
    }
  };
  var fromBytes$X = function fromBytes(bytes) {
    if (bytes.length !== maxSize$X) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    var _bytes = _slicedToArray(bytes, 2),
      event = _bytes[0],
      index = _bytes[1];
    return {
      event: event,
      name: criticalEventNames[event],
      index: index
    };
  };
  var toBytes$X = function toBytes(parameters) {
    return toBytes$(id$X, [parameters.event, parameters.index]);
  };

  var getCriticalEvent = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$X,
    examples: examples$X,
    fromBytes: fromBytes$X,
    headerSize: headerSize$X,
    id: id$X,
    isLoraOnly: isLoraOnly$X,
    maxSize: maxSize$X,
    name: name$X,
    toBytes: toBytes$X
  });

  var id$W = getCurrentStatusMeter$1;
  var name$W = commandNames[getCurrentStatusMeter$1];
  var headerSize$W = 2;
  var accessLevel$W = READ_ONLY;
  var maxSize$W = 0;
  var isLoraOnly$W = false;
  var examples$W = {
    'simple request': {
      id: id$W,
      name: name$W,
      headerSize: headerSize$W,
      maxSize: maxSize$W,
      accessLevel: accessLevel$W,
      parameters: {},
      bytes: [0x39, 0x00]
    }
  };
  var fromBytes$W = function fromBytes(bytes) {
    if (bytes.length !== maxSize$W) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$W = function toBytes() {
    return toBytes$(id$W);
  };

  var getCurrentStatusMeter = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$W,
    examples: examples$W,
    fromBytes: fromBytes$W,
    headerSize: headerSize$W,
    id: id$W,
    isLoraOnly: isLoraOnly$W,
    maxSize: maxSize$W,
    name: name$W,
    toBytes: toBytes$W
  });

  var id$V = getCurrentValues$1;
  var name$V = commandNames[getCurrentValues$1];
  var headerSize$V = 2;
  var maxSize$V = 0;
  var accessLevel$V = READ_ONLY;
  var isLoraOnly$V = false;
  var examples$V = {
    'simple request': {
      id: id$V,
      name: name$V,
      headerSize: headerSize$V,
      maxSize: maxSize$V,
      accessLevel: accessLevel$V,
      parameters: {},
      bytes: [0x0d, 0x00]
    }
  };
  var fromBytes$V = function fromBytes(bytes) {
    if (bytes.length !== maxSize$V) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$V = function toBytes() {
    return toBytes$(id$V);
  };

  var getCurrentValues = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$V,
    examples: examples$V,
    fromBytes: fromBytes$V,
    headerSize: headerSize$V,
    id: id$V,
    isLoraOnly: isLoraOnly$V,
    maxSize: maxSize$V,
    name: name$V,
    toBytes: toBytes$V
  });

  var id$U = getDateTime$1;
  var name$U = commandNames[getDateTime$1];
  var headerSize$U = 2;
  var maxSize$U = 0;
  var accessLevel$U = READ_ONLY;
  var isLoraOnly$U = false;
  var examples$U = {
    'simple request': {
      id: id$U,
      name: name$U,
      headerSize: headerSize$U,
      maxSize: maxSize$U,
      accessLevel: accessLevel$U,
      parameters: {},
      bytes: [0x07, 0x00]
    }
  };
  var fromBytes$U = function fromBytes(bytes) {
    if (bytes.length !== maxSize$U) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$U = function toBytes() {
    return toBytes$(id$U);
  };

  var getDateTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$U,
    examples: examples$U,
    fromBytes: fromBytes$U,
    headerSize: headerSize$U,
    id: id$U,
    isLoraOnly: isLoraOnly$U,
    maxSize: maxSize$U,
    name: name$U,
    toBytes: toBytes$U
  });

  var A_PLUS$1 = 1;
  var A_MINUS = 2;

  var MIN_COMMAND_SIZE$5 = 3;
  var MAX_COMMAND_SIZE$5 = 4;
  var id$T = getDayDemand$1;
  var name$T = commandNames[getDayDemand$1];
  var headerSize$T = 2;
  var maxSize$T = MAX_COMMAND_SIZE$5;
  var accessLevel$T = READ_ONLY;
  var isLoraOnly$T = false;
  var examples$T = {
    'request day values for 2024.03.22 00:00:00 GMT': {
      id: id$T,
      name: name$T,
      headerSize: headerSize$T,
      maxSize: maxSize$T,
      accessLevel: accessLevel$T,
      parameters: {
        date: {
          year: 24,
          month: 3,
          date: 22
        }
      },
      bytes: [0x16, 0x03, 0x18, 0x03, 0x16]
    },
    'request day values with energy type for 2024.03.22 00:00:00 GMT': {
      id: id$T,
      name: name$T,
      headerSize: headerSize$T,
      maxSize: maxSize$T,
      accessLevel: accessLevel$T,
      parameters: {
        date: {
          year: 24,
          month: 3,
          date: 22
        },
        energyType: A_PLUS$1
      },
      bytes: [0x16, 0x04, 0x18, 0x03, 0x16, 0x01]
    }
  };
  var fromBytes$T = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    if (bytes.length === MAX_COMMAND_SIZE$5) {
      return {
        date: buffer.getDate(),
        energyType: buffer.getUint8()
      };
    }
    return {
      date: buffer.getDate()
    };
  };
  var toBytes$T = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(parameters !== null && parameters !== undefined && parameters.energyType ? MAX_COMMAND_SIZE$5 : MIN_COMMAND_SIZE$5);
    buffer.setDate(parameters === null || parameters === undefined ? undefined : parameters.date);
    if (parameters !== null && parameters !== undefined && parameters.energyType) {
      buffer.setUint8(parameters.energyType);
    }
    return toBytes$(id$T, buffer.data);
  };

  var getDayDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$T,
    examples: examples$T,
    fromBytes: fromBytes$T,
    headerSize: headerSize$T,
    id: id$T,
    isLoraOnly: isLoraOnly$T,
    maxSize: maxSize$T,
    name: name$T,
    toBytes: toBytes$T
  });

  var MIN_COMMAND_SIZE$4 = 3;
  var MAX_COMMAND_SIZE$4 = 4;
  var id$S = getDayDemandExport$1;
  var name$S = commandNames[getDayDemandExport$1];
  var headerSize$S = 2;
  var maxSize$S = MAX_COMMAND_SIZE$4;
  var accessLevel$S = READ_ONLY;
  var isLoraOnly$S = false;
  var examples$S = {
    'request day values for 2024.03.22 00:00:00 GMT': {
      id: id$S,
      name: name$S,
      headerSize: headerSize$S,
      maxSize: maxSize$S,
      accessLevel: accessLevel$S,
      parameters: {
        date: {
          year: 24,
          month: 3,
          date: 22
        }
      },
      bytes: [0x4f, 0x03, 0x18, 0x03, 0x16]
    },
    'request day values with energy type for 2024.03.22 00:00:00 GMT': {
      id: id$S,
      name: name$S,
      headerSize: headerSize$S,
      maxSize: maxSize$S,
      accessLevel: accessLevel$S,
      parameters: {
        date: {
          year: 24,
          month: 3,
          date: 22
        },
        energyType: A_PLUS$1
      },
      bytes: [0x4f, 0x04, 0x18, 0x03, 0x16, 0x01]
    }
  };
  var fromBytes$S = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    if (bytes.length === MAX_COMMAND_SIZE$4) {
      return {
        date: buffer.getDate(),
        energyType: buffer.getUint8()
      };
    }
    return {
      date: buffer.getDate()
    };
  };
  var toBytes$S = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(parameters !== null && parameters !== undefined && parameters.energyType ? MAX_COMMAND_SIZE$4 : MIN_COMMAND_SIZE$4);
    buffer.setDate(parameters === null || parameters === undefined ? undefined : parameters.date);
    if (parameters !== null && parameters !== undefined && parameters.energyType) {
      buffer.setUint8(parameters.energyType);
    }
    return toBytes$(id$S, buffer.data);
  };

  var getDayDemandExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$S,
    examples: examples$S,
    fromBytes: fromBytes$S,
    headerSize: headerSize$S,
    id: id$S,
    isLoraOnly: isLoraOnly$S,
    maxSize: maxSize$S,
    name: name$S,
    toBytes: toBytes$S
  });

  var id$R = getDayMaxDemand$1;
  var name$R = commandNames[getDayMaxDemand$1];
  var headerSize$R = 2;
  var maxSize$R = 3;
  var accessLevel$R = READ_ONLY;
  var isLoraOnly$R = false;
  var examples$R = {
    'request for 2024.03.22': {
      id: id$R,
      name: name$R,
      headerSize: headerSize$R,
      maxSize: maxSize$R,
      accessLevel: accessLevel$R,
      parameters: {
        date: {
          year: 24,
          month: 3,
          date: 22
        }
      },
      bytes: [0x31, 0x03, 0x18, 0x03, 0x16]
    }
  };
  var fromBytes$R = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      date: buffer.getDate()
    };
  };
  var toBytes$R = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$R);
    buffer.setDate(parameters.date);
    return toBytes$(id$R, buffer.data);
  };

  var getDayMaxDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$R,
    examples: examples$R,
    fromBytes: fromBytes$R,
    headerSize: headerSize$R,
    id: id$R,
    isLoraOnly: isLoraOnly$R,
    maxSize: maxSize$R,
    name: name$R,
    toBytes: toBytes$R
  });

  var id$Q = getDayMaxDemandExport$1;
  var name$Q = commandNames[getDayMaxDemandExport$1];
  var headerSize$Q = 2;
  var maxSize$Q = 3;
  var accessLevel$Q = READ_ONLY;
  var isLoraOnly$Q = false;
  var examples$Q = {
    'request for 2024.03.22': {
      id: id$Q,
      name: name$Q,
      headerSize: headerSize$Q,
      maxSize: maxSize$Q,
      accessLevel: accessLevel$Q,
      parameters: {
        date: {
          year: 24,
          month: 3,
          date: 22
        }
      },
      bytes: [0x58, 0x03, 0x18, 0x03, 0x16]
    }
  };
  var fromBytes$Q = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      date: buffer.getDate()
    };
  };
  var toBytes$Q = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$Q);
    buffer.setDate(parameters.date);
    return toBytes$(id$Q, buffer.data);
  };

  var getDayMaxDemandExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$Q,
    examples: examples$Q,
    fromBytes: fromBytes$Q,
    headerSize: headerSize$Q,
    id: id$Q,
    isLoraOnly: isLoraOnly$Q,
    maxSize: maxSize$Q,
    name: name$Q,
    toBytes: toBytes$Q
  });

  var id$P = getDayMaxDemandPrevious$1;
  var name$P = commandNames[getDayMaxDemandPrevious$1];
  var headerSize$P = 2;
  var accessLevel$P = READ_ONLY;
  var maxSize$P = 0;
  var isLoraOnly$P = false;
  var examples$P = {
    'simple request': {
      id: id$P,
      name: name$P,
      headerSize: headerSize$P,
      maxSize: maxSize$P,
      accessLevel: accessLevel$P,
      parameters: {},
      bytes: [0x4a, 0x00]
    }
  };
  var fromBytes$P = function fromBytes(bytes) {
    if (bytes.length !== maxSize$P) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$P = function toBytes() {
    return toBytes$(id$P);
  };

  var getDayMaxDemandPrevious = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$P,
    examples: examples$P,
    fromBytes: fromBytes$P,
    headerSize: headerSize$P,
    id: id$P,
    isLoraOnly: isLoraOnly$P,
    maxSize: maxSize$P,
    name: name$P,
    toBytes: toBytes$P
  });

  var id$O = getDayProfile$1;
  var name$O = commandNames[getDayProfile$1];
  var headerSize$O = 2;
  var maxSize$O = 3;
  var accessLevel$O = READ_ONLY;
  var isLoraOnly$O = false;
  var examples$O = {
    'request for active tariff table A+': {
      id: id$O,
      name: name$O,
      maxSize: maxSize$O,
      headerSize: headerSize$O,
      accessLevel: accessLevel$O,
      parameters: {
        tariffTable: 0,
        index: 3,
        isActive: true
      },
      bytes: [0x3b, 0x03, 0x00, 0x03, 0x00]
    }
  };
  var fromBytes$O = function fromBytes(_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
      tariffTable = _ref2[0],
      index = _ref2[1],
      isActive = _ref2[2];
    return {
      tariffTable: tariffTable,
      index: index,
      isActive: isActive === 0
    };
  };
  var toBytes$O = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$O);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    buffer.setUint8(parameters.isActive ? 0 : 1);
    return toBytes$(id$O, buffer.data);
  };

  var getDayProfile = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$O,
    examples: examples$O,
    fromBytes: fromBytes$O,
    headerSize: headerSize$O,
    id: id$O,
    isLoraOnly: isLoraOnly$O,
    maxSize: maxSize$O,
    name: name$O,
    toBytes: toBytes$O
  });

  var A_PLUS = 0x01;

  var id$N = getDemand$1;
  var name$N = commandNames[getDemand$1];
  var headerSize$N = 2;
  var maxSize$N = 7;
  var accessLevel$N = READ_ONLY;
  var isLoraOnly$N = false;
  var examples$N = {
    'request for A+': {
      id: id$N,
      name: name$N,
      headerSize: headerSize$N,
      maxSize: maxSize$N,
      parameters: {
        date: {
          year: 21,
          month: 6,
          date: 18
        },
        energyType: A_PLUS,
        firstIndex: 0,
        count: 2,
        period: 30
      },
      bytes: [0x76, 0x07, 0x2a, 0xd2, 0x01, 0x00, 0x00, 0x02, 0x1e]
    }
  };
  var fromBytes$N = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return buffer.getDemand();
  };
  var toBytes$N = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$N);
    buffer.setDemand(parameters);
    return toBytes$(id$N, buffer.data);
  };

  var getDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$N,
    examples: examples$N,
    fromBytes: fromBytes$N,
    headerSize: headerSize$N,
    id: id$N,
    isLoraOnly: isLoraOnly$N,
    maxSize: maxSize$N,
    name: name$N,
    toBytes: toBytes$N
  });

  var id$M = getDeviceId$1;
  var name$M = commandNames[getDeviceId$1];
  var headerSize$M = 2;
  var accessLevel$M = READ_ONLY;
  var maxSize$M = 0;
  var isLoraOnly$M = false;
  var examples$M = {
    'simple request': {
      id: id$M,
      name: name$M,
      headerSize: headerSize$M,
      accessLevel: accessLevel$M,
      maxSize: maxSize$M,
      parameters: {},
      bytes: [0x05, 0x00]
    }
  };
  var fromBytes$M = function fromBytes(bytes) {
    if (bytes.length !== maxSize$M) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$M = function toBytes() {
    return toBytes$(id$M);
  };

  var getDeviceId = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$M,
    examples: examples$M,
    fromBytes: fromBytes$M,
    headerSize: headerSize$M,
    id: id$M,
    isLoraOnly: isLoraOnly$M,
    maxSize: maxSize$M,
    name: name$M,
    toBytes: toBytes$M
  });

  var id$L = getDeviceType$1;
  var name$L = commandNames[getDeviceType$1];
  var headerSize$L = 2;
  var accessLevel$L = READ_ONLY;
  var maxSize$L = 0;
  var isLoraOnly$L = false;
  var examples$L = {
    'simple request': {
      id: id$L,
      name: name$L,
      headerSize: headerSize$L,
      maxSize: maxSize$L,
      accessLevel: accessLevel$L,
      parameters: {},
      bytes: [0x04, 0x00]
    }
  };
  var fromBytes$L = function fromBytes(data) {
    if (data.length !== maxSize$L) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    return {};
  };
  var toBytes$L = function toBytes() {
    return toBytes$(id$L);
  };

  var getDeviceType = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$L,
    examples: examples$L,
    fromBytes: fromBytes$L,
    headerSize: headerSize$L,
    id: id$L,
    isLoraOnly: isLoraOnly$L,
    maxSize: maxSize$L,
    name: name$L,
    toBytes: toBytes$L
  });

  var id$K = getDisplayParam$1;
  var name$K = commandNames[getDisplayParam$1];
  var headerSize$K = 2;
  var maxSize$K = 1;
  var accessLevel$K = READ_ONLY;
  var isLoraOnly$K = false;
  var examples$K = {
    'get additional display parameters': {
      id: id$K,
      name: name$K,
      headerSize: headerSize$K,
      maxSize: maxSize$K,
      accessLevel: accessLevel$K,
      parameters: {
        displayMode: 1
      },
      bytes: [0x5e, 0x01, 0x01]
    }
  };
  var fromBytes$K = function fromBytes(_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
      displayMode = _ref2[0];
    return {
      displayMode: displayMode
    };
  };
  var toBytes$K = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$K);
    buffer.setUint8(parameters.displayMode);
    return toBytes$(id$K, buffer.data);
  };

  var getDisplayParam = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$K,
    examples: examples$K,
    fromBytes: fromBytes$K,
    headerSize: headerSize$K,
    id: id$K,
    isLoraOnly: isLoraOnly$K,
    maxSize: maxSize$K,
    name: name$K,
    toBytes: toBytes$K
  });

  var MIN_COMMAND_SIZE$3 = 0;
  var MAX_COMMAND_SIZE$3 = 1;
  var id$J = getEnergy$1;
  var name$J = commandNames[getEnergy$1];
  var headerSize$J = 2;
  var maxSize$J = MAX_COMMAND_SIZE$3;
  var accessLevel$J = READ_ONLY;
  var isLoraOnly$J = false;
  var examples$J = {
    'get default A+ energy': {
      id: id$J,
      name: name$J,
      headerSize: headerSize$J,
      maxSize: maxSize$J,
      accessLevel: accessLevel$J,
      parameters: {},
      bytes: [0x0f, 0x00]
    },
    'get A- energy': {
      id: id$J,
      name: name$J,
      headerSize: headerSize$J,
      maxSize: maxSize$J,
      accessLevel: accessLevel$J,
      parameters: {
        energyType: A_MINUS
      },
      bytes: [0x0f, 0x01, 0x02]
    }
  };
  var fromBytes$J = function fromBytes(bytes) {
    if (bytes.length === MAX_COMMAND_SIZE$3) {
      return {
        energyType: bytes[0]
      };
    }
    return {};
  };
  var toBytes$J = function toBytes() {
    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var buffer = new CommandBinaryBuffer$1(parameters !== null && parameters !== undefined && parameters.energyType ? MAX_COMMAND_SIZE$3 : MIN_COMMAND_SIZE$3);
    if (parameters !== null && parameters !== undefined && parameters.energyType) {
      buffer.setUint8(parameters.energyType);
    }
    return toBytes$(id$J, buffer.data);
  };

  var getEnergy = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$J,
    examples: examples$J,
    fromBytes: fromBytes$J,
    headerSize: headerSize$J,
    id: id$J,
    isLoraOnly: isLoraOnly$J,
    maxSize: maxSize$J,
    name: name$J,
    toBytes: toBytes$J
  });

  var MIN_COMMAND_SIZE$2 = 0;
  var MAX_COMMAND_SIZE$2 = 1;
  var id$I = getEnergyDayPrevious$1;
  var name$I = commandNames[getEnergyDayPrevious$1];
  var headerSize$I = 2;
  var maxSize$I = MAX_COMMAND_SIZE$2;
  var accessLevel$I = READ_ONLY;
  var isLoraOnly$I = false;
  var examples$I = {
    'simple request': {
      id: id$I,
      name: name$I,
      headerSize: headerSize$I,
      maxSize: maxSize$I,
      accessLevel: accessLevel$I,
      parameters: {},
      bytes: [0x03, 0x00]
    },
    'request A- energy': {
      id: id$I,
      name: name$I,
      headerSize: headerSize$I,
      maxSize: maxSize$I,
      accessLevel: accessLevel$I,
      parameters: {
        energyType: A_MINUS
      },
      bytes: [0x03, 0x01, 0x02]
    }
  };
  var fromBytes$I = function fromBytes(bytes) {
    var length = bytes.length;
    if (length !== MAX_COMMAND_SIZE$2 && length !== MIN_COMMAND_SIZE$2) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    if (length === MAX_COMMAND_SIZE$2) {
      return {
        energyType: bytes[0]
      };
    }
    return {};
  };
  var toBytes$I = function toBytes(parameters) {
    if (parameters.energyType) {
      return toBytes$(id$I, [parameters.energyType]);
    }
    return toBytes$(id$I);
  };

  var getEnergyDayPrevious = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$I,
    examples: examples$I,
    fromBytes: fromBytes$I,
    headerSize: headerSize$I,
    id: id$I,
    isLoraOnly: isLoraOnly$I,
    maxSize: maxSize$I,
    name: name$I,
    toBytes: toBytes$I
  });

  var MIN_COMMAND_SIZE$1 = 0;
  var MAX_COMMAND_SIZE$1 = 1;
  var id$H = getEnergyExport$1;
  var name$H = commandNames[getEnergyExport$1];
  var headerSize$H = 2;
  var maxSize$H = MAX_COMMAND_SIZE$1;
  var accessLevel$H = READ_ONLY;
  var isLoraOnly$H = false;
  var examples$H = {
    'get default A+ energy': {
      id: id$H,
      name: name$H,
      headerSize: headerSize$H,
      maxSize: maxSize$H,
      accessLevel: accessLevel$H,
      parameters: {},
      bytes: [0x5b, 0x00]
    },
    'get A- energy': {
      id: id$H,
      name: name$H,
      headerSize: headerSize$H,
      maxSize: maxSize$H,
      accessLevel: accessLevel$H,
      parameters: {
        energyType: A_MINUS
      },
      bytes: [0x5b, 0x01, 0x02]
    }
  };
  var fromBytes$H = function fromBytes(bytes) {
    if (bytes.length === MAX_COMMAND_SIZE$1) {
      return {
        energyType: bytes[0]
      };
    }
    return {};
  };
  var toBytes$H = function toBytes() {
    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var buffer = new CommandBinaryBuffer$1(parameters !== null && parameters !== undefined && parameters.energyType ? MAX_COMMAND_SIZE$1 : MIN_COMMAND_SIZE$1);
    if (parameters !== null && parameters !== undefined && parameters.energyType) {
      buffer.setUint8(parameters.energyType);
    }
    return toBytes$(id$H, buffer.data);
  };

  var getEnergyExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$H,
    examples: examples$H,
    fromBytes: fromBytes$H,
    headerSize: headerSize$H,
    id: id$H,
    isLoraOnly: isLoraOnly$H,
    maxSize: maxSize$H,
    name: name$H,
    toBytes: toBytes$H
  });

  var MIN_COMMAND_SIZE = 0;
  var MAX_COMMAND_SIZE = 1;
  var id$G = getEnergyExportDayPrevious$1;
  var name$G = commandNames[getEnergyExportDayPrevious$1];
  var headerSize$G = 2;
  var maxSize$G = MAX_COMMAND_SIZE;
  var accessLevel$G = READ_ONLY;
  var isLoraOnly$G = false;
  var examples$G = {
    'simple request': {
      id: id$G,
      name: name$G,
      headerSize: headerSize$G,
      maxSize: maxSize$G,
      accessLevel: accessLevel$G,
      parameters: {},
      bytes: [0x50, 0x00]
    },
    'request A- energy': {
      id: id$G,
      name: name$G,
      headerSize: headerSize$G,
      maxSize: maxSize$G,
      accessLevel: accessLevel$G,
      parameters: {
        energyType: A_MINUS
      },
      bytes: [0x50, 0x01, 0x02]
    }
  };
  var fromBytes$G = function fromBytes(bytes) {
    var length = bytes.length;
    if (length !== MAX_COMMAND_SIZE && length !== MIN_COMMAND_SIZE) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    if (length === MAX_COMMAND_SIZE) {
      return {
        energyType: bytes[0]
      };
    }
    return {};
  };
  var toBytes$G = function toBytes(parameters) {
    if (parameters.energyType) {
      return toBytes$(id$G, [parameters.energyType]);
    }
    return toBytes$(id$G);
  };

  var getEnergyExportDayPrevious = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$G,
    examples: examples$G,
    fromBytes: fromBytes$G,
    headerSize: headerSize$G,
    id: id$G,
    isLoraOnly: isLoraOnly$G,
    maxSize: maxSize$G,
    name: name$G,
    toBytes: toBytes$G
  });

  var id$F = getEvents$1;
  var name$F = commandNames[getEvents$1];
  var headerSize$F = 2;
  var accessLevel$F = READ_ONLY;
  var maxSize$F = 4;
  var isLoraOnly$F = false;
  var examples$F = {
    'simple request': {
      id: id$F,
      name: name$F,
      headerSize: headerSize$F,
      accessLevel: accessLevel$F,
      maxSize: maxSize$F,
      parameters: {
        date: {
          year: 24,
          month: 2,
          date: 12
        },
        offset: 23
      },
      bytes: [0x33, 0x04, 0x18, 0x02, 0x0c, 0x17]
    }
  };
  var fromBytes$F = function fromBytes(bytes) {
    if (bytes.length !== maxSize$F) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    var buffer = new CommandBinaryBuffer$1(bytes);
    var date = buffer.getDate();
    var offset = buffer.getUint8();
    return {
      date: date,
      offset: offset
    };
  };
  var toBytes$F = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$F);
    buffer.setDate(parameters.date);
    buffer.setUint8(parameters.offset);
    return toBytes$(id$F, buffer.data);
  };

  var getEvents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$F,
    examples: examples$F,
    fromBytes: fromBytes$F,
    headerSize: headerSize$F,
    id: id$F,
    isLoraOnly: isLoraOnly$F,
    maxSize: maxSize$F,
    name: name$F,
    toBytes: toBytes$F
  });

  var id$E = getEventsCounters$1;
  var name$E = commandNames[getEventsCounters$1];
  var headerSize$E = 2;
  var accessLevel$E = READ_ONLY;
  var maxSize$E = 0;
  var isLoraOnly$E = false;
  var examples$E = {
    'simple request': {
      id: id$E,
      name: name$E,
      headerSize: headerSize$E,
      accessLevel: accessLevel$E,
      maxSize: maxSize$E,
      parameters: {},
      bytes: [0x34, 0x00]
    }
  };
  var fromBytes$E = function fromBytes(bytes) {
    if (bytes.length !== maxSize$E) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$E = function toBytes() {
    return toBytes$(id$E);
  };

  var getEventsCounters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$E,
    examples: examples$E,
    fromBytes: fromBytes$E,
    headerSize: headerSize$E,
    id: id$E,
    isLoraOnly: isLoraOnly$E,
    maxSize: maxSize$E,
    name: name$E,
    toBytes: toBytes$E
  });

  var id$D = getEventStatus$1;
  var name$D = commandNames[getEventStatus$1];
  var headerSize$D = 2;
  var accessLevel$D = READ_ONLY;
  var maxSize$D = 0;
  var isLoraOnly$D = false;
  var examples$D = {
    'simple request': {
      id: id$D,
      name: name$D,
      headerSize: headerSize$D,
      accessLevel: accessLevel$D,
      maxSize: maxSize$D,
      parameters: {},
      bytes: [0x01, 0x00]
    }
  };
  var fromBytes$D = function fromBytes(bytes) {
    if (bytes.length !== maxSize$D) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$D = function toBytes() {
    return toBytes$(id$D);
  };

  var getEventStatus = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$D,
    examples: examples$D,
    fromBytes: fromBytes$D,
    headerSize: headerSize$D,
    id: id$D,
    isLoraOnly: isLoraOnly$D,
    maxSize: maxSize$D,
    name: name$D,
    toBytes: toBytes$D
  });

  var id$C = getExtendedCurrentValues$1;
  var name$C = commandNames[getExtendedCurrentValues$1];
  var headerSize$C = 2;
  var maxSize$C = 0;
  var accessLevel$C = READ_ONLY;
  var isLoraOnly$C = false;
  var examples$C = {
    'simple request': {
      id: id$C,
      name: name$C,
      headerSize: headerSize$C,
      maxSize: maxSize$C,
      accessLevel: accessLevel$C,
      parameters: {},
      bytes: [0x3a, 0x00]
    }
  };
  var fromBytes$C = function fromBytes(bytes) {
    if (bytes.length !== maxSize$C) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$C = function toBytes() {
    return toBytes$(id$C);
  };

  var getExtendedCurrentValues = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$C,
    examples: examples$C,
    fromBytes: fromBytes$C,
    headerSize: headerSize$C,
    id: id$C,
    isLoraOnly: isLoraOnly$C,
    maxSize: maxSize$C,
    name: name$C,
    toBytes: toBytes$C
  });

  var id$B = getExtendedCurrentValues2$1;
  var name$B = commandNames[getExtendedCurrentValues2$1];
  var headerSize$B = 2;
  var accessLevel$B = READ_ONLY;
  var maxSize$B = 0;
  var isLoraOnly$B = false;
  var examples$B = {
    'simple request': {
      id: id$B,
      name: name$B,
      headerSize: headerSize$B,
      maxSize: maxSize$B,
      accessLevel: accessLevel$B,
      parameters: {},
      bytes: [0x2d, 0x00]
    }
  };
  var fromBytes$B = function fromBytes(bytes) {
    if (bytes.length !== maxSize$B) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$B = function toBytes() {
    return toBytes$(id$B);
  };

  var getExtendedCurrentValues2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$B,
    examples: examples$B,
    fromBytes: fromBytes$B,
    headerSize: headerSize$B,
    id: id$B,
    isLoraOnly: isLoraOnly$B,
    maxSize: maxSize$B,
    name: name$B,
    toBytes: toBytes$B
  });

  var id$A = getHalfHourDemand$1;
  var name$A = commandNames[getHalfHourDemand$1];
  var headerSize$A = 2;
  var maxSize$A = 3;
  var accessLevel$A = READ_ONLY;
  var isLoraOnly$A = false;
  var examples$A = {
    'request archive values for 2024.03.22': {
      id: id$A,
      name: name$A,
      headerSize: headerSize$A,
      maxSize: maxSize$A,
      accessLevel: accessLevel$A,
      parameters: {
        date: {
          year: 24,
          month: 3,
          date: 22
        }
      },
      bytes: [0x15, 0x03, 0x18, 0x03, 0x16]
    }
  };
  var fromBytes$A = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      date: buffer.getDate()
    };
  };
  var toBytes$A = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$A);
    buffer.setDate(parameters.date);
    return toBytes$(id$A, buffer.data);
  };

  var getHalfHourDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$A,
    examples: examples$A,
    fromBytes: fromBytes$A,
    headerSize: headerSize$A,
    id: id$A,
    isLoraOnly: isLoraOnly$A,
    maxSize: maxSize$A,
    name: name$A,
    toBytes: toBytes$A
  });

  var id$z = getHalfHourDemandExport$1;
  var name$z = commandNames[getHalfHourDemandExport$1];
  var headerSize$z = 2;
  var maxSize$z = 3;
  var accessLevel$z = READ_ONLY;
  var isLoraOnly$z = false;
  var examples$z = {
    'request archive values for 2024.03.22': {
      id: id$z,
      name: name$z,
      headerSize: headerSize$z,
      maxSize: maxSize$z,
      accessLevel: accessLevel$z,
      parameters: {
        date: {
          year: 24,
          month: 3,
          date: 22
        }
      },
      bytes: [0x53, 0x03, 0x18, 0x03, 0x16]
    }
  };
  var fromBytes$z = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      date: buffer.getDate()
    };
  };
  var toBytes$z = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$z);
    buffer.setDate(parameters.date);
    return toBytes$(id$z, buffer.data);
  };

  var getHalfHourDemandExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$z,
    examples: examples$z,
    fromBytes: fromBytes$z,
    headerSize: headerSize$z,
    id: id$z,
    isLoraOnly: isLoraOnly$z,
    maxSize: maxSize$z,
    name: name$z,
    toBytes: toBytes$z
  });

  var id$y = getHalfHourDemandPrevious$1;
  var name$y = commandNames[getHalfHourDemandPrevious$1];
  var headerSize$y = 2;
  var accessLevel$y = READ_ONLY;
  var maxSize$y = 0;
  var isLoraOnly$y = false;
  var examples$y = {
    'simple request': {
      id: id$y,
      name: name$y,
      headerSize: headerSize$y,
      maxSize: maxSize$y,
      accessLevel: accessLevel$y,
      parameters: {},
      bytes: [0x4b, 0x00]
    }
  };
  var fromBytes$y = function fromBytes(data) {
    if (data.length !== maxSize$y) {
      throw new Error("Wrong buffer size: ".concat(data.length, "."));
    }
    return {};
  };
  var toBytes$y = function toBytes() {
    return toBytes$(id$y);
  };

  var getHalfHourDemandPrevious = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$y,
    examples: examples$y,
    fromBytes: fromBytes$y,
    headerSize: headerSize$y,
    id: id$y,
    isLoraOnly: isLoraOnly$y,
    maxSize: maxSize$y,
    name: name$y,
    toBytes: toBytes$y
  });

  var TARIFF_NUMBER = 4;
  var UNDEFINED_ENERGY_VALUE = 0xffffffff;
  var energiesMask = {
    'A+': 0x01,
    'A+R+': 0x02,
    'A+R-': 0x04,
    'A-': 0x08,
    'A-R+': 0x10,
    'A-R-': 0x20
  };
  var getEnergiesFlags = function getEnergiesFlags(energies) {
    var booleanObject = {};
    Object.keys(energies).forEach(function (name) {
      booleanObject[name] = !!energies[name];
    });
    return fromObject(energiesMask, booleanObject);
  };
  var getAPlusTariffBit = function getAPlusTariffBit(tariff) {
    return tariff < TARIFF_NUMBER ? 1 << tariff : 0;
  };
  var getAMinusTariffBit = function getAMinusTariffBit(tariff) {
    return tariff < TARIFF_NUMBER ? 1 << tariff << 4 : 0;
  };
  var getTariffEnergiesFlag = function getTariffEnergiesFlag(tariff, energies) {
    var flag = 0;
    if (tariff < TARIFF_NUMBER) {
      if (energies['A+'] || energies['A+R+'] || energies['A+R-']) {
        flag |= getAPlusTariffBit(tariff);
      }
      if (energies['A-'] || energies['A-R+'] || energies['A-R-']) {
        flag |= getAMinusTariffBit(tariff);
      }
    }
    return flag;
  };
  function CommandBinaryBuffer(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    BinaryBuffer.call(this, dataOrLength, isLittleEndian);
  }
  CommandBinaryBuffer.prototype = Object.create(BinaryBuffer.prototype);
  CommandBinaryBuffer.prototype.constructor = CommandBinaryBuffer;
  CommandBinaryBuffer.prototype.getDate = function () {
    var date0 = this.getUint8();
    var date1 = this.getUint8();
    return {
      year: date0 >> 1,
      month: date0 << 3 & 0x0f | date1 >> 5,
      date: date1 & 0x1f
    };
  };
  CommandBinaryBuffer.prototype.setDate = function (_ref) {
    var year = _ref.year,
      month = _ref.month,
      date = _ref.date;
    var date0 = year << 1 | month >> 3 & 0x01;
    var date1 = month << 5 & 0xe0 | date & 0x1f;
    this.setUint8(date0);
    this.setUint8(date1);
  };
  CommandBinaryBuffer.prototype.getEnergiesFlags = function () {
    var _byte = this.getUint8();
    return toObject(energiesMask, _byte);
  };
  CommandBinaryBuffer.prototype.setEnergiesFlags = function (energies) {
    this.setUint8(getEnergiesFlags(energies));
  };
  CommandBinaryBuffer.prototype.getHalfhoursEnergy = function (halfhoursNumber) {
    var halfhours = [];
    for (var index = 0; index < halfhoursNumber; index++) {
      var value = this.getUint16();
      halfhours.push(value === UNDEFINED_ENERGY_VALUE ? undefined : value);
    }
    return halfhours;
  };
  CommandBinaryBuffer.prototype.setHalfhoursEnergy = function (halfhours) {
    if (halfhours) {
      for (var index = 0; index < halfhours.length; index++) {
        var value = halfhours[index];
        this.setUint16(value === undefined ? UNDEFINED_ENERGY_VALUE : value);
      }
    }
  };
  CommandBinaryBuffer.prototype.getHalfhoursEnergies = function (energiesFlags, halfhoursNumber) {
    var energies = {};
    if (energiesFlags['A+']) {
      energies['A+'] = this.getHalfhoursEnergy(halfhoursNumber);
    }
    if (energiesFlags['A+R+']) {
      energies['A+R+'] = this.getHalfhoursEnergy(halfhoursNumber);
    }
    if (energiesFlags['A+R-']) {
      energies['A+R-'] = this.getHalfhoursEnergy(halfhoursNumber);
    }
    if (energiesFlags['A-']) {
      energies['A-'] = this.getHalfhoursEnergy(halfhoursNumber);
    }
    if (energiesFlags['A-R+']) {
      energies['A-R+'] = this.getHalfhoursEnergy(halfhoursNumber);
    }
    if (energiesFlags['A-R-']) {
      energies['A-R-'] = this.getHalfhoursEnergy(halfhoursNumber);
    }
    return energies;
  };
  CommandBinaryBuffer.prototype.setHalfhoursEnergies = function (energies) {
    this.setHalfhoursEnergy(energies['A+']);
    this.setHalfhoursEnergy(energies['A+R+']);
    this.setHalfhoursEnergy(energies['A+R-']);
    this.setHalfhoursEnergy(energies['A-']);
    this.setHalfhoursEnergy(energies['A-R+']);
    this.setHalfhoursEnergy(energies['A-R-']);
  };
  CommandBinaryBuffer.prototype.getAPlusTariffEnergies = function (energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A+']) {
      energies['A+'] = this.getUint32();
    }
    if (energyFlags & energiesMask['A+R+']) {
      energies['A+R+'] = this.getUint32();
    }
    if (energyFlags & energiesMask['A+R-']) {
      energies['A+R-'] = this.getUint32();
    }
    return energies;
  };
  CommandBinaryBuffer.prototype.setAPlusTariffEnergies = function (energies) {
    if (energies) {
      if (energies['A+']) {
        this.setUint32(energies['A+']);
      }
      if (energies['A+R+']) {
        this.setUint32(energies['A+R+']);
      }
      if (energies['A+R-']) {
        this.setUint32(energies['A+R-']);
      }
    }
  };
  CommandBinaryBuffer.prototype.getAMinusTariffEnergies = function (energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A-']) {
      energies['A-'] = this.getUint32();
    }
    if (energyFlags & energiesMask['A-R+']) {
      energies['A-R+'] = this.getUint32();
    }
    if (energyFlags & energiesMask['A-R-']) {
      energies['A-R-'] = this.getUint32();
    }
    return energies;
  };
  CommandBinaryBuffer.prototype.setAMinusTariffEnergies = function (energies) {
    if (energies) {
      if (energies['A-']) {
        this.setUint32(energies['A-']);
      }
      if (energies['A-R+']) {
        this.setUint32(energies['A-R+']);
      }
      if (energies['A-R-']) {
        this.setUint32(energies['A-R-']);
      }
    }
  };
  CommandBinaryBuffer.prototype.getTariffsEnergies = function () {
    var energyFlags = this.getUint8();
    var tariffFlags = this.getUint8();
    var tariffs = new Array(TARIFF_NUMBER).fill(null);
    for (var index = 0; index < TARIFF_NUMBER; index++) {
      if (tariffFlags & getAPlusTariffBit(index)) {
        tariffs[index] = this.getAPlusTariffEnergies(energyFlags);
      }
    }
    for (var _index = 0; _index < TARIFF_NUMBER; _index++) {
      if (tariffFlags & getAMinusTariffBit(_index)) {
        tariffs[_index] = _objectSpread2(_objectSpread2({}, tariffs[_index]), this.getAMinusTariffEnergies(energyFlags));
      }
    }
    return tariffs;
  };
  CommandBinaryBuffer.prototype.setTariffsEnergies = function (tariffs) {
    var _this = this;
    var energiesFlags = 0;
    var tariffsFlags = 0;
    tariffs.forEach(function (tariff, index) {
      if (tariff) {
        energiesFlags |= getEnergiesFlags(tariff);
        tariffsFlags |= getTariffEnergiesFlag(index, tariff);
      }
    });
    this.setUint8(energiesFlags);
    this.setUint8(tariffsFlags);
    tariffs.forEach(function (tariff) {
      return _this.setAPlusTariffEnergies(tariff);
    });
    tariffs.forEach(function (tariff) {
      return _this.setAMinusTariffEnergies(tariff);
    });
  };
  CommandBinaryBuffer.prototype.getPowerMax = function () {
    return {
      hours: this.getUint8(),
      minutes: this.getUint8(),
      power: this.getUint32()
    };
  };
  CommandBinaryBuffer.prototype.setPowerMax = function (value) {
    if (value) {
      var hours = value.hours,
        minutes = value.minutes,
        power = value.power;
      this.setUint8(hours);
      this.setUint8(minutes);
      this.setUint32(power);
    }
  };
  CommandBinaryBuffer.prototype.getAPlusTariffPowerMax = function (energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A+']) {
      energies['A+'] = this.getPowerMax();
    }
    if (energyFlags & energiesMask['A+R+']) {
      energies['A+R+'] = this.getPowerMax();
    }
    if (energyFlags & energiesMask['A+R-']) {
      energies['A+R-'] = this.getPowerMax();
    }
    return energies;
  };
  CommandBinaryBuffer.prototype.setAPlusTariffPowerMax = function (energies) {
    if (energies) {
      this.setPowerMax(energies['A+']);
      this.setPowerMax(energies['A+R+']);
      this.setPowerMax(energies['A+R+']);
    }
  };
  CommandBinaryBuffer.prototype.getAMinusTariffPowerMax = function (energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A-']) {
      energies['A-'] = this.getPowerMax();
    }
    if (energyFlags & energiesMask['A-R+']) {
      energies['A-R+'] = this.getPowerMax();
    }
    if (energyFlags & energiesMask['A-R-']) {
      energies['A-R-'] = this.getPowerMax();
    }
    return energies;
  };
  CommandBinaryBuffer.prototype.setAMinusTariffPowerMax = function (energies) {
    if (energies) {
      this.setPowerMax(energies['A-']);
      this.setPowerMax(energies['A-R+']);
      this.setPowerMax(energies['A-R-']);
    }
  };
  CommandBinaryBuffer.prototype.getTariffsPowerMax = function () {
    var energyFlags = this.getUint8();
    var tariffFlags = this.getUint8();
    var tariffs = new Array(TARIFF_NUMBER).fill(null);
    for (var index = 0; index < TARIFF_NUMBER; index++) {
      if (tariffFlags & getAPlusTariffBit(index)) {
        tariffs[index] = this.getAPlusTariffPowerMax(energyFlags);
      }
    }
    for (var _index2 = 0; _index2 < TARIFF_NUMBER; _index2++) {
      if (tariffFlags & getAMinusTariffBit(_index2)) {
        tariffs[_index2] = _objectSpread2(_objectSpread2({}, tariffs[_index2]), this.getAMinusTariffPowerMax(energyFlags));
      }
    }
    return tariffs;
  };
  CommandBinaryBuffer.prototype.setTariffsPowerMax = function (tariffs) {
    var _this2 = this;
    var energiesFlags = 0;
    var tariffsFlags = 0;
    tariffs.forEach(function (tariff, index) {
      if (tariff) {
        energiesFlags |= getEnergiesFlags(tariff);
        tariffsFlags |= getTariffEnergiesFlag(index, tariff);
      }
    });
    this.setUint8(energiesFlags);
    this.setUint8(tariffsFlags);
    tariffs.forEach(function (tariff) {
      return _this2.setAPlusTariffPowerMax(tariff);
    });
    tariffs.forEach(function (tariff) {
      return _this2.setAMinusTariffPowerMax(tariff);
    });
  };

  var id$x = getHalfhoursEnergies$1;
  var name$x = commandNames[getHalfhoursEnergies$1];
  var headerSize$x = 2;
  var maxSize$x = 5;
  var accessLevel$x = UNENCRYPTED;
  var isLoraOnly$x = true;
  var examples$x = {
    'request for halfhours energies': {
      id: id$x,
      name: name$x,
      headerSize: headerSize$x,
      maxSize: maxSize$x,
      parameters: {
        date: {
          year: 21,
          month: 2,
          date: 3
        },
        energies: {
          'A+': true,
          'A+R+': true,
          'A+R-': false,
          'A-': false,
          'A-R+': false,
          'A-R-': false
        },
        firstHalfhour: 5,
        halfhoursNumber: 3
      },
      bytes: [0x6f, 0x05, 0x2a, 0x43, 0x03, 0x05, 0x03]
    }
  };
  var fromBytes$x = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer(bytes);
    return {
      date: buffer.getDate(),
      energies: buffer.getEnergiesFlags(),
      firstHalfhour: buffer.getUint8(),
      halfhoursNumber: buffer.getUint8()
    };
  };
  var toBytes$x = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer(maxSize$x);
    buffer.setDate(parameters.date);
    buffer.setEnergiesFlags(parameters.energies);
    buffer.setUint8(parameters.firstHalfhour);
    buffer.setUint8(parameters.halfhoursNumber);
    return toBytes$(id$x, buffer.data);
  };

  var getHalfhoursEnergies = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$x,
    examples: examples$x,
    fromBytes: fromBytes$x,
    headerSize: headerSize$x,
    id: id$x,
    isLoraOnly: isLoraOnly$x,
    maxSize: maxSize$x,
    name: name$x,
    toBytes: toBytes$x
  });

  var id$w = getMagneticFieldThreshold$1;
  var name$w = commandNames[getMagneticFieldThreshold$1];
  var headerSize$w = 2;
  var maxSize$w = 0;
  var accessLevel$w = READ_ONLY;
  var isLoraOnly$w = false;
  var examples$w = {
    'simple request': {
      id: id$w,
      name: name$w,
      headerSize: headerSize$w,
      maxSize: maxSize$w,
      accessLevel: accessLevel$w,
      parameters: {},
      bytes: [0x6d, 0x00]
    }
  };
  var fromBytes$w = function fromBytes(bytes) {
    if (bytes.length !== maxSize$w) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$w = function toBytes() {
    return toBytes$(id$w);
  };

  var getMagneticFieldThreshold = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$w,
    examples: examples$w,
    fromBytes: fromBytes$w,
    headerSize: headerSize$w,
    id: id$w,
    isLoraOnly: isLoraOnly$w,
    maxSize: maxSize$w,
    name: name$w,
    toBytes: toBytes$w
  });

  var id$v = getMeterInfo$1;
  var name$v = commandNames[getMeterInfo$1];
  var headerSize$v = 2;
  var maxSize$v = 0;
  var accessLevel$v = READ_ONLY;
  var isLoraOnly$v = false;
  var examples$v = {
    'simple request': {
      id: id$v,
      name: name$v,
      headerSize: headerSize$v,
      maxSize: maxSize$v,
      accessLevel: accessLevel$v,
      parameters: {},
      bytes: [0x7a, 0x00]
    }
  };
  var fromBytes$v = function fromBytes(bytes) {
    if (bytes.length !== maxSize$v) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$v = function toBytes() {
    return toBytes$(id$v);
  };

  var getMeterInfo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$v,
    examples: examples$v,
    fromBytes: fromBytes$v,
    headerSize: headerSize$v,
    id: id$v,
    isLoraOnly: isLoraOnly$v,
    maxSize: maxSize$v,
    name: name$v,
    toBytes: toBytes$v
  });

  var id$u = getMonthDemand$1;
  var name$u = commandNames[getMonthDemand$1];
  var headerSize$u = 2;
  var maxSize$u = 2;
  var accessLevel$u = READ_ONLY;
  var isLoraOnly$u = false;
  var examples$u = {
    'request energy for 2024.03': {
      id: id$u,
      name: name$u,
      headerSize: headerSize$u,
      maxSize: maxSize$u,
      accessLevel: accessLevel$u,
      parameters: {
        year: 24,
        month: 3
      },
      bytes: [0x17, 0x02, 0x18, 0x03]
    }
  };
  var fromBytes$u = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      year: buffer.getUint8(),
      month: buffer.getUint8()
    };
  };
  var toBytes$u = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$u);
    buffer.setUint8(parameters.year);
    buffer.setUint8(parameters.month);
    return toBytes$(id$u, buffer.data);
  };

  var getMonthDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$u,
    examples: examples$u,
    fromBytes: fromBytes$u,
    headerSize: headerSize$u,
    id: id$u,
    isLoraOnly: isLoraOnly$u,
    maxSize: maxSize$u,
    name: name$u,
    toBytes: toBytes$u
  });

  var id$t = getMonthDemandExport$1;
  var name$t = commandNames[getMonthDemandExport$1];
  var headerSize$t = 2;
  var maxSize$t = 2;
  var accessLevel$t = READ_ONLY;
  var isLoraOnly$t = false;
  var examples$t = {
    'request energy for 2024.03': {
      id: id$t,
      name: name$t,
      headerSize: headerSize$t,
      maxSize: maxSize$t,
      accessLevel: accessLevel$t,
      parameters: {
        year: 24,
        month: 3
      },
      bytes: [0x52, 0x02, 0x18, 0x03]
    }
  };
  var fromBytes$t = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      year: buffer.getUint8(),
      month: buffer.getUint8()
    };
  };
  var toBytes$t = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$t);
    buffer.setUint8(parameters.year);
    buffer.setUint8(parameters.month);
    return toBytes$(id$t, buffer.data);
  };

  var getMonthDemandExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$t,
    examples: examples$t,
    fromBytes: fromBytes$t,
    headerSize: headerSize$t,
    id: id$t,
    isLoraOnly: isLoraOnly$t,
    maxSize: maxSize$t,
    name: name$t,
    toBytes: toBytes$t
  });

  var id$s = getMonthMaxDemand$1;
  var name$s = commandNames[getMonthMaxDemand$1];
  var headerSize$s = 2;
  var maxSize$s = 2;
  var accessLevel$s = READ_ONLY;
  var isLoraOnly$s = false;
  var examples$s = {
    'request max power for 2024.03': {
      id: id$s,
      name: name$s,
      headerSize: headerSize$s,
      maxSize: maxSize$s,
      accessLevel: accessLevel$s,
      parameters: {
        year: 24,
        month: 3
      },
      bytes: [0x32, 0x02, 0x18, 0x03]
    }
  };
  var fromBytes$s = function fromBytes(bytes) {
    var _bytes = _slicedToArray(bytes, 2),
      year = _bytes[0],
      month = _bytes[1];
    return {
      year: year,
      month: month
    };
  };
  var toBytes$s = function toBytes(_ref) {
    var year = _ref.year,
      month = _ref.month;
    return toBytes$(id$s, [year, month]);
  };

  var getMonthMaxDemand = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$s,
    examples: examples$s,
    fromBytes: fromBytes$s,
    headerSize: headerSize$s,
    id: id$s,
    isLoraOnly: isLoraOnly$s,
    maxSize: maxSize$s,
    name: name$s,
    toBytes: toBytes$s
  });

  var id$r = getMonthMaxDemandExport$1;
  var name$r = commandNames[getMonthMaxDemandExport$1];
  var headerSize$r = 2;
  var maxSize$r = 2;
  var accessLevel$r = READ_ONLY;
  var isLoraOnly$r = false;
  var examples$r = {
    'request max power for 2024.03': {
      id: id$r,
      name: name$r,
      headerSize: headerSize$r,
      maxSize: maxSize$r,
      accessLevel: accessLevel$r,
      parameters: {
        year: 24,
        month: 3
      },
      bytes: [0x59, 0x02, 0x18, 0x03]
    }
  };
  var fromBytes$r = function fromBytes(bytes) {
    var _bytes = _slicedToArray(bytes, 2),
      year = _bytes[0],
      month = _bytes[1];
    return {
      year: year,
      month: month
    };
  };
  var toBytes$r = function toBytes(_ref) {
    var year = _ref.year,
      month = _ref.month;
    return toBytes$(id$r, [year, month]);
  };

  var getMonthMaxDemandExport = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$r,
    examples: examples$r,
    fromBytes: fromBytes$r,
    headerSize: headerSize$r,
    id: id$r,
    isLoraOnly: isLoraOnly$r,
    maxSize: maxSize$r,
    name: name$r,
    toBytes: toBytes$r
  });

  var id$q = getOperatorParametersExtended3$1;
  var name$q = commandNames[getOperatorParametersExtended3$1];
  var headerSize$q = 2;
  var maxSize$q = 0;
  var accessLevel$q = READ_ONLY;
  var isLoraOnly$q = false;
  var examples$q = {
    'simple request': {
      id: id$q,
      name: name$q,
      headerSize: headerSize$q,
      maxSize: maxSize$q,
      accessLevel: accessLevel$q,
      parameters: {},
      bytes: [0x71, 0x00]
    }
  };
  var fromBytes$q = function fromBytes(bytes) {
    if (bytes.length !== maxSize$q) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$q = function toBytes() {
    return toBytes$(id$q);
  };

  var getOperatorParametersExtended3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$q,
    examples: examples$q,
    fromBytes: fromBytes$q,
    headerSize: headerSize$q,
    id: id$q,
    isLoraOnly: isLoraOnly$q,
    maxSize: maxSize$q,
    name: name$q,
    toBytes: toBytes$q
  });

  var id$p = getOperatorParameters$1;
  var name$p = commandNames[getOperatorParameters$1];
  var headerSize$p = 2;
  var maxSize$p = 0;
  var accessLevel$p = READ_ONLY;
  var isLoraOnly$p = false;
  var examples$p = {
    'simple request': {
      id: id$p,
      name: name$p,
      headerSize: headerSize$p,
      maxSize: maxSize$p,
      accessLevel: accessLevel$p,
      parameters: {},
      bytes: [0x1e, 0x00]
    }
  };
  var fromBytes$p = function fromBytes(bytes) {
    if (bytes.length !== maxSize$p) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$p = function toBytes() {
    return toBytes$(id$p);
  };

  var getOperatorParameters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$p,
    examples: examples$p,
    fromBytes: fromBytes$p,
    headerSize: headerSize$p,
    id: id$p,
    isLoraOnly: isLoraOnly$p,
    maxSize: maxSize$p,
    name: name$p,
    toBytes: toBytes$p
  });

  var id$o = getRatePlanInfo$1;
  var name$o = commandNames[getRatePlanInfo$1];
  var headerSize$o = 2;
  var maxSize$o = 1;
  var accessLevel$o = READ_ONLY;
  var isLoraOnly$o = false;
  var examples$o = {
    'request for table A-': {
      id: id$o,
      name: name$o,
      headerSize: headerSize$o,
      maxSize: maxSize$o,
      accessLevel: accessLevel$o,
      parameters: {
        tariffTable: 1
      },
      bytes: [0x2c, 0x01, 0x01]
    }
  };
  var fromBytes$o = function fromBytes(bytes) {
    return {
      tariffTable: bytes[0]
    };
  };
  var toBytes$o = function toBytes(parameters) {
    return toBytes$(id$o, [parameters.tariffTable]);
  };

  var getRatePlanInfo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$o,
    examples: examples$o,
    fromBytes: fromBytes$o,
    headerSize: headerSize$o,
    id: id$o,
    isLoraOnly: isLoraOnly$o,
    maxSize: maxSize$o,
    name: name$o,
    toBytes: toBytes$o
  });

  var id$n = getSaldo$1;
  var name$n = commandNames[getSaldo$1];
  var headerSize$n = 2;
  var maxSize$n = 0;
  var accessLevel$n = READ_ONLY;
  var isLoraOnly$n = false;
  var examples$n = {
    'simple request': {
      id: id$n,
      name: name$n,
      headerSize: headerSize$n,
      maxSize: maxSize$n,
      accessLevel: accessLevel$n,
      parameters: {},
      bytes: [0x29, 0x00]
    }
  };
  var fromBytes$n = function fromBytes(bytes) {
    if (bytes.length !== maxSize$n) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$n = function toBytes() {
    return toBytes$(id$n);
  };

  var getSaldo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$n,
    examples: examples$n,
    fromBytes: fromBytes$n,
    headerSize: headerSize$n,
    id: id$n,
    isLoraOnly: isLoraOnly$n,
    maxSize: maxSize$n,
    name: name$n,
    toBytes: toBytes$n
  });

  var id$m = getSaldoParameters$1;
  var name$m = commandNames[getSaldoParameters$1];
  var headerSize$m = 2;
  var maxSize$m = 0;
  var accessLevel$m = READ_ONLY;
  var isLoraOnly$m = false;
  var examples$m = {
    'simple request': {
      id: id$m,
      name: name$m,
      headerSize: headerSize$m,
      maxSize: maxSize$m,
      accessLevel: accessLevel$m,
      parameters: {},
      bytes: [0x2e, 0x00]
    }
  };
  var fromBytes$m = function fromBytes(bytes) {
    if (bytes.length !== maxSize$m) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$m = function toBytes() {
    return toBytes$(id$m);
  };

  var getSaldoParameters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$m,
    examples: examples$m,
    fromBytes: fromBytes$m,
    headerSize: headerSize$m,
    id: id$m,
    isLoraOnly: isLoraOnly$m,
    maxSize: maxSize$m,
    name: name$m,
    toBytes: toBytes$m
  });

  var id$l = getSeasonProfile$1;
  var name$l = commandNames[getSeasonProfile$1];
  var headerSize$l = 2;
  var maxSize$l = 3;
  var accessLevel$l = READ_ONLY;
  var isLoraOnly$l = false;
  var examples$l = {
    'request for passive tariff table A+': {
      id: id$l,
      name: name$l,
      headerSize: headerSize$l,
      maxSize: maxSize$l,
      accessLevel: accessLevel$l,
      parameters: {
        tariffTable: 0,
        index: 5,
        isActive: false
      },
      bytes: [0x3c, 0x03, 0x00, 0x05, 0x01]
    }
  };
  var fromBytes$l = function fromBytes(_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
      tariffTable = _ref2[0],
      index = _ref2[1],
      isActive = _ref2[2];
    return {
      tariffTable: tariffTable,
      index: index,
      isActive: isActive === 0
    };
  };
  var toBytes$l = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$l);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    buffer.setUint8(parameters.isActive ? 0 : 1);
    return toBytes$(id$l, buffer.data);
  };

  var getSeasonProfile = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$l,
    examples: examples$l,
    fromBytes: fromBytes$l,
    headerSize: headerSize$l,
    id: id$l,
    isLoraOnly: isLoraOnly$l,
    maxSize: maxSize$l,
    name: name$l,
    toBytes: toBytes$l
  });

  var id$k = getSpecialDay$1;
  var name$k = commandNames[getSpecialDay$1];
  var headerSize$k = 2;
  var maxSize$k = 3;
  var accessLevel$k = READ_ONLY;
  var isLoraOnly$k = false;
  var examples$k = {
    'request for passive tariff table A+': {
      id: id$k,
      name: name$k,
      headerSize: headerSize$k,
      maxSize: maxSize$k,
      accessLevel: accessLevel$k,
      parameters: {
        tariffTable: 0,
        index: 5,
        isActive: false
      },
      bytes: [0x3d, 0x03, 0x00, 0x05, 0x01]
    }
  };
  var fromBytes$k = function fromBytes(_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
      tariffTable = _ref2[0],
      index = _ref2[1],
      isActive = _ref2[2];
    return {
      tariffTable: tariffTable,
      index: index,
      isActive: isActive === 0
    };
  };
  var toBytes$k = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$k);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    buffer.setUint8(parameters.isActive ? 0 : 1);
    return toBytes$(id$k, buffer.data);
  };

  var getSpecialDay = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$k,
    examples: examples$k,
    fromBytes: fromBytes$k,
    headerSize: headerSize$k,
    id: id$k,
    isLoraOnly: isLoraOnly$k,
    maxSize: maxSize$k,
    name: name$k,
    toBytes: toBytes$k
  });

  var id$j = getVersion$1;
  var name$j = commandNames[getVersion$1];
  var headerSize$j = 2;
  var maxSize$j = 0;
  var accessLevel$j = READ_ONLY;
  var isLoraOnly$j = false;
  var examples$j = {
    'simple request': {
      id: id$j,
      name: name$j,
      headerSize: headerSize$j,
      maxSize: maxSize$j,
      accessLevel: accessLevel$j,
      parameters: {},
      bytes: [0x28, 0x00]
    }
  };
  var fromBytes$j = function fromBytes(bytes) {
    if (bytes.length !== maxSize$j) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$j = function toBytes() {
    return toBytes$(id$j);
  };

  var getVersion = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$j,
    examples: examples$j,
    fromBytes: fromBytes$j,
    headerSize: headerSize$j,
    id: id$j,
    isLoraOnly: isLoraOnly$j,
    maxSize: maxSize$j,
    name: name$j,
    toBytes: toBytes$j
  });

  var id$i = prepareRatePlan$1;
  var name$i = commandNames[prepareRatePlan$1];
  var headerSize$i = 2;
  var maxSize$i = 5;
  var accessLevel$i = READ_WRITE;
  var isLoraOnly$i = false;
  var examples$i = {
    'prepare rate plan request': {
      id: id$i,
      name: name$i,
      headerSize: headerSize$i,
      maxSize: maxSize$i,
      accessLevel: accessLevel$i,
      parameters: {
        tariffTable: 0,
        id: 987654321
      },
      bytes: [0x14, 0x05, 0x00, 0x3a, 0xde, 0x68, 0xb1]
    }
  };
  var fromBytes$i = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      tariffTable: buffer.getUint8(),
      id: buffer.getUint32()
    };
  };
  var toBytes$i = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$i);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint32(parameters.id);
    return toBytes$(id$i, buffer.data);
  };

  var prepareRatePlan = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$i,
    examples: examples$i,
    fromBytes: fromBytes$i,
    headerSize: headerSize$i,
    id: id$i,
    isLoraOnly: isLoraOnly$i,
    maxSize: maxSize$i,
    name: name$i,
    toBytes: toBytes$i
  });

  var id$h = resetPowerMaxDay$1;
  var name$h = commandNames[resetPowerMaxDay$1];
  var headerSize$h = 2;
  var maxSize$h = 0;
  var accessLevel$h = READ_WRITE;
  var isLoraOnly$h = false;
  var examples$h = {
    'simple request': {
      id: id$h,
      name: name$h,
      headerSize: headerSize$h,
      maxSize: maxSize$h,
      accessLevel: accessLevel$h,
      parameters: {},
      bytes: [0x35, 0x00]
    }
  };
  var fromBytes$h = function fromBytes(bytes) {
    if (bytes.length !== maxSize$h) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$h = function toBytes() {
    return toBytes$(id$h);
  };

  var resetPowerMaxDay = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$h,
    examples: examples$h,
    fromBytes: fromBytes$h,
    headerSize: headerSize$h,
    id: id$h,
    isLoraOnly: isLoraOnly$h,
    maxSize: maxSize$h,
    name: name$h,
    toBytes: toBytes$h
  });

  var id$g = resetPowerMaxMonth$1;
  var name$g = commandNames[resetPowerMaxMonth$1];
  var headerSize$g = 2;
  var maxSize$g = 0;
  var accessLevel$g = READ_WRITE;
  var isLoraOnly$g = false;
  var examples$g = {
    'simple request': {
      id: id$g,
      name: name$g,
      headerSize: headerSize$g,
      maxSize: maxSize$g,
      accessLevel: accessLevel$g,
      parameters: {},
      bytes: [0x36, 0x00]
    }
  };
  var fromBytes$g = function fromBytes(bytes) {
    if (bytes.length !== maxSize$g) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$g = function toBytes() {
    return toBytes$(id$g);
  };

  var resetPowerMaxMonth = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$g,
    examples: examples$g,
    fromBytes: fromBytes$g,
    headerSize: headerSize$g,
    id: id$g,
    isLoraOnly: isLoraOnly$g,
    maxSize: maxSize$g,
    name: name$g,
    toBytes: toBytes$g
  });

  var id$f = runTariffPlan$1;
  var name$f = commandNames[runTariffPlan$1];
  var headerSize$f = 2;
  var maxSize$f = 1;
  var accessLevel$f = READ_WRITE;
  var isLoraOnly$f = false;
  var examples$f = {
    'simple request': {
      id: id$f,
      name: name$f,
      headerSize: headerSize$f,
      maxSize: maxSize$f,
      accessLevel: accessLevel$f,
      parameters: {
        tariffTable: 5
      },
      bytes: [0x46, 0x01, 0x05]
    }
  };
  var fromBytes$f = function fromBytes(bytes) {
    return {
      tariffTable: bytes[0]
    };
  };
  var toBytes$f = function toBytes(parameters) {
    return toBytes$(id$f, [parameters.tariffTable]);
  };

  var runTariffPlan = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$f,
    examples: examples$f,
    fromBytes: fromBytes$f,
    headerSize: headerSize$f,
    id: id$f,
    isLoraOnly: isLoraOnly$f,
    maxSize: maxSize$f,
    name: name$f,
    toBytes: toBytes$f
  });

  var KEY_SIZE = 16;
  var id$e = setAccessKey$1;
  var name$e = commandNames[setAccessKey$1];
  var headerSize$e = 2;
  var maxSize$e = 1 + KEY_SIZE;
  var accessLevel$e = READ_WRITE;
  var isLoraOnly$e = false;
  var examples$e = {
    'set key for READ_ONLY access level': {
      id: id$e,
      name: name$e,
      headerSize: headerSize$e,
      maxSize: maxSize$e,
      accessLevel: accessLevel$e,
      parameters: {
        accessLevel: READ_ONLY,
        key: [0, 1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1, 0]
      },
      bytes: [0x09, 0x11, 0x03, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00]
    }
  };
  var fromBytes$e = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      accessLevel: buffer.getUint8(),
      key: buffer.getBytes(KEY_SIZE)
    };
  };
  var toBytes$e = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$e);
    buffer.setUint8(parameters.accessLevel);
    buffer.setBytes(parameters.key);
    return toBytes$(id$e, buffer.data);
  };

  var setAccessKey = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$e,
    examples: examples$e,
    fromBytes: fromBytes$e,
    headerSize: headerSize$e,
    id: id$e,
    isLoraOnly: isLoraOnly$e,
    maxSize: maxSize$e,
    name: name$e,
    toBytes: toBytes$e
  });

  var id$d = setCorrectDateTime$1;
  var name$d = commandNames[setCorrectDateTime$1];
  var headerSize$d = 2;
  var maxSize$d = 2;
  var accessLevel$d = READ_ONLY;
  var isLoraOnly$d = false;
  var examples$d = {
    'shift device time 5 seconds forward': {
      id: id$d,
      name: name$d,
      headerSize: headerSize$d,
      maxSize: maxSize$d,
      accessLevel: accessLevel$d,
      parameters: {
        seconds: 5
      },
      bytes: [0x5c, 0x02, 0x00, 0x05]
    },
    'shift device time 5 seconds backward': {
      id: id$d,
      name: name$d,
      headerSize: headerSize$d,
      maxSize: maxSize$d,
      parameters: {
        seconds: -5
      },
      bytes: [0x5c, 0x02, 0xff, 0xfb]
    }
  };
  var fromBytes$d = function fromBytes(bytes) {
    if (bytes.length !== maxSize$d) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      seconds: buffer.getInt16()
    };
  };
  var toBytes$d = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$d);
    buffer.setInt16(parameters.seconds);
    return toBytes$(id$d, buffer.data);
  };

  var setCorrectDateTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$d,
    examples: examples$d,
    fromBytes: fromBytes$d,
    headerSize: headerSize$d,
    id: id$d,
    isLoraOnly: isLoraOnly$d,
    maxSize: maxSize$d,
    name: name$d,
    toBytes: toBytes$d
  });

  var id$c = setCorrectTime$1;
  var name$c = commandNames[setCorrectTime$1];
  var headerSize$c = 2;
  var maxSize$c = 9;
  var accessLevel$c = READ_WRITE;
  var isLoraOnly$c = false;
  var examples$c = {
    'default parameters': {
      id: id$c,
      name: name$c,
      headerSize: headerSize$c,
      maxSize: maxSize$c,
      accessLevel: accessLevel$c,
      parameters: {
        monthTransitionSummer: 3,
        dateTransitionSummer: 0,
        hoursTransitionSummer: 3,
        hoursCorrectSummer: 1,
        monthTransitionWinter: 10,
        dateTransitionWinter: 0,
        hoursTransitionWinter: 4,
        hoursCorrectWinter: 1,
        isCorrectionNeeded: true
      },
      bytes: [0x1c, 0x09, 0x03, 0x00, 0x03, 0x01, 0x0a, 0x00, 0x04, 0x01, 0x01]
    }
  };
  var fromBytes$c = function fromBytes(bytes) {
    if (bytes.length !== maxSize$c) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    var buffer = new CommandBinaryBuffer$1(bytes);
    return buffer.getTimeCorrectionParameters();
  };
  var toBytes$c = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$c);
    buffer.setTimeCorrectionParameters(parameters);
    return toBytes$(id$c, buffer.data);
  };

  var setCorrectTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$c,
    examples: examples$c,
    fromBytes: fromBytes$c,
    headerSize: headerSize$c,
    id: id$c,
    isLoraOnly: isLoraOnly$c,
    maxSize: maxSize$c,
    name: name$c,
    toBytes: toBytes$c
  });

  var id$b = setDateTime$1;
  var name$b = commandNames[setDateTime$1];
  var headerSize$b = 2;
  var maxSize$b = 8;
  var accessLevel$b = READ_ONLY;
  var isLoraOnly$b = false;
  var examples$b = {
    'time: 2024.02.19 18:31:55': {
      id: id$b,
      name: name$b,
      headerSize: headerSize$b,
      maxSize: maxSize$b,
      accessLevel: accessLevel$b,
      parameters: {
        isSummerTime: false,
        seconds: 55,
        minutes: 31,
        hours: 18,
        day: 2,
        date: 19,
        month: 2,
        year: 24
      },
      bytes: [0x08, 0x08, 0x00, 0x37, 0x1f, 0x12, 0x02, 0x13, 0x02, 0x18]
    }
  };
  var fromBytes$b = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return buffer.getDateTime();
  };
  var toBytes$b = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$b);
    buffer.setDateTime(parameters);
    return toBytes$(id$b, buffer.data);
  };

  var setDateTime = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$b,
    examples: examples$b,
    fromBytes: fromBytes$b,
    headerSize: headerSize$b,
    id: id$b,
    isLoraOnly: isLoraOnly$b,
    maxSize: maxSize$b,
    name: name$b,
    toBytes: toBytes$b
  });

  var MAX_PERIODS_NUMBER = 8;
  var PERIODS_FINAL_BYTE = 0xff;
  var id$a = setDayProfile$1;
  var name$a = commandNames[setDayProfile$1];
  var headerSize$a = 2;
  var maxSize$a = 2 + MAX_PERIODS_NUMBER;
  var accessLevel$a = READ_WRITE;
  var isLoraOnly$a = false;
  var examples$a = {
    'set day profile with 1 period': {
      id: id$a,
      name: name$a,
      headerSize: headerSize$a,
      maxSize: maxSize$a,
      accessLevel: accessLevel$a,
      parameters: {
        tariffTable: 0,
        index: 3,
        periods: [{
          tariff: 0,
          isFirstHalfHour: true,
          hour: 2
        }]
      },
      bytes: [0x10, 0x04, 0x00, 0x03, 0x10, 0xff]
    },
    'set day profile with 4 periods': {
      id: id$a,
      name: name$a,
      headerSize: headerSize$a,
      maxSize: maxSize$a,
      accessLevel: accessLevel$a,
      parameters: {
        tariffTable: 0,
        index: 5,
        periods: [{
          tariff: 0,
          isFirstHalfHour: true,
          hour: 2
        }, {
          tariff: 1,
          isFirstHalfHour: false,
          hour: 3
        }, {
          tariff: 2,
          isFirstHalfHour: true,
          hour: 4
        }, {
          tariff: 3,
          isFirstHalfHour: false,
          hour: 5
        }]
      },
      bytes: [0x10, 0x07, 0x00, 0x05, 0x10, 0x1d, 0x22, 0x2f, 0xff]
    },
    'set day profile with max periods': {
      id: id$a,
      name: name$a,
      headerSize: headerSize$a,
      maxSize: maxSize$a,
      accessLevel: accessLevel$a,
      parameters: {
        tariffTable: 0,
        index: 3,
        periods: [{
          tariff: 0,
          isFirstHalfHour: true,
          hour: 2
        }, {
          tariff: 1,
          isFirstHalfHour: false,
          hour: 3
        }, {
          tariff: 2,
          isFirstHalfHour: true,
          hour: 4
        }, {
          tariff: 3,
          isFirstHalfHour: false,
          hour: 5
        }, {
          tariff: 0,
          isFirstHalfHour: true,
          hour: 6
        }, {
          tariff: 1,
          isFirstHalfHour: false,
          hour: 7
        }, {
          tariff: 2,
          isFirstHalfHour: false,
          hour: 8
        }, {
          tariff: 3,
          isFirstHalfHour: true,
          hour: 9
        }]
      },
      bytes: [0x10, 0x0a, 0x00, 0x03, 0x10, 0x1d, 0x22, 0x2f, 0x30, 0x3d, 0x46, 0x4b]
    }
  };
  var fromBytes$a = function fromBytes(bytes) {
    var finalByteIndex = bytes.indexOf(PERIODS_FINAL_BYTE);
    var cleanBytes = finalByteIndex === -1 ? bytes : bytes.slice(0, finalByteIndex);
    var buffer = new CommandBinaryBuffer$1(cleanBytes);
    return {
      tariffTable: buffer.getUint8(),
      index: buffer.getUint8(),
      periods: _toConsumableArray(cleanBytes.slice(buffer.offset)).map(CommandBinaryBuffer$1.getDayProfileFromByte)
    };
  };
  var toBytes$a = function toBytes(parameters) {
    var hasPeriodsFinalByte = parameters.periods.length < MAX_PERIODS_NUMBER;
    var size = 2 + parameters.periods.length + +hasPeriodsFinalByte;
    var buffer = new CommandBinaryBuffer$1(size);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    parameters.periods.forEach(function (period) {
      buffer.setDayProfile(period);
    });
    if (hasPeriodsFinalByte) {
      buffer.setUint8(PERIODS_FINAL_BYTE);
    }
    return toBytes$(id$a, buffer.data);
  };

  var setDayProfile = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$a,
    examples: examples$a,
    fromBytes: fromBytes$a,
    headerSize: headerSize$a,
    id: id$a,
    isLoraOnly: isLoraOnly$a,
    maxSize: maxSize$a,
    name: name$a,
    toBytes: toBytes$a
  });

  var id$9 = setDisplayParam$1;
  var name$9 = commandNames[setDisplayParam$1];
  var headerSize$9 = 2;
  var maxSize$9 = 33;
  var accessLevel$9 = READ_WRITE;
  var isLoraOnly$9 = false;
  var examples$9 = {
    'set params with order': {
      id: id$9,
      name: name$9,
      headerSize: headerSize$9,
      maxSize: maxSize$9,
      accessLevel: accessLevel$9,
      parameters: {
        displayMode: 0,
        order: [4, 5, 6, 7]
      },
      bytes: [0x5d, 0x05, 0x00, 0x04, 0x05, 0x06, 0x07]
    },
    'set params without order': {
      id: id$9,
      name: name$9,
      headerSize: headerSize$9,
      maxSize: maxSize$9,
      accessLevel: accessLevel$9,
      parameters: {
        displayMode: 1,
        order: []
      },
      bytes: [0x5d, 0x01, 0x01]
    }
  };
  var fromBytes$9 = function fromBytes(bytes) {
    if (bytes.length < 1 || bytes.length > maxSize$9) {
      throw new Error('Invalid SetDisplayParam data size.');
    }
    var _bytes = _toArray(bytes),
      displayMode = _bytes[0],
      order = _bytes.slice(1);
    return {
      displayMode: displayMode,
      order: order
    };
  };
  var toBytes$9 = function toBytes(parameters) {
    return toBytes$(id$9, [parameters.displayMode].concat(_toConsumableArray(parameters.order)));
  };

  var setDisplayParam = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$9,
    examples: examples$9,
    fromBytes: fromBytes$9,
    headerSize: headerSize$9,
    id: id$9,
    isLoraOnly: isLoraOnly$9,
    maxSize: maxSize$9,
    name: name$9,
    toBytes: toBytes$9
  });

  var id$8 = setOperatorParametersExtended3$1;
  var name$8 = commandNames[setOperatorParametersExtended3$1];
  var headerSize$8 = 2;
  var maxSize$8 = 17;
  var accessLevel$8 = READ_WRITE;
  var isLoraOnly$8 = false;
  var examples$8 = {
    'simple request': {
      id: id$8,
      name: name$8,
      headerSize: headerSize$8,
      maxSize: maxSize$8,
      accessLevel: accessLevel$8,
      parameters: {
        pmaxMinusThreshold0: 100,
        pmaxMinusThreshold1: 200,
        pmaxMinusThreshold2: 300,
        pmaxMinusThreshold3: 400,
        relaySet: {
          RELAY_OFF_LIMIT_P_MINUS_T1: true,
          RELAY_OFF_LIMIT_P_MINUS_T2: false,
          RELAY_OFF_LIMIT_P_MINUS_T3: true,
          RELAY_OFF_LIMIT_P_MINUS_T4: false
        }
      },
      bytes: [0x72, 0x11, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x00, 0x01, 0x90, 0x14]
    }
  };
  var fromBytes$8 = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return buffer.getOperatorParametersExtended3();
  };
  var toBytes$8 = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$8);
    buffer.setOperatorParametersExtended3(parameters);
    return toBytes$(id$8, buffer.data);
  };

  var setOperatorParametersExtended3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$8,
    examples: examples$8,
    fromBytes: fromBytes$8,
    headerSize: headerSize$8,
    id: id$8,
    isLoraOnly: isLoraOnly$8,
    maxSize: maxSize$8,
    name: name$8,
    toBytes: toBytes$8
  });

  var id$7 = setOperatorParameters$1;
  var name$7 = commandNames[setOperatorParameters$1];
  var headerSize$7 = 2;
  var maxSize$7 = OPERATOR_PARAMETERS_SIZE;
  var accessLevel$7 = READ_WRITE;
  var isLoraOnly$7 = false;
  var examples$7 = {
    'set default operator parameters request': {
      id: id$7,
      name: name$7,
      headerSize: headerSize$7,
      maxSize: maxSize$7,
      accessLevel: accessLevel$7,
      parameters: {
        vpThreshold: 265000,
        vThreshold: 156000,
        ipThreshold: 120000,
        pmaxThreshold0: 31800,
        pmaxThreshold1: 31800,
        pmaxThreshold2: 31800,
        pmaxThreshold3: 31800,
        speedOptoPort: 0,
        tint: 30,
        calcPeriodDate: 1,
        timeoutDisplay: 127,
        timeoutScreen: 7,
        displaySet: {
          SET_ALL_SEGMENT_DISPLAY: false,
          SOFTWARE_VERSION: false,
          TOTAL_ACTIVE_ENERGY: true,
          ACTIVE_ENERGY_T1: false,
          ACTIVE_ENERGY_T2: false,
          ACTIVE_ENERGY_T3: false,
          ACTIVE_ENERGY_T4: false,
          ACTIVE_POWER_PER_PHASE: true,
          ACTIVE_POWER_IN_NEUTRAL: true,
          CURRENT_IN_PHASE: false,
          CURRENT_IN_NEUTRAL: false,
          VOLTAGE: false,
          HOUR_MINUTE_SECOND: true,
          DATE_MONTH_YEAR: true,
          TOTAL_EXPORTED_ACTIVE_ENERGY: false,
          EXPORTED_ACTIVE_ENERGY_T1: false,
          EXPORTED_ACTIVE_ENERGY_T2: false,
          EXPORTED_ACTIVE_ENERGY_T3: false,
          EXPORTED_ACTIVE_ENERGY_T4: false,
          POWER_COEFFICIENT_PHASE_A: false,
          POWER_COEFFICIENT_PHASE_B: false,
          BATTERY_VOLTAGE: false,
          POWER_THRESHOLD_T1: false,
          POWER_THRESHOLD_T2: false,
          POWER_THRESHOLD_T3: false,
          POWER_THRESHOLD_T4: false,
          CURRENT_BALANCE: false,
          AUTO_SCREEN_SCROLLING: true
        },
        relaySet4: {
          RELAY_ON_TIMEOUT: false,
          RELAY_ON_SALDO: false,
          RELAY_OFF_SALDO: false,
          RELAY_OFF_SALDO_SOFT: false,
          RELAY_OFF_MAGNET: false,
          RELAY_ON_MAGNET_TIMEOUT: false,
          RELAY_ON_MAGNET_AUTO: false
        },
        relaySet3: {
          RELAY_OFF_LIM_TARIFF_0: false,
          RELAY_OFF_LIM_TARIFF_1: false,
          RELAY_OFF_LIM_TARIFF_2: false,
          RELAY_OFF_LIM_TARIFF_3: false,
          RELAY_OFF_PF_MIN: false
        },
        relaySet2: {
          RELAY_OFF_Y: true,
          RELAY_OFF_CENTER: true,
          RELAY_OFF_TARIFF_0: false,
          RELAY_OFF_TARIFF_1: false,
          RELAY_OFF_TARIFF_2: false,
          RELAY_OFF_TARIFF_3: false,
          RELAY_OFF_I_LIMIT: false,
          RELAY_OFF_V_BAD: false
        },
        relaySet1: {
          RELAY_ON_Y: true,
          RELAY_ON_CENTER: true,
          RELAY_ON_PB: false,
          RELAY_ON_TARIFF_0: false,
          RELAY_ON_TARIFF_1: false,
          RELAY_ON_TARIFF_2: false,
          RELAY_ON_TARIFF_3: false,
          RELAY_ON_V_GOOD: false
        },
        displayType: 0,
        ten: 0,
        timeoutRefresh: 240,
        deltaCorMin: 15,
        timeoutMagnetOff: 5,
        timeoutMagnetOn: 5,
        define1: {
          BLOCK_KEY_OPTOPORT: false,
          MAGNET_SCREEN_CONST: false
        },
        timeoutRelayOn: 1,
        timeoutRelayKey: 0,
        timeoutRelayAuto: 5,
        timeoutBadVAVB: 5,
        freqMax: 55,
        freqMin: 45,
        phMin: 0,
        year: 0,
        month: 0,
        date: 0,
        energyDecimalPoint: 2,
        typeMeter: 0,
        timeoutIMax: 5,
        timeoutPMax: 5,
        timeoutCos: 5,
        pMaxDef: 1,
        displaySetExt: {
          SET_ALL_SEGMENT_DISPLAY: true,
          SOFTWARE_VERSION: true,
          TOTAL_ACTIVE_ENERGY: true,
          ACTIVE_ENERGY_T1: true,
          ACTIVE_ENERGY_T2: true,
          ACTIVE_ENERGY_T3: true,
          ACTIVE_ENERGY_T4: true,
          ACTIVE_POWER_PER_PHASE: true,
          ACTIVE_POWER_IN_NEUTRAL: true,
          CURRENT_IN_PHASE: true,
          CURRENT_IN_NEUTRAL: true,
          VOLTAGE: true,
          HOUR_MINUTE_SECOND: true,
          DATE_MONTH_YEAR: true,
          TOTAL_EXPORTED_ACTIVE_ENERGY: false,
          EXPORTED_ACTIVE_ENERGY_T1: false,
          EXPORTED_ACTIVE_ENERGY_T2: false,
          EXPORTED_ACTIVE_ENERGY_T3: false,
          EXPORTED_ACTIVE_ENERGY_T4: false,
          POWER_COEFFICIENT_PHASE_A: true,
          POWER_COEFFICIENT_PHASE_B: true,
          BATTERY_VOLTAGE: true,
          POWER_THRESHOLD_T1: false,
          POWER_THRESHOLD_T2: false,
          POWER_THRESHOLD_T3: false,
          POWER_THRESHOLD_T4: false,
          CURRENT_BALANCE: false,
          MAGNET_INDUCTION: true,
          OPTOPORT_SPEED: false,
          SORT_DISPLAY_SCREENS: false
        },
        timeoutUneqCurrent: 5,
        timeoutBipolarPower: 5,
        relaySet5: {
          RELAY_OFF_UNEQUAL_CURRENT: false,
          RELAY_ON_UNEQUAL_CURRENT: false,
          RELAY_OFF_BIPOLAR_POWER: false,
          RELAY_ON_BIPOLAR_POWER: false
        },
        timeCorrectPeriod: 24,
        timeCorrectPassHalfhour: false
      },
      bytes: [0x1f, 0x4a, 0x00, 0x04, 0x0b, 0x28, 0x00, 0x02, 0x61, 0x60, 0x00, 0x01, 0xd4, 0xc0, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x00, 0x7c, 0x38, 0x00, 0x1e, 0x01, 0x7f, 0x07, 0x80, 0x00, 0x31, 0x84, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0xf0, 0x0f, 0x05, 0x05, 0x00, 0x01, 0x00, 0x05, 0x05, 0x37, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x05, 0x05, 0x01, 0x08, 0x38, 0x3f, 0xff, 0x05, 0x05, 0x00, 0x18]
    }
  };
  var fromBytes$7 = function fromBytes(bytes) {
    if (bytes.length !== maxSize$7) {
      throw new Error('Invalid SetOpParams data size.');
    }
    var buffer = new CommandBinaryBuffer$1(bytes);
    return buffer.getOperatorParameters();
  };
  var toBytes$7 = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$7);
    buffer.setOperatorParameters(parameters);
    return toBytes$(id$7, buffer.data);
  };

  var setOperatorParameters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$7,
    examples: examples$7,
    fromBytes: fromBytes$7,
    headerSize: headerSize$7,
    id: id$7,
    isLoraOnly: isLoraOnly$7,
    maxSize: maxSize$7,
    name: name$7,
    toBytes: toBytes$7
  });

  var id$6 = setSaldo$1;
  var name$6 = commandNames[setSaldo$1];
  var headerSize$6 = 2;
  var maxSize$6 = 12;
  var accessLevel$6 = READ_WRITE;
  var isLoraOnly$6 = false;
  var examples$6 = {
    'test request': {
      id: id$6,
      name: name$6,
      headerSize: headerSize$6,
      maxSize: maxSize$6,
      accessLevel: accessLevel$6,
      parameters: {
        date: {
          month: 9,
          date: 23,
          hours: 6,
          minutes: 35
        },
        saldoNew: 2,
        saldoOld: 5
      },
      bytes: [0x2a, 0x0c, 0x09, 0x17, 0x06, 0x23, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05]
    }
  };
  var fromBytes$6 = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return {
      date: {
        month: buffer.getUint8(),
        date: buffer.getUint8(),
        hours: buffer.getUint8(),
        minutes: buffer.getUint8()
      },
      saldoNew: buffer.getInt32(),
      saldoOld: buffer.getInt32()
    };
  };
  var toBytes$6 = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$6);
    buffer.setUint8(parameters.date.month);
    buffer.setUint8(parameters.date.date);
    buffer.setUint8(parameters.date.hours);
    buffer.setUint8(parameters.date.minutes);
    buffer.setInt32(parameters.saldoNew);
    buffer.setInt32(parameters.saldoOld);
    return toBytes$(id$6, buffer.data);
  };

  var setSaldo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$6,
    examples: examples$6,
    fromBytes: fromBytes$6,
    headerSize: headerSize$6,
    id: id$6,
    isLoraOnly: isLoraOnly$6,
    maxSize: maxSize$6,
    name: name$6,
    toBytes: toBytes$6
  });

  var id$5 = setSaldoParameters$1;
  var name$5 = commandNames[setSaldoParameters$1];
  var headerSize$5 = 2;
  var maxSize$5 = 37;
  var accessLevel$5 = READ_WRITE;
  var isLoraOnly$5 = false;
  var examples$5 = {
    'test parameters': {
      id: id$5,
      name: name$5,
      headerSize: headerSize$5,
      maxSize: maxSize$5,
      accessLevel: accessLevel$5,
      parameters: {
        coefficients: [2, 3, 4, 5],
        decimalPointTariff: 6,
        indicationThreshold: 7,
        relayThreshold: 8,
        mode: 9,
        saldoOffTimeBegin: 10,
        saldoOffTimeEnd: 11,
        decimalPointIndication: 12,
        powerThreshold: 13,
        creditThreshold: 14
      },
      bytes: [0x2f, 0x25, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e]
    }
  };
  var fromBytes$5 = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return buffer.getSaldoParameters();
  };
  var toBytes$5 = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$5);
    buffer.setSaldoParameters(parameters);
    return toBytes$(id$5, buffer.data);
  };

  var setSaldoParameters = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$5,
    examples: examples$5,
    fromBytes: fromBytes$5,
    headerSize: headerSize$5,
    id: id$5,
    isLoraOnly: isLoraOnly$5,
    maxSize: maxSize$5,
    name: name$5,
    toBytes: toBytes$5
  });

  var id$4 = setSeasonProfile$1;
  var name$4 = commandNames[setSeasonProfile$1];
  var headerSize$4 = 2;
  var maxSize$4 = SEASON_PROFILE_SIZE;
  var accessLevel$4 = READ_WRITE;
  var isLoraOnly$4 = false;
  var examples$4 = {
    'set default season profile': {
      id: id$4,
      name: name$4,
      headerSize: headerSize$4,
      maxSize: maxSize$4,
      accessLevel: accessLevel$4,
      parameters: {
        tariffTable: 1,
        index: 8,
        month: 1,
        date: 1,
        dayIndexes: [0, 0, 0, 0, 0, 0, 0]
      },
      bytes: [0x11, 0x0b, 0x01, 0x08, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    },
    'set some season profile': {
      id: id$4,
      name: name$4,
      headerSize: headerSize$4,
      maxSize: maxSize$4,
      accessLevel: accessLevel$4,
      parameters: {
        tariffTable: 0,
        index: 2,
        month: 5,
        date: 9,
        dayIndexes: [0, 1, 2, 3, 4, 5, 6]
      },
      bytes: [0x11, 0x0b, 0x00, 0x02, 0x05, 0x09, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06]
    }
  };
  var fromBytes$4 = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return _objectSpread2({
      tariffTable: buffer.getUint8(),
      index: buffer.getUint8()
    }, buffer.getSeasonProfile());
  };
  var toBytes$4 = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$4);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    buffer.setSeasonProfile(parameters);
    return toBytes$(id$4, buffer.data);
  };

  var setSeasonProfile = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$4,
    examples: examples$4,
    fromBytes: fromBytes$4,
    headerSize: headerSize$4,
    id: id$4,
    isLoraOnly: isLoraOnly$4,
    maxSize: maxSize$4,
    name: name$4,
    toBytes: toBytes$4
  });

  var id$3 = setSpecialDay$1;
  var name$3 = commandNames[setSpecialDay$1];
  var headerSize$3 = 2;
  var maxSize$3 = 6;
  var accessLevel$3 = READ_WRITE;
  var isLoraOnly$3 = false;
  var examples$3 = {
    'set special day': {
      id: id$3,
      name: name$3,
      headerSize: headerSize$3,
      maxSize: maxSize$3,
      accessLevel: accessLevel$3,
      parameters: {
        tariffTable: 1,
        index: 5,
        month: 1,
        date: 9,
        dayIndex: 3,
        isPeriodic: true
      },
      bytes: [0x12, 0x06, 0x01, 0x05, 0x01, 0x09, 0x03, 0x00]
    }
  };
  var fromBytes$3 = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    return _objectSpread2({
      tariffTable: buffer.getUint8(),
      index: buffer.getUint8()
    }, buffer.getSpecialDay());
  };
  var toBytes$3 = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$3);
    buffer.setUint8(parameters.tariffTable);
    buffer.setUint8(parameters.index);
    buffer.setSpecialDay(parameters);
    return toBytes$(id$3, buffer.data);
  };

  var setSpecialDay = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$3,
    examples: examples$3,
    fromBytes: fromBytes$3,
    headerSize: headerSize$3,
    id: id$3,
    isLoraOnly: isLoraOnly$3,
    maxSize: maxSize$3,
    name: name$3,
    toBytes: toBytes$3
  });

  var RESET_INFLUENCE_SCREENS = 0x55;

  var id$2 = setSpecialOperation$1;
  var name$2 = commandNames[setSpecialOperation$1];
  var headerSize$2 = 2;
  var maxSize$2 = 2;
  var accessLevel$2 = READ_WRITE;
  var isLoraOnly$2 = false;
  var examples$2 = {
    'read screens info': {
      id: id$2,
      name: name$2,
      headerSize: headerSize$2,
      maxSize: maxSize$2,
      accessLevel: accessLevel$2,
      parameters: {
        type: RESET_INFLUENCE_SCREENS,
        readScreensInfo: true,
        resetElectroMagneticIndication: false,
        resetMagneticIndication: false
      },
      bytes: [0x64, 0x02, 0x55, 0x80]
    },
    'reset both screens': {
      id: id$2,
      name: name$2,
      headerSize: headerSize$2,
      maxSize: maxSize$2,
      accessLevel: accessLevel$2,
      parameters: {
        type: RESET_INFLUENCE_SCREENS,
        readScreensInfo: false,
        resetElectroMagneticIndication: true,
        resetMagneticIndication: true
      },
      bytes: [0x64, 0x02, 0x55, 0x03]
    },
    'reset magnetic screen': {
      id: id$2,
      name: name$2,
      headerSize: headerSize$2,
      maxSize: maxSize$2,
      accessLevel: accessLevel$2,
      parameters: {
        type: RESET_INFLUENCE_SCREENS,
        readScreensInfo: false,
        resetElectroMagneticIndication: false,
        resetMagneticIndication: true
      },
      bytes: [0x64, 0x02, 0x55, 0x02]
    }
  };
  var fromBytes$2 = function fromBytes(bytes) {
    var buffer = new CommandBinaryBuffer$1(bytes);
    var type = buffer.getUint8();
    var flags = buffer.getUint8();
    var readScreensInfo = !!(flags & 0x80);
    var resetElectroMagneticIndication = !!(flags & 1);
    var resetMagneticIndication = !!(flags & 2);
    return {
      type: type,
      readScreensInfo: readScreensInfo,
      resetElectroMagneticIndication: resetElectroMagneticIndication,
      resetMagneticIndication: resetMagneticIndication
    };
  };
  var toBytes$2 = function toBytes(parameters) {
    var buffer = new CommandBinaryBuffer$1(maxSize$2);
    var flags = 0;
    if (parameters.readScreensInfo) {
      flags |= 0x80;
    }
    if (parameters.resetElectroMagneticIndication) {
      flags |= 1;
    }
    if (parameters.resetMagneticIndication) {
      flags |= 2;
    }
    buffer.setUint8(parameters.type);
    buffer.setUint8(flags);
    return toBytes$(id$2, buffer.data);
  };

  var setSpecialOperation = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$2,
    examples: examples$2,
    fromBytes: fromBytes$2,
    headerSize: headerSize$2,
    id: id$2,
    isLoraOnly: isLoraOnly$2,
    maxSize: maxSize$2,
    name: name$2,
    toBytes: toBytes$2
  });

  var id$1 = turnRelayOff$1;
  var name$1 = commandNames[turnRelayOff$1];
  var headerSize$1 = 2;
  var maxSize$1 = 0;
  var accessLevel$1 = READ_WRITE;
  var isLoraOnly$1 = false;
  var examples$1 = {
    'simple request': {
      id: id$1,
      name: name$1,
      headerSize: headerSize$1,
      maxSize: maxSize$1,
      accessLevel: accessLevel$1,
      parameters: {},
      bytes: [0x19, 0x00]
    }
  };
  var fromBytes$1 = function fromBytes(bytes) {
    if (bytes.length !== maxSize$1) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes$1 = function toBytes() {
    return toBytes$(id$1);
  };

  var turnRelayOff = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel$1,
    examples: examples$1,
    fromBytes: fromBytes$1,
    headerSize: headerSize$1,
    id: id$1,
    isLoraOnly: isLoraOnly$1,
    maxSize: maxSize$1,
    name: name$1,
    toBytes: toBytes$1
  });

  var id = turnRelayOn$1;
  var name = commandNames[turnRelayOn$1];
  var headerSize = 2;
  var maxSize = 0;
  var accessLevel = READ_WRITE;
  var isLoraOnly = false;
  var examples = {
    'simple request': {
      id: id,
      name: name,
      headerSize: headerSize,
      maxSize: maxSize,
      accessLevel: accessLevel,
      parameters: {},
      bytes: [0x18, 0x00]
    }
  };
  var fromBytes = function fromBytes(bytes) {
    if (bytes.length !== maxSize) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };
  var toBytes = function toBytes() {
    return toBytes$(id);
  };

  var turnRelayOn = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accessLevel: accessLevel,
    examples: examples,
    fromBytes: fromBytes,
    headerSize: headerSize,
    id: id,
    isLoraOnly: isLoraOnly,
    maxSize: maxSize,
    name: name,
    toBytes: toBytes
  });

  var commands = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan,
    getBuildVersion: getBuildVersion,
    getCorrectTime: getCorrectTime,
    getCriticalEvent: getCriticalEvent,
    getCurrentStatusMeter: getCurrentStatusMeter,
    getCurrentValues: getCurrentValues,
    getDateTime: getDateTime,
    getDayDemand: getDayDemand,
    getDayDemandExport: getDayDemandExport,
    getDayMaxDemand: getDayMaxDemand,
    getDayMaxDemandExport: getDayMaxDemandExport,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious,
    getDayProfile: getDayProfile,
    getDemand: getDemand,
    getDeviceId: getDeviceId,
    getDeviceType: getDeviceType,
    getDisplayParam: getDisplayParam,
    getEnergy: getEnergy,
    getEnergyDayPrevious: getEnergyDayPrevious,
    getEnergyExport: getEnergyExport,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious,
    getEventStatus: getEventStatus,
    getEvents: getEvents,
    getEventsCounters: getEventsCounters,
    getExtendedCurrentValues: getExtendedCurrentValues,
    getExtendedCurrentValues2: getExtendedCurrentValues2,
    getHalfHourDemand: getHalfHourDemand,
    getHalfHourDemandExport: getHalfHourDemandExport,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious,
    getHalfhoursEnergies: getHalfhoursEnergies,
    getMagneticFieldThreshold: getMagneticFieldThreshold,
    getMeterInfo: getMeterInfo,
    getMonthDemand: getMonthDemand,
    getMonthDemandExport: getMonthDemandExport,
    getMonthMaxDemand: getMonthMaxDemand,
    getMonthMaxDemandExport: getMonthMaxDemandExport,
    getOperatorParameters: getOperatorParameters,
    getOperatorParametersExtended3: getOperatorParametersExtended3,
    getRatePlanInfo: getRatePlanInfo,
    getSaldo: getSaldo,
    getSaldoParameters: getSaldoParameters,
    getSeasonProfile: getSeasonProfile,
    getSpecialDay: getSpecialDay,
    getVersion: getVersion,
    prepareRatePlan: prepareRatePlan,
    resetPowerMaxDay: resetPowerMaxDay,
    resetPowerMaxMonth: resetPowerMaxMonth,
    runTariffPlan: runTariffPlan,
    setAccessKey: setAccessKey,
    setCorrectDateTime: setCorrectDateTime,
    setCorrectTime: setCorrectTime,
    setDateTime: setDateTime,
    setDayProfile: setDayProfile,
    setDisplayParam: setDisplayParam,
    setOperatorParameters: setOperatorParameters,
    setOperatorParametersExtended3: setOperatorParametersExtended3,
    setSaldo: setSaldo,
    setSaldoParameters: setSaldoParameters,
    setSeasonProfile: setSeasonProfile,
    setSpecialDay: setSpecialDay,
    setSpecialOperation: setSpecialOperation,
    turnRelayOff: turnRelayOff,
    turnRelayOn: turnRelayOn
  });

  var equal = function equal(actual, expected) {
    if (actual !== expected) {
      return 'Assertion error!' + ' actual: ' + actual + ' expected: ' + expected;
    }
    return '';
  };
  var deepEqual = function deepEqual(actual, expected) {
    return equal(JSON.stringify(actual), JSON.stringify(expected));
  };
  var testCommands = function testCommands(commands) {
    var output = '';
    for (var commandName in commands) {
      var command = commands[commandName];
      var examples = command === null || command === undefined ? undefined : command.examples;
      if (command) {
        output += commandName + ' ';
        for (var exampleName in examples) {
          var exampleData = examples[exampleName];
          output += deepEqual(command.toBytes(exampleData.parameters, exampleData.config), exampleData.bytes);
          output += deepEqual(command.fromBytes(exampleData.bytes.slice(command.headerSize), exampleData.config), exampleData.parameters);
        }
      }
    }
    return output;
  };

  logs += testCommands(commands);

})();
//#endregion


var result = {
    contentType: 'BINARY',
    data: '',
    logs: logs
};

return result;
