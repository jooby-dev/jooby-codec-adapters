// IMPORTANT!!!
// This example only for default uplink data converter.
// Data converters for other integrations use different input and result.
// Find example of uplink data converter for your integration and edit usage of payload and result
// Integrations list: https://thingsboard.io/docs/user-guide/integrations/


//#region [autogenerated jooby-codec bundle from index.js]
var fromBytes, getDataSegment;

(function () {
  'use strict';

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = true,
        o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = true, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  }
  function _toArray(r) {
    return _arrayWithHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableRest();
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }

  var hexFormatOptions = {
    separator: ' ',
    prefix: ''
  };

  var getHexFromBytes = (function (bytes) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _Object$assign = Object.assign({}, hexFormatOptions, options),
      separator = _Object$assign.separator,
      prefix = _Object$assign.prefix;
    return bytes.map(function (byte) {
      return "".concat(prefix).concat(byte.toString(16).padStart(2, '0'));
    }).join(separator);
  });

  var UNENCRYPTED = 0x00;

  var getEventStatus$1 = 0x01;
  var getEnergyDayPrevious = 0x03;
  var getDeviceType$1 = 0x04;
  var getDeviceId$1 = 0x05;
  var getDateTime$1 = 0x07;
  var setDateTime = 0x08;
  var setAccessKey = 0x09;
  var getCurrentValues = 0x0d;
  var getEnergy = 0x0f;
  var setDayProfile = 0x10;
  var setSeasonProfile = 0x11;
  var setSpecialDay = 0x12;
  var activateRatePlan = 0x13;
  var prepareRatePlan = 0x14;
  var getHalfHourDemand = 0x15;
  var getDayDemand = 0x16;
  var getMonthDemand = 0x17;
  var turnRelayOn = 0x18;
  var turnRelayOff = 0x19;
  var setCorrectTime = 0x1c;
  var getOperatorParameters$1 = 0x1e;
  var setOperatorParameters = 0x1f;
  var getVersion = 0x28;
  var getSaldo = 0x29;
  var setSaldo = 0x2a;
  var getRatePlanInfo = 0x2c;
  var getExtendedCurrentValues2$1 = 0x2d;
  var getSaldoParameters$1 = 0x2e;
  var setSaldoParameters = 0x2f;
  var getDayMaxDemand = 0x31;
  var getMonthMaxDemand = 0x32;
  var getEvents = 0x33;
  var getEventsCounters = 0x34;
  var resetPowerMaxDay = 0x35;
  var resetPowerMaxMonth = 0x36;
  var getCurrentStatusMeter = 0x39;
  var getExtendedCurrentValues = 0x3a;
  var getDayProfile = 0x3b;
  var getSeasonProfile$1 = 0x3c;
  var getSpecialDay$1 = 0x3d;
  var getCorrectTime = 0x3e;
  var getCriticalEvent = 0x41;
  var runTariffPlan = 0x46;
  var getDayMaxDemandPrevious = 0x4a;
  var getHalfHourDemandPrevious = 0x4b;
  var getDayDemandExport = 0x4f;
  var getEnergyExportDayPrevious = 0x50;
  var getMonthDemandExport = 0x52;
  var getHalfHourDemandExport = 0x53;
  var getDayMaxDemandExport = 0x58;
  var getMonthMaxDemandExport = 0x59;
  var getEnergyExport = 0x5b;
  var setCorrectDateTime = 0x5c;
  var setDisplayParam = 0x5d;
  var getDisplayParam = 0x5e;
  var setSpecialOperation = 0x64;
  var getMagneticFieldThreshold = 0x6d;
  var getHalfHourEnergies = 0x6f;
  var getBuildVersion = 0x70;
  var getOperatorParametersExtended3$1 = 0x71;
  var setOperatorParametersExtended3 = 0x72;
  var setDemandParameters = 0x74;
  var getDemandParameters$1 = 0x75;
  var getDemand$1 = 0x76;
  var getMeterInfo = 0x7a;

  var downlinkIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan,
    getBuildVersion: getBuildVersion,
    getCorrectTime: getCorrectTime,
    getCriticalEvent: getCriticalEvent,
    getCurrentStatusMeter: getCurrentStatusMeter,
    getCurrentValues: getCurrentValues,
    getDateTime: getDateTime$1,
    getDayDemand: getDayDemand,
    getDayDemandExport: getDayDemandExport,
    getDayMaxDemand: getDayMaxDemand,
    getDayMaxDemandExport: getDayMaxDemandExport,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious,
    getDayProfile: getDayProfile,
    getDemand: getDemand$1,
    getDemandParameters: getDemandParameters$1,
    getDeviceId: getDeviceId$1,
    getDeviceType: getDeviceType$1,
    getDisplayParam: getDisplayParam,
    getEnergy: getEnergy,
    getEnergyDayPrevious: getEnergyDayPrevious,
    getEnergyExport: getEnergyExport,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious,
    getEventStatus: getEventStatus$1,
    getEvents: getEvents,
    getEventsCounters: getEventsCounters,
    getExtendedCurrentValues: getExtendedCurrentValues,
    getExtendedCurrentValues2: getExtendedCurrentValues2$1,
    getHalfHourDemand: getHalfHourDemand,
    getHalfHourDemandExport: getHalfHourDemandExport,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious,
    getHalfHourEnergies: getHalfHourEnergies,
    getMagneticFieldThreshold: getMagneticFieldThreshold,
    getMeterInfo: getMeterInfo,
    getMonthDemand: getMonthDemand,
    getMonthDemandExport: getMonthDemandExport,
    getMonthMaxDemand: getMonthMaxDemand,
    getMonthMaxDemandExport: getMonthMaxDemandExport,
    getOperatorParameters: getOperatorParameters$1,
    getOperatorParametersExtended3: getOperatorParametersExtended3$1,
    getRatePlanInfo: getRatePlanInfo,
    getSaldo: getSaldo,
    getSaldoParameters: getSaldoParameters$1,
    getSeasonProfile: getSeasonProfile$1,
    getSpecialDay: getSpecialDay$1,
    getVersion: getVersion,
    prepareRatePlan: prepareRatePlan,
    resetPowerMaxDay: resetPowerMaxDay,
    resetPowerMaxMonth: resetPowerMaxMonth,
    runTariffPlan: runTariffPlan,
    setAccessKey: setAccessKey,
    setCorrectDateTime: setCorrectDateTime,
    setCorrectTime: setCorrectTime,
    setDateTime: setDateTime,
    setDayProfile: setDayProfile,
    setDemandParameters: setDemandParameters,
    setDisplayParam: setDisplayParam,
    setOperatorParameters: setOperatorParameters,
    setOperatorParametersExtended3: setOperatorParametersExtended3,
    setSaldo: setSaldo,
    setSaldoParameters: setSaldoParameters,
    setSeasonProfile: setSeasonProfile,
    setSpecialDay: setSpecialDay,
    setSpecialOperation: setSpecialOperation,
    turnRelayOff: turnRelayOff,
    turnRelayOn: turnRelayOn
  });

  var getDayEnergies = 0x78;
  var getDayMaxPower = 0x79;
  var errorResponse = 0xfe;

  var uplinkIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    activateRatePlan: activateRatePlan,
    errorResponse: errorResponse,
    getBuildVersion: getBuildVersion,
    getCorrectTime: getCorrectTime,
    getCriticalEvent: getCriticalEvent,
    getCurrentStatusMeter: getCurrentStatusMeter,
    getCurrentValues: getCurrentValues,
    getDateTime: getDateTime$1,
    getDayDemand: getDayDemand,
    getDayDemandExport: getDayDemandExport,
    getDayEnergies: getDayEnergies,
    getDayMaxDemand: getDayMaxDemand,
    getDayMaxDemandExport: getDayMaxDemandExport,
    getDayMaxDemandPrevious: getDayMaxDemandPrevious,
    getDayMaxPower: getDayMaxPower,
    getDayProfile: getDayProfile,
    getDemand: getDemand$1,
    getDemandParameters: getDemandParameters$1,
    getDeviceId: getDeviceId$1,
    getDeviceType: getDeviceType$1,
    getDisplayParam: getDisplayParam,
    getEnergy: getEnergy,
    getEnergyDayPrevious: getEnergyDayPrevious,
    getEnergyExport: getEnergyExport,
    getEnergyExportDayPrevious: getEnergyExportDayPrevious,
    getEventStatus: getEventStatus$1,
    getEvents: getEvents,
    getEventsCounters: getEventsCounters,
    getExtendedCurrentValues: getExtendedCurrentValues,
    getExtendedCurrentValues2: getExtendedCurrentValues2$1,
    getHalfHourDemand: getHalfHourDemand,
    getHalfHourDemandExport: getHalfHourDemandExport,
    getHalfHourDemandPrevious: getHalfHourDemandPrevious,
    getHalfHourEnergies: getHalfHourEnergies,
    getMagneticFieldThreshold: getMagneticFieldThreshold,
    getMeterInfo: getMeterInfo,
    getMonthDemand: getMonthDemand,
    getMonthDemandExport: getMonthDemandExport,
    getMonthMaxDemand: getMonthMaxDemand,
    getMonthMaxDemandExport: getMonthMaxDemandExport,
    getOperatorParameters: getOperatorParameters$1,
    getOperatorParametersExtended3: getOperatorParametersExtended3$1,
    getRatePlanInfo: getRatePlanInfo,
    getSaldo: getSaldo,
    getSaldoParameters: getSaldoParameters$1,
    getSeasonProfile: getSeasonProfile$1,
    getSpecialDay: getSpecialDay$1,
    getVersion: getVersion,
    prepareRatePlan: prepareRatePlan,
    resetPowerMaxDay: resetPowerMaxDay,
    resetPowerMaxMonth: resetPowerMaxMonth,
    runTariffPlan: runTariffPlan,
    setAccessKey: setAccessKey,
    setCorrectDateTime: setCorrectDateTime,
    setCorrectTime: setCorrectTime,
    setDateTime: setDateTime,
    setDayProfile: setDayProfile,
    setDemandParameters: setDemandParameters,
    setDisplayParam: setDisplayParam,
    setOperatorParameters: setOperatorParameters,
    setOperatorParametersExtended3: setOperatorParametersExtended3,
    setSaldo: setSaldo,
    setSaldoParameters: setSaldoParameters,
    setSeasonProfile: setSeasonProfile,
    setSpecialDay: setSpecialDay,
    setSpecialOperation: setSpecialOperation,
    turnRelayOff: turnRelayOff,
    turnRelayOn: turnRelayOn
  });

  var invertObject = (function (source) {
    var target = {};
    for (var property in source) {
      var value = source[property];
      target[value] = property;
    }
    return target;
  });

  var uplinkNames = invertObject(uplinkIds);

  var id$13 = activateRatePlan;
  var maxSize$r = 0;
  var fromBytes$16 = function (bytes) {
    if (bytes.length !== maxSize$r) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var INT8_SIZE = 1;
  var INT16_SIZE = 2;
  var INT24_SIZE = 3;
  var INT32_SIZE = 4;
  var log = Math.log,
    pow = Math.pow,
    LN2 = Math.LN2;
  var readFloat = function (buffer, offset, isLittleEndian, mLen, bytes) {
    var e,
      m,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLittleEndian ? bytes - 1 : 0,
      d = isLittleEndian ? -1 : 1,
      s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 0x100 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * pow(2, e - mLen);
  };
  var writeFloat = function (buffer, offset, value, isLittleEndian, mLen, bytes) {
    var e,
      m,
      c,
      eLen = bytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
      i = isLittleEndian ? 0 : bytes - 1,
      d = isLittleEndian ? 1 : -1,
      s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value < 0 && (value = -value);
    if (value !== value || value === Infinity) {
      m = value !== value ? 1 : 0;
      e = eMax;
    } else {
      e = log(value) / LN2 | 0;
      if (value * (c = pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 0x100, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 0x100, eLen -= 8);
    buffer[offset + i - d] |= s * 0x80;
  };
  var be2 = [1, 0];
  var be3 = [2, 1, 0];
  var be4 = [3, 2, 1, 0];
  var le2 = [0, 1];
  var le3 = [0, 1, 2];
  var le4 = [0, 1, 2, 3];
  var readUint8 = function (buffer, offset) {
    return buffer[offset];
  };
  var readUint16 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    return b0 | b1;
  };
  var readUint24 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le3 : be3;
    var b0 = buffer[offset + order[0]];
    var b1 = buffer[offset + order[1]] << 8;
    var b2 = buffer[offset + order[2]] << 16;
    return b0 | b1 | b2;
  };
  var readUint32 = function (buffer, offset, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    var b0 = buffer[offset + order[3]] * 0x1000000;
    var b1 = buffer[offset + order[2]] * 0x10000;
    var b2 = buffer[offset + order[1]] * 0x100;
    var b3 = buffer[offset + order[0]];
    return b0 + b1 + b2 + b3;
  };
  var writeUint8 = function (buffer, offset, value) {
    buffer[offset] = value & 0xff;
  };
  var writeUint16 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le2 : be2;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
  };
  var writeUint24 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le3 : be3;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
  };
  var writeUint32 = function (buffer, offset, value, isLittleEndian) {
    var order = isLittleEndian ? le4 : be4;
    buffer[offset + order[0]] = value & 0xff;
    buffer[offset + order[1]] = value >>> 8 & 0xff;
    buffer[offset + order[2]] = value >>> 16 & 0xff;
    buffer[offset + order[3]] = value >>> 24 & 0xff;
  };
  function BinaryBuffer(dataOrLength) {
    var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (typeof dataOrLength === 'number') {
      var bytes = new Array(dataOrLength).fill(0);
      this.data = bytes;
    } else {
      this.data = dataOrLength;
    }
    this.offset = 0;
    this.isLittleEndian = isLittleEndian;
  }
  BinaryBuffer.prototype = {
    toUint8Array: function () {
      return this.data;
    },
    seek: function (position) {
      if (position < 0 || position >= this.data.length) {
        throw new Error('Invalid position.');
      }
      this.offset = position;
    },
    setInt8: function (value) {
      writeUint8(this.data, this.offset, value < 0 ? value | 0x100 : value);
      this.offset += INT8_SIZE;
    },
    getInt8: function () {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result & 0x80 ? result ^ -256 : result;
    },
    setUint8: function (value) {
      writeUint8(this.data, this.offset, value);
      this.offset += INT8_SIZE;
    },
    getUint8: function () {
      var result = readUint8(this.data, this.offset);
      this.offset += INT8_SIZE;
      return result;
    },
    setInt16: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value < 0 ? value | 0x10000 : value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getInt16: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result & 0x8000 ? result ^ -65536 : result;
    },
    setUint16: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint16(this.data, this.offset, value, isLittleEndian);
      this.offset += INT16_SIZE;
    },
    getUint16: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint16(this.data, this.offset, isLittleEndian);
      this.offset += INT16_SIZE;
      return result;
    },
    setInt24: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint24(this.data, this.offset, value < 0 ? value | 0x1000000 : value, isLittleEndian);
      this.offset += INT24_SIZE;
    },
    getInt24: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint24(this.data, this.offset, isLittleEndian);
      this.offset += INT24_SIZE;
      return result & 0x800000 ? result ^ -16777216 : result;
    },
    setUint24: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint24(this.data, this.offset, value, isLittleEndian);
      this.offset += INT24_SIZE;
    },
    getUint24: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint24(this.data, this.offset, isLittleEndian);
      this.offset += INT24_SIZE;
      return result;
    },
    setInt32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value < 0 ? value | 0x100000000 : value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getInt32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result & 0x80000000 ? result ^ -4294967296 : result;
    },
    setUint32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeUint32(this.data, this.offset, value, isLittleEndian);
      this.offset += INT32_SIZE;
    },
    getUint32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readUint32(this.data, this.offset, isLittleEndian);
      this.offset += INT32_SIZE;
      return result;
    },
    setFloat32: function (value) {
      var isLittleEndian = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isLittleEndian;
      writeFloat(this.data, this.offset, value, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
    },
    getFloat32: function () {
      var isLittleEndian = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.isLittleEndian;
      var result = readFloat(this.data, this.offset, isLittleEndian, 23, 4);
      this.offset += INT32_SIZE;
      return result;
    },
    setString: function (value) {
      this.setUint8(value.length);
      for (var index = 0; index < value.length; ++index) {
        this.setUint8(value.charCodeAt(index));
      }
    },
    getString: function () {
      var size = this.getUint8();
      var endIndex = this.offset + size;
      var chars = [];
      while (this.offset < endIndex) {
        chars.push(String.fromCharCode(this.getUint8()));
      }
      return chars.join('');
    },
    getBytesToOffset: function () {
      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offset;
      return this.data.slice(0, offset);
    },
    getBytesLeft: function () {
      return this.getBytes(this.bytesLeft);
    },
    getBytes: function (length) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      this.offset = offset + length;
      return this.data.slice(offset, this.offset);
    },
    setBytes: function (data) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;
      var bytes = this.data;
      bytes.splice.apply(bytes, [offset, data.length].concat(_toConsumableArray(data)));
      this.data = bytes;
      this.offset = offset + data.length;
    }
  };
  Object.defineProperties(BinaryBuffer.prototype, {
    size: {
      get: function () {
        return this.data.length;
      }
    },
    isEmpty: {
      get: function () {
        if (this.offset > this.data.length) {
          throw new Error("current offset ".concat(this.offset, " is outside the bounds of the buffer"));
        }
        return this.data.length - this.offset === 0;
      }
    },
    bytesLeft: {
      get: function () {
        return this.data.length - this.offset;
      }
    },
    position: {
      get: function () {
        return this.offset;
      }
    }
  });

  var OK = 0;
  var UNKNOWN_COMMAND = 0x80;
  var NOT_ALIGNED_DATA = 0x81;
  var DECRYPTION_FAILURE = 0x82;
  var UNKNOWN_PROTOCOL = 0x83;
  var BAD_MESSAGE = 0x84;
  var BAD_DATA_LENGTH = 0x85;
  var BAD_ARRAY_INDEX = 0x86;
  var NOT_PREPARED_RATE_PLAN = 0x87;
  var BAD_RATE_PLAN_ID = 0x88;
  var BAD_RATE_PLAN_SIZE = 0x89;
  var BAD_RESPONSE_LENGTH = 0x90;
  var NO_DATA_FOR_DATE = 0x91;
  var CALIBRATION_DISABLED = 0x92;
  var ACCESS_DENIED = 0x93;
  var BAD_SALDO_WRITE = 0x95;
  var BLOCKED_METER = 0x97;
  var UNENCRYPTED_COMMAND_DISABLED = 0x98;
  var TIME_CORRECTION_FAILURE = 0x99;
  var INVALID_CORRECTION_INTERVAL = 0x9a;
  var TIME_CORRECTION_OUT_HALF_HOUR_DISABLED = 0x9b;
  var BAD_BLOCK_NUMBER = 0x9c;
  var OUT_OFF_RANGE = 0x9f;
  var SET_METER_TYPE_FAILURE = 0xa0;
  var INTERNAL = 0xf0;

  var resultCodes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_DENIED: ACCESS_DENIED,
    BAD_ARRAY_INDEX: BAD_ARRAY_INDEX,
    BAD_BLOCK_NUMBER: BAD_BLOCK_NUMBER,
    BAD_DATA_LENGTH: BAD_DATA_LENGTH,
    BAD_MESSAGE: BAD_MESSAGE,
    BAD_RATE_PLAN_ID: BAD_RATE_PLAN_ID,
    BAD_RATE_PLAN_SIZE: BAD_RATE_PLAN_SIZE,
    BAD_RESPONSE_LENGTH: BAD_RESPONSE_LENGTH,
    BAD_SALDO_WRITE: BAD_SALDO_WRITE,
    BLOCKED_METER: BLOCKED_METER,
    CALIBRATION_DISABLED: CALIBRATION_DISABLED,
    DECRYPTION_FAILURE: DECRYPTION_FAILURE,
    INTERNAL: INTERNAL,
    INVALID_CORRECTION_INTERVAL: INVALID_CORRECTION_INTERVAL,
    NOT_ALIGNED_DATA: NOT_ALIGNED_DATA,
    NOT_PREPARED_RATE_PLAN: NOT_PREPARED_RATE_PLAN,
    NO_DATA_FOR_DATE: NO_DATA_FOR_DATE,
    OK: OK,
    OUT_OFF_RANGE: OUT_OFF_RANGE,
    SET_METER_TYPE_FAILURE: SET_METER_TYPE_FAILURE,
    TIME_CORRECTION_FAILURE: TIME_CORRECTION_FAILURE,
    TIME_CORRECTION_OUT_HALF_HOUR_DISABLED: TIME_CORRECTION_OUT_HALF_HOUR_DISABLED,
    UNENCRYPTED_COMMAND_DISABLED: UNENCRYPTED_COMMAND_DISABLED,
    UNKNOWN_COMMAND: UNKNOWN_COMMAND,
    UNKNOWN_PROTOCOL: UNKNOWN_PROTOCOL
  });

  var resultNames = invertObject(resultCodes);

  var id$12 = errorResponse;
  var getFromBytes$2 = function (commandNamesParameter) {
    return function (bytes) {
      var buffer = new BinaryBuffer(bytes, false);
      var errorCommandId = buffer.getUint8();
      var errorCode = buffer.getUint8();
      return {
        commandId: errorCommandId,
        commandName: commandNamesParameter[errorCommandId],
        errorCode: errorCode,
        errorName: resultNames[errorCode]
      };
    };
  };
  var fromBytes$15 = getFromBytes$2(uplinkNames);

  var id$11 = getBuildVersion;
  var maxSize$q = 6;
  var fromBytes$14 = function (bytes) {
    if (bytes.length !== maxSize$q) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    var _bytes = _slicedToArray(bytes, 6),
      date = _bytes[0],
      month = _bytes[1],
      year = _bytes[2],
      n3 = _bytes[3],
      n2 = _bytes[4],
      n1 = _bytes[5];
    return {
      date: {
        date: date,
        month: month,
        year: year
      },
      version: "".concat(n3, ".").concat(n2, ".").concat(n1)
    };
  };

  var toObject = function () {
    var bitMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var result = {};
    for (var name in bitMask) {
      result[name] = (value & bitMask[name]) !== 0;
    }
    return result;
  };
  var extractBits = function (value, bitsNumber, startIndex) {
    return (1 << bitsNumber) - 1 & value >> startIndex - 1;
  };

  var DEVICE_TYPE_INVALID_CHAR = 'x';
  var nibbles1 = ['.', '1', '3', 'R', 'M'];
  var nibbles2 = ['.', 'A', 'G', 'R', 'T', 'D'];
  var nibbles3 = ['.', '0', '1', '2', '3', '4', '5'];
  var nibbles4 = ['.', 'A', 'B', 'C', 'D', 'E', 'F'];
  var nibbles5 = ['.', 'A', 'B', 'C', 'D', 'E', 'F', 'H', 'K', 'G'];
  var nibbles6 = ['.', '1', '2', '3', '4'];
  var nibbles7 = ['.', 'L', 'M', 'Z', 'K'];
  var nibbles8 = ['.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
  var nibbles9 = ['.', 'D', 'B', 'C', 'E', 'P', 'R', 'O', 'L', 'F', 'S', 'M', 'Y', 'G', 'N', 'U'];
  var nibbles10 = ['.', '0', '1', '2', '3', '4', '5', '6', 'P', 'R', 'L', 'E', 'G', '-', '/'];
  var nibbles11 = ['.', 'H', 'A', 'T', '0', '0', '0', '0', '0', '1', '2', '3', '4', '0', '0', '0'];
  var nibbles12 = ['.', '0', '1', '2', '3', '4', '5', '6', '7', '8', 'I', 'X', 'G', 'W', 'M', '-'];
  var mtx1DeviceTypeDescriptorMask = {
    typeMeterG: 1 << 0,
    downgradedToA: 1 << 4,
    supportMeterInfo: 1 << 6
  };
  var mtx3DeviceTypeDescriptorMask = {
    typeMeterTransformer: 1 << 0,
    downgradedToR: 1 << 3,
    typeMeterG: 1 << 4,
    supportMeterInfo: 1 << 6,
    reactiveByQuadrants: 1 << 7
  };
  var mtx3DeviceTypeDescriptorFromByte = function (byte) {
    var descriptor = toObject(mtx3DeviceTypeDescriptorMask, byte);
    return {
      meterType: 'mtx3',
      ...descriptor,
      typeMeterG: !descriptor.typeMeterG
    };
  };
  var splitByte = function (byte) {
    return [byte >> 4, byte & 0x0F];
  };
  var splitToNibbles = function (data) {
    var result = new Array(data.length * 2).fill(0);
    data.forEach(function (byte, index) {
      var _splitByte = splitByte(byte),
        _splitByte2 = _slicedToArray(_splitByte, 2),
        high = _splitByte2[0],
        low = _splitByte2[1];
      result[index * 2] = high;
      result[index * 2 + 1] = low;
    });
    return result;
  };
  var fromBytesMtx = function (nibbles) {
    if (nibbles.length !== 14 && nibbles.length !== 16) {
      throw new Error('Device type bytes wrong size');
    }
    var type = ['MTX '];
    type.push(nibbles1[nibbles[0]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles2[nibbles[1]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles3[nibbles[2]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles3[nibbles[3]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push('.');
    type.push(nibbles4[nibbles[4]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles5[nibbles[5]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push('.');
    type.push(nibbles6[nibbles[6]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles7[nibbles[7]] ?? DEVICE_TYPE_INVALID_CHAR);
    var revision = nibbles[8];
    type.push(nibbles8[nibbles[9]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push('-');
    var deviceProtocolIndex;
    if (nibbles.length < 14 || nibbles[12] === 0 && nibbles[13] === 0) {
      type.push(nibbles9[nibbles[10]] ?? DEVICE_TYPE_INVALID_CHAR);
      deviceProtocolIndex = 11;
    } else if (nibbles[13] === 0) {
      type.push(nibbles9[nibbles[10]] ?? DEVICE_TYPE_INVALID_CHAR);
      type.push(nibbles9[nibbles[11]] ?? DEVICE_TYPE_INVALID_CHAR);
      deviceProtocolIndex = 12;
    } else {
      type.push(nibbles9[nibbles[10]] ?? DEVICE_TYPE_INVALID_CHAR);
      type.push(nibbles9[nibbles[11]] ?? DEVICE_TYPE_INVALID_CHAR);
      type.push(nibbles9[nibbles[12]] ?? DEVICE_TYPE_INVALID_CHAR);
      deviceProtocolIndex = 13;
    }
    var deviceProtocolNibble = nibbles[deviceProtocolIndex];
    if (deviceProtocolNibble && deviceProtocolNibble !== 0) {
      type.push(nibbles11[deviceProtocolNibble] ?? DEVICE_TYPE_INVALID_CHAR);
    }
    return {
      type: type.join(''),
      revision: revision
    };
  };
  var fromBytesMtx2 = function (nibbles) {
    if (nibbles.length < 14) {
      throw new Error('The buffer is too small');
    }
    var type = ['MTX '];
    var separator = nibbles[1] === 5 ? '-' : ' ';
    type.push(nibbles1[nibbles[0]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(nibbles2[nibbles[1]] ?? DEVICE_TYPE_INVALID_CHAR);
    type.push(separator);
    for (var index = 2; index < nibbles.length; index++) {
      if (nibbles[index] !== 0) {
        type.push(nibbles10[nibbles[index]] ?? DEVICE_TYPE_INVALID_CHAR);
      }
    }
    return {
      type: type.join('')
    };
  };
  var fromBytesM = function (nibbles) {
    if (nibbles.length < 14) {
      throw new Error('The buffer is too small');
    }
    var type = [];
    type.push(nibbles1[nibbles[0]] ?? DEVICE_TYPE_INVALID_CHAR);
    for (var index = 1; index < nibbles.length; index++) {
      if (nibbles[index] !== 0) {
        type.push(nibbles12[nibbles[index]] ?? DEVICE_TYPE_INVALID_CHAR);
      }
    }
    return {
      type: type.join('')
    };
  };
  var fromBytes$13 = function (bytes) {
    if (bytes.length !== 9) {
      throw new Error('The buffer is too small');
    }
    var result;
    var reserve = [0x00, 0x05, 0x06, 0x07, 0x09, 0x7f, 0xef];
    var position = reserve.indexOf(bytes[0]) !== -1 ? 2 : 0;
    var nibbles = splitToNibbles(bytes.slice(0, 8));
    var deviceTypeNibble = nibbles[position];
    var deviceType = nibbles1[deviceTypeNibble];
    if (deviceType === '1' || deviceType === '3') {
      result = {
        ...fromBytesMtx(nibbles.slice(position)),
        descriptor: deviceType === '3' ? mtx3DeviceTypeDescriptorFromByte(bytes[8]) : {
          meterType: 'mtx1',
          ...toObject(mtx1DeviceTypeDescriptorMask, bytes[8])
        }
      };
    } else {
      result = deviceType === 'M' ? fromBytesM(nibbles) : fromBytesMtx2(nibbles);
    }
    return result;
  };

  var DATA_REQUEST = 0x50;
  var DATA_RESPONSE = 0x51;
  var IDENT_REQUEST = 0x52;
  var IDENT_RESPONSE = 0x53;
  var L2_SET_ADDRESS_REQUEST = 0x54;
  var L2_SET_ADDRESS_RESPONSE = 0x55;
  var L2_CHECK_ADDRESS_REQUEST = 0x56;
  var L2_CHECK_ADDRESS_RESPONSE = 0x57;
  var L2_RM_ADDRESS_REQUEST = 0x58;
  var L2_RM_ADDRESS_RESPONSE = 0x59;
  var FRAGMENT_REQUEST = 0x5A;
  var FRAGMENT_RESPONSE = 0x5B;
  var INVALID = 0xFF;

  var frameTypes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DATA_REQUEST: DATA_REQUEST,
    DATA_RESPONSE: DATA_RESPONSE,
    FRAGMENT_REQUEST: FRAGMENT_REQUEST,
    FRAGMENT_RESPONSE: FRAGMENT_RESPONSE,
    IDENT_REQUEST: IDENT_REQUEST,
    IDENT_RESPONSE: IDENT_RESPONSE,
    INVALID: INVALID,
    L2_CHECK_ADDRESS_REQUEST: L2_CHECK_ADDRESS_REQUEST,
    L2_CHECK_ADDRESS_RESPONSE: L2_CHECK_ADDRESS_RESPONSE,
    L2_RM_ADDRESS_REQUEST: L2_RM_ADDRESS_REQUEST,
    L2_RM_ADDRESS_RESPONSE: L2_RM_ADDRESS_RESPONSE,
    L2_SET_ADDRESS_REQUEST: L2_SET_ADDRESS_REQUEST,
    L2_SET_ADDRESS_RESPONSE: L2_SET_ADDRESS_RESPONSE
  });

  invertObject(frameTypes);

  var ENERGY_REGISTER_FAULT = 0x01;
  var VENDOR_PAR_FAULT = 0x02;
  var OP_PAR_FAULT = 0x03;
  var ACCESS_LOCKED = 0x10;
  var ERR_ACCESS = 0x11;
  var CASE_OPEN$1 = 0x12;
  var CASE_CLOSE = 0x13;
  var MAGNETIC_ON$1 = 0x14;
  var MAGNETIC_OFF = 0x15;
  var CHANGE_ACCESS_KEY0 = 0x20;
  var CHANGE_ACCESS_KEY1 = 0x21;
  var CHANGE_ACCESS_KEY2 = 0x22;
  var CHANGE_ACCESS_KEY3 = 0x23;
  var CHANGE_PAR_LOCAL = 0x24;
  var CHANGE_PAR_REMOTE = 0x25;
  var CMD_CHANGE_TIME = 0x26;
  var CMD_RELAY_ON = 0x27;
  var CMD_RELAY_OFF = 0x28;
  var CHANGE_COR_TIME = 0x29;
  var ENERGY_REGISTER_OVERFLOW = 0x31;
  var CHANGE_TARIFF_TABLE = 0x32;
  var SET_TARIFF_TABLE = 0x33;
  var SUMMER_TIME = 0x34;
  var WINTER_TIME = 0x35;
  var RELAY_ON = 0x36;
  var RELAY_OFF = 0x37;
  var RESTART$1 = 0x38;
  var WD_RESTART = 0x39;
  var POWER_B_ON = 0x3c;
  var POWER_B_OFF = 0x3d;
  var POWER_C_ON = 0x3e;
  var POWER_C_OFF = 0x3f;
  var V_MAX_OK = 0x40;
  var V_MAX_OVER = 0x41;
  var V_MIN_OK = 0x42;
  var V_MIN_OVER = 0x43;
  var T_MAX_OK = 0x44;
  var T_MAX_OVER = 0x45;
  var T_MIN_OK = 0x46;
  var T_MIN_OVER = 0x47;
  var F_MAX_OK = 0x48;
  var F_MAX_OVER = 0x49;
  var F_MIN_OK = 0x4a;
  var F_MIN_OVER = 0x4b;
  var I_MAX_OK = 0x4c;
  var I_MAX_OVER = 0x4d;
  var P_MAX_OK = 0x4e;
  var P_MAX_OVER = 0x4f;
  var POWER_SALDO_OK = 0x50;
  var POWER_SALDO_OVER = 0x51;
  var BATTERY_OK = 0x52;
  var BATTERY_FAULT = 0x53;
  var CALIBRATION_OK = 0x54;
  var CALIBRATION_FAULT = 0x55;
  var CLOCK_OK = 0x56;
  var CLOCK_FAULT = 0x57;
  var POWER_A_OFF = 0x58;
  var POWER_A_ON = 0x59;
  var CMD_RELAY_2_ON = 0x60;
  var CMD_RELAY_2_OFF = 0x61;
  var CROSS_ZERO_ENT0 = 0x62;
  var CROSS_ZERO_ENT1 = 0x63;
  var CROSS_ZERO_ENT2 = 0x64;
  var CROSS_ZERO_ENT3 = 0x65;
  var CALIBRATION_FLAG_SET = 0x66;
  var CALIBRATION_FLAG_RESET = 0x67;
  var BAD_TEST_EEPROM = 0x68;
  var BAD_TEST_FRAM = 0x69;
  var SET_NEW_SALDO = 0x70;
  var SALDO_PARAM_BAD = 0x71;
  var ACC_PARAM_BAD = 0x72;
  var ACC_PARAM_EXT_BAD = 0x73;
  var CALC_PERIOD_BAD = 0x74;
  var BLOCK_TARIFF_BAD = 0x75;
  var CALIBRATION_PARAM_BAD = 0x76;
  var WINTER_SUMMER_BAD = 0x77;
  var SALDO_EN_BAD = 0x78;
  var TIME_CORRECT$1 = 0x79;
  var CASE_KLEMA_OPEN = 0x7a;
  var CASE_KLEMA_CLOSE = 0x7b;
  var CASE_MODULE_OPEN$1 = 0x7c;
  var CASE_MODULE_CLOSE = 0x7d;
  var POWER_GOOD_DIO = 0x7e;
  var RELAY_HARD_BAD_OFF = 0x90;
  var RELAY_HARD_ON = 0x91;
  var RELAY_HARD_BAD_ON = 0x93;
  var RELAY_HARD_OFF = 0x94;
  var CHANGE_TARIFF_TBL_2 = 0x98;
  var SET_SALDO_PARAM = 0x9c;
  var POWER_OVER_RELAY_OFF = 0x9d;
  var CROSS_ZERO_EXPORT_ENT0 = 0x9e;
  var CROSS_ZERO_EXPORT_ENT1 = 0x9f;
  var CROSS_ZERO_EXPORT_ENT2 = 0xa0;
  var CROSS_ZERO_EXPORT_ENT3 = 0xa1;
  var TIME_CORRECT_NEW = 0xa2;
  var EM_MAGNETIC_ON = 0xb0;
  var EM_MAGNETIC_OFF = 0xb1;
  var CURRENT_UNEQUAL_FAULT = 0xb2;
  var CURRENT_UNEQUAL_OK = 0xb3;
  var BIPOLAR_POWER_FAULT = 0xb4;
  var BIPOLAR_POWER_OK = 0xb5;
  var RESET_EM_FLAG = 0xB6;
  var RESET_MAGNET_FLAG = 0xB7;
  var CHANGE_PARAM_CANAL = 0xB9;
  var RELAY_OFF_BAD_SALDO = 0xBA;
  var SET_DEMAND_EN_1MIN = 0xE0;
  var SET_DEMAND_EN_3MIN = 0xE1;
  var SET_DEMAND_EN_5MIN = 0xE2;
  var SET_DEMAND_EN_10MIN = 0xE3;
  var SET_DEMAND_EN_15MIN = 0xE4;
  var SET_DEMAND_EN_30MIN = 0xE5;
  var SET_DEMAND_EN_60MIN = 0xE6;
  var P_MAX_A_MINUS_OK = 0xE7;
  var P_MAX_A_MINUS_OVER = 0xE8;

  var events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACCESS_LOCKED: ACCESS_LOCKED,
    ACC_PARAM_BAD: ACC_PARAM_BAD,
    ACC_PARAM_EXT_BAD: ACC_PARAM_EXT_BAD,
    BAD_TEST_EEPROM: BAD_TEST_EEPROM,
    BAD_TEST_FRAM: BAD_TEST_FRAM,
    BATTERY_FAULT: BATTERY_FAULT,
    BATTERY_OK: BATTERY_OK,
    BIPOLAR_POWER_FAULT: BIPOLAR_POWER_FAULT,
    BIPOLAR_POWER_OK: BIPOLAR_POWER_OK,
    BLOCK_TARIFF_BAD: BLOCK_TARIFF_BAD,
    CALC_PERIOD_BAD: CALC_PERIOD_BAD,
    CALIBRATION_FAULT: CALIBRATION_FAULT,
    CALIBRATION_FLAG_RESET: CALIBRATION_FLAG_RESET,
    CALIBRATION_FLAG_SET: CALIBRATION_FLAG_SET,
    CALIBRATION_OK: CALIBRATION_OK,
    CALIBRATION_PARAM_BAD: CALIBRATION_PARAM_BAD,
    CASE_CLOSE: CASE_CLOSE,
    CASE_KLEMA_CLOSE: CASE_KLEMA_CLOSE,
    CASE_KLEMA_OPEN: CASE_KLEMA_OPEN,
    CASE_MODULE_CLOSE: CASE_MODULE_CLOSE,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN$1,
    CASE_OPEN: CASE_OPEN$1,
    CHANGE_ACCESS_KEY0: CHANGE_ACCESS_KEY0,
    CHANGE_ACCESS_KEY1: CHANGE_ACCESS_KEY1,
    CHANGE_ACCESS_KEY2: CHANGE_ACCESS_KEY2,
    CHANGE_ACCESS_KEY3: CHANGE_ACCESS_KEY3,
    CHANGE_COR_TIME: CHANGE_COR_TIME,
    CHANGE_PARAM_CANAL: CHANGE_PARAM_CANAL,
    CHANGE_PAR_LOCAL: CHANGE_PAR_LOCAL,
    CHANGE_PAR_REMOTE: CHANGE_PAR_REMOTE,
    CHANGE_TARIFF_TABLE: CHANGE_TARIFF_TABLE,
    CHANGE_TARIFF_TBL_2: CHANGE_TARIFF_TBL_2,
    CLOCK_FAULT: CLOCK_FAULT,
    CLOCK_OK: CLOCK_OK,
    CMD_CHANGE_TIME: CMD_CHANGE_TIME,
    CMD_RELAY_2_OFF: CMD_RELAY_2_OFF,
    CMD_RELAY_2_ON: CMD_RELAY_2_ON,
    CMD_RELAY_OFF: CMD_RELAY_OFF,
    CMD_RELAY_ON: CMD_RELAY_ON,
    CROSS_ZERO_ENT0: CROSS_ZERO_ENT0,
    CROSS_ZERO_ENT1: CROSS_ZERO_ENT1,
    CROSS_ZERO_ENT2: CROSS_ZERO_ENT2,
    CROSS_ZERO_ENT3: CROSS_ZERO_ENT3,
    CROSS_ZERO_EXPORT_ENT0: CROSS_ZERO_EXPORT_ENT0,
    CROSS_ZERO_EXPORT_ENT1: CROSS_ZERO_EXPORT_ENT1,
    CROSS_ZERO_EXPORT_ENT2: CROSS_ZERO_EXPORT_ENT2,
    CROSS_ZERO_EXPORT_ENT3: CROSS_ZERO_EXPORT_ENT3,
    CURRENT_UNEQUAL_FAULT: CURRENT_UNEQUAL_FAULT,
    CURRENT_UNEQUAL_OK: CURRENT_UNEQUAL_OK,
    EM_MAGNETIC_OFF: EM_MAGNETIC_OFF,
    EM_MAGNETIC_ON: EM_MAGNETIC_ON,
    ENERGY_REGISTER_FAULT: ENERGY_REGISTER_FAULT,
    ENERGY_REGISTER_OVERFLOW: ENERGY_REGISTER_OVERFLOW,
    ERR_ACCESS: ERR_ACCESS,
    F_MAX_OK: F_MAX_OK,
    F_MAX_OVER: F_MAX_OVER,
    F_MIN_OK: F_MIN_OK,
    F_MIN_OVER: F_MIN_OVER,
    I_MAX_OK: I_MAX_OK,
    I_MAX_OVER: I_MAX_OVER,
    MAGNETIC_OFF: MAGNETIC_OFF,
    MAGNETIC_ON: MAGNETIC_ON$1,
    OP_PAR_FAULT: OP_PAR_FAULT,
    POWER_A_OFF: POWER_A_OFF,
    POWER_A_ON: POWER_A_ON,
    POWER_B_OFF: POWER_B_OFF,
    POWER_B_ON: POWER_B_ON,
    POWER_C_OFF: POWER_C_OFF,
    POWER_C_ON: POWER_C_ON,
    POWER_GOOD_DIO: POWER_GOOD_DIO,
    POWER_OVER_RELAY_OFF: POWER_OVER_RELAY_OFF,
    POWER_SALDO_OK: POWER_SALDO_OK,
    POWER_SALDO_OVER: POWER_SALDO_OVER,
    P_MAX_A_MINUS_OK: P_MAX_A_MINUS_OK,
    P_MAX_A_MINUS_OVER: P_MAX_A_MINUS_OVER,
    P_MAX_OK: P_MAX_OK,
    P_MAX_OVER: P_MAX_OVER,
    RELAY_HARD_BAD_OFF: RELAY_HARD_BAD_OFF,
    RELAY_HARD_BAD_ON: RELAY_HARD_BAD_ON,
    RELAY_HARD_OFF: RELAY_HARD_OFF,
    RELAY_HARD_ON: RELAY_HARD_ON,
    RELAY_OFF: RELAY_OFF,
    RELAY_OFF_BAD_SALDO: RELAY_OFF_BAD_SALDO,
    RELAY_ON: RELAY_ON,
    RESET_EM_FLAG: RESET_EM_FLAG,
    RESET_MAGNET_FLAG: RESET_MAGNET_FLAG,
    RESTART: RESTART$1,
    SALDO_EN_BAD: SALDO_EN_BAD,
    SALDO_PARAM_BAD: SALDO_PARAM_BAD,
    SET_DEMAND_EN_10MIN: SET_DEMAND_EN_10MIN,
    SET_DEMAND_EN_15MIN: SET_DEMAND_EN_15MIN,
    SET_DEMAND_EN_1MIN: SET_DEMAND_EN_1MIN,
    SET_DEMAND_EN_30MIN: SET_DEMAND_EN_30MIN,
    SET_DEMAND_EN_3MIN: SET_DEMAND_EN_3MIN,
    SET_DEMAND_EN_5MIN: SET_DEMAND_EN_5MIN,
    SET_DEMAND_EN_60MIN: SET_DEMAND_EN_60MIN,
    SET_NEW_SALDO: SET_NEW_SALDO,
    SET_SALDO_PARAM: SET_SALDO_PARAM,
    SET_TARIFF_TABLE: SET_TARIFF_TABLE,
    SUMMER_TIME: SUMMER_TIME,
    TIME_CORRECT: TIME_CORRECT$1,
    TIME_CORRECT_NEW: TIME_CORRECT_NEW,
    T_MAX_OK: T_MAX_OK,
    T_MAX_OVER: T_MAX_OVER,
    T_MIN_OK: T_MIN_OK,
    T_MIN_OVER: T_MIN_OVER,
    VENDOR_PAR_FAULT: VENDOR_PAR_FAULT,
    V_MAX_OK: V_MAX_OK,
    V_MAX_OVER: V_MAX_OVER,
    V_MIN_OK: V_MIN_OK,
    V_MIN_OVER: V_MIN_OVER,
    WD_RESTART: WD_RESTART,
    WINTER_SUMMER_BAD: WINTER_SUMMER_BAD,
    WINTER_TIME: WINTER_TIME
  });

  var eventNames = invertObject(events);

  var TARIFF_PLAN_SIZE = 11;
  var SEASON_PROFILE_DAYS_NUMBER = 7;
  var TARIFF_NUMBER$1 = 4;
  var MIN_HALF_HOUR_PERIODS = 48;
  var MAX_HALF_HOUR_PERIODS = 50;
  var MIN_HALF_HOUR_COMMAND_SIZE = 3 + MIN_HALF_HOUR_PERIODS * 2;
  var baseDisplaySetMask = {
    SET_ALL_SEGMENT_DISPLAY: 0x0001,
    SOFTWARE_VERSION: 0x0002,
    TOTAL_ACTIVE_ENERGY: 0x0004,
    ACTIVE_ENERGY_T1: 0x0008,
    ACTIVE_ENERGY_T2: 0x0010,
    ACTIVE_ENERGY_T3: 0x0020,
    ACTIVE_ENERGY_T4: 0x0040,
    ACTIVE_POWER_PER_PHASE: 0x0080,
    ACTIVE_POWER_IN_NEUTRAL: 0x0100,
    CURRENT_IN_PHASE: 0x0200,
    CURRENT_IN_NEUTRAL: 0x0400,
    VOLTAGE: 0x0800,
    HOUR_MINUTE_SECOND: 0x1000,
    DATE_MONTH_YEAR: 0x2000,
    TOTAL_EXPORTED_ACTIVE_ENERGY: 0x4000,
    EXPORTED_ACTIVE_ENERGY_T1: 0x8000,
    EXPORTED_ACTIVE_ENERGY_T2: 0x00010000,
    EXPORTED_ACTIVE_ENERGY_T3: 0x00020000,
    EXPORTED_ACTIVE_ENERGY_T4: 0x00040000,
    POWER_FACTOR_PHASE_A: 0x00080000,
    POWER_FACTOR_PHASE_B: 0x00100000,
    BATTERY_VOLTAGE: 0x00200000,
    POWER_THRESHOLD_T1: 0x00400000,
    POWER_THRESHOLD_T2: 0x00800000,
    POWER_THRESHOLD_T3: 0x01000000,
    POWER_THRESHOLD_T4: 0x02000000,
    CURRENT_BALANCE: 0x20000000
  };
  var displaySetMask = {
    ...baseDisplaySetMask,
    AUTO_SCREEN_SCROLLING: 0x80000000
  };
  var displaySetExtMask = {
    ...baseDisplaySetMask,
    MAGNET_INDUCTION: 0x08000000,
    OPTOPORT_SPEED: 0x40000000,
    SORT_DISPLAY_SCREENS: 0x80000000
  };
  var relaySet1Mask = {
    RELAY_ON_Y: 0x01,
    RELAY_ON_CENTER: 0x02,
    RELAY_ON_PB: 0x04,
    RELAY_ON_TARIFF_1: 0x08,
    RELAY_ON_TARIFF_2: 0x10,
    RELAY_ON_TARIFF_3: 0x20,
    RELAY_ON_TARIFF_4: 0x40,
    RELAY_ON_V_GOOD: 0x80
  };
  var relaySet2Mask = {
    RELAY_OFF_Y: 0x01,
    RELAY_OFF_CENTER: 0x02,
    RELAY_OFF_TARIFF_1: 0x04,
    RELAY_OFF_TARIFF_2: 0x08,
    RELAY_OFF_TARIFF_3: 0x10,
    RELAY_OFF_TARIFF_4: 0x20,
    RELAY_OFF_I_LIMIT: 0x40,
    RELAY_OFF_V_BAD: 0x80
  };
  var relaySet3Mask = {
    RELAY_OFF_LIM_TARIFF_1: 0x02,
    RELAY_OFF_LIM_TARIFF_2: 0x04,
    RELAY_OFF_LIM_TARIFF_3: 0x08,
    RELAY_OFF_LIM_TARIFF_4: 0x10,
    RELAY_OFF_PF_MIN: 0x20
  };
  var relaySet4Mask = {
    RELAY_ON_TIMEOUT: 0x01,
    RELAY_ON_SALDO: 0x02,
    RELAY_OFF_SALDO: 0x04,
    RELAY_OFF_SALDO_SOFT: 0x08,
    RELAY_OFF_MAGNET: 0x10,
    RELAY_ON_MAGNET_TIMEOUT: 0x20,
    RELAY_ON_MAGNET_AUTO: 0x40
  };
  var relaySet5Mask = {
    RELAY_OFF_UNEQUAL_CURRENT: 0x01,
    RELAY_ON_UNEQUAL_CURRENT: 0x02,
    RELAY_OFF_BIPOLAR_POWER: 0x04,
    RELAY_ON_BIPOLAR_POWER: 0x08
  };
  var define1Mask = {
    BLOCK_KEY_OPTOPORT: 0x02,
    MAGNET_SCREEN_CONST: 0x20
  };
  var eventStatusMask = {
    CASE_OPEN: 2 ** 0,
    MAGNETIC_ON: 2 ** 1,
    PARAMETERS_UPDATE_REMOTE: 2 ** 2,
    PARAMETERS_UPDATE_LOCAL: 2 ** 3,
    RESTART: 2 ** 4,
    ERROR_ACCESS: 2 ** 5,
    TIME_SET: 2 ** 6,
    TIME_CORRECT: 2 ** 7,
    DEVICE_FAILURE: 2 ** 8,
    CASE_TERMINAL_OPEN: 2 ** 9,
    CASE_MODULE_OPEN: 2 ** 10,
    TARIFF_TABLE_SET: 2 ** 11,
    TARIFF_TABLE_GET: 2 ** 12,
    PROTECTION_RESET_EM: 2 ** 13,
    PROTECTION_RESET_MAGNETIC: 2 ** 14
  };
  var extendedCurrentValues2RelayStatusMask = {
    RELAY_STATE: 2 ** 0,
    RELAY_UBAD: 2 ** 1,
    RELAY_UNEQ_CURRENT: 2 ** 4,
    RELAY_OFF_CENTER: 2 ** 5,
    RELAY_IMAX: 2 ** 6,
    RELAY_PMAX: 2 ** 7
  };
  var extendedCurrentValues2RelayStatus2Mask = {
    RELAY_COSFI: 2 ** 0,
    RELAY_SALDO_OFF_FLAG: 2 ** 1,
    RELAY_UNEQUAL_CURRENT_OFF: 2 ** 2,
    RELAY_BIPOLAR_POWER_OFF: 2 ** 3,
    RELAY_SALDO_OFF_ON_MAX_POWER: 2 ** 4,
    RELAY_HARD_ST1: 2 ** 5
  };
  var extendedCurrentValues2Status1Mask = {
    MAXVA: 2 ** 0,
    MINVA: 2 ** 1,
    MAXT: 2 ** 2,
    MINT: 2 ** 3,
    MAXF: 2 ** 4,
    MINF: 2 ** 5,
    MAXIA: 2 ** 6,
    MAXP: 2 ** 7
  };
  var extendedCurrentValues2Status2Mask = {
    MAX_POWER_SALDO: 2 ** 0,
    BATTERY_VBAT_BAD: 2 ** 1,
    CLOCK_UNSET: 2 ** 3,
    MIN_COS_FI: 2 ** 5
  };
  var extendedCurrentValues2Status3Mask = {
    UNEQUAL_CURRENT: 2 ** 0,
    BIPOLAR_POWER: 2 ** 1,
    POWER_A_NEGATIVE: 2 ** 6,
    POWER_B_NEGATIVE: 2 ** 7
  };
  var operatorParametersExtended3RelaySetMask = {
    RELAY_OFF_LIMIT_P_MINUS_T1: 0x08,
    RELAY_OFF_LIMIT_P_MINUS_T2: 0x10,
    RELAY_OFF_LIMIT_P_MINUS_T3: 0x20,
    RELAY_OFF_LIMIT_P_MINUS_T4: 0x40
  };
  function getPackedEnergies(buffer, energyType, tariffMapByte) {
    var byte = tariffMapByte >> TARIFF_NUMBER$1;
    var energies = new Array(TARIFF_NUMBER$1).fill(0);
    energies.forEach(function (energy, index) {
      var isTariffExists = !!extractBits(byte, 1, index + 1);
      if (isTariffExists) {
        energies[index] = buffer.getInt32();
      } else {
        energies[index] = null;
      }
    });
    return energies;
  }
  function getEnergyPeriod(period) {
    if (period === 0xffff) {
      return {
        tariff: undefined,
        energy: undefined
      };
    }
    return {
      tariff: period >> 14 & 0x03,
      energy: period & 0x3fff
    };
  }
  var getDayProfileFromByte = function (value) {
    return {
      tariff: extractBits(value, 2, 1),
      isFirstHalfHour: !extractBits(value, 1, 3),
      hour: extractBits(value, 5, 4)
    };
  };
  var getDeviceId = function (buffer) {
    var manufacturer = getHexFromBytes(buffer.getBytes(3), {
      separator: ''
    });
    var type = buffer.getUint8();
    var year = buffer.getUint8();
    var serial = getHexFromBytes(buffer.getBytes(3), {
      separator: ''
    });
    return {
      manufacturer: manufacturer,
      type: type,
      year: year,
      serial: serial
    };
  };
  var getDateTime = function (buffer) {
    return {
      isSummerTime: !!buffer.getUint8(),
      seconds: buffer.getUint8(),
      minutes: buffer.getUint8(),
      hours: buffer.getUint8(),
      day: buffer.getUint8(),
      date: buffer.getUint8(),
      month: buffer.getUint8(),
      year: buffer.getUint8()
    };
  };
  var getTariffPlan = function (buffer) {
    return {
      id: buffer.getUint32(),
      tariffSet: buffer.getUint8(),
      activateYear: buffer.getUint8(),
      activateMonth: buffer.getUint8(),
      activateDay: buffer.getUint8(),
      specialProfilesArraySize: buffer.getUint8(),
      seasonProfilesArraySize: buffer.getUint8(),
      dayProfilesArraySize: buffer.getUint8()
    };
  };
  var getTimeCorrectionParameters = function (buffer) {
    return {
      monthTransitionSummer: buffer.getUint8(),
      dateTransitionSummer: buffer.getUint8(),
      hoursTransitionSummer: buffer.getUint8(),
      hoursCorrectSummer: buffer.getUint8(),
      monthTransitionWinter: buffer.getUint8(),
      dateTransitionWinter: buffer.getUint8(),
      hoursTransitionWinter: buffer.getUint8(),
      hoursCorrectWinter: buffer.getUint8(),
      isCorrectionNeeded: buffer.getUint8() === 1
    };
  };
  var getSeasonProfile = function (buffer) {
    return {
      month: buffer.getUint8(),
      date: buffer.getUint8(),
      dayIndexes: new Array(SEASON_PROFILE_DAYS_NUMBER).fill(0).map(function () {
        return buffer.getUint8();
      })
    };
  };
  var getSpecialDay = function (buffer) {
    return {
      month: buffer.getUint8(),
      date: buffer.getUint8(),
      dayIndex: buffer.getUint8(),
      isPeriodic: buffer.getUint8() === 0
    };
  };
  var getDeviceType = function (buffer) {
    return fromBytes$13(buffer.getBytes(9));
  };
  var getOperatorParameters = function (buffer) {
    var operatorParameters = {
      vpThreshold: buffer.getUint32(),
      vThreshold: buffer.getUint32(),
      ipThreshold: buffer.getUint32(),
      pmaxThreshold0: buffer.getUint32(),
      pmaxThreshold1: buffer.getUint32(),
      pmaxThreshold2: buffer.getUint32(),
      pmaxThreshold3: buffer.getUint32(),
      speedOptoPort: buffer.getUint8(),
      tint: buffer.getUint8(),
      calcPeriodDate: buffer.getUint8(),
      timeoutDisplay: buffer.getUint8(),
      timeoutScreen: buffer.getUint8(),
      displaySet: toObject(displaySetMask, buffer.getUint32()),
      relaySet4: toObject(relaySet4Mask, buffer.getUint8()),
      relaySet3: toObject(relaySet3Mask, buffer.getUint8()),
      relaySet2: toObject(relaySet2Mask, buffer.getUint8()),
      relaySet1: toObject(relaySet1Mask, buffer.getUint8()),
      displayType: buffer.getUint8(),
      ten: buffer.getUint8(),
      timeoutRefresh: buffer.getUint16(),
      deltaCorMin: buffer.getUint8(),
      timeoutMagnetOff: buffer.getUint8(),
      timeoutMagnetOn: buffer.getUint8(),
      define1: toObject(define1Mask, buffer.getUint8()),
      timeoutRelayOn: buffer.getUint8(),
      timeoutRelayKey: buffer.getUint8(),
      timeoutRelayAuto: buffer.getUint8(),
      timeoutBadVAVB: buffer.getUint8(),
      freqMax: buffer.getUint8(),
      freqMin: buffer.getUint8(),
      phMin: buffer.getUint16(),
      year: buffer.getUint8(),
      month: buffer.getUint8(),
      date: buffer.getUint8(),
      energyDecimalPoint: buffer.getUint8(),
      typeMeter: buffer.getUint8(),
      timeoutIMax: buffer.getUint8(),
      timeoutPMax: buffer.getUint8(),
      timeoutCos: buffer.getUint8(),
      pMaxDef: buffer.getUint8(),
      displaySetExt: toObject(displaySetExtMask, buffer.getUint32()),
      timeoutUneqCurrent: buffer.getUint8(),
      timeoutBipolarPower: buffer.getUint8(),
      relaySet5: toObject(relaySet5Mask, buffer.getUint8()),
      timeCorrectPeriod: 0,
      timeCorrectPassHalfhour: false
    };
    var timeCorrectPeriod = buffer.getUint8();
    operatorParameters.timeCorrectPeriod = timeCorrectPeriod & 0x7f;
    operatorParameters.timeCorrectPassHalfhour = !!(timeCorrectPeriod & 0x80);
    return operatorParameters;
  };
  var getPackedEnergyWithType = function (buffer) {
    var byte = buffer.getUint8();
    var energyType = extractBits(byte, TARIFF_NUMBER$1, 1);
    var energies = getPackedEnergies(buffer, energyType, byte);
    return {
      energyType: energyType,
      energies: energies
    };
  };
  var getEnergies = function (buffer) {
    return new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return buffer.getInt32();
    });
  };
  var getDate$1 = function (buffer) {
    return {
      year: buffer.getUint8(),
      month: buffer.getUint8(),
      date: buffer.getUint8()
    };
  };
  var getSaldoParameters = function (buffer) {
    return {
      coefficients: new Array(4).fill(0).map(function () {
        return buffer.getUint32();
      }),
      decimalPointTariff: buffer.getUint8(),
      indicationThreshold: buffer.getInt32(),
      relayThreshold: buffer.getInt32(),
      mode: buffer.getUint8(),
      saldoOffTimeBegin: buffer.getUint8(),
      saldoOffTimeEnd: buffer.getUint8(),
      decimalPointIndication: buffer.getUint8(),
      powerThreshold: buffer.getUint32(),
      creditThreshold: buffer.getInt32()
    };
  };
  var getEnergyPeriods = function (buffer, periodsNumber) {
    var periods = new Array(periodsNumber).fill(0).map(function () {
      return buffer.getUint16();
    });
    return periods.map(function (period) {
      return getEnergyPeriod(period);
    });
  };
  var getEventStatus = function (buffer) {
    var eventStatus = buffer.getUint16();
    return toObject(eventStatusMask, eventStatus);
  };
  var getExtendedCurrentValues2 = function (buffer) {
    var uBattery = buffer.getUint16();
    var relayStatus = toObject(extendedCurrentValues2RelayStatusMask, buffer.getUint8());
    var relayStatus2 = toObject(extendedCurrentValues2RelayStatus2Mask, buffer.getUint8());
    var status1 = toObject(extendedCurrentValues2Status1Mask, buffer.getUint8());
    var status2 = toObject(extendedCurrentValues2Status2Mask, buffer.getUint8());
    var status3 = toObject(extendedCurrentValues2Status3Mask, buffer.getUint8());
    return {
      uBattery: uBattery,
      relayStatus: relayStatus,
      relayStatus2: relayStatus2,
      status1: status1,
      status2: status2,
      status3: status3
    };
  };
  var getEvent = function (buffer) {
    var data = {
      hours: buffer.getUint8(),
      minutes: buffer.getUint8(),
      seconds: buffer.getUint8(),
      event: buffer.getUint8()
    };
    var event = data.event;
    var bytesLeft = buffer.bytesLeft;
    data.eventName = eventNames[event];
    switch (event) {
      case POWER_OVER_RELAY_OFF:
        if (bytesLeft < 4) {
          return data;
        }
        data.power = [buffer.getUint8(), buffer.getUint8(), buffer.getUint8(), buffer.getUint8()];
        break;
      case CMD_CHANGE_TIME:
      case TIME_CORRECT$1:
        if (bytesLeft < 8) {
          return data;
        }
        data.newDate = getDateTime(buffer);
        break;
    }
    return data;
  };
  var getDemand = function (buffer) {
    var date0 = buffer.getUint8();
    var date1 = buffer.getUint8();
    return {
      date: {
        year: date0 >> 1,
        month: date0 << 3 & 0x0f | date1 >> 5,
        date: date1 & 0x1f
      },
      energyType: buffer.getUint8(),
      firstIndex: buffer.getUint16(),
      count: buffer.getUint8(),
      period: buffer.getUint8()
    };
  };
  var getDemandParameters = function (buffer) {
    var channelParam1 = buffer.getUint8();
    var counterInterval = buffer.getUint8();
    var channelParam2 = buffer.getUint8();
    return {
      channelParam1: channelParam1,
      counterInterval: counterInterval,
      channelParam2: channelParam2
    };
  };
  var getDayMaxDemandResponse = function (buffer) {
    var date = getDate$1(buffer);
    var power = new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return {
        hours: buffer.getUint8(),
        minutes: buffer.getUint8(),
        power: buffer.getUint32()
      };
    });
    return {
      date: date,
      power: power
    };
  };
  var getOperatorParametersExtended3 = function (buffer) {
    return {
      pmaxMinusThreshold0: buffer.getUint32(),
      pmaxMinusThreshold1: buffer.getUint32(),
      pmaxMinusThreshold2: buffer.getUint32(),
      pmaxMinusThreshold3: buffer.getUint32(),
      relaySet: toObject(operatorParametersExtended3RelaySetMask, buffer.getUint8())
    };
  };
  var getMonthMaxPowerByTariffs = function (buffer) {
    return new Array(TARIFF_NUMBER$1).fill(0).map(function () {
      return {
        date: buffer.getUint8(),
        hours: buffer.getUint8(),
        minutes: buffer.getUint8(),
        power: buffer.getUint32()
      };
    });
  };

  var id$10 = getCorrectTime;
  var fromBytes$12 = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getTimeCorrectionParameters(buffer);
  };

  var CASE_OPEN = 0;
  var MAGNETIC_ON = 1;
  var PARAMETERS_UPDATE_REMOTE = 2;
  var PARAMETERS_UPDATE_LOCAL = 3;
  var RESTART = 4;
  var ERROR_ACCESS = 5;
  var TIME_SET = 6;
  var TIME_CORRECT = 7;
  var DEVICE_FAILURE = 8;
  var CASE_TERMINAL_OPEN = 9;
  var CASE_MODULE_OPEN = 10;
  var TARIFF_TABLE_SET = 11;
  var TARIFF_TABLE_GET = 12;
  var PROTECTION_RESET_EM = 13;
  var PROTECTION_RESET_MAGNETIC = 14;

  var criticalEvents = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CASE_MODULE_OPEN: CASE_MODULE_OPEN,
    CASE_OPEN: CASE_OPEN,
    CASE_TERMINAL_OPEN: CASE_TERMINAL_OPEN,
    DEVICE_FAILURE: DEVICE_FAILURE,
    ERROR_ACCESS: ERROR_ACCESS,
    MAGNETIC_ON: MAGNETIC_ON,
    PARAMETERS_UPDATE_LOCAL: PARAMETERS_UPDATE_LOCAL,
    PARAMETERS_UPDATE_REMOTE: PARAMETERS_UPDATE_REMOTE,
    PROTECTION_RESET_EM: PROTECTION_RESET_EM,
    PROTECTION_RESET_MAGNETIC: PROTECTION_RESET_MAGNETIC,
    RESTART: RESTART,
    TARIFF_TABLE_GET: TARIFF_TABLE_GET,
    TARIFF_TABLE_SET: TARIFF_TABLE_SET,
    TIME_CORRECT: TIME_CORRECT,
    TIME_SET: TIME_SET
  });

  var criticalEventNames = invertObject(criticalEvents);

  var id$ = getCriticalEvent;
  var maxSize$p = 9;
  var fromBytes$11 = function (bytes) {
    if (bytes.length !== maxSize$p) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    var _bytes = _slicedToArray(bytes, 9),
      event = _bytes[0],
      index = _bytes[1],
      year = _bytes[2],
      month = _bytes[3],
      date = _bytes[4],
      hours = _bytes[5],
      minutes = _bytes[6],
      seconds = _bytes[7],
      count = _bytes[8];
    return {
      event: event,
      name: criticalEventNames[event],
      index: index,
      date: {
        year: year,
        month: month,
        date: date,
        hours: hours,
        minutes: minutes,
        seconds: seconds
      },
      count: count
    };
  };

  var id$_ = getCurrentStatusMeter;
  var calibrationFlagsMask = {
    calibrationEnable: 0x01,
    hardkey: 0x02,
    keyPressTest: 0x04,
    keyOpenkeyTest: 0x08,
    keyGerkonTest: 0x10,
    keyOpenKlemaTest: 0x20,
    keyOpenModuleTest: 0x40,
    keyPress2Test: 0x80
  };
  var fromBytes$10 = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var operatingSeconds = buffer.getUint32();
    var tbadVAVB = buffer.getUint32();
    var tbadImaxAll = buffer.getUint32();
    var tbadPmaxAll = buffer.getUint32();
    buffer.getUint32();
    var tbadFREQ = buffer.getUint32();
    var relayStatus = toObject(extendedCurrentValues2RelayStatusMask, buffer.getUint8());
    var statusEvent1 = buffer.getUint8();
    var statusEvent2 = buffer.getUint8();
    var calibrationFlags = toObject(calibrationFlagsMask, buffer.getUint8());
    var currentTariffs = {
      'A+': buffer.getUint8(),
      'A-': buffer.getUint8()
    };
    var isSummerTime = !!(buffer.getUint8() & 1);
    var statusEventValue = statusEvent1 | statusEvent2 << 8;
    return {
      operatingSeconds: operatingSeconds,
      tbadVAVB: tbadVAVB,
      tbadImaxAll: tbadImaxAll,
      tbadPmaxAll: tbadPmaxAll,
      tbadFREQ: tbadFREQ,
      relayStatus: relayStatus,
      statusEvent: toObject(eventStatusMask, statusEventValue),
      calibrationFlags: calibrationFlags,
      currentTariffs: currentTariffs,
      isSummerTime: isSummerTime
    };
  };

  var id$Z = getCurrentValues;
  var fromBytes$ = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return {
      powerA: buffer.getInt32(),
      iaRms: buffer.getInt32(),
      vavbRms: buffer.getInt32(),
      varA: buffer.getInt32(),
      pfA: buffer.getInt16() / 1000,
      ibRms: buffer.getInt32(),
      powerB: buffer.getInt32(),
      varB: buffer.getInt32(),
      pfB: buffer.getInt16() / 1000
    };
  };

  var id$Y = getDateTime$1;
  var fromBytes$_ = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getDateTime(buffer);
  };

  var COMMAND_SIZE$5 = 19;
  var id$X = getDayDemand;
  var fromBytes$Z = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var parameters;
    if (bytes.length === COMMAND_SIZE$5) {
      parameters = {
        date: getDate$1(buffer),
        energies: getEnergies(buffer)
      };
    } else {
      parameters = {
        date: getDate$1(buffer),
        ...getPackedEnergyWithType(buffer)
      };
    }
    return parameters;
  };

  var COMMAND_SIZE$4 = 19;
  var id$W = getDayDemandExport;
  var fromBytes$Y = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var parameters;
    if (bytes.length === COMMAND_SIZE$4) {
      parameters = {
        date: getDate$1(buffer),
        energies: getEnergies(buffer)
      };
    } else {
      parameters = {
        date: getDate$1(buffer),
        ...getPackedEnergyWithType(buffer)
      };
    }
    return parameters;
  };

  var TARIFF_NUMBER = 4;
  var ENERGY_NAMES = ['A+', 'A+R+', 'A+R-', 'A-', 'A-R+', 'A-R-'];
  var UNDEFINED_ENERGY_VALUE = 0xffffffff;
  var energiesMask = {
    'A+': 0x01,
    'A+R+': 0x02,
    'A+R-': 0x04,
    'A-': 0x08,
    'A-R+': 0x10,
    'A-R-': 0x20
  };
  var getAPlusTariffBit = function (tariff) {
    return tariff < TARIFF_NUMBER ? 1 << tariff : 0;
  };
  var getAMinusTariffBit = function (tariff) {
    return tariff < TARIFF_NUMBER ? 1 << tariff << 4 : 0;
  };
  var getDate = function (buffer) {
    var date0 = buffer.getUint8();
    var date1 = buffer.getUint8();
    return {
      year: date0 >> 1,
      month: date0 << 3 & 0x0f | date1 >> 5,
      date: date1 & 0x1f
    };
  };
  var getEnergiesFlags = function (buffer) {
    var byte = buffer.getUint8();
    return toObject(energiesMask, byte);
  };
  var getHalfHourEnergy1 = function (buffer, halfhoursNumber) {
    var halfhours = [];
    for (var index = 0; index < halfhoursNumber; index++) {
      var value = buffer.getUint16();
      var tariff = value >> 14 & 0b11;
      var energy = value & 16383;
      halfhours.push(value === UNDEFINED_ENERGY_VALUE ? undefined : {
        tariff: tariff,
        energy: energy
      });
    }
    return halfhours;
  };
  var getHalfHourEnergies1 = function (buffer, energiesFlags, halfhoursNumber) {
    var energies = {};
    ENERGY_NAMES.forEach(function (energyName) {
      if (energiesFlags[energyName]) {
        energies[energyName] = getHalfHourEnergy1(buffer, halfhoursNumber);
      }
    });
    return energies;
  };
  var getAPlusTariffEnergies = function (buffer, energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A+']) {
      energies['A+'] = buffer.getUint32();
    }
    if (energyFlags & energiesMask['A+R+']) {
      energies['A+R+'] = buffer.getUint32();
    }
    if (energyFlags & energiesMask['A+R-']) {
      energies['A+R-'] = buffer.getUint32();
    }
    return energies;
  };
  var getAMinusTariffEnergies = function (buffer, energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A-']) {
      energies['A-'] = buffer.getUint32();
    }
    if (energyFlags & energiesMask['A-R+']) {
      energies['A-R+'] = buffer.getUint32();
    }
    if (energyFlags & energiesMask['A-R-']) {
      energies['A-R-'] = buffer.getUint32();
    }
    return energies;
  };
  var getTariffsEnergies = function (buffer) {
    var energyFlags = buffer.getUint8();
    var tariffFlags = buffer.getUint8();
    var tariffs = new Array(TARIFF_NUMBER).fill(null);
    for (var index = 0; index < TARIFF_NUMBER; index++) {
      if (tariffFlags & getAPlusTariffBit(index)) {
        tariffs[index] = getAPlusTariffEnergies(buffer, energyFlags);
      }
    }
    for (var _index = 0; _index < TARIFF_NUMBER; _index++) {
      if (tariffFlags & getAMinusTariffBit(_index)) {
        tariffs[_index] = {
          ...tariffs[_index],
          ...getAMinusTariffEnergies(buffer, energyFlags)
        };
      }
    }
    return tariffs;
  };
  var getPowerMax = function (buffer) {
    return {
      hours: buffer.getUint8(),
      minutes: buffer.getUint8(),
      power: buffer.getUint32()
    };
  };
  var getAPlusTariffPowerMax = function (buffer, energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A+']) {
      energies['A+'] = getPowerMax(buffer);
    }
    if (energyFlags & energiesMask['A+R+']) {
      energies['A+R+'] = getPowerMax(buffer);
    }
    if (energyFlags & energiesMask['A+R-']) {
      energies['A+R-'] = getPowerMax(buffer);
    }
    return energies;
  };
  var getAMinusTariffPowerMax = function (buffer, energyFlags) {
    var energies = {};
    if (energyFlags & energiesMask['A-']) {
      energies['A-'] = getPowerMax(buffer);
    }
    if (energyFlags & energiesMask['A-R+']) {
      energies['A-R+'] = getPowerMax(buffer);
    }
    if (energyFlags & energiesMask['A-R-']) {
      energies['A-R-'] = getPowerMax(buffer);
    }
    return energies;
  };
  var getTariffsPowerMax = function (buffer) {
    var energyFlags = buffer.getUint8();
    var tariffFlags = buffer.getUint8();
    var tariffs = new Array(TARIFF_NUMBER).fill(null);
    for (var index = 0; index < TARIFF_NUMBER; index++) {
      if (tariffFlags & getAPlusTariffBit(index)) {
        tariffs[index] = getAPlusTariffPowerMax(buffer, energyFlags);
      }
    }
    for (var _index2 = 0; _index2 < TARIFF_NUMBER; _index2++) {
      if (tariffFlags & getAMinusTariffBit(_index2)) {
        tariffs[_index2] = {
          ...tariffs[_index2],
          ...getAMinusTariffPowerMax(buffer, energyFlags)
        };
      }
    }
    return tariffs;
  };

  var id$V = getDayEnergies;
  var fromBytes$X = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return {
      date: getDate(buffer),
      energies: getTariffsEnergies(buffer)
    };
  };

  var id$U = getDayMaxDemand;
  var fromBytes$W = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getDayMaxDemandResponse(buffer);
  };

  var id$T = getDayMaxDemandExport;
  var fromBytes$V = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getDayMaxDemandResponse(buffer);
  };

  var id$S = getDayMaxDemandPrevious;
  var fromBytes$U = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getDayMaxDemandResponse(buffer);
  };

  var id$R = getDayMaxPower;
  var fromBytes$T = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return {
      date: getDate(buffer),
      tariffs: getTariffsPowerMax(buffer)
    };
  };

  var PERIODS_FINAL_BYTE = 0xff;
  var id$Q = getDayProfile;
  var fromBytes$S = function (bytes) {
    var finalByteIndex = bytes.indexOf(PERIODS_FINAL_BYTE);
    var cleanData = finalByteIndex === -1 ? bytes : bytes.slice(0, finalByteIndex);
    return {
      periods: _toConsumableArray(cleanData).map(getDayProfileFromByte)
    };
  };

  var A_PLUS = 0x01;
  var A_MINUS = 0x02;

  invertObject(downlinkIds);

  var maxSize$o = 7;

  var ADDITIONAL_HOUR = 25;
  var getRecordIndex = function (hours, minutes, periodMin) {
    return Math.trunc((hours * 60 + minutes) / periodMin);
  };
  var getLastSummerHourIndex = function (periodMin) {
    return getRecordIndex(ADDITIONAL_HOUR, 0, periodMin);
  };
  var energyFromWord = function (word, index, periodMin) {
    if (word === 0xffff) {
      return null;
    }
    var indexLastSummerRecord = getLastSummerHourIndex(periodMin);
    if (index === indexLastSummerRecord) {
      return {
        lastSummerHour: word >> 8 & 0xff
      };
    }
    return periodMin === 60 ? {
      energy: word
    } : {
      tariff: word >> 14 & 0x03,
      energy: word & 0x3fff
    };
  };
  var energyFromBinary = function (bytes, offset) {
    var periodMin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
    return bytes.reduce(function (collector, value, index) {
      collector.push(energyFromWord(value, (offset ?? 0) + index, periodMin));
      return collector;
    }, []);
  };
  var voltageFromWord = function (word, index, periodMin) {
    if (word === 0xffff) {
      return 0xffff;
    }
    var indexLastSummerRecord = getLastSummerHourIndex(periodMin);
    return index === indexLastSummerRecord ? {
      lastSummerHour: word >> 8 & 0xff
    } : {
      voltage: word
    };
  };
  var voltageFromBinary = function (bytes, offset) {
    var periodMin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
    return bytes.reduce(function (collector, value, index) {
      collector.push(voltageFromWord(value, (offset ?? 0) + index, periodMin));
      return collector;
    }, []);
  };

  var id$P = getDemand$1;
  var fromBytes$R = function (bytes) {
    if (!bytes || bytes.length < maxSize$o) {
      throw new Error('Invalid uplink GetDemand byte length.');
    }
    var buffer = new BinaryBuffer(bytes, false);
    var parameters = getDemand(buffer);
    if (bytes.length !== maxSize$o + 2 * parameters.count) {
      throw new Error('Invalid uplink GetDemand demands byte length.');
    }
    var demandsBytes = new Array(parameters.count).fill(0).map(function () {
      return buffer.getUint16();
    });
    var isEnergiesDemand = parameters.energyType === A_PLUS || parameters.energyType === A_MINUS;
    parameters.demands = isEnergiesDemand ? energyFromBinary(demandsBytes, parameters.firstIndex, parameters.period) : voltageFromBinary(demandsBytes, parameters.firstIndex, parameters.period);
    return parameters;
  };

  var validateCommandPayload = (function (commandName, bytes, expectedLength) {
    if (!commandName) {
      throw new Error('Command name is required.');
    }
    if (bytes && !Array.isArray(bytes)) {
      throw new Error("Invalid payload for ".concat(commandName, ". Expected array, got: ").concat(typeof bytes, "."));
    }
    if (bytes.length !== expectedLength) {
      var hex = getHexFromBytes(bytes, {
        separator: ''
      });
      throw new Error("Wrong buffer size for ".concat(commandName, ": ").concat(bytes.length, ". Expected: ").concat(expectedLength, ". Payload: 0x").concat(hex, "."));
    }
  });

  var id$O = getDemandParameters$1;
  var name$1 = uplinkNames[getDemandParameters$1];
  var maxSize$n = 4;
  var fromBytes$Q = function (bytes) {
    validateCommandPayload(name$1, bytes, maxSize$n);
    var buffer = new BinaryBuffer(bytes, false);
    return getDemandParameters(buffer);
  };

  var id$N = getDeviceId$1;
  var fromBytes$P = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getDeviceId(buffer);
  };

  var id$M = getDeviceType$1;
  var fromBytes$O = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getDeviceType(buffer);
  };

  var SET_ALL_SEGMENT_DISPLAY = 1;
  var SOFTWARE_VERSION = 2;
  var TOTAL_ACTIVE_ENERGY = 3;
  var ACTIVE_ENERGY_T1 = 4;
  var ACTIVE_ENERGY_T2 = 5;
  var ACTIVE_ENERGY_T3 = 6;
  var ACTIVE_ENERGY_T4 = 7;
  var ACTIVE_POWER_PER_PHASE = 8;
  var ACTIVE_POWER_IN_NEUTRAL = 9;
  var CURRENT_IN_PHASE = 10;
  var CURRENT_IN_NEUTRAL = 11;
  var VOLTAGE = 12;
  var HOUR_MINUTE_SECOND = 13;
  var DATE_MONTH_YEAR = 14;
  var TOTAL_EXPORTED_ACTIVE_ENERGY = 15;
  var EXPORTED_ACTIVE_ENERGY_T1 = 16;
  var EXPORTED_ACTIVE_ENERGY_T2 = 17;
  var EXPORTED_ACTIVE_ENERGY_T3 = 18;
  var EXPORTED_ACTIVE_ENERGY_T4 = 19;
  var POWER_FACTOR_PHASE_A = 20;
  var POWER_FACTOR_PHASE_B = 21;
  var BATTERY_VOLTAGE = 22;
  var POWER_THRESHOLD_T1 = 23;
  var POWER_THRESHOLD_T2 = 24;
  var POWER_THRESHOLD_T3 = 25;
  var POWER_THRESHOLD_T4 = 26;
  var MAGNET_INDUCTION = 28;
  var CURRENT_BALANCE = 30;
  var OPTOPORT_SPEED = 31;

  var screenIds = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ACTIVE_ENERGY_T1: ACTIVE_ENERGY_T1,
    ACTIVE_ENERGY_T2: ACTIVE_ENERGY_T2,
    ACTIVE_ENERGY_T3: ACTIVE_ENERGY_T3,
    ACTIVE_ENERGY_T4: ACTIVE_ENERGY_T4,
    ACTIVE_POWER_IN_NEUTRAL: ACTIVE_POWER_IN_NEUTRAL,
    ACTIVE_POWER_PER_PHASE: ACTIVE_POWER_PER_PHASE,
    BATTERY_VOLTAGE: BATTERY_VOLTAGE,
    CURRENT_BALANCE: CURRENT_BALANCE,
    CURRENT_IN_NEUTRAL: CURRENT_IN_NEUTRAL,
    CURRENT_IN_PHASE: CURRENT_IN_PHASE,
    DATE_MONTH_YEAR: DATE_MONTH_YEAR,
    EXPORTED_ACTIVE_ENERGY_T1: EXPORTED_ACTIVE_ENERGY_T1,
    EXPORTED_ACTIVE_ENERGY_T2: EXPORTED_ACTIVE_ENERGY_T2,
    EXPORTED_ACTIVE_ENERGY_T3: EXPORTED_ACTIVE_ENERGY_T3,
    EXPORTED_ACTIVE_ENERGY_T4: EXPORTED_ACTIVE_ENERGY_T4,
    HOUR_MINUTE_SECOND: HOUR_MINUTE_SECOND,
    MAGNET_INDUCTION: MAGNET_INDUCTION,
    OPTOPORT_SPEED: OPTOPORT_SPEED,
    POWER_FACTOR_PHASE_A: POWER_FACTOR_PHASE_A,
    POWER_FACTOR_PHASE_B: POWER_FACTOR_PHASE_B,
    POWER_THRESHOLD_T1: POWER_THRESHOLD_T1,
    POWER_THRESHOLD_T2: POWER_THRESHOLD_T2,
    POWER_THRESHOLD_T3: POWER_THRESHOLD_T3,
    POWER_THRESHOLD_T4: POWER_THRESHOLD_T4,
    SET_ALL_SEGMENT_DISPLAY: SET_ALL_SEGMENT_DISPLAY,
    SOFTWARE_VERSION: SOFTWARE_VERSION,
    TOTAL_ACTIVE_ENERGY: TOTAL_ACTIVE_ENERGY,
    TOTAL_EXPORTED_ACTIVE_ENERGY: TOTAL_EXPORTED_ACTIVE_ENERGY,
    VOLTAGE: VOLTAGE
  });

  invertObject(screenIds);

  var id$L = getDisplayParam;
  var fromBytes$N = function (bytes) {
    var _bytes = _toArray(bytes),
      displayMode = _bytes[0],
      order = _bytes.slice(1);
    return {
      displayMode: displayMode,
      order: order
    };
  };

  var COMMAND_SIZE$3 = 16;
  var id$K = getEnergy;
  var fromBytes$M = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var parameters;
    if (bytes.length === COMMAND_SIZE$3) {
      parameters = {
        energies: getEnergies(buffer)
      };
    } else {
      parameters = getPackedEnergyWithType(buffer);
    }
    return parameters;
  };

  var COMMAND_SIZE$2 = 19;
  var id$J = getEnergyDayPrevious;
  var fromBytes$L = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var parameters;
    if (bytes.length === COMMAND_SIZE$2) {
      parameters = {
        date: getDate$1(buffer),
        energies: getEnergies(buffer)
      };
    } else {
      parameters = {
        date: getDate$1(buffer),
        ...getPackedEnergyWithType(buffer)
      };
    }
    return parameters;
  };

  var COMMAND_SIZE$1 = 16;
  var id$I = getEnergyExport;
  var fromBytes$K = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var parameters;
    if (bytes.length === COMMAND_SIZE$1) {
      parameters = {
        energies: getEnergies(buffer)
      };
    } else {
      parameters = getPackedEnergyWithType(buffer);
    }
    return parameters;
  };

  var COMMAND_SIZE = 19;
  var id$H = getEnergyExportDayPrevious;
  var fromBytes$J = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var parameters;
    if (bytes.length === COMMAND_SIZE) {
      parameters = {
        date: getDate$1(buffer),
        energies: getEnergies(buffer)
      };
    } else {
      parameters = {
        date: getDate$1(buffer),
        ...getPackedEnergyWithType(buffer)
      };
    }
    return parameters;
  };

  var BODY_WITHOUT_EVENTS_SIZE = 3 + 1;
  var EVENT_SIZE = 4;
  var id$G = getEvents;
  var maxSize$m = BODY_WITHOUT_EVENTS_SIZE + 255 * EVENT_SIZE;
  var getFromBytes$1 = function (BinaryBufferConstructor) {
    return function (bytes) {
      if (bytes.length > maxSize$m) {
        throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
      }
      var buffer = new BinaryBufferConstructor(bytes, false);
      var date = getDate$1(buffer);
      var eventsNumber = buffer.getUint8();
      var events = [];
      while (!buffer.isEmpty) {
        events.push(getEvent(buffer));
      }
      return {
        date: date,
        eventsNumber: eventsNumber,
        events: events
      };
    };
  };
  var fromBytes$I = getFromBytes$1(BinaryBuffer);

  var COMMAND_BODY_SIZE = 14;
  var OLD_COMMAND_BODY_SIZE = 20;
  var id$F = getEventsCounters;
  var fromBytes$H = function (bytes) {
    if (bytes.length !== COMMAND_BODY_SIZE && bytes.length !== OLD_COMMAND_BODY_SIZE) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    var buffer = new BinaryBuffer(bytes, false);
    var restart = buffer.getUint16();
    var powerOff = buffer.getUint16();
    var localParametersChange = buffer.getUint16();
    var remoteParametersChange = buffer.getUint16();
    var accessError = buffer.getUint16();
    var accessClosed = buffer.getUint16();
    var setClock = buffer.getUint16();
    return {
      accessClosed: accessClosed,
      accessError: accessError,
      localParametersChange: localParametersChange,
      remoteParametersChange: remoteParametersChange,
      powerOff: powerOff,
      restart: restart,
      setClock: setClock
    };
  };

  var id$E = getEventStatus$1;
  var fromBytes$G = function (bytes) {
    var buffer = new BinaryBuffer(bytes, true);
    return getEventStatus(buffer);
  };

  var id$D = getExtendedCurrentValues;
  var fromBytes$F = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return {
      temperature: buffer.getInt16(),
      frequency: buffer.getInt16()
    };
  };

  var id$C = getExtendedCurrentValues2$1;
  var fromBytes$E = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getExtendedCurrentValues2(buffer);
  };

  var id$B = getHalfHourDemand;
  var fromBytes$D = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var hasDst = bytes.length > MIN_HALF_HOUR_COMMAND_SIZE;
    var date = getDate$1(buffer);
    var periods = getEnergyPeriods(buffer, hasDst ? MAX_HALF_HOUR_PERIODS : MIN_HALF_HOUR_PERIODS);
    if (hasDst) {
      return {
        date: date,
        periods: periods,
        dstHour: buffer.getUint8()
      };
    }
    return {
      date: date,
      periods: periods
    };
  };

  var id$A = getHalfHourDemandExport;
  var fromBytes$C = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var hasDst = bytes.length > MIN_HALF_HOUR_COMMAND_SIZE;
    var date = getDate$1(buffer);
    var periods = getEnergyPeriods(buffer, hasDst ? MAX_HALF_HOUR_PERIODS : MIN_HALF_HOUR_PERIODS);
    if (hasDst) {
      return {
        date: date,
        periods: periods,
        dstHour: buffer.getUint8()
      };
    }
    return {
      date: date,
      periods: periods
    };
  };

  var id$z = getHalfHourDemandPrevious;
  var fromBytes$B = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var hasDst = bytes.length > MIN_HALF_HOUR_COMMAND_SIZE;
    var date = getDate$1(buffer);
    var periods = getEnergyPeriods(buffer, hasDst ? MAX_HALF_HOUR_PERIODS : MIN_HALF_HOUR_PERIODS);
    if (hasDst) {
      return {
        date: date,
        periods: periods,
        dstHour: buffer.getUint8()
      };
    }
    return {
      date: date,
      periods: periods
    };
  };

  var id$y = getHalfHourEnergies;
  var fromBytes$A = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var date = getDate(buffer);
    var energiesFlags = getEnergiesFlags(buffer);
    var firstHalfhour = buffer.getUint8();
    var halfhoursNumber = buffer.getUint8();
    return {
      date: date,
      firstHalfhour: firstHalfhour,
      halfhoursNumber: halfhoursNumber,
      energies: getHalfHourEnergies1(buffer, energiesFlags, halfhoursNumber)
    };
  };

  var id$x = getMagneticFieldThreshold;
  var fromBytes$z = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return {
      induction: buffer.getUint16(),
      threshold: buffer.getUint16(),
      inductionCoefficient: buffer.getUint16() / 100,
      reserved: buffer.getUint32()
    };
  };

  var id$w = getMeterInfo;
  var fromBytes$y = function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
      ten = _ref2[0];
    return {
      ten: ten
    };
  };

  var id$v = getMonthDemand;
  var fromBytes$x = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return {
      year: buffer.getUint8(),
      month: buffer.getUint8(),
      energies: getEnergies(buffer)
    };
  };

  var id$u = getMonthDemandExport;
  var fromBytes$w = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return {
      year: buffer.getUint8(),
      month: buffer.getUint8(),
      energies: getEnergies(buffer)
    };
  };

  var id$t = getMonthMaxDemand;
  var fromBytes$v = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return {
      year: buffer.getUint8(),
      month: buffer.getUint8(),
      tariffs: getMonthMaxPowerByTariffs(buffer)
    };
  };

  var id$s = getMonthMaxDemandExport;
  var fromBytes$u = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return {
      year: buffer.getUint8(),
      month: buffer.getUint8(),
      tariffs: getMonthMaxPowerByTariffs(buffer)
    };
  };

  var id$r = getOperatorParameters$1;
  var fromBytes$t = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getOperatorParameters(buffer);
  };

  var id$q = getOperatorParametersExtended3$1;
  var fromBytes$s = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getOperatorParametersExtended3(buffer);
  };

  var id$p = getRatePlanInfo;
  var maxSize$l = 1 + TARIFF_PLAN_SIZE * 2;
  var fromBytes$r = function (bytes) {
    if (bytes.length !== maxSize$l) {
      throw new Error('Invalid getRatePlanInfo data size.');
    }
    var buffer = new BinaryBuffer(bytes, false);
    return {
      tariffTable: buffer.getUint8(),
      activePlan: getTariffPlan(buffer),
      passivePlan: getTariffPlan(buffer)
    };
  };

  var id$o = getSaldo;
  var maxSize$k = 29;
  var fromBytes$q = function (bytes) {
    if (bytes.length !== maxSize$k) {
      throw new Error('Invalid getSaldo data size.');
    }
    var buffer = new BinaryBuffer(bytes, false);
    return {
      currentSaldo: buffer.getInt32(),
      count: buffer.getUint8(),
      energy: new Array(4).fill(0).map(function () {
        return buffer.getInt32();
      }),
      beginSaldoOfPeriod: buffer.getInt32(),
      date: {
        month: buffer.getUint8(),
        date: buffer.getUint8(),
        hours: buffer.getUint8(),
        minutes: buffer.getUint8()
      }
    };
  };

  var id$n = getSaldoParameters$1;
  var maxSize$j = 37;
  var fromBytes$p = function (bytes) {
    if (bytes.length !== maxSize$j) {
      throw new Error('Invalid getSaldoParameters data size.');
    }
    var buffer = new BinaryBuffer(bytes, false);
    return getSaldoParameters(buffer);
  };

  var id$m = getSeasonProfile$1;
  var fromBytes$o = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getSeasonProfile(buffer);
  };

  var id$l = getSpecialDay$1;
  var fromBytes$n = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    return getSpecialDay(buffer);
  };

  var id$k = getVersion;
  var fromBytes$m = function (bytes) {
    return {
      version: String.fromCharCode.apply(null, _toConsumableArray(bytes))
    };
  };

  var id$j = prepareRatePlan;
  var maxSize$i = 0;
  var fromBytes$l = function (bytes) {
    if (bytes.length !== maxSize$i) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$i = resetPowerMaxDay;
  var maxSize$h = 0;
  var fromBytes$k = function (bytes) {
    if (bytes.length !== maxSize$h) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$h = resetPowerMaxMonth;
  var maxSize$g = 0;
  var fromBytes$j = function (bytes) {
    if (bytes.length !== maxSize$g) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$g = runTariffPlan;
  var maxSize$f = 0;
  var fromBytes$i = function (bytes) {
    if (bytes.length !== maxSize$f) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$f = setAccessKey;
  var maxSize$e = 0;
  var fromBytes$h = function (bytes) {
    if (bytes.length !== maxSize$e) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$e = setCorrectDateTime;
  var maxSize$d = 0;
  var fromBytes$g = function (bytes) {
    if (bytes.length !== maxSize$d) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$d = setCorrectTime;
  var maxSize$c = 0;
  var fromBytes$f = function (bytes) {
    if (bytes.length !== maxSize$c) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$c = setDateTime;
  var maxSize$b = 0;
  var fromBytes$e = function (bytes) {
    if (bytes.length !== maxSize$b) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$b = setDayProfile;
  var maxSize$a = 0;
  var fromBytes$d = function (bytes) {
    if (bytes.length !== maxSize$a) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$a = setDemandParameters;
  var name = uplinkNames[setDemandParameters];
  var maxSize$9 = 0;
  var fromBytes$c = function (bytes) {
    validateCommandPayload(name, bytes, maxSize$9);
    return {};
  };

  var id$9 = setDisplayParam;
  var maxSize$8 = 0;
  var fromBytes$b = function (bytes) {
    if (bytes.length !== maxSize$8) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$8 = setOperatorParameters;
  var maxSize$7 = 0;
  var fromBytes$a = function (bytes) {
    if (bytes.length !== maxSize$7) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$7 = setOperatorParametersExtended3;
  var maxSize$6 = 0;
  var fromBytes$9 = function (bytes) {
    if (bytes.length !== maxSize$6) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$6 = setSaldo;
  var maxSize$5 = 0;
  var fromBytes$8 = function (bytes) {
    if (bytes.length !== maxSize$5) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$5 = setSaldoParameters;
  var maxSize$4 = 0;
  var fromBytes$7 = function (bytes) {
    if (bytes.length !== maxSize$4) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$4 = setSeasonProfile;
  var maxSize$3 = 0;
  var fromBytes$6 = function (bytes) {
    if (bytes.length !== maxSize$3) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$3 = setSpecialDay;
  var maxSize$2 = 0;
  var fromBytes$5 = function (bytes) {
    if (bytes.length !== maxSize$2) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id$2 = setSpecialOperation;
  var fromBytes$4 = function (bytes) {
    var buffer = new BinaryBuffer(bytes, false);
    var flags = buffer.getUint8();
    var electroMagneticIndication = !!(flags & 1);
    var magneticIndication = !!(flags & 2);
    return {
      electroMagneticIndication: electroMagneticIndication,
      magneticIndication: magneticIndication
    };
  };

  var id$1 = turnRelayOff;
  var maxSize$1 = 0;
  var fromBytes$3 = function (bytes) {
    if (bytes.length !== maxSize$1) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  var id = turnRelayOn;
  var maxSize = 0;
  var fromBytes$2 = function (bytes) {
    if (bytes.length !== maxSize) {
      throw new Error("Wrong buffer size: ".concat(bytes.length, "."));
    }
    return {};
  };

  // this is required to shadow crypto-js implementation
  var aes = {
    encrypt: function () {},
    decrypt: function () {}
  };

  var calculateLrc = (function (data) {
    var initialLrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0x55;
    var lrc = initialLrc;
    data.forEach(function (item) {
      lrc ^= item;
    });
    return lrc;
  });

  var ACCESS_LEVEL_MASK = 0x03;
  var MESSAGE_HEADER_SIZE = 2;
  var COMMAND_HEADER_SIZE = 2;
  var getFromBytes = function (fromBytesMap, nameMap) {
    return function () {
      var bytes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var aesKey = config?.aesKey;
      var commands = [];
      var _bytes = _slicedToArray(bytes, 2),
        messageId = _bytes[0],
        maskedAccessLevel = _bytes[1];
      var accessLevel = maskedAccessLevel & ACCESS_LEVEL_MASK;
      var message = {
        messageId: messageId,
        accessLevel: accessLevel,
        commands: commands,
        bytes: bytes,
        lrc: {
          received: undefined,
          calculated: 0
        }
      };
      var messageBody = bytes.slice(MESSAGE_HEADER_SIZE);
      var error;
      if (aesKey && accessLevel !== UNENCRYPTED) {
        messageBody = _toConsumableArray(aes.decrypt(aesKey, messageBody));
      }
      var receivedLrc = messageBody[messageBody.length - 1];
      messageBody = messageBody.slice(0, -1);
      var calculatedLrc = calculateLrc(messageBody);
      if (accessLevel !== UNENCRYPTED || receivedLrc !== 0) {
        if (receivedLrc !== calculatedLrc) {
          error = 'Mismatch LRC.';
        }
      }
      var accessLevel2 = messageBody[0] & ACCESS_LEVEL_MASK;
      var commandsData = messageBody.slice(1);
      if (accessLevel !== accessLevel2) {
        error = 'Mismatch access levels.';
      }
      var position = 0;
      do {
        var commandId = commandsData[position];
        var commandBodySize = commandsData[position + 1];
        var commandSize = COMMAND_HEADER_SIZE + commandBodySize;
        var commandBody = commandsData.slice(position + COMMAND_HEADER_SIZE, position + commandSize);
        var command = {
          id: commandId,
          name: nameMap[commandId],
          headerSize: COMMAND_HEADER_SIZE,
          bytes: commandsData.slice(position, position + commandSize)
        };
        if (!commandId) {
          break;
        }
        try {
          if (!fromBytesMap[commandId]) {
            throw new Error("Unsupported command id: ".concat(commandId, "!"));
          }
          command.parameters = fromBytesMap[commandId](commandBody, config);
          commands.push(command);
        } catch (exception) {
          commands.push({
            command: command,
            error: exception.message
          });
        }
        position += commandSize;
      } while (position <= commandsData.length);
      message.lrc.calculated = calculatedLrc;
      message.lrc.received = receivedLrc;
      if (error) {
        return {
          message: message,
          error: error
        };
      }
      return message;
    };
  };

  var fromBytesMap = {};
  var nameMap = uplinkNames;
  var fromBytes$1 = getFromBytes(fromBytesMap, nameMap);
  fromBytesMap[id$13] = fromBytes$16;
  fromBytesMap[id$12] = fromBytes$15;
  fromBytesMap[id$11] = fromBytes$14;
  fromBytesMap[id$10] = fromBytes$12;
  fromBytesMap[id$] = fromBytes$11;
  fromBytesMap[id$_] = fromBytes$10;
  fromBytesMap[id$Z] = fromBytes$;
  fromBytesMap[id$Y] = fromBytes$_;
  fromBytesMap[id$X] = fromBytes$Z;
  fromBytesMap[id$W] = fromBytes$Y;
  fromBytesMap[id$V] = fromBytes$X;
  fromBytesMap[id$U] = fromBytes$W;
  fromBytesMap[id$T] = fromBytes$V;
  fromBytesMap[id$S] = fromBytes$U;
  fromBytesMap[id$R] = fromBytes$T;
  fromBytesMap[id$Q] = fromBytes$S;
  fromBytesMap[id$P] = fromBytes$R;
  fromBytesMap[id$O] = fromBytes$Q;
  fromBytesMap[id$N] = fromBytes$P;
  fromBytesMap[id$M] = fromBytes$O;
  fromBytesMap[id$L] = fromBytes$N;
  fromBytesMap[id$K] = fromBytes$M;
  fromBytesMap[id$J] = fromBytes$L;
  fromBytesMap[id$I] = fromBytes$K;
  fromBytesMap[id$H] = fromBytes$J;
  fromBytesMap[id$G] = fromBytes$I;
  fromBytesMap[id$F] = fromBytes$H;
  fromBytesMap[id$E] = fromBytes$G;
  fromBytesMap[id$D] = fromBytes$F;
  fromBytesMap[id$C] = fromBytes$E;
  fromBytesMap[id$B] = fromBytes$D;
  fromBytesMap[id$A] = fromBytes$C;
  fromBytesMap[id$z] = fromBytes$B;
  fromBytesMap[id$y] = fromBytes$A;
  fromBytesMap[id$x] = fromBytes$z;
  fromBytesMap[id$w] = fromBytes$y;
  fromBytesMap[id$v] = fromBytes$x;
  fromBytesMap[id$u] = fromBytes$w;
  fromBytesMap[id$t] = fromBytes$v;
  fromBytesMap[id$s] = fromBytes$u;
  fromBytesMap[id$r] = fromBytes$t;
  fromBytesMap[id$q] = fromBytes$s;
  fromBytesMap[id$p] = fromBytes$r;
  fromBytesMap[id$o] = fromBytes$q;
  fromBytesMap[id$n] = fromBytes$p;
  fromBytesMap[id$m] = fromBytes$o;
  fromBytesMap[id$l] = fromBytes$n;
  fromBytesMap[id$k] = fromBytes$m;
  fromBytesMap[id$j] = fromBytes$l;
  fromBytesMap[id$i] = fromBytes$k;
  fromBytesMap[id$h] = fromBytes$j;
  fromBytesMap[id$g] = fromBytes$i;
  fromBytesMap[id$f] = fromBytes$h;
  fromBytesMap[id$e] = fromBytes$g;
  fromBytesMap[id$d] = fromBytes$f;
  fromBytesMap[id$c] = fromBytes$e;
  fromBytesMap[id$b] = fromBytes$d;
  fromBytesMap[id$a] = fromBytes$c;
  fromBytesMap[id$9] = fromBytes$b;
  fromBytesMap[id$8] = fromBytes$a;
  fromBytesMap[id$7] = fromBytes$9;
  fromBytesMap[id$6] = fromBytes$8;
  fromBytesMap[id$5] = fromBytes$7;
  fromBytesMap[id$4] = fromBytes$6;
  fromBytesMap[id$3] = fromBytes$5;
  fromBytesMap[id$2] = fromBytes$4;
  fromBytesMap[id$1] = fromBytes$3;
  fromBytesMap[id] = fromBytes$2;

  // 0b10010001 (segmentIndex: 1, segmentsNumber: 1, isLast: true)
  var SINGLE_SEGMENT_FLAG = 0x91;
  var DATA_SEGMENT_COMMAND_ID = 0x1e;
  var get = function (bytes) {
    // check if it is a DataSegment command
    if (bytes[0] !== DATA_SEGMENT_COMMAND_ID) {
      return {};
    }

    // DataSegment command size
    var size = bytes[1];

    // segment metadata
    var flag = bytes[3];

    // payload
    var data = bytes.slice(4, size + 2);

    // lrc is not needed for MTX
    // const expectedLrc = calculateLrc(bytes.slice(0, size + 2));
    // const actualLrc = bytes[size + 2];

    // just a single data segment with correct lrc
    if (flag === SINGLE_SEGMENT_FLAG /* && expectedLrc === actualLrc */) {
      return data;
    }
    return null;
  };

  // full command set
  fromBytes = fromBytes$1;
  getDataSegment = get;

})();
//#endregion


/*
  Incoming arguments:
    * payload - array of bytes
    * metadata - key/value object
*/

var segment = getDataSegment(payload);
var message = null;

// just a single data segment
if ( segment ) {
    message = fromBytes(segment);

    // there may be a message.error (e.g. mismatched LRC)
    // in that case message.message will contain everything parsed successfully
    // it should be used with caution
}

var result = {
    // required property, set to real device name from payload/metadata depending on integration
    // empty value throw an error in converter
    deviceName: '',

    deviceType: 'Water Meter',
    attributes: {
        model: 'Device Model',
        serialNumber: 'SN111',
        manufacturer: 'Device Manufacturer'
    },
    telemetry: {
        // telemetry display only primitive, i.e. string and numbers
        // for example only!
        message: JSON.stringify(message.message || message)
    },
    metadata: metadata
};

return result;
